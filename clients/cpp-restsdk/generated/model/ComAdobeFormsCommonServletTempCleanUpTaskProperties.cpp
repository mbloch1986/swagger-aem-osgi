/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeFormsCommonServletTempCleanUpTaskProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeFormsCommonServletTempCleanUpTaskProperties::ComAdobeFormsCommonServletTempCleanUpTaskProperties()
{
    m_Scheduler_expressionIsSet = false;
    m_Duration_for_Temporary_StorageIsSet = false;
    m_Duration_for_Anonymous_StorageIsSet = false;
}

ComAdobeFormsCommonServletTempCleanUpTaskProperties::~ComAdobeFormsCommonServletTempCleanUpTaskProperties()
{
}

void ComAdobeFormsCommonServletTempCleanUpTaskProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeFormsCommonServletTempCleanUpTaskProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Scheduler_expressionIsSet)
    {
        val[utility::conversions::to_string_t("scheduler.expression")] = ModelBase::toJson(m_Scheduler_expression);
    }
    if(m_Duration_for_Temporary_StorageIsSet)
    {
        val[utility::conversions::to_string_t("Duration for Temporary Storage")] = ModelBase::toJson(m_Duration_for_Temporary_Storage);
    }
    if(m_Duration_for_Anonymous_StorageIsSet)
    {
        val[utility::conversions::to_string_t("Duration for Anonymous Storage")] = ModelBase::toJson(m_Duration_for_Anonymous_Storage);
    }

    return val;
}

void ComAdobeFormsCommonServletTempCleanUpTaskProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("scheduler.expression")))
    {
        if(!val[utility::conversions::to_string_t("scheduler.expression")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduler.expression")]);
            setSchedulerExpression( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Duration for Temporary Storage")))
    {
        if(!val[utility::conversions::to_string_t("Duration for Temporary Storage")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("Duration for Temporary Storage")]);
            setDurationForTemporaryStorage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Duration for Anonymous Storage")))
    {
        if(!val[utility::conversions::to_string_t("Duration for Anonymous Storage")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("Duration for Anonymous Storage")]);
            setDurationForAnonymousStorage( newItem );
        }
    }
}

void ComAdobeFormsCommonServletTempCleanUpTaskProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Scheduler_expressionIsSet)
    {
        if (m_Scheduler_expression.get())
        {
            m_Scheduler_expression->toMultipart(multipart, utility::conversions::to_string_t("scheduler.expression."));
        }
    }
    if(m_Duration_for_Temporary_StorageIsSet)
    {
        if (m_Duration_for_Temporary_Storage.get())
        {
            m_Duration_for_Temporary_Storage->toMultipart(multipart, utility::conversions::to_string_t("Duration for Temporary Storage."));
        }
    }
    if(m_Duration_for_Anonymous_StorageIsSet)
    {
        if (m_Duration_for_Anonymous_Storage.get())
        {
            m_Duration_for_Anonymous_Storage->toMultipart(multipart, utility::conversions::to_string_t("Duration for Anonymous Storage."));
        }
    }
}

void ComAdobeFormsCommonServletTempCleanUpTaskProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("scheduler.expression")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduler.expression")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduler.expression."));
            setSchedulerExpression( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Duration for Temporary Storage")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("Duration for Temporary Storage")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("Duration for Temporary Storage."));
            setDurationForTemporaryStorage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Duration for Anonymous Storage")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("Duration for Anonymous Storage")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("Duration for Anonymous Storage."));
            setDurationForAnonymousStorage( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeFormsCommonServletTempCleanUpTaskProperties::getSchedulerExpression() const
{
    return m_Scheduler_expression;
}


void ComAdobeFormsCommonServletTempCleanUpTaskProperties::setSchedulerExpression(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Scheduler_expression = value;
    m_Scheduler_expressionIsSet = true;
}
bool ComAdobeFormsCommonServletTempCleanUpTaskProperties::schedulerExpressionIsSet() const
{
    return m_Scheduler_expressionIsSet;
}

void ComAdobeFormsCommonServletTempCleanUpTaskProperties::unsetScheduler_expression()
{
    m_Scheduler_expressionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeFormsCommonServletTempCleanUpTaskProperties::getDurationForTemporaryStorage() const
{
    return m_Duration_for_Temporary_Storage;
}


void ComAdobeFormsCommonServletTempCleanUpTaskProperties::setDurationForTemporaryStorage(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Duration_for_Temporary_Storage = value;
    m_Duration_for_Temporary_StorageIsSet = true;
}
bool ComAdobeFormsCommonServletTempCleanUpTaskProperties::durationForTemporaryStorageIsSet() const
{
    return m_Duration_for_Temporary_StorageIsSet;
}

void ComAdobeFormsCommonServletTempCleanUpTaskProperties::unsetDuration_for_Temporary_Storage()
{
    m_Duration_for_Temporary_StorageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeFormsCommonServletTempCleanUpTaskProperties::getDurationForAnonymousStorage() const
{
    return m_Duration_for_Anonymous_Storage;
}


void ComAdobeFormsCommonServletTempCleanUpTaskProperties::setDurationForAnonymousStorage(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Duration_for_Anonymous_Storage = value;
    m_Duration_for_Anonymous_StorageIsSet = true;
}
bool ComAdobeFormsCommonServletTempCleanUpTaskProperties::durationForAnonymousStorageIsSet() const
{
    return m_Duration_for_Anonymous_StorageIsSet;
}

void ComAdobeFormsCommonServletTempCleanUpTaskProperties::unsetDuration_for_Anonymous_Storage()
{
    m_Duration_for_Anonymous_StorageIsSet = false;
}

}
}
}
}

