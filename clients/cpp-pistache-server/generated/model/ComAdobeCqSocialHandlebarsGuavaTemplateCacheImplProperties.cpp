/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties()
{
    m_Parameter_guava_cache_enabledIsSet = false;
    m_Parameter_guava_cache_paramsIsSet = false;
    m_Parameter_guava_cache_reloadIsSet = false;
    m_Service_rankingIsSet = false;
    
}

ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::~ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties()
{
}

void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Parameter_guava_cache_enabledIsSet)
    {
        val["parameter.guava.cache.enabled"] = ModelBase::toJson(m_Parameter_guava_cache_enabled);
    }
    if(m_Parameter_guava_cache_paramsIsSet)
    {
        val["parameter.guava.cache.params"] = ModelBase::toJson(m_Parameter_guava_cache_params);
    }
    if(m_Parameter_guava_cache_reloadIsSet)
    {
        val["parameter.guava.cache.reload"] = ModelBase::toJson(m_Parameter_guava_cache_reload);
    }
    if(m_Service_rankingIsSet)
    {
        val["service.ranking"] = ModelBase::toJson(m_Service_ranking);
    }
    

    return val;
}

void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("parameter.guava.cache.enabled") != val.end())
    {
        if(!val["parameter.guava.cache.enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["parameter.guava.cache.enabled"]);
            setParameterGuavaCacheEnabled( newItem );
        }
        
    }
    if(val.find("parameter.guava.cache.params") != val.end())
    {
        if(!val["parameter.guava.cache.params"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["parameter.guava.cache.params"]);
            setParameterGuavaCacheParams( newItem );
        }
        
    }
    if(val.find("parameter.guava.cache.reload") != val.end())
    {
        if(!val["parameter.guava.cache.reload"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["parameter.guava.cache.reload"]);
            setParameterGuavaCacheReload( newItem );
        }
        
    }
    if(val.find("service.ranking") != val.end())
    {
        if(!val["service.ranking"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["service.ranking"]);
            setServiceRanking( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::getParameterGuavaCacheEnabled() const
{
    return m_Parameter_guava_cache_enabled;
}
void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::setParameterGuavaCacheEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Parameter_guava_cache_enabled = value;
    m_Parameter_guava_cache_enabledIsSet = true;
}
bool ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::parameterGuavaCacheEnabledIsSet() const
{
    return m_Parameter_guava_cache_enabledIsSet;
}
void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::unsetParameter_guava_cache_enabled()
{
    m_Parameter_guava_cache_enabledIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::getParameterGuavaCacheParams() const
{
    return m_Parameter_guava_cache_params;
}
void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::setParameterGuavaCacheParams(ConfigNodePropertyString const& value)
{
    m_Parameter_guava_cache_params = value;
    m_Parameter_guava_cache_paramsIsSet = true;
}
bool ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::parameterGuavaCacheParamsIsSet() const
{
    return m_Parameter_guava_cache_paramsIsSet;
}
void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::unsetParameter_guava_cache_params()
{
    m_Parameter_guava_cache_paramsIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::getParameterGuavaCacheReload() const
{
    return m_Parameter_guava_cache_reload;
}
void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::setParameterGuavaCacheReload(ConfigNodePropertyBoolean const& value)
{
    m_Parameter_guava_cache_reload = value;
    m_Parameter_guava_cache_reloadIsSet = true;
}
bool ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::parameterGuavaCacheReloadIsSet() const
{
    return m_Parameter_guava_cache_reloadIsSet;
}
void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::unsetParameter_guava_cache_reload()
{
    m_Parameter_guava_cache_reloadIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::getServiceRanking() const
{
    return m_Service_ranking;
}
void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::setServiceRanking(ConfigNodePropertyInteger const& value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}
bool ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}
void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}

}
}
}
}

