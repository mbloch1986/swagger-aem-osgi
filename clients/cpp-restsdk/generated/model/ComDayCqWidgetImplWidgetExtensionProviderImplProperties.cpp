/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqWidgetImplWidgetExtensionProviderImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqWidgetImplWidgetExtensionProviderImplProperties::ComDayCqWidgetImplWidgetExtensionProviderImplProperties()
{
    m_Extendable_widgetsIsSet = false;
    m_Widgetextensionprovider_debugIsSet = false;
}

ComDayCqWidgetImplWidgetExtensionProviderImplProperties::~ComDayCqWidgetImplWidgetExtensionProviderImplProperties()
{
}

void ComDayCqWidgetImplWidgetExtensionProviderImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqWidgetImplWidgetExtensionProviderImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Extendable_widgetsIsSet)
    {
        val[utility::conversions::to_string_t("extendable.widgets")] = ModelBase::toJson(m_Extendable_widgets);
    }
    if(m_Widgetextensionprovider_debugIsSet)
    {
        val[utility::conversions::to_string_t("widgetextensionprovider.debug")] = ModelBase::toJson(m_Widgetextensionprovider_debug);
    }

    return val;
}

void ComDayCqWidgetImplWidgetExtensionProviderImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("extendable.widgets")))
    {
        if(!val[utility::conversions::to_string_t("extendable.widgets")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("extendable.widgets")]);
            setExtendableWidgets( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("widgetextensionprovider.debug")))
    {
        if(!val[utility::conversions::to_string_t("widgetextensionprovider.debug")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("widgetextensionprovider.debug")]);
            setWidgetextensionproviderDebug( newItem );
        }
    }
}

void ComDayCqWidgetImplWidgetExtensionProviderImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Extendable_widgetsIsSet)
    {
        if (m_Extendable_widgets.get())
        {
            m_Extendable_widgets->toMultipart(multipart, utility::conversions::to_string_t("extendable.widgets."));
        }
    }
    if(m_Widgetextensionprovider_debugIsSet)
    {
        if (m_Widgetextensionprovider_debug.get())
        {
            m_Widgetextensionprovider_debug->toMultipart(multipart, utility::conversions::to_string_t("widgetextensionprovider.debug."));
        }
    }
}

void ComDayCqWidgetImplWidgetExtensionProviderImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("extendable.widgets")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("extendable.widgets")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("extendable.widgets."));
            setExtendableWidgets( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("widgetextensionprovider.debug")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("widgetextensionprovider.debug")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("widgetextensionprovider.debug."));
            setWidgetextensionproviderDebug( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqWidgetImplWidgetExtensionProviderImplProperties::getExtendableWidgets() const
{
    return m_Extendable_widgets;
}


void ComDayCqWidgetImplWidgetExtensionProviderImplProperties::setExtendableWidgets(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Extendable_widgets = value;
    m_Extendable_widgetsIsSet = true;
}
bool ComDayCqWidgetImplWidgetExtensionProviderImplProperties::extendableWidgetsIsSet() const
{
    return m_Extendable_widgetsIsSet;
}

void ComDayCqWidgetImplWidgetExtensionProviderImplProperties::unsetExtendable_widgets()
{
    m_Extendable_widgetsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWidgetImplWidgetExtensionProviderImplProperties::getWidgetextensionproviderDebug() const
{
    return m_Widgetextensionprovider_debug;
}


void ComDayCqWidgetImplWidgetExtensionProviderImplProperties::setWidgetextensionproviderDebug(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Widgetextensionprovider_debug = value;
    m_Widgetextensionprovider_debugIsSet = true;
}
bool ComDayCqWidgetImplWidgetExtensionProviderImplProperties::widgetextensionproviderDebugIsSet() const
{
    return m_Widgetextensionprovider_debugIsSet;
}

void ComDayCqWidgetImplWidgetExtensionProviderImplProperties::unsetWidgetextensionprovider_debug()
{
    m_Widgetextensionprovider_debugIsSet = false;
}

}
}
}
}

