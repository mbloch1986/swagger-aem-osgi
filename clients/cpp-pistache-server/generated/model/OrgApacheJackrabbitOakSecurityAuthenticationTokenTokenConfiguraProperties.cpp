/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties()
{
    m_TokenExpirationIsSet = false;
    m_TokenLengthIsSet = false;
    m_TokenRefreshIsSet = false;
    m_TokenCleanupThresholdIsSet = false;
    m_PasswordHashAlgorithmIsSet = false;
    m_PasswordHashIterationsIsSet = false;
    m_PasswordSaltSizeIsSet = false;
    
}

OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::~OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties()
{
}

void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_TokenExpirationIsSet)
    {
        val["tokenExpiration"] = ModelBase::toJson(m_TokenExpiration);
    }
    if(m_TokenLengthIsSet)
    {
        val["tokenLength"] = ModelBase::toJson(m_TokenLength);
    }
    if(m_TokenRefreshIsSet)
    {
        val["tokenRefresh"] = ModelBase::toJson(m_TokenRefresh);
    }
    if(m_TokenCleanupThresholdIsSet)
    {
        val["tokenCleanupThreshold"] = ModelBase::toJson(m_TokenCleanupThreshold);
    }
    if(m_PasswordHashAlgorithmIsSet)
    {
        val["passwordHashAlgorithm"] = ModelBase::toJson(m_PasswordHashAlgorithm);
    }
    if(m_PasswordHashIterationsIsSet)
    {
        val["passwordHashIterations"] = ModelBase::toJson(m_PasswordHashIterations);
    }
    if(m_PasswordSaltSizeIsSet)
    {
        val["passwordSaltSize"] = ModelBase::toJson(m_PasswordSaltSize);
    }
    

    return val;
}

void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::fromJson(nlohmann::json& val)
{
    if(val.find("tokenExpiration") != val.end())
    {
        if(!val["tokenExpiration"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["tokenExpiration"]);
            setTokenExpiration( newItem );
        }
        
    }
    if(val.find("tokenLength") != val.end())
    {
        if(!val["tokenLength"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["tokenLength"]);
            setTokenLength( newItem );
        }
        
    }
    if(val.find("tokenRefresh") != val.end())
    {
        if(!val["tokenRefresh"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["tokenRefresh"]);
            setTokenRefresh( newItem );
        }
        
    }
    if(val.find("tokenCleanupThreshold") != val.end())
    {
        if(!val["tokenCleanupThreshold"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["tokenCleanupThreshold"]);
            setTokenCleanupThreshold( newItem );
        }
        
    }
    if(val.find("passwordHashAlgorithm") != val.end())
    {
        if(!val["passwordHashAlgorithm"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["passwordHashAlgorithm"]);
            setPasswordHashAlgorithm( newItem );
        }
        
    }
    if(val.find("passwordHashIterations") != val.end())
    {
        if(!val["passwordHashIterations"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["passwordHashIterations"]);
            setPasswordHashIterations( newItem );
        }
        
    }
    if(val.find("passwordSaltSize") != val.end())
    {
        if(!val["passwordSaltSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["passwordSaltSize"]);
            setPasswordSaltSize( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getTokenExpiration() const
{
    return m_TokenExpiration;
}
void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setTokenExpiration(ConfigNodePropertyString const& value)
{
    m_TokenExpiration = value;
    m_TokenExpirationIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::tokenExpirationIsSet() const
{
    return m_TokenExpirationIsSet;
}
void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::unsetTokenExpiration()
{
    m_TokenExpirationIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getTokenLength() const
{
    return m_TokenLength;
}
void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setTokenLength(ConfigNodePropertyString const& value)
{
    m_TokenLength = value;
    m_TokenLengthIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::tokenLengthIsSet() const
{
    return m_TokenLengthIsSet;
}
void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::unsetTokenLength()
{
    m_TokenLengthIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getTokenRefresh() const
{
    return m_TokenRefresh;
}
void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setTokenRefresh(ConfigNodePropertyBoolean const& value)
{
    m_TokenRefresh = value;
    m_TokenRefreshIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::tokenRefreshIsSet() const
{
    return m_TokenRefreshIsSet;
}
void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::unsetTokenRefresh()
{
    m_TokenRefreshIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getTokenCleanupThreshold() const
{
    return m_TokenCleanupThreshold;
}
void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setTokenCleanupThreshold(ConfigNodePropertyInteger const& value)
{
    m_TokenCleanupThreshold = value;
    m_TokenCleanupThresholdIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::tokenCleanupThresholdIsSet() const
{
    return m_TokenCleanupThresholdIsSet;
}
void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::unsetTokenCleanupThreshold()
{
    m_TokenCleanupThresholdIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getPasswordHashAlgorithm() const
{
    return m_PasswordHashAlgorithm;
}
void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setPasswordHashAlgorithm(ConfigNodePropertyString const& value)
{
    m_PasswordHashAlgorithm = value;
    m_PasswordHashAlgorithmIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::passwordHashAlgorithmIsSet() const
{
    return m_PasswordHashAlgorithmIsSet;
}
void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::unsetPasswordHashAlgorithm()
{
    m_PasswordHashAlgorithmIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getPasswordHashIterations() const
{
    return m_PasswordHashIterations;
}
void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setPasswordHashIterations(ConfigNodePropertyInteger const& value)
{
    m_PasswordHashIterations = value;
    m_PasswordHashIterationsIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::passwordHashIterationsIsSet() const
{
    return m_PasswordHashIterationsIsSet;
}
void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::unsetPasswordHashIterations()
{
    m_PasswordHashIterationsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getPasswordSaltSize() const
{
    return m_PasswordSaltSize;
}
void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setPasswordSaltSize(ConfigNodePropertyInteger const& value)
{
    m_PasswordSaltSize = value;
    m_PasswordSaltSizeIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::passwordSaltSizeIsSet() const
{
    return m_PasswordSaltSizeIsSet;
}
void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::unsetPasswordSaltSize()
{
    m_PasswordSaltSizeIsSet = false;
}

}
}
}
}

