/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqWcmCoreImplWarpTimeWarpFilterProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::ComDayCqWcmCoreImplWarpTimeWarpFilterProperties()
{
    m_Filter_orderIsSet = false;
    m_Filter_scopeIsSet = false;
    
}

ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::~ComDayCqWcmCoreImplWarpTimeWarpFilterProperties()
{
}

void ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Filter_orderIsSet)
    {
        val["filter.order"] = ModelBase::toJson(m_Filter_order);
    }
    if(m_Filter_scopeIsSet)
    {
        val["filter.scope"] = ModelBase::toJson(m_Filter_scope);
    }
    

    return val;
}

void ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::fromJson(nlohmann::json& val)
{
    if(val.find("filter.order") != val.end())
    {
        if(!val["filter.order"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["filter.order"]);
            setFilterOrder( newItem );
        }
        
    }
    if(val.find("filter.scope") != val.end())
    {
        if(!val["filter.scope"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["filter.scope"]);
            setFilterScope( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::getFilterOrder() const
{
    return m_Filter_order;
}
void ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::setFilterOrder(ConfigNodePropertyString const& value)
{
    m_Filter_order = value;
    m_Filter_orderIsSet = true;
}
bool ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::filterOrderIsSet() const
{
    return m_Filter_orderIsSet;
}
void ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::unsetFilter_order()
{
    m_Filter_orderIsSet = false;
}
ConfigNodePropertyString ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::getFilterScope() const
{
    return m_Filter_scope;
}
void ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::setFilterScope(ConfigNodePropertyString const& value)
{
    m_Filter_scope = value;
    m_Filter_scopeIsSet = true;
}
bool ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::filterScopeIsSet() const
{
    return m_Filter_scopeIsSet;
}
void ComDayCqWcmCoreImplWarpTimeWarpFilterProperties::unsetFilter_scope()
{
    m_Filter_scopeIsSet = false;
}

}
}
}
}

