/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqDamCfmImplConfFeatureConfigImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqDamCfmImplConfFeatureConfigImplProperties::OAIComAdobeCqDamCfmImplConfFeatureConfigImplProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqDamCfmImplConfFeatureConfigImplProperties::OAIComAdobeCqDamCfmImplConfFeatureConfigImplProperties() {
    this->init();
}

OAIComAdobeCqDamCfmImplConfFeatureConfigImplProperties::~OAIComAdobeCqDamCfmImplConfFeatureConfigImplProperties() {
    
}

void
OAIComAdobeCqDamCfmImplConfFeatureConfigImplProperties::init() {
    m_dam_cfm_resource_types_isSet = false;
    m_dam_cfm_reference_properties_isSet = false;
}

void
OAIComAdobeCqDamCfmImplConfFeatureConfigImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqDamCfmImplConfFeatureConfigImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(dam_cfm_resource_types, json[QString("dam.cfm.resourceTypes")]);
    
    ::OpenAPI::fromJsonValue(dam_cfm_reference_properties, json[QString("dam.cfm.referenceProperties")]);
    
}

QString
OAIComAdobeCqDamCfmImplConfFeatureConfigImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqDamCfmImplConfFeatureConfigImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(dam_cfm_resource_types.isSet()){
        obj.insert(QString("dam.cfm.resourceTypes"), ::OpenAPI::toJsonValue(dam_cfm_resource_types));
    }
	if(dam_cfm_reference_properties.isSet()){
        obj.insert(QString("dam.cfm.referenceProperties"), ::OpenAPI::toJsonValue(dam_cfm_reference_properties));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComAdobeCqDamCfmImplConfFeatureConfigImplProperties::getDamCfmResourceTypes() const {
    return dam_cfm_resource_types;
}
void
OAIComAdobeCqDamCfmImplConfFeatureConfigImplProperties::setDamCfmResourceTypes(const OAIConfigNodePropertyArray &dam_cfm_resource_types) {
    this->dam_cfm_resource_types = dam_cfm_resource_types;
    this->m_dam_cfm_resource_types_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqDamCfmImplConfFeatureConfigImplProperties::getDamCfmReferenceProperties() const {
    return dam_cfm_reference_properties;
}
void
OAIComAdobeCqDamCfmImplConfFeatureConfigImplProperties::setDamCfmReferenceProperties(const OAIConfigNodePropertyArray &dam_cfm_reference_properties) {
    this->dam_cfm_reference_properties = dam_cfm_reference_properties;
    this->m_dam_cfm_reference_properties_isSet = true;
}


bool
OAIComAdobeCqDamCfmImplConfFeatureConfigImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(dam_cfm_resource_types.isSet()){ isObjectUpdated = true; break;}
    
        if(dam_cfm_reference_properties.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

