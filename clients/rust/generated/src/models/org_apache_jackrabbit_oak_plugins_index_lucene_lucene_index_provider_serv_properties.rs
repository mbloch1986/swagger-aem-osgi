/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
  #[serde(rename = "disabled")]
  disabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "debug")]
  debug: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "localIndexDir")]
  local_index_dir: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "enableOpenIndexAsync")]
  enable_open_index_async: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "threadPoolSize")]
  thread_pool_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "prefetchIndexFiles")]
  prefetch_index_files: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "extractedTextCacheSizeInMB")]
  extracted_text_cache_size_in_mb: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "extractedTextCacheExpiryInSecs")]
  extracted_text_cache_expiry_in_secs: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "alwaysUsePreExtractedCache")]
  always_use_pre_extracted_cache: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "booleanClauseLimit")]
  boolean_clause_limit: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "enableHybridIndexing")]
  enable_hybrid_indexing: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "hybridQueueSize")]
  hybrid_queue_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "disableStoredIndexDefinition")]
  disable_stored_index_definition: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "deletedBlobsCollectionEnabled")]
  deleted_blobs_collection_enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "propIndexCleanerIntervalInSecs")]
  prop_index_cleaner_interval_in_secs: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "enableSingleBlobIndexFiles")]
  enable_single_blob_index_files: Option<::models::ConfigNodePropertyBoolean>
}

impl OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
  pub fn new() -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
    OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
      disabled: None,
      debug: None,
      local_index_dir: None,
      enable_open_index_async: None,
      thread_pool_size: None,
      prefetch_index_files: None,
      extracted_text_cache_size_in_mb: None,
      extracted_text_cache_expiry_in_secs: None,
      always_use_pre_extracted_cache: None,
      boolean_clause_limit: None,
      enable_hybrid_indexing: None,
      hybrid_queue_size: None,
      disable_stored_index_definition: None,
      deleted_blobs_collection_enabled: None,
      prop_index_cleaner_interval_in_secs: None,
      enable_single_blob_index_files: None
    }
  }

  pub fn set_disabled(&mut self, disabled: ::models::ConfigNodePropertyBoolean) {
    self.disabled = Some(disabled);
  }

  pub fn with_disabled(mut self, disabled: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
    self.disabled = Some(disabled);
    self
  }

  pub fn disabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.disabled.as_ref()
  }

  pub fn reset_disabled(&mut self) {
    self.disabled = None;
  }

  pub fn set_debug(&mut self, debug: ::models::ConfigNodePropertyBoolean) {
    self.debug = Some(debug);
  }

  pub fn with_debug(mut self, debug: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
    self.debug = Some(debug);
    self
  }

  pub fn debug(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.debug.as_ref()
  }

  pub fn reset_debug(&mut self) {
    self.debug = None;
  }

  pub fn set_local_index_dir(&mut self, local_index_dir: ::models::ConfigNodePropertyString) {
    self.local_index_dir = Some(local_index_dir);
  }

  pub fn with_local_index_dir(mut self, local_index_dir: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
    self.local_index_dir = Some(local_index_dir);
    self
  }

  pub fn local_index_dir(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.local_index_dir.as_ref()
  }

  pub fn reset_local_index_dir(&mut self) {
    self.local_index_dir = None;
  }

  pub fn set_enable_open_index_async(&mut self, enable_open_index_async: ::models::ConfigNodePropertyBoolean) {
    self.enable_open_index_async = Some(enable_open_index_async);
  }

  pub fn with_enable_open_index_async(mut self, enable_open_index_async: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
    self.enable_open_index_async = Some(enable_open_index_async);
    self
  }

  pub fn enable_open_index_async(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enable_open_index_async.as_ref()
  }

  pub fn reset_enable_open_index_async(&mut self) {
    self.enable_open_index_async = None;
  }

  pub fn set_thread_pool_size(&mut self, thread_pool_size: ::models::ConfigNodePropertyInteger) {
    self.thread_pool_size = Some(thread_pool_size);
  }

  pub fn with_thread_pool_size(mut self, thread_pool_size: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
    self.thread_pool_size = Some(thread_pool_size);
    self
  }

  pub fn thread_pool_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.thread_pool_size.as_ref()
  }

  pub fn reset_thread_pool_size(&mut self) {
    self.thread_pool_size = None;
  }

  pub fn set_prefetch_index_files(&mut self, prefetch_index_files: ::models::ConfigNodePropertyBoolean) {
    self.prefetch_index_files = Some(prefetch_index_files);
  }

  pub fn with_prefetch_index_files(mut self, prefetch_index_files: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
    self.prefetch_index_files = Some(prefetch_index_files);
    self
  }

  pub fn prefetch_index_files(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.prefetch_index_files.as_ref()
  }

  pub fn reset_prefetch_index_files(&mut self) {
    self.prefetch_index_files = None;
  }

  pub fn set_extracted_text_cache_size_in_mb(&mut self, extracted_text_cache_size_in_mb: ::models::ConfigNodePropertyInteger) {
    self.extracted_text_cache_size_in_mb = Some(extracted_text_cache_size_in_mb);
  }

  pub fn with_extracted_text_cache_size_in_mb(mut self, extracted_text_cache_size_in_mb: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
    self.extracted_text_cache_size_in_mb = Some(extracted_text_cache_size_in_mb);
    self
  }

  pub fn extracted_text_cache_size_in_mb(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.extracted_text_cache_size_in_mb.as_ref()
  }

  pub fn reset_extracted_text_cache_size_in_mb(&mut self) {
    self.extracted_text_cache_size_in_mb = None;
  }

  pub fn set_extracted_text_cache_expiry_in_secs(&mut self, extracted_text_cache_expiry_in_secs: ::models::ConfigNodePropertyInteger) {
    self.extracted_text_cache_expiry_in_secs = Some(extracted_text_cache_expiry_in_secs);
  }

  pub fn with_extracted_text_cache_expiry_in_secs(mut self, extracted_text_cache_expiry_in_secs: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
    self.extracted_text_cache_expiry_in_secs = Some(extracted_text_cache_expiry_in_secs);
    self
  }

  pub fn extracted_text_cache_expiry_in_secs(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.extracted_text_cache_expiry_in_secs.as_ref()
  }

  pub fn reset_extracted_text_cache_expiry_in_secs(&mut self) {
    self.extracted_text_cache_expiry_in_secs = None;
  }

  pub fn set_always_use_pre_extracted_cache(&mut self, always_use_pre_extracted_cache: ::models::ConfigNodePropertyBoolean) {
    self.always_use_pre_extracted_cache = Some(always_use_pre_extracted_cache);
  }

  pub fn with_always_use_pre_extracted_cache(mut self, always_use_pre_extracted_cache: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
    self.always_use_pre_extracted_cache = Some(always_use_pre_extracted_cache);
    self
  }

  pub fn always_use_pre_extracted_cache(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.always_use_pre_extracted_cache.as_ref()
  }

  pub fn reset_always_use_pre_extracted_cache(&mut self) {
    self.always_use_pre_extracted_cache = None;
  }

  pub fn set_boolean_clause_limit(&mut self, boolean_clause_limit: ::models::ConfigNodePropertyInteger) {
    self.boolean_clause_limit = Some(boolean_clause_limit);
  }

  pub fn with_boolean_clause_limit(mut self, boolean_clause_limit: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
    self.boolean_clause_limit = Some(boolean_clause_limit);
    self
  }

  pub fn boolean_clause_limit(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.boolean_clause_limit.as_ref()
  }

  pub fn reset_boolean_clause_limit(&mut self) {
    self.boolean_clause_limit = None;
  }

  pub fn set_enable_hybrid_indexing(&mut self, enable_hybrid_indexing: ::models::ConfigNodePropertyBoolean) {
    self.enable_hybrid_indexing = Some(enable_hybrid_indexing);
  }

  pub fn with_enable_hybrid_indexing(mut self, enable_hybrid_indexing: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
    self.enable_hybrid_indexing = Some(enable_hybrid_indexing);
    self
  }

  pub fn enable_hybrid_indexing(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enable_hybrid_indexing.as_ref()
  }

  pub fn reset_enable_hybrid_indexing(&mut self) {
    self.enable_hybrid_indexing = None;
  }

  pub fn set_hybrid_queue_size(&mut self, hybrid_queue_size: ::models::ConfigNodePropertyInteger) {
    self.hybrid_queue_size = Some(hybrid_queue_size);
  }

  pub fn with_hybrid_queue_size(mut self, hybrid_queue_size: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
    self.hybrid_queue_size = Some(hybrid_queue_size);
    self
  }

  pub fn hybrid_queue_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.hybrid_queue_size.as_ref()
  }

  pub fn reset_hybrid_queue_size(&mut self) {
    self.hybrid_queue_size = None;
  }

  pub fn set_disable_stored_index_definition(&mut self, disable_stored_index_definition: ::models::ConfigNodePropertyBoolean) {
    self.disable_stored_index_definition = Some(disable_stored_index_definition);
  }

  pub fn with_disable_stored_index_definition(mut self, disable_stored_index_definition: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
    self.disable_stored_index_definition = Some(disable_stored_index_definition);
    self
  }

  pub fn disable_stored_index_definition(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.disable_stored_index_definition.as_ref()
  }

  pub fn reset_disable_stored_index_definition(&mut self) {
    self.disable_stored_index_definition = None;
  }

  pub fn set_deleted_blobs_collection_enabled(&mut self, deleted_blobs_collection_enabled: ::models::ConfigNodePropertyBoolean) {
    self.deleted_blobs_collection_enabled = Some(deleted_blobs_collection_enabled);
  }

  pub fn with_deleted_blobs_collection_enabled(mut self, deleted_blobs_collection_enabled: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
    self.deleted_blobs_collection_enabled = Some(deleted_blobs_collection_enabled);
    self
  }

  pub fn deleted_blobs_collection_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.deleted_blobs_collection_enabled.as_ref()
  }

  pub fn reset_deleted_blobs_collection_enabled(&mut self) {
    self.deleted_blobs_collection_enabled = None;
  }

  pub fn set_prop_index_cleaner_interval_in_secs(&mut self, prop_index_cleaner_interval_in_secs: ::models::ConfigNodePropertyInteger) {
    self.prop_index_cleaner_interval_in_secs = Some(prop_index_cleaner_interval_in_secs);
  }

  pub fn with_prop_index_cleaner_interval_in_secs(mut self, prop_index_cleaner_interval_in_secs: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
    self.prop_index_cleaner_interval_in_secs = Some(prop_index_cleaner_interval_in_secs);
    self
  }

  pub fn prop_index_cleaner_interval_in_secs(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.prop_index_cleaner_interval_in_secs.as_ref()
  }

  pub fn reset_prop_index_cleaner_interval_in_secs(&mut self) {
    self.prop_index_cleaner_interval_in_secs = None;
  }

  pub fn set_enable_single_blob_index_files(&mut self, enable_single_blob_index_files: ::models::ConfigNodePropertyBoolean) {
    self.enable_single_blob_index_files = Some(enable_single_blob_index_files);
  }

  pub fn with_enable_single_blob_index_files(mut self, enable_single_blob_index_files: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
    self.enable_single_blob_index_files = Some(enable_single_blob_index_files);
    self
  }

  pub fn enable_single_blob_index_files(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enable_single_blob_index_files.as_ref()
  }

  pub fn reset_enable_single_blob_index_files(&mut self) {
    self.enable_single_blob_index_files = None;
  }

}



