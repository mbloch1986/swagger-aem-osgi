/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqWcmCoreImplServletsThumbnailServletProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqWcmCoreImplServletsThumbnailServletProperties::ComDayCqWcmCoreImplServletsThumbnailServletProperties()
{
    m_WorkspaceIsSet = false;
    m_DimensionsIsSet = false;
}

ComDayCqWcmCoreImplServletsThumbnailServletProperties::~ComDayCqWcmCoreImplServletsThumbnailServletProperties()
{
}

void ComDayCqWcmCoreImplServletsThumbnailServletProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqWcmCoreImplServletsThumbnailServletProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_WorkspaceIsSet)
    {
        val[utility::conversions::to_string_t("workspace")] = ModelBase::toJson(m_Workspace);
    }
    if(m_DimensionsIsSet)
    {
        val[utility::conversions::to_string_t("dimensions")] = ModelBase::toJson(m_Dimensions);
    }

    return val;
}

void ComDayCqWcmCoreImplServletsThumbnailServletProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("workspace")))
    {
        if(!val[utility::conversions::to_string_t("workspace")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("workspace")]);
            setWorkspace( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dimensions")))
    {
        if(!val[utility::conversions::to_string_t("dimensions")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("dimensions")]);
            setDimensions( newItem );
        }
    }
}

void ComDayCqWcmCoreImplServletsThumbnailServletProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_WorkspaceIsSet)
    {
        if (m_Workspace.get())
        {
            m_Workspace->toMultipart(multipart, utility::conversions::to_string_t("workspace."));
        }
    }
    if(m_DimensionsIsSet)
    {
        if (m_Dimensions.get())
        {
            m_Dimensions->toMultipart(multipart, utility::conversions::to_string_t("dimensions."));
        }
    }
}

void ComDayCqWcmCoreImplServletsThumbnailServletProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("workspace")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("workspace")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("workspace."));
            setWorkspace( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dimensions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dimensions")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dimensions."));
            setDimensions( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmCoreImplServletsThumbnailServletProperties::getWorkspace() const
{
    return m_Workspace;
}


void ComDayCqWcmCoreImplServletsThumbnailServletProperties::setWorkspace(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Workspace = value;
    m_WorkspaceIsSet = true;
}
bool ComDayCqWcmCoreImplServletsThumbnailServletProperties::workspaceIsSet() const
{
    return m_WorkspaceIsSet;
}

void ComDayCqWcmCoreImplServletsThumbnailServletProperties::unsetWorkspace()
{
    m_WorkspaceIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqWcmCoreImplServletsThumbnailServletProperties::getDimensions() const
{
    return m_Dimensions;
}


void ComDayCqWcmCoreImplServletsThumbnailServletProperties::setDimensions(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Dimensions = value;
    m_DimensionsIsSet = true;
}
bool ComDayCqWcmCoreImplServletsThumbnailServletProperties::dimensionsIsSet() const
{
    return m_DimensionsIsSet;
}

void ComDayCqWcmCoreImplServletsThumbnailServletProperties::unsetDimensions()
{
    m_DimensionsIsSet = false;
}

}
}
}
}

