/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingDiscoveryOakConfigProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingDiscoveryOakConfigProperties::OAIOrgApacheSlingDiscoveryOakConfigProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingDiscoveryOakConfigProperties::OAIOrgApacheSlingDiscoveryOakConfigProperties() {
    this->init();
}

OAIOrgApacheSlingDiscoveryOakConfigProperties::~OAIOrgApacheSlingDiscoveryOakConfigProperties() {
    
}

void
OAIOrgApacheSlingDiscoveryOakConfigProperties::init() {
    m_connector_ping_timeout_isSet = false;
    m_connector_ping_interval_isSet = false;
    m_discovery_lite_check_interval_isSet = false;
    m_cluster_sync_service_timeout_isSet = false;
    m_cluster_sync_service_interval_isSet = false;
    m_enable_sync_token_isSet = false;
    m_min_event_delay_isSet = false;
    m_socket_connect_timeout_isSet = false;
    m_so_timeout_isSet = false;
    m_topology_connector_urls_isSet = false;
    m_topology_connector_whitelist_isSet = false;
    m_auto_stop_local_loop_enabled_isSet = false;
    m_gzip_connector_requests_enabled_isSet = false;
    m_hmac_enabled_isSet = false;
    m_enable_encryption_isSet = false;
    m_shared_key_isSet = false;
    m_hmac_shared_key_ttl_isSet = false;
    m_backoff_standby_factor_isSet = false;
    m_backoff_stable_factor_isSet = false;
}

void
OAIOrgApacheSlingDiscoveryOakConfigProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingDiscoveryOakConfigProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(connector_ping_timeout, json[QString("connectorPingTimeout")]);
    
    ::OpenAPI::fromJsonValue(connector_ping_interval, json[QString("connectorPingInterval")]);
    
    ::OpenAPI::fromJsonValue(discovery_lite_check_interval, json[QString("discoveryLiteCheckInterval")]);
    
    ::OpenAPI::fromJsonValue(cluster_sync_service_timeout, json[QString("clusterSyncServiceTimeout")]);
    
    ::OpenAPI::fromJsonValue(cluster_sync_service_interval, json[QString("clusterSyncServiceInterval")]);
    
    ::OpenAPI::fromJsonValue(enable_sync_token, json[QString("enableSyncToken")]);
    
    ::OpenAPI::fromJsonValue(min_event_delay, json[QString("minEventDelay")]);
    
    ::OpenAPI::fromJsonValue(socket_connect_timeout, json[QString("socketConnectTimeout")]);
    
    ::OpenAPI::fromJsonValue(so_timeout, json[QString("soTimeout")]);
    
    ::OpenAPI::fromJsonValue(topology_connector_urls, json[QString("topologyConnectorUrls")]);
    
    ::OpenAPI::fromJsonValue(topology_connector_whitelist, json[QString("topologyConnectorWhitelist")]);
    
    ::OpenAPI::fromJsonValue(auto_stop_local_loop_enabled, json[QString("autoStopLocalLoopEnabled")]);
    
    ::OpenAPI::fromJsonValue(gzip_connector_requests_enabled, json[QString("gzipConnectorRequestsEnabled")]);
    
    ::OpenAPI::fromJsonValue(hmac_enabled, json[QString("hmacEnabled")]);
    
    ::OpenAPI::fromJsonValue(enable_encryption, json[QString("enableEncryption")]);
    
    ::OpenAPI::fromJsonValue(shared_key, json[QString("sharedKey")]);
    
    ::OpenAPI::fromJsonValue(hmac_shared_key_ttl, json[QString("hmacSharedKeyTTL")]);
    
    ::OpenAPI::fromJsonValue(backoff_standby_factor, json[QString("backoffStandbyFactor")]);
    
    ::OpenAPI::fromJsonValue(backoff_stable_factor, json[QString("backoffStableFactor")]);
    
}

QString
OAIOrgApacheSlingDiscoveryOakConfigProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingDiscoveryOakConfigProperties::asJsonObject() const {
    QJsonObject obj;
	if(connector_ping_timeout.isSet()){
        obj.insert(QString("connectorPingTimeout"), ::OpenAPI::toJsonValue(connector_ping_timeout));
    }
	if(connector_ping_interval.isSet()){
        obj.insert(QString("connectorPingInterval"), ::OpenAPI::toJsonValue(connector_ping_interval));
    }
	if(discovery_lite_check_interval.isSet()){
        obj.insert(QString("discoveryLiteCheckInterval"), ::OpenAPI::toJsonValue(discovery_lite_check_interval));
    }
	if(cluster_sync_service_timeout.isSet()){
        obj.insert(QString("clusterSyncServiceTimeout"), ::OpenAPI::toJsonValue(cluster_sync_service_timeout));
    }
	if(cluster_sync_service_interval.isSet()){
        obj.insert(QString("clusterSyncServiceInterval"), ::OpenAPI::toJsonValue(cluster_sync_service_interval));
    }
	if(enable_sync_token.isSet()){
        obj.insert(QString("enableSyncToken"), ::OpenAPI::toJsonValue(enable_sync_token));
    }
	if(min_event_delay.isSet()){
        obj.insert(QString("minEventDelay"), ::OpenAPI::toJsonValue(min_event_delay));
    }
	if(socket_connect_timeout.isSet()){
        obj.insert(QString("socketConnectTimeout"), ::OpenAPI::toJsonValue(socket_connect_timeout));
    }
	if(so_timeout.isSet()){
        obj.insert(QString("soTimeout"), ::OpenAPI::toJsonValue(so_timeout));
    }
	if(topology_connector_urls.isSet()){
        obj.insert(QString("topologyConnectorUrls"), ::OpenAPI::toJsonValue(topology_connector_urls));
    }
	if(topology_connector_whitelist.isSet()){
        obj.insert(QString("topologyConnectorWhitelist"), ::OpenAPI::toJsonValue(topology_connector_whitelist));
    }
	if(auto_stop_local_loop_enabled.isSet()){
        obj.insert(QString("autoStopLocalLoopEnabled"), ::OpenAPI::toJsonValue(auto_stop_local_loop_enabled));
    }
	if(gzip_connector_requests_enabled.isSet()){
        obj.insert(QString("gzipConnectorRequestsEnabled"), ::OpenAPI::toJsonValue(gzip_connector_requests_enabled));
    }
	if(hmac_enabled.isSet()){
        obj.insert(QString("hmacEnabled"), ::OpenAPI::toJsonValue(hmac_enabled));
    }
	if(enable_encryption.isSet()){
        obj.insert(QString("enableEncryption"), ::OpenAPI::toJsonValue(enable_encryption));
    }
	if(shared_key.isSet()){
        obj.insert(QString("sharedKey"), ::OpenAPI::toJsonValue(shared_key));
    }
	if(hmac_shared_key_ttl.isSet()){
        obj.insert(QString("hmacSharedKeyTTL"), ::OpenAPI::toJsonValue(hmac_shared_key_ttl));
    }
	if(backoff_standby_factor.isSet()){
        obj.insert(QString("backoffStandbyFactor"), ::OpenAPI::toJsonValue(backoff_standby_factor));
    }
	if(backoff_stable_factor.isSet()){
        obj.insert(QString("backoffStableFactor"), ::OpenAPI::toJsonValue(backoff_stable_factor));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDiscoveryOakConfigProperties::getConnectorPingTimeout() const {
    return connector_ping_timeout;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setConnectorPingTimeout(const OAIConfigNodePropertyInteger &connector_ping_timeout) {
    this->connector_ping_timeout = connector_ping_timeout;
    this->m_connector_ping_timeout_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDiscoveryOakConfigProperties::getConnectorPingInterval() const {
    return connector_ping_interval;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setConnectorPingInterval(const OAIConfigNodePropertyInteger &connector_ping_interval) {
    this->connector_ping_interval = connector_ping_interval;
    this->m_connector_ping_interval_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDiscoveryOakConfigProperties::getDiscoveryLiteCheckInterval() const {
    return discovery_lite_check_interval;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setDiscoveryLiteCheckInterval(const OAIConfigNodePropertyInteger &discovery_lite_check_interval) {
    this->discovery_lite_check_interval = discovery_lite_check_interval;
    this->m_discovery_lite_check_interval_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDiscoveryOakConfigProperties::getClusterSyncServiceTimeout() const {
    return cluster_sync_service_timeout;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setClusterSyncServiceTimeout(const OAIConfigNodePropertyInteger &cluster_sync_service_timeout) {
    this->cluster_sync_service_timeout = cluster_sync_service_timeout;
    this->m_cluster_sync_service_timeout_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDiscoveryOakConfigProperties::getClusterSyncServiceInterval() const {
    return cluster_sync_service_interval;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setClusterSyncServiceInterval(const OAIConfigNodePropertyInteger &cluster_sync_service_interval) {
    this->cluster_sync_service_interval = cluster_sync_service_interval;
    this->m_cluster_sync_service_interval_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingDiscoveryOakConfigProperties::getEnableSyncToken() const {
    return enable_sync_token;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setEnableSyncToken(const OAIConfigNodePropertyBoolean &enable_sync_token) {
    this->enable_sync_token = enable_sync_token;
    this->m_enable_sync_token_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDiscoveryOakConfigProperties::getMinEventDelay() const {
    return min_event_delay;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setMinEventDelay(const OAIConfigNodePropertyInteger &min_event_delay) {
    this->min_event_delay = min_event_delay;
    this->m_min_event_delay_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDiscoveryOakConfigProperties::getSocketConnectTimeout() const {
    return socket_connect_timeout;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setSocketConnectTimeout(const OAIConfigNodePropertyInteger &socket_connect_timeout) {
    this->socket_connect_timeout = socket_connect_timeout;
    this->m_socket_connect_timeout_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDiscoveryOakConfigProperties::getSoTimeout() const {
    return so_timeout;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setSoTimeout(const OAIConfigNodePropertyInteger &so_timeout) {
    this->so_timeout = so_timeout;
    this->m_so_timeout_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingDiscoveryOakConfigProperties::getTopologyConnectorUrls() const {
    return topology_connector_urls;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setTopologyConnectorUrls(const OAIConfigNodePropertyArray &topology_connector_urls) {
    this->topology_connector_urls = topology_connector_urls;
    this->m_topology_connector_urls_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingDiscoveryOakConfigProperties::getTopologyConnectorWhitelist() const {
    return topology_connector_whitelist;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setTopologyConnectorWhitelist(const OAIConfigNodePropertyArray &topology_connector_whitelist) {
    this->topology_connector_whitelist = topology_connector_whitelist;
    this->m_topology_connector_whitelist_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingDiscoveryOakConfigProperties::getAutoStopLocalLoopEnabled() const {
    return auto_stop_local_loop_enabled;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setAutoStopLocalLoopEnabled(const OAIConfigNodePropertyBoolean &auto_stop_local_loop_enabled) {
    this->auto_stop_local_loop_enabled = auto_stop_local_loop_enabled;
    this->m_auto_stop_local_loop_enabled_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingDiscoveryOakConfigProperties::getGzipConnectorRequestsEnabled() const {
    return gzip_connector_requests_enabled;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setGzipConnectorRequestsEnabled(const OAIConfigNodePropertyBoolean &gzip_connector_requests_enabled) {
    this->gzip_connector_requests_enabled = gzip_connector_requests_enabled;
    this->m_gzip_connector_requests_enabled_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingDiscoveryOakConfigProperties::getHmacEnabled() const {
    return hmac_enabled;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setHmacEnabled(const OAIConfigNodePropertyBoolean &hmac_enabled) {
    this->hmac_enabled = hmac_enabled;
    this->m_hmac_enabled_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingDiscoveryOakConfigProperties::getEnableEncryption() const {
    return enable_encryption;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setEnableEncryption(const OAIConfigNodePropertyBoolean &enable_encryption) {
    this->enable_encryption = enable_encryption;
    this->m_enable_encryption_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDiscoveryOakConfigProperties::getSharedKey() const {
    return shared_key;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setSharedKey(const OAIConfigNodePropertyString &shared_key) {
    this->shared_key = shared_key;
    this->m_shared_key_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDiscoveryOakConfigProperties::getHmacSharedKeyTtl() const {
    return hmac_shared_key_ttl;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setHmacSharedKeyTtl(const OAIConfigNodePropertyInteger &hmac_shared_key_ttl) {
    this->hmac_shared_key_ttl = hmac_shared_key_ttl;
    this->m_hmac_shared_key_ttl_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDiscoveryOakConfigProperties::getBackoffStandbyFactor() const {
    return backoff_standby_factor;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setBackoffStandbyFactor(const OAIConfigNodePropertyString &backoff_standby_factor) {
    this->backoff_standby_factor = backoff_standby_factor;
    this->m_backoff_standby_factor_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDiscoveryOakConfigProperties::getBackoffStableFactor() const {
    return backoff_stable_factor;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setBackoffStableFactor(const OAIConfigNodePropertyString &backoff_stable_factor) {
    this->backoff_stable_factor = backoff_stable_factor;
    this->m_backoff_stable_factor_isSet = true;
}


bool
OAIOrgApacheSlingDiscoveryOakConfigProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(connector_ping_timeout.isSet()){ isObjectUpdated = true; break;}
    
        if(connector_ping_interval.isSet()){ isObjectUpdated = true; break;}
    
        if(discovery_lite_check_interval.isSet()){ isObjectUpdated = true; break;}
    
        if(cluster_sync_service_timeout.isSet()){ isObjectUpdated = true; break;}
    
        if(cluster_sync_service_interval.isSet()){ isObjectUpdated = true; break;}
    
        if(enable_sync_token.isSet()){ isObjectUpdated = true; break;}
    
        if(min_event_delay.isSet()){ isObjectUpdated = true; break;}
    
        if(socket_connect_timeout.isSet()){ isObjectUpdated = true; break;}
    
        if(so_timeout.isSet()){ isObjectUpdated = true; break;}
    
        if(topology_connector_urls.isSet()){ isObjectUpdated = true; break;}
    
        if(topology_connector_whitelist.isSet()){ isObjectUpdated = true; break;}
    
        if(auto_stop_local_loop_enabled.isSet()){ isObjectUpdated = true; break;}
    
        if(gzip_connector_requests_enabled.isSet()){ isObjectUpdated = true; break;}
    
        if(hmac_enabled.isSet()){ isObjectUpdated = true; break;}
    
        if(enable_encryption.isSet()){ isObjectUpdated = true; break;}
    
        if(shared_key.isSet()){ isObjectUpdated = true; break;}
    
        if(hmac_shared_key_ttl.isSet()){ isObjectUpdated = true; break;}
    
        if(backoff_standby_factor.isSet()){ isObjectUpdated = true; break;}
    
        if(backoff_stable_factor.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

