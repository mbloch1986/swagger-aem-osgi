/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties()
{
    m_Version_idIsSet = false;
    m_Cache_onIsSet = false;
    m_Concurrency_levelIsSet = false;
    m_Cache_start_sizeIsSet = false;
    m_Cache_ttlIsSet = false;
    m_Cache_sizeIsSet = false;
    m_Time_limitIsSet = false;
}

ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::~ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties()
{
}

void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Version_idIsSet)
    {
        val[utility::conversions::to_string_t("version.id")] = ModelBase::toJson(m_Version_id);
    }
    if(m_Cache_onIsSet)
    {
        val[utility::conversions::to_string_t("cache.on")] = ModelBase::toJson(m_Cache_on);
    }
    if(m_Concurrency_levelIsSet)
    {
        val[utility::conversions::to_string_t("concurrency.level")] = ModelBase::toJson(m_Concurrency_level);
    }
    if(m_Cache_start_sizeIsSet)
    {
        val[utility::conversions::to_string_t("cache.start.size")] = ModelBase::toJson(m_Cache_start_size);
    }
    if(m_Cache_ttlIsSet)
    {
        val[utility::conversions::to_string_t("cache.ttl")] = ModelBase::toJson(m_Cache_ttl);
    }
    if(m_Cache_sizeIsSet)
    {
        val[utility::conversions::to_string_t("cache.size")] = ModelBase::toJson(m_Cache_size);
    }
    if(m_Time_limitIsSet)
    {
        val[utility::conversions::to_string_t("time.limit")] = ModelBase::toJson(m_Time_limit);
    }

    return val;
}

void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("version.id")))
    {
        if(!val[utility::conversions::to_string_t("version.id")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("version.id")]);
            setVersionId( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cache.on")))
    {
        if(!val[utility::conversions::to_string_t("cache.on")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("cache.on")]);
            setCacheOn( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("concurrency.level")))
    {
        if(!val[utility::conversions::to_string_t("concurrency.level")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("concurrency.level")]);
            setConcurrencyLevel( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cache.start.size")))
    {
        if(!val[utility::conversions::to_string_t("cache.start.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cache.start.size")]);
            setCacheStartSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cache.ttl")))
    {
        if(!val[utility::conversions::to_string_t("cache.ttl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cache.ttl")]);
            setCacheTtl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cache.size")))
    {
        if(!val[utility::conversions::to_string_t("cache.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cache.size")]);
            setCacheSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("time.limit")))
    {
        if(!val[utility::conversions::to_string_t("time.limit")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("time.limit")]);
            setTimeLimit( newItem );
        }
    }
}

void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Version_idIsSet)
    {
        if (m_Version_id.get())
        {
            m_Version_id->toMultipart(multipart, utility::conversions::to_string_t("version.id."));
        }
    }
    if(m_Cache_onIsSet)
    {
        if (m_Cache_on.get())
        {
            m_Cache_on->toMultipart(multipart, utility::conversions::to_string_t("cache.on."));
        }
    }
    if(m_Concurrency_levelIsSet)
    {
        if (m_Concurrency_level.get())
        {
            m_Concurrency_level->toMultipart(multipart, utility::conversions::to_string_t("concurrency.level."));
        }
    }
    if(m_Cache_start_sizeIsSet)
    {
        if (m_Cache_start_size.get())
        {
            m_Cache_start_size->toMultipart(multipart, utility::conversions::to_string_t("cache.start.size."));
        }
    }
    if(m_Cache_ttlIsSet)
    {
        if (m_Cache_ttl.get())
        {
            m_Cache_ttl->toMultipart(multipart, utility::conversions::to_string_t("cache.ttl."));
        }
    }
    if(m_Cache_sizeIsSet)
    {
        if (m_Cache_size.get())
        {
            m_Cache_size->toMultipart(multipart, utility::conversions::to_string_t("cache.size."));
        }
    }
    if(m_Time_limitIsSet)
    {
        if (m_Time_limit.get())
        {
            m_Time_limit->toMultipart(multipart, utility::conversions::to_string_t("time.limit."));
        }
    }
}

void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("version.id")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("version.id")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("version.id."));
            setVersionId( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cache.on")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cache.on")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cache.on."));
            setCacheOn( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("concurrency.level")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("concurrency.level")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("concurrency.level."));
            setConcurrencyLevel( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cache.start.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cache.start.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cache.start.size."));
            setCacheStartSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cache.ttl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cache.ttl")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cache.ttl."));
            setCacheTtl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cache.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cache.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cache.size."));
            setCacheSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("time.limit")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("time.limit")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("time.limit."));
            setTimeLimit( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::getVersionId() const
{
    return m_Version_id;
}


void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::setVersionId(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Version_id = value;
    m_Version_idIsSet = true;
}
bool ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::versionIdIsSet() const
{
    return m_Version_idIsSet;
}

void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::unsetVersion_id()
{
    m_Version_idIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::getCacheOn() const
{
    return m_Cache_on;
}


void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::setCacheOn(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Cache_on = value;
    m_Cache_onIsSet = true;
}
bool ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::cacheOnIsSet() const
{
    return m_Cache_onIsSet;
}

void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::unsetCache_on()
{
    m_Cache_onIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::getConcurrencyLevel() const
{
    return m_Concurrency_level;
}


void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::setConcurrencyLevel(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Concurrency_level = value;
    m_Concurrency_levelIsSet = true;
}
bool ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::concurrencyLevelIsSet() const
{
    return m_Concurrency_levelIsSet;
}

void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::unsetConcurrency_level()
{
    m_Concurrency_levelIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::getCacheStartSize() const
{
    return m_Cache_start_size;
}


void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::setCacheStartSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cache_start_size = value;
    m_Cache_start_sizeIsSet = true;
}
bool ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::cacheStartSizeIsSet() const
{
    return m_Cache_start_sizeIsSet;
}

void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::unsetCache_start_size()
{
    m_Cache_start_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::getCacheTtl() const
{
    return m_Cache_ttl;
}


void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::setCacheTtl(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cache_ttl = value;
    m_Cache_ttlIsSet = true;
}
bool ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::cacheTtlIsSet() const
{
    return m_Cache_ttlIsSet;
}

void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::unsetCache_ttl()
{
    m_Cache_ttlIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::getCacheSize() const
{
    return m_Cache_size;
}


void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::setCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cache_size = value;
    m_Cache_sizeIsSet = true;
}
bool ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::cacheSizeIsSet() const
{
    return m_Cache_sizeIsSet;
}

void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::unsetCache_size()
{
    m_Cache_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::getTimeLimit() const
{
    return m_Time_limit;
}


void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::setTimeLimit(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Time_limit = value;
    m_Time_limitIsSet = true;
}
bool ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::timeLimitIsSet() const
{
    return m_Time_limitIsSet;
}

void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::unsetTime_limit()
{
    m_Time_limitIsSet = false;
}

}
}
}
}

