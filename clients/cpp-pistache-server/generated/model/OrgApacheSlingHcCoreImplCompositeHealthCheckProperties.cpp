/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::OrgApacheSlingHcCoreImplCompositeHealthCheckProperties()
{
    m_Hc_nameIsSet = false;
    m_Hc_tagsIsSet = false;
    m_Hc_mbean_nameIsSet = false;
    m_Filter_tagsIsSet = false;
    m_Filter_combineTagsWithOrIsSet = false;
    
}

OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::~OrgApacheSlingHcCoreImplCompositeHealthCheckProperties()
{
}

void OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Hc_nameIsSet)
    {
        val["hc.name"] = ModelBase::toJson(m_Hc_name);
    }
    if(m_Hc_tagsIsSet)
    {
        val["hc.tags"] = ModelBase::toJson(m_Hc_tags);
    }
    if(m_Hc_mbean_nameIsSet)
    {
        val["hc.mbean.name"] = ModelBase::toJson(m_Hc_mbean_name);
    }
    if(m_Filter_tagsIsSet)
    {
        val["filter.tags"] = ModelBase::toJson(m_Filter_tags);
    }
    if(m_Filter_combineTagsWithOrIsSet)
    {
        val["filter.combineTagsWithOr"] = ModelBase::toJson(m_Filter_combineTagsWithOr);
    }
    

    return val;
}

void OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::fromJson(nlohmann::json& val)
{
    if(val.find("hc.name") != val.end())
    {
        if(!val["hc.name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["hc.name"]);
            setHcName( newItem );
        }
        
    }
    if(val.find("hc.tags") != val.end())
    {
        if(!val["hc.tags"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["hc.tags"]);
            setHcTags( newItem );
        }
        
    }
    if(val.find("hc.mbean.name") != val.end())
    {
        if(!val["hc.mbean.name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["hc.mbean.name"]);
            setHcMbeanName( newItem );
        }
        
    }
    if(val.find("filter.tags") != val.end())
    {
        if(!val["filter.tags"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["filter.tags"]);
            setFilterTags( newItem );
        }
        
    }
    if(val.find("filter.combineTagsWithOr") != val.end())
    {
        if(!val["filter.combineTagsWithOr"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["filter.combineTagsWithOr"]);
            setFilterCombineTagsWithOr( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::getHcName() const
{
    return m_Hc_name;
}
void OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::setHcName(ConfigNodePropertyString const& value)
{
    m_Hc_name = value;
    m_Hc_nameIsSet = true;
}
bool OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::hcNameIsSet() const
{
    return m_Hc_nameIsSet;
}
void OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::unsetHc_name()
{
    m_Hc_nameIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::getHcTags() const
{
    return m_Hc_tags;
}
void OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::setHcTags(ConfigNodePropertyArray const& value)
{
    m_Hc_tags = value;
    m_Hc_tagsIsSet = true;
}
bool OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::hcTagsIsSet() const
{
    return m_Hc_tagsIsSet;
}
void OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::unsetHc_tags()
{
    m_Hc_tagsIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::getHcMbeanName() const
{
    return m_Hc_mbean_name;
}
void OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::setHcMbeanName(ConfigNodePropertyString const& value)
{
    m_Hc_mbean_name = value;
    m_Hc_mbean_nameIsSet = true;
}
bool OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::hcMbeanNameIsSet() const
{
    return m_Hc_mbean_nameIsSet;
}
void OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::unsetHc_mbean_name()
{
    m_Hc_mbean_nameIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::getFilterTags() const
{
    return m_Filter_tags;
}
void OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::setFilterTags(ConfigNodePropertyArray const& value)
{
    m_Filter_tags = value;
    m_Filter_tagsIsSet = true;
}
bool OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::filterTagsIsSet() const
{
    return m_Filter_tagsIsSet;
}
void OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::unsetFilter_tags()
{
    m_Filter_tagsIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::getFilterCombineTagsWithOr() const
{
    return m_Filter_combineTagsWithOr;
}
void OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::setFilterCombineTagsWithOr(ConfigNodePropertyBoolean const& value)
{
    m_Filter_combineTagsWithOr = value;
    m_Filter_combineTagsWithOrIsSet = true;
}
bool OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::filterCombineTagsWithOrIsSet() const
{
    return m_Filter_combineTagsWithOrIsSet;
}
void OrgApacheSlingHcCoreImplCompositeHealthCheckProperties::unsetFilter_combineTagsWithOr()
{
    m_Filter_combineTagsWithOrIsSet = false;
}

}
}
}
}

