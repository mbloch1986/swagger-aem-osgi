/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties()
{
    m_Event_topicsIsSet = false;
    m_Event_filterIsSet = false;
    m_Translate_listener_typeIsSet = false;
    m_Translate_property_listIsSet = false;
    m_PoolSizeIsSet = false;
    m_MaxPoolSizeIsSet = false;
    m_QueueSizeIsSet = false;
    m_KeepAliveTimeIsSet = false;
}

ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::~ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties()
{
}

void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Event_topicsIsSet)
    {
        val[utility::conversions::to_string_t("event.topics")] = ModelBase::toJson(m_Event_topics);
    }
    if(m_Event_filterIsSet)
    {
        val[utility::conversions::to_string_t("event.filter")] = ModelBase::toJson(m_Event_filter);
    }
    if(m_Translate_listener_typeIsSet)
    {
        val[utility::conversions::to_string_t("translate.listener.type")] = ModelBase::toJson(m_Translate_listener_type);
    }
    if(m_Translate_property_listIsSet)
    {
        val[utility::conversions::to_string_t("translate.property.list")] = ModelBase::toJson(m_Translate_property_list);
    }
    if(m_PoolSizeIsSet)
    {
        val[utility::conversions::to_string_t("poolSize")] = ModelBase::toJson(m_PoolSize);
    }
    if(m_MaxPoolSizeIsSet)
    {
        val[utility::conversions::to_string_t("maxPoolSize")] = ModelBase::toJson(m_MaxPoolSize);
    }
    if(m_QueueSizeIsSet)
    {
        val[utility::conversions::to_string_t("queueSize")] = ModelBase::toJson(m_QueueSize);
    }
    if(m_KeepAliveTimeIsSet)
    {
        val[utility::conversions::to_string_t("keepAliveTime")] = ModelBase::toJson(m_KeepAliveTime);
    }

    return val;
}

void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("event.topics")))
    {
        if(!val[utility::conversions::to_string_t("event.topics")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("event.topics")]);
            setEventTopics( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("event.filter")))
    {
        if(!val[utility::conversions::to_string_t("event.filter")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("event.filter")]);
            setEventFilter( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("translate.listener.type")))
    {
        if(!val[utility::conversions::to_string_t("translate.listener.type")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("translate.listener.type")]);
            setTranslateListenerType( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("translate.property.list")))
    {
        if(!val[utility::conversions::to_string_t("translate.property.list")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("translate.property.list")]);
            setTranslatePropertyList( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("poolSize")))
    {
        if(!val[utility::conversions::to_string_t("poolSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("poolSize")]);
            setPoolSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxPoolSize")))
    {
        if(!val[utility::conversions::to_string_t("maxPoolSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxPoolSize")]);
            setMaxPoolSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queueSize")))
    {
        if(!val[utility::conversions::to_string_t("queueSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("queueSize")]);
            setQueueSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("keepAliveTime")))
    {
        if(!val[utility::conversions::to_string_t("keepAliveTime")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("keepAliveTime")]);
            setKeepAliveTime( newItem );
        }
    }
}

void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Event_topicsIsSet)
    {
        if (m_Event_topics.get())
        {
            m_Event_topics->toMultipart(multipart, utility::conversions::to_string_t("event.topics."));
        }
    }
    if(m_Event_filterIsSet)
    {
        if (m_Event_filter.get())
        {
            m_Event_filter->toMultipart(multipart, utility::conversions::to_string_t("event.filter."));
        }
    }
    if(m_Translate_listener_typeIsSet)
    {
        if (m_Translate_listener_type.get())
        {
            m_Translate_listener_type->toMultipart(multipart, utility::conversions::to_string_t("translate.listener.type."));
        }
    }
    if(m_Translate_property_listIsSet)
    {
        if (m_Translate_property_list.get())
        {
            m_Translate_property_list->toMultipart(multipart, utility::conversions::to_string_t("translate.property.list."));
        }
    }
    if(m_PoolSizeIsSet)
    {
        if (m_PoolSize.get())
        {
            m_PoolSize->toMultipart(multipart, utility::conversions::to_string_t("poolSize."));
        }
    }
    if(m_MaxPoolSizeIsSet)
    {
        if (m_MaxPoolSize.get())
        {
            m_MaxPoolSize->toMultipart(multipart, utility::conversions::to_string_t("maxPoolSize."));
        }
    }
    if(m_QueueSizeIsSet)
    {
        if (m_QueueSize.get())
        {
            m_QueueSize->toMultipart(multipart, utility::conversions::to_string_t("queueSize."));
        }
    }
    if(m_KeepAliveTimeIsSet)
    {
        if (m_KeepAliveTime.get())
        {
            m_KeepAliveTime->toMultipart(multipart, utility::conversions::to_string_t("keepAliveTime."));
        }
    }
}

void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("event.topics")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("event.topics")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("event.topics."));
            setEventTopics( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("event.filter")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("event.filter")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("event.filter."));
            setEventFilter( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("translate.listener.type")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("translate.listener.type")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("translate.listener.type."));
            setTranslateListenerType( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("translate.property.list")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("translate.property.list")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("translate.property.list."));
            setTranslatePropertyList( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("poolSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("poolSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("poolSize."));
            setPoolSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxPoolSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxPoolSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxPoolSize."));
            setMaxPoolSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queueSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queueSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queueSize."));
            setQueueSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("keepAliveTime")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("keepAliveTime")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("keepAliveTime."));
            setKeepAliveTime( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getEventTopics() const
{
    return m_Event_topics;
}


void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setEventTopics(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Event_topics = value;
    m_Event_topicsIsSet = true;
}
bool ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::eventTopicsIsSet() const
{
    return m_Event_topicsIsSet;
}

void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::unsetEvent_topics()
{
    m_Event_topicsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getEventFilter() const
{
    return m_Event_filter;
}


void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setEventFilter(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Event_filter = value;
    m_Event_filterIsSet = true;
}
bool ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::eventFilterIsSet() const
{
    return m_Event_filterIsSet;
}

void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::unsetEvent_filter()
{
    m_Event_filterIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getTranslateListenerType() const
{
    return m_Translate_listener_type;
}


void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setTranslateListenerType(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Translate_listener_type = value;
    m_Translate_listener_typeIsSet = true;
}
bool ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::translateListenerTypeIsSet() const
{
    return m_Translate_listener_typeIsSet;
}

void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::unsetTranslate_listener_type()
{
    m_Translate_listener_typeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getTranslatePropertyList() const
{
    return m_Translate_property_list;
}


void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setTranslatePropertyList(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Translate_property_list = value;
    m_Translate_property_listIsSet = true;
}
bool ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::translatePropertyListIsSet() const
{
    return m_Translate_property_listIsSet;
}

void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::unsetTranslate_property_list()
{
    m_Translate_property_listIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getPoolSize() const
{
    return m_PoolSize;
}


void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_PoolSize = value;
    m_PoolSizeIsSet = true;
}
bool ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::poolSizeIsSet() const
{
    return m_PoolSizeIsSet;
}

void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::unsetPoolSize()
{
    m_PoolSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getMaxPoolSize() const
{
    return m_MaxPoolSize;
}


void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setMaxPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxPoolSize = value;
    m_MaxPoolSizeIsSet = true;
}
bool ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::maxPoolSizeIsSet() const
{
    return m_MaxPoolSizeIsSet;
}

void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::unsetMaxPoolSize()
{
    m_MaxPoolSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getQueueSize() const
{
    return m_QueueSize;
}


void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setQueueSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_QueueSize = value;
    m_QueueSizeIsSet = true;
}
bool ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::queueSizeIsSet() const
{
    return m_QueueSizeIsSet;
}

void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::unsetQueueSize()
{
    m_QueueSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getKeepAliveTime() const
{
    return m_KeepAliveTime;
}


void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setKeepAliveTime(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_KeepAliveTime = value;
    m_KeepAliveTimeIsSet = true;
}
bool ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::keepAliveTimeIsSet() const
{
    return m_KeepAliveTimeIsSet;
}

void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::unsetKeepAliveTime()
{
    m_KeepAliveTimeIsSet = false;
}

}
}
}
}

