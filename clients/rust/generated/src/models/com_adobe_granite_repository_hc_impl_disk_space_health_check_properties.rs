/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties {
  #[serde(rename = "hc.tags")]
  hc_tags: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "disk.space.warn.threshold")]
  disk_space_warn_threshold: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "disk.space.error.threshold")]
  disk_space_error_threshold: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties {
  pub fn new() -> ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties {
    ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties {
      hc_tags: None,
      disk_space_warn_threshold: None,
      disk_space_error_threshold: None
    }
  }

  pub fn set_hc_tags(&mut self, hc_tags: ::models::ConfigNodePropertyArray) {
    self.hc_tags = Some(hc_tags);
  }

  pub fn with_hc_tags(mut self, hc_tags: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties {
    self.hc_tags = Some(hc_tags);
    self
  }

  pub fn hc_tags(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.hc_tags.as_ref()
  }

  pub fn reset_hc_tags(&mut self) {
    self.hc_tags = None;
  }

  pub fn set_disk_space_warn_threshold(&mut self, disk_space_warn_threshold: ::models::ConfigNodePropertyInteger) {
    self.disk_space_warn_threshold = Some(disk_space_warn_threshold);
  }

  pub fn with_disk_space_warn_threshold(mut self, disk_space_warn_threshold: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties {
    self.disk_space_warn_threshold = Some(disk_space_warn_threshold);
    self
  }

  pub fn disk_space_warn_threshold(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.disk_space_warn_threshold.as_ref()
  }

  pub fn reset_disk_space_warn_threshold(&mut self) {
    self.disk_space_warn_threshold = None;
  }

  pub fn set_disk_space_error_threshold(&mut self, disk_space_error_threshold: ::models::ConfigNodePropertyInteger) {
    self.disk_space_error_threshold = Some(disk_space_error_threshold);
  }

  pub fn with_disk_space_error_threshold(mut self, disk_space_error_threshold: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties {
    self.disk_space_error_threshold = Some(disk_space_error_threshold);
    self
  }

  pub fn disk_space_error_threshold(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.disk_space_error_threshold.as_ref()
  }

  pub fn reset_disk_space_error_threshold(&mut self) {
    self.disk_space_error_threshold = None;
  }

}



