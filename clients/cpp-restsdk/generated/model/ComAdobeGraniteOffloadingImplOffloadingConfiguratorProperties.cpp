/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties()
{
    m_Offloading_transporterIsSet = false;
    m_Offloading_cleanup_payloadIsSet = false;
}

ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::~ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties()
{
}

void ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Offloading_transporterIsSet)
    {
        val[utility::conversions::to_string_t("offloading.transporter")] = ModelBase::toJson(m_Offloading_transporter);
    }
    if(m_Offloading_cleanup_payloadIsSet)
    {
        val[utility::conversions::to_string_t("offloading.cleanup.payload")] = ModelBase::toJson(m_Offloading_cleanup_payload);
    }

    return val;
}

void ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("offloading.transporter")))
    {
        if(!val[utility::conversions::to_string_t("offloading.transporter")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("offloading.transporter")]);
            setOffloadingTransporter( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("offloading.cleanup.payload")))
    {
        if(!val[utility::conversions::to_string_t("offloading.cleanup.payload")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("offloading.cleanup.payload")]);
            setOffloadingCleanupPayload( newItem );
        }
    }
}

void ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Offloading_transporterIsSet)
    {
        if (m_Offloading_transporter.get())
        {
            m_Offloading_transporter->toMultipart(multipart, utility::conversions::to_string_t("offloading.transporter."));
        }
    }
    if(m_Offloading_cleanup_payloadIsSet)
    {
        if (m_Offloading_cleanup_payload.get())
        {
            m_Offloading_cleanup_payload->toMultipart(multipart, utility::conversions::to_string_t("offloading.cleanup.payload."));
        }
    }
}

void ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("offloading.transporter")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("offloading.transporter")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("offloading.transporter."));
            setOffloadingTransporter( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("offloading.cleanup.payload")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("offloading.cleanup.payload")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("offloading.cleanup.payload."));
            setOffloadingCleanupPayload( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::getOffloadingTransporter() const
{
    return m_Offloading_transporter;
}


void ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::setOffloadingTransporter(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Offloading_transporter = value;
    m_Offloading_transporterIsSet = true;
}
bool ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::offloadingTransporterIsSet() const
{
    return m_Offloading_transporterIsSet;
}

void ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::unsetOffloading_transporter()
{
    m_Offloading_transporterIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::getOffloadingCleanupPayload() const
{
    return m_Offloading_cleanup_payload;
}


void ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::setOffloadingCleanupPayload(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Offloading_cleanup_payload = value;
    m_Offloading_cleanup_payloadIsSet = true;
}
bool ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::offloadingCleanupPayloadIsSet() const
{
    return m_Offloading_cleanup_payloadIsSet;
}

void ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::unsetOffloading_cleanup_payload()
{
    m_Offloading_cleanup_payloadIsSet = false;
}

}
}
}
}

