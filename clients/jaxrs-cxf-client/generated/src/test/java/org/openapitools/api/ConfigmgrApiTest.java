/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.openapitools.api;

import org.openapitools.model.AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo;
import org.openapitools.model.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo;
import org.openapitools.model.AnalyticsComponentQueryCacheServiceInfo;
import org.openapitools.model.ApacheSlingHealthCheckResultHTMLSerializerInfo;
import java.math.BigDecimal;
import org.openapitools.model.ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo;
import org.openapitools.model.ComAdobeAemTransactionCoreImplTransactionRecorderInfo;
import org.openapitools.model.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo;
import org.openapitools.model.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo;
import org.openapitools.model.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo;
import org.openapitools.model.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo;
import org.openapitools.model.ComAdobeCqAccountApiAccountManagementServiceInfo;
import org.openapitools.model.ComAdobeCqAccountImplAccountManagementServletInfo;
import org.openapitools.model.ComAdobeCqAddressImplLocationLocationListServletInfo;
import org.openapitools.model.ComAdobeCqAuditPurgeDamInfo;
import org.openapitools.model.ComAdobeCqAuditPurgePagesInfo;
import org.openapitools.model.ComAdobeCqAuditPurgeReplicationInfo;
import org.openapitools.model.ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo;
import org.openapitools.model.ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo;
import org.openapitools.model.ComAdobeCqCdnRewriterImplCDNRewriterInfo;
import org.openapitools.model.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo;
import org.openapitools.model.ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo;
import org.openapitools.model.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo;
import org.openapitools.model.ComAdobeCqCommerceImplAssetStaticImageHandlerInfo;
import org.openapitools.model.ComAdobeCqCommerceImplAssetVideoHandlerInfo;
import org.openapitools.model.ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo;
import org.openapitools.model.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo;
import org.openapitools.model.ComAdobeCqCommercePimImplPageEventListenerInfo;
import org.openapitools.model.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo;
import org.openapitools.model.ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo;
import org.openapitools.model.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo;
import org.openapitools.model.ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplComponentComponentConfigImplInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplConfFeatureConfigImplInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo;
import org.openapitools.model.ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo;
import org.openapitools.model.ComAdobeCqDamDmProcessImagePTiffManagerImplInfo;
import org.openapitools.model.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo;
import org.openapitools.model.ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo;
import org.openapitools.model.ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo;
import org.openapitools.model.ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo;
import org.openapitools.model.ComAdobeCqDamS7imagingImplIsImageServerComponentInfo;
import org.openapitools.model.ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo;
import org.openapitools.model.ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo;
import org.openapitools.model.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo;
import org.openapitools.model.ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo;
import org.openapitools.model.ComAdobeCqDeserfwImplDeserializationFirewallImplInfo;
import org.openapitools.model.ComAdobeCqDtmImplServiceDTMWebServiceImplInfo;
import org.openapitools.model.ComAdobeCqDtmImplServletsDTMDeployHookServletInfo;
import org.openapitools.model.ComAdobeCqDtmReactorImplServiceWebServiceImplInfo;
import org.openapitools.model.ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo;
import org.openapitools.model.ComAdobeCqHcContentPackagesHealthCheckInfo;
import org.openapitools.model.ComAdobeCqHistoryImplHistoryRequestFilterInfo;
import org.openapitools.model.ComAdobeCqHistoryImplHistoryServiceImplInfo;
import org.openapitools.model.ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo;
import org.openapitools.model.ComAdobeCqProjectsImplServletProjectImageServletInfo;
import org.openapitools.model.ComAdobeCqProjectsPurgeSchedulerInfo;
import org.openapitools.model.ComAdobeCqScheduledExporterImplScheduledExporterImplInfo;
import org.openapitools.model.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensDeviceImplDeviceServiceInfo;
import org.openapitools.model.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo;
import org.openapitools.model.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo;
import org.openapitools.model.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo;
import org.openapitools.model.ComAdobeCqScreensImplScreensChannelPostProcessorInfo;
import org.openapitools.model.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo;
import org.openapitools.model.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo;
import org.openapitools.model.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo;
import org.openapitools.model.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo;
import org.openapitools.model.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo;
import org.openapitools.model.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo;
import org.openapitools.model.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo;
import org.openapitools.model.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo;
import org.openapitools.model.ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo;
import org.openapitools.model.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo;
import org.openapitools.model.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo;
import org.openapitools.model.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo;
import org.openapitools.model.ComAdobeCqSocialCalendarServletsTimeZoneServletInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo;
import org.openapitools.model.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo;
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo;
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo;
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo;
import org.openapitools.model.ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo;
import org.openapitools.model.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo;
import org.openapitools.model.ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo;
import org.openapitools.model.ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo;
import org.openapitools.model.ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo;
import org.openapitools.model.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo;
import org.openapitools.model.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo;
import org.openapitools.model.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo;
import org.openapitools.model.ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo;
import org.openapitools.model.ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo;
import org.openapitools.model.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo;
import org.openapitools.model.ComAdobeCqSocialGroupImplGroupServiceImplInfo;
import org.openapitools.model.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo;
import org.openapitools.model.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo;
import org.openapitools.model.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo;
import org.openapitools.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo;
import org.openapitools.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo;
import org.openapitools.model.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo;
import org.openapitools.model.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo;
import org.openapitools.model.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo;
import org.openapitools.model.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo;
import org.openapitools.model.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo;
import org.openapitools.model.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo;
import org.openapitools.model.ComAdobeCqSocialNotificationsImplMentionsRouterInfo;
import org.openapitools.model.ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo;
import org.openapitools.model.ComAdobeCqSocialNotificationsImplNotificationsRouterInfo;
import org.openapitools.model.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo;
import org.openapitools.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo;
import org.openapitools.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo;
import org.openapitools.model.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo;
import org.openapitools.model.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo;
import org.openapitools.model.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo;
import org.openapitools.model.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo;
import org.openapitools.model.ComAdobeCqSocialScoringImplScoringEventListenerInfo;
import org.openapitools.model.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo;
import org.openapitools.model.ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo;
import org.openapitools.model.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo;
import org.openapitools.model.ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo;
import org.openapitools.model.ComAdobeCqSocialSrpImplSocialSolrConnectorInfo;
import org.openapitools.model.ComAdobeCqSocialSyncImplDiffChangesObserverInfo;
import org.openapitools.model.ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo;
import org.openapitools.model.ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo;
import org.openapitools.model.ComAdobeCqSocialSyncImplUserSyncListenerImplInfo;
import org.openapitools.model.ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo;
import org.openapitools.model.ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo;
import org.openapitools.model.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo;
import org.openapitools.model.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo;
import org.openapitools.model.ComAdobeCqSocialUserImplTransportHttpToPublisherInfo;
import org.openapitools.model.ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo;
import org.openapitools.model.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo;
import org.openapitools.model.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo;
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo;
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo;
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo;
import org.openapitools.model.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo;
import org.openapitools.model.ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo;
import org.openapitools.model.ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo;
import org.openapitools.model.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo;
import org.openapitools.model.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo;
import org.openapitools.model.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo;
import org.openapitools.model.ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo;
import org.openapitools.model.ComAdobeFormsCommonServiceImplDefaultDataProviderInfo;
import org.openapitools.model.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo;
import org.openapitools.model.ComAdobeFormsCommonServletTempCleanUpTaskInfo;
import org.openapitools.model.ComAdobeGraniteAcpPlatformPlatformServletInfo;
import org.openapitools.model.ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo;
import org.openapitools.model.ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo;
import org.openapitools.model.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo;
import org.openapitools.model.ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo;
import org.openapitools.model.ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplIMSProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthImsInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthAccesstokenProviderInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplGithubProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplGraniteProviderInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteAuthOauthProviderInfo;
import org.openapitools.model.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo;
import org.openapitools.model.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo;
import org.openapitools.model.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo;
import org.openapitools.model.ComAdobeGraniteCompatrouterImplRoutingConfigInfo;
import org.openapitools.model.ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo;
import org.openapitools.model.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo;
import org.openapitools.model.ComAdobeGraniteContexthubImplContextHubImplInfo;
import org.openapitools.model.ComAdobeGraniteCorsImplCORSPolicyImplInfo;
import org.openapitools.model.ComAdobeGraniteCsrfImplCSRFFilterInfo;
import org.openapitools.model.ComAdobeGraniteCsrfImplCSRFServletInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo;
import org.openapitools.model.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo;
import org.openapitools.model.ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo;
import org.openapitools.model.ComAdobeGraniteFragsImplRandomFeatureInfo;
import org.openapitools.model.ComAdobeGraniteHttpcacheFileFileCacheStoreInfo;
import org.openapitools.model.ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo;
import org.openapitools.model.ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo;
import org.openapitools.model.ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo;
import org.openapitools.model.ComAdobeGraniteInfocollectorInfoCollectorInfo;
import org.openapitools.model.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo;
import org.openapitools.model.ComAdobeGraniteLicenseImplLicenseCheckFilterInfo;
import org.openapitools.model.ComAdobeGraniteLoggingImplLogAnalyserImplInfo;
import org.openapitools.model.ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo;
import org.openapitools.model.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo;
import org.openapitools.model.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo;
import org.openapitools.model.ComAdobeGraniteMonitoringImplScriptConfigImplInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo;
import org.openapitools.model.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo;
import org.openapitools.model.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo;
import org.openapitools.model.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo;
import org.openapitools.model.ComAdobeGraniteOptoutImplOptOutServiceImplInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo;
import org.openapitools.model.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryImplCommitStatsConfigInfo;
import org.openapitools.model.ComAdobeGraniteRepositoryServiceUserConfigurationInfo;
import org.openapitools.model.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo;
import org.openapitools.model.ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo;
import org.openapitools.model.ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo;
import org.openapitools.model.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo;
import org.openapitools.model.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo;
import org.openapitools.model.ComAdobeGraniteRestImplServletDefaultGETServletInfo;
import org.openapitools.model.ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo;
import org.openapitools.model.ComAdobeGraniteSecurityUserUserPropertiesServiceInfo;
import org.openapitools.model.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo;
import org.openapitools.model.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo;
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo;
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo;
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo;
import org.openapitools.model.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo;
import org.openapitools.model.ComAdobeGraniteThreaddumpThreadDumpCollectorInfo;
import org.openapitools.model.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo;
import org.openapitools.model.ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo;
import org.openapitools.model.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreJobJobHandlerInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCorePayloadMapCacheInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreWorkflowConfigInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo;
import org.openapitools.model.ComAdobeGraniteWorkflowPurgeSchedulerInfo;
import org.openapitools.model.ComAdobeOctopusNcommBootstrapInfo;
import org.openapitools.model.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo;
import org.openapitools.model.ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo;
import org.openapitools.model.ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo;
import org.openapitools.model.ComDayCommonsHttpclientInfo;
import org.openapitools.model.ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo;
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo;
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo;
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo;
import org.openapitools.model.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo;
import org.openapitools.model.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo;
import org.openapitools.model.ComDayCqAuthImplCugCugSupportImplInfo;
import org.openapitools.model.ComDayCqAuthImplLoginSelectorHandlerInfo;
import org.openapitools.model.ComDayCqCommonsImplExternalizerImplInfo;
import org.openapitools.model.ComDayCqCommonsServletsRootMappingServletInfo;
import org.openapitools.model.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo;
import org.openapitools.model.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo;
import org.openapitools.model.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo;
import org.openapitools.model.ComDayCqContentsyncImplContentSyncManagerImplInfo;
import org.openapitools.model.ComDayCqDamCommonsHandlerStandardImageHandlerInfo;
import org.openapitools.model.ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo;
import org.openapitools.model.ComDayCqDamCommonsUtilImplAssetCacheImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo;
import org.openapitools.model.ComDayCqDamCoreImplAssetMoveListenerInfo;
import org.openapitools.model.ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo;
import org.openapitools.model.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo;
import org.openapitools.model.ComDayCqDamCoreImplDamChangeEventListenerInfo;
import org.openapitools.model.ComDayCqDamCoreImplDamEventPurgeServiceInfo;
import org.openapitools.model.ComDayCqDamCoreImplDamEventRecorderImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplEventDamEventAuditListenerInfo;
import org.openapitools.model.ComDayCqDamCoreImplExpiryNotificationJobImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo;
import org.openapitools.model.ComDayCqDamCoreImplGfxCommonsGfxRendererInfo;
import org.openapitools.model.ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplHandlerJpegHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo;
import org.openapitools.model.ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo;
import org.openapitools.model.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo;
import org.openapitools.model.ComDayCqDamCoreImplLightboxLightboxServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo;
import org.openapitools.model.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo;
import org.openapitools.model.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplMissingMetadataNotificationJobInfo;
import org.openapitools.model.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo;
import org.openapitools.model.ComDayCqDamCoreImplProcessTextExtractionProcessInfo;
import org.openapitools.model.ComDayCqDamCoreImplRenditionMakerImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplReportsReportExportServiceInfo;
import org.openapitools.model.ComDayCqDamCoreImplReportsReportPurgeServiceInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletAssetDownloadServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletAssetStatusServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletAssetXMPSearchServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletBatchMetadataServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletBinaryProviderServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletCollectionServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletCollectionsServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletCompanionServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletCreateAssetServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletDamContentDispositionFilterInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletGuidLookupFilterInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletHealthCheckServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletMetadataGetServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplServletResourceCollectionServletInfo;
import org.openapitools.model.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo;
import org.openapitools.model.ComDayCqDamCoreImplUnzipUnzipConfigInfo;
import org.openapitools.model.ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo;
import org.openapitools.model.ComDayCqDamCoreProcessExtractMetadataProcessInfo;
import org.openapitools.model.ComDayCqDamCoreProcessMetadataProcessorProcessInfo;
import org.openapitools.model.ComDayCqDamHandlerFfmpegLocatorImplInfo;
import org.openapitools.model.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo;
import org.openapitools.model.ComDayCqDamHandlerStandardPdfPdfHandlerInfo;
import org.openapitools.model.ComDayCqDamHandlerStandardPsPostScriptHandlerInfo;
import org.openapitools.model.ComDayCqDamHandlerStandardPsdPsdHandlerInfo;
import org.openapitools.model.ComDayCqDamIdsImplIDSJobProcessorInfo;
import org.openapitools.model.ComDayCqDamIdsImplIDSPoolManagerImplInfo;
import org.openapitools.model.ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo;
import org.openapitools.model.ComDayCqDamInddImplServletSnippetCreationServletInfo;
import org.openapitools.model.ComDayCqDamInddProcessINDDMediaExtractProcessInfo;
import org.openapitools.model.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo;
import org.openapitools.model.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo;
import org.openapitools.model.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo;
import org.openapitools.model.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo;
import org.openapitools.model.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo;
import org.openapitools.model.ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo;
import org.openapitools.model.ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo;
import org.openapitools.model.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo;
import org.openapitools.model.ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo;
import org.openapitools.model.ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo;
import org.openapitools.model.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7APIClientImplInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo;
import org.openapitools.model.ComDayCqDamScene7ImplScene7UploadServiceImplInfo;
import org.openapitools.model.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo;
import org.openapitools.model.ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo;
import org.openapitools.model.ComDayCqDamVideoImplServletVideoTestServletInfo;
import org.openapitools.model.ComDayCqExtwidgetServletsImageSpriteServletInfo;
import org.openapitools.model.ComDayCqImageInternalFontFontHelperInfo;
import org.openapitools.model.ComDayCqJcrclustersupportClusterStartLevelControllerInfo;
import org.openapitools.model.ComDayCqMailerDefaultMailServiceInfo;
import org.openapitools.model.ComDayCqMailerImplCqMailingServiceInfo;
import org.openapitools.model.ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo;
import org.openapitools.model.ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo;
import org.openapitools.model.ComDayCqMcmCampaignImplIntegrationConfigImplInfo;
import org.openapitools.model.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo;
import org.openapitools.model.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo;
import org.openapitools.model.ComDayCqMcmImplMCMConfigurationInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo;
import org.openapitools.model.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo;
import org.openapitools.model.ComDayCqNotificationImplNotificationServiceImplInfo;
import org.openapitools.model.ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo;
import org.openapitools.model.ComDayCqPollingImporterImplManagedPollConfigImplInfo;
import org.openapitools.model.ComDayCqPollingImporterImplManagedPollingImporterImplInfo;
import org.openapitools.model.ComDayCqPollingImporterImplPollingImporterImplInfo;
import org.openapitools.model.ComDayCqReplicationAuditReplicationEventListenerInfo;
import org.openapitools.model.ComDayCqReplicationContentStaticContentBuilderInfo;
import org.openapitools.model.ComDayCqReplicationImplAgentManagerImplInfo;
import org.openapitools.model.ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo;
import org.openapitools.model.ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo;
import org.openapitools.model.ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo;
import org.openapitools.model.ComDayCqReplicationImplReplicationReceiverImplInfo;
import org.openapitools.model.ComDayCqReplicationImplReplicatorImplInfo;
import org.openapitools.model.ComDayCqReplicationImplReverseReplicatorInfo;
import org.openapitools.model.ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo;
import org.openapitools.model.ComDayCqReplicationImplTransportHttpInfo;
import org.openapitools.model.ComDayCqReportingImplCacheCacheImplInfo;
import org.openapitools.model.ComDayCqReportingImplConfigServiceImplInfo;
import org.openapitools.model.ComDayCqReportingImplRLogAnalyzerInfo;
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo;
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo;
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo;
import org.openapitools.model.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo;
import org.openapitools.model.ComDayCqRewriterProcessorImplHtmlParserFactoryInfo;
import org.openapitools.model.ComDayCqSearchImplBuilderQueryBuilderImplInfo;
import org.openapitools.model.ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo;
import org.openapitools.model.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo;
import org.openapitools.model.ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo;
import org.openapitools.model.ComDayCqSecurityACLSetupInfo;
import org.openapitools.model.ComDayCqStatisticsImplStatisticsServiceImplInfo;
import org.openapitools.model.ComDayCqTaggingImplJcrTagManagerFactoryImplInfo;
import org.openapitools.model.ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo;
import org.openapitools.model.ComDayCqTaggingImplTagGarbageCollectorInfo;
import org.openapitools.model.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo;
import org.openapitools.model.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo;
import org.openapitools.model.ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplCommandsWCMCommandServletInfo;
import org.openapitools.model.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplEventPageEventAuditListenerInfo;
import org.openapitools.model.ComDayCqWcmCoreImplEventPagePostProcessorInfo;
import org.openapitools.model.ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo;
import org.openapitools.model.ComDayCqWcmCoreImplEventTemplatePostProcessorInfo;
import org.openapitools.model.ComDayCqWcmCoreImplLanguageManagerImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsFindReplaceServletInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsReferenceSearchServletInfo;
import org.openapitools.model.ComDayCqWcmCoreImplServletsThumbnailServletInfo;
import org.openapitools.model.ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo;
import org.openapitools.model.ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplVersionManagerImplInfo;
import org.openapitools.model.ComDayCqWcmCoreImplVersionPurgeTaskInfo;
import org.openapitools.model.ComDayCqWcmCoreImplWCMDebugFilterInfo;
import org.openapitools.model.ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo;
import org.openapitools.model.ComDayCqWcmCoreImplWarpTimeWarpFilterInfo;
import org.openapitools.model.ComDayCqWcmCoreMvtMVTStatisticsImplInfo;
import org.openapitools.model.ComDayCqWcmCoreStatsPageViewStatisticsImplInfo;
import org.openapitools.model.ComDayCqWcmCoreWCMRequestFilterInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterDesignPackageImporterInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo;
import org.openapitools.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo;
import org.openapitools.model.ComDayCqWcmFoundationFormsImplFormChooserServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo;
import org.openapitools.model.ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationFormsImplMailServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationImplHTTPAuthHandlerInfo;
import org.openapitools.model.ComDayCqWcmFoundationImplPageImpressionsTrackerInfo;
import org.openapitools.model.ComDayCqWcmFoundationImplPageRedirectServletInfo;
import org.openapitools.model.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo;
import org.openapitools.model.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo;
import org.openapitools.model.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo;
import org.openapitools.model.ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo;
import org.openapitools.model.ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo;
import org.openapitools.model.ComDayCqWcmMsmImplRolloutManagerImplInfo;
import org.openapitools.model.ComDayCqWcmMsmImplServletsAuditLogServletInfo;
import org.openapitools.model.ComDayCqWcmNotificationEmailImplEmailChannelInfo;
import org.openapitools.model.ComDayCqWcmNotificationImplNotificationManagerImplInfo;
import org.openapitools.model.ComDayCqWcmScriptingImplBVPManagerInfo;
import org.openapitools.model.ComDayCqWcmUndoUndoConfigInfo;
import org.openapitools.model.ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo;
import org.openapitools.model.ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo;
import org.openapitools.model.ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo;
import org.openapitools.model.ComDayCqWidgetImplHtmlLibraryManagerImplInfo;
import org.openapitools.model.ComDayCqWidgetImplWidgetExtensionProviderImplInfo;
import org.openapitools.model.ComDayCqWorkflowImplEmailEMailNotificationServiceInfo;
import org.openapitools.model.ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo;
import org.openapitools.model.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo;
import org.openapitools.model.ComDayCrxSecurityTokenImplTokenCleanupTaskInfo;
import org.openapitools.model.GuideLocalizationServiceInfo;
import org.openapitools.model.MessagingUserComponentFactoryInfo;
import org.openapitools.model.OrgApacheAriesJmxFrameworkStateConfigInfo;
import org.openapitools.model.OrgApacheFelixEventadminImplEventAdminInfo;
import org.openapitools.model.OrgApacheFelixHttpInfo;
import org.openapitools.model.OrgApacheFelixHttpSslfilterSslFilterInfo;
import org.openapitools.model.OrgApacheFelixJaasConfigurationFactoryInfo;
import org.openapitools.model.OrgApacheFelixJaasConfigurationSpiInfo;
import org.openapitools.model.OrgApacheFelixScrScrServiceInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplComponentsCheckInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplServicesCheckInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo;
import org.openapitools.model.OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo;
import org.openapitools.model.OrgApacheFelixSystemreadySystemReadyMonitorInfo;
import org.openapitools.model.OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo;
import org.openapitools.model.OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo;
import org.openapitools.model.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo;
import org.openapitools.model.OrgApacheHttpProxyconfiguratorInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo;
import org.openapitools.model.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo;
import org.openapitools.model.OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo;
import org.openapitools.model.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo;
import org.openapitools.model.OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo;
import org.openapitools.model.OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo;
import org.openapitools.model.OrgApacheSlingAuthCoreImplLogoutServletInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplConfigurationResolverImplInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo;
import org.openapitools.model.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo;
import org.openapitools.model.OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo;
import org.openapitools.model.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo;
import org.openapitools.model.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo;
import org.openapitools.model.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo;
import org.openapitools.model.OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo;
import org.openapitools.model.OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo;
import org.openapitools.model.OrgApacheSlingCommonsLogLogManagerInfo;
import org.openapitools.model.OrgApacheSlingCommonsMetricsInternalLogReporterInfo;
import org.openapitools.model.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo;
import org.openapitools.model.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo;
import org.openapitools.model.OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo;
import org.openapitools.model.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo;
import org.openapitools.model.OrgApacheSlingDatasourceDataSourceFactoryInfo;
import org.openapitools.model.OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo;
import org.openapitools.model.OrgApacheSlingDiscoveryOakConfigInfo;
import org.openapitools.model.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo;
import org.openapitools.model.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo;
import org.openapitools.model.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo;
import org.openapitools.model.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo;
import org.openapitools.model.OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo;
import org.openapitools.model.OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo;
import org.openapitools.model.OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo;
import org.openapitools.model.OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo;
import org.openapitools.model.OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo;
import org.openapitools.model.OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo;
import org.openapitools.model.OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo;
import org.openapitools.model.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo;
import org.openapitools.model.OrgApacheSlingEngineImplLogRequestLoggerInfo;
import org.openapitools.model.OrgApacheSlingEngineImplLogRequestLoggerServiceInfo;
import org.openapitools.model.OrgApacheSlingEngineImplSlingMainServletInfo;
import org.openapitools.model.OrgApacheSlingEngineParametersInfo;
import org.openapitools.model.OrgApacheSlingEventImplEventingThreadPoolInfo;
import org.openapitools.model.OrgApacheSlingEventImplJobsDefaultJobManagerInfo;
import org.openapitools.model.OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo;
import org.openapitools.model.OrgApacheSlingEventImplJobsJobConsumerManagerInfo;
import org.openapitools.model.OrgApacheSlingEventJobsQueueConfigurationInfo;
import org.openapitools.model.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo;
import org.openapitools.model.OrgApacheSlingFeatureflagsFeatureInfo;
import org.openapitools.model.OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo;
import org.openapitools.model.OrgApacheSlingHapiImplHApiUtilImplInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplCompositeHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplScriptableHealthCheckInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo;
import org.openapitools.model.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo;
import org.openapitools.model.OrgApacheSlingI18nImplI18NFilterInfo;
import org.openapitools.model.OrgApacheSlingI18nImplJcrResourceBundleProviderInfo;
import org.openapitools.model.OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo;
import org.openapitools.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo;
import org.openapitools.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo;
import org.openapitools.model.OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo;
import org.openapitools.model.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo;
import org.openapitools.model.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo;
import org.openapitools.model.OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo;
import org.openapitools.model.OrgApacheSlingJcrRepoinitRepositoryInitializerInfo;
import org.openapitools.model.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo;
import org.openapitools.model.OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo;
import org.openapitools.model.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo;
import org.openapitools.model.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo;
import org.openapitools.model.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo;
import org.openapitools.model.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo;
import org.openapitools.model.OrgApacheSlingJmxProviderImplJMXResourceProviderInfo;
import org.openapitools.model.OrgApacheSlingModelsImplModelAdapterFactoryInfo;
import org.openapitools.model.OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo;
import org.openapitools.model.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo;
import org.openapitools.model.OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo;
import org.openapitools.model.OrgApacheSlingResourcemergerPickerOverridingInfo;
import org.openapitools.model.OrgApacheSlingScriptingCoreImplScriptCacheImplInfo;
import org.openapitools.model.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo;
import org.openapitools.model.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo;
import org.openapitools.model.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo;
import org.openapitools.model.OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo;
import org.openapitools.model.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo;
import org.openapitools.model.OrgApacheSlingSecurityImplContentDispositionFilterInfo;
import org.openapitools.model.OrgApacheSlingSecurityImplReferrerFilterInfo;
import org.openapitools.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo;
import org.openapitools.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo;
import org.openapitools.model.OrgApacheSlingServletsGetDefaultGetServletInfo;
import org.openapitools.model.OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo;
import org.openapitools.model.OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo;
import org.openapitools.model.OrgApacheSlingServletsPostImplSlingPostServletInfo;
import org.openapitools.model.OrgApacheSlingServletsResolverSlingServletResolverInfo;
import org.openapitools.model.OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo;
import org.openapitools.model.OrgApacheSlingStartupfilterImplStartupFilterImplInfo;
import org.openapitools.model.OrgApacheSlingTenantInternalTenantProviderImplInfo;
import org.openapitools.model.OrgApacheSlingTracerInternalLogTracerInfo;
import org.openapitools.model.OrgApacheSlingXssImplXSSFilterImplInfo;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * <p>Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * API tests for ConfigmgrApi 
 */
public class ConfigmgrApiTest {


    private ConfigmgrApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("http://localhost", ConfigmgrApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adaptiveFormAndInteractiveCommunicationWebChannelConfigurationTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean showPlaceholder = null;
        Integer maximumCacheEntries = null;
        String afScriptingCompatversion = null;
        Boolean makeFileNameUnique = null;
        Boolean generatingCompliantData = null;
        //AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo response = api.adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(post, apply, delete, action, $location, propertylist, showPlaceholder, maximumCacheEntries, afScriptingCompatversion, makeFileNameUnique, generatingCompliantData);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fontList = null;
        //AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo response = api.adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(post, apply, delete, action, $location, propertylist, fontList);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyticsComponentQueryCacheServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqAnalyticsComponentQueryCacheSize = null;
        //AnalyticsComponentQueryCacheServiceInfo response = api.analyticsComponentQueryCacheService(post, apply, delete, action, $location, propertylist, cqAnalyticsComponentQueryCacheSize);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apacheSlingHealthCheckResultHTMLSerializerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String styleString = null;
        //ApacheSlingHealthCheckResultHTMLSerializerInfo response = api.apacheSlingHealthCheckResultHTMLSerializer(post, apply, delete, action, $location, propertylist, styleString);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean formsManagerConfigIncludeOOTBTemplates = null;
        Boolean formsManagerConfigIncludeDeprecatedTemplates = null;
        //ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo response = api.comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(post, apply, delete, action, $location, propertylist, formsManagerConfigIncludeOOTBTemplates, formsManagerConfigIncludeDeprecatedTemplates);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeAemTransactionCoreImplTransactionRecorderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean isTransactionRecordingEnabled = null;
        //ComAdobeAemTransactionCoreImplTransactionRecorderInfo response = api.comAdobeAemTransactionCoreImplTransactionRecorder(post, apply, delete, action, $location, propertylist, isTransactionRecordingEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        //ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo response = api.comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        //ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo response = api.comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> preUpgradeMaintenanceTasks = null;
        List<String> preUpgradeHcTags = null;
        //ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo response = api.comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(post, apply, delete, action, $location, propertylist, preUpgradeMaintenanceTasks, preUpgradeHcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String rootPath = null;
        Boolean fixInconsistencies = null;
        //ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo response = api.comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(post, apply, delete, action, $location, propertylist, rootPath, fixInconsistencies);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqAccountApiAccountManagementServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqAccountmanagerTokenValidityPeriod = null;
        String cqAccountmanagerConfigRequestnewaccountMail = null;
        String cqAccountmanagerConfigRequestnewpwdMail = null;
        //ComAdobeCqAccountApiAccountManagementServiceInfo response = api.comAdobeCqAccountApiAccountManagementService(post, apply, delete, action, $location, propertylist, cqAccountmanagerTokenValidityPeriod, cqAccountmanagerConfigRequestnewaccountMail, cqAccountmanagerConfigRequestnewpwdMail);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqAccountImplAccountManagementServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cqAccountmanagerConfigInformnewaccountMail = null;
        String cqAccountmanagerConfigInformnewpwdMail = null;
        //ComAdobeCqAccountImplAccountManagementServletInfo response = api.comAdobeCqAccountImplAccountManagementServlet(post, apply, delete, action, $location, propertylist, cqAccountmanagerConfigInformnewaccountMail, cqAccountmanagerConfigInformnewpwdMail);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqAddressImplLocationLocationListServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqAddressLocationDefaultMaxResults = null;
        //ComAdobeCqAddressImplLocationLocationListServletInfo response = api.comAdobeCqAddressImplLocationLocationListServlet(post, apply, delete, action, $location, propertylist, cqAddressLocationDefaultMaxResults);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqAuditPurgeDamTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String auditlogRuleName = null;
        String auditlogRuleContentpath = null;
        Integer auditlogRuleMinimumage = null;
        String auditlogRuleTypes = null;
        //ComAdobeCqAuditPurgeDamInfo response = api.comAdobeCqAuditPurgeDam(post, apply, delete, action, $location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqAuditPurgePagesTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String auditlogRuleName = null;
        String auditlogRuleContentpath = null;
        Integer auditlogRuleMinimumage = null;
        String auditlogRuleTypes = null;
        //ComAdobeCqAuditPurgePagesInfo response = api.comAdobeCqAuditPurgePages(post, apply, delete, action, $location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqAuditPurgeReplicationTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String auditlogRuleName = null;
        String auditlogRuleContentpath = null;
        Integer auditlogRuleMinimumage = null;
        String auditlogRuleTypes = null;
        //ComAdobeCqAuditPurgeReplicationInfo response = api.comAdobeCqAuditPurgeReplication(post, apply, delete, action, $location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCdnRewriterImplAWSCloudFrontRewriterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String keypairId = null;
        String keypairAlias = null;
        List<String> cdnrewriterAttributes = null;
        String cdnRewriterDistributionDomain = null;
        //ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo response = api.comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(post, apply, delete, action, $location, propertylist, serviceRanking, keypairId, keypairAlias, cdnrewriterAttributes, cdnRewriterDistributionDomain);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCdnRewriterImplCDNConfigServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cdnConfigDistributionDomain = null;
        Boolean cdnConfigEnableRewriting = null;
        List<String> cdnConfigPathPrefixes = null;
        Integer cdnConfigCdnttl = null;
        String cdnConfigApplicationProtocol = null;
        //ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo response = api.comAdobeCqCdnRewriterImplCDNConfigServiceImpl(post, apply, delete, action, $location, propertylist, cdnConfigDistributionDomain, cdnConfigEnableRewriting, cdnConfigPathPrefixes, cdnConfigCdnttl, cdnConfigApplicationProtocol);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCdnRewriterImplCDNRewriterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        List<String> cdnrewriterAttributes = null;
        String cdnRewriterDistributionDomain = null;
        //ComAdobeCqCdnRewriterImplCDNRewriterInfo response = api.comAdobeCqCdnRewriterImplCDNRewriter(post, apply, delete, action, $location, propertylist, serviceRanking, cdnrewriterAttributes, cdnRewriterDistributionDomain);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> flushAgents = null;
        //ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo response = api.comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(post, apply, delete, action, $location, propertylist, flushAgents);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommerceImplAssetDynamicImageHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqCommerceAssetHandlerActive = null;
        String cqCommerceAssetHandlerName = null;
        //ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo response = api.comAdobeCqCommerceImplAssetDynamicImageHandler(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cqCommerceAssetHandlerFallback = null;
        //ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo response = api.comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerFallback);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommerceImplAssetStaticImageHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqCommerceAssetHandlerActive = null;
        String cqCommerceAssetHandlerName = null;
        //ComAdobeCqCommerceImplAssetStaticImageHandlerInfo response = api.comAdobeCqCommerceImplAssetStaticImageHandler(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommerceImplAssetVideoHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqCommerceAssetHandlerActive = null;
        String cqCommerceAssetHandlerName = null;
        //ComAdobeCqCommerceImplAssetVideoHandlerInfo response = api.comAdobeCqCommerceImplAssetVideoHandler(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommerceImplPromotionPromotionManagerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cqCommercePromotionRoot = null;
        //ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo response = api.comAdobeCqCommerceImplPromotionPromotionManagerImpl(post, apply, delete, action, $location, propertylist, cqCommercePromotionRoot);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqCommerceCataloggeneratorBucketsize = null;
        String cqCommerceCataloggeneratorBucketname = null;
        List<String> cqCommerceCataloggeneratorExcludedtemplateproperties = null;
        //ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo response = api.comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(post, apply, delete, action, $location, propertylist, cqCommerceCataloggeneratorBucketsize, cqCommerceCataloggeneratorBucketname, cqCommerceCataloggeneratorExcludedtemplateproperties);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommercePimImplPageEventListenerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqCommercePageeventlistenerEnabled = null;
        //ComAdobeCqCommercePimImplPageEventListenerInfo response = api.comAdobeCqCommercePimImplPageEventListener(post, apply, delete, action, $location, propertylist, cqCommercePageeventlistenerEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommercePimImplProductfeedProductFeedServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String feedGeneratorAlgorithm = null;
        //ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo response = api.comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(post, apply, delete, action, $location, propertylist, feedGeneratorAlgorithm);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqContentinsightImplReportingServicesSettingsProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String reportingservicesUrl = null;
        //ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo response = api.comAdobeCqContentinsightImplReportingServicesSettingsProvider(post, apply, delete, action, $location, propertylist, reportingservicesUrl);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqContentinsightImplServletsBrightEdgeProxyServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String brightedgeUrl = null;
        //ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo response = api.comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(post, apply, delete, action, $location, propertylist, brightedgeUrl);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqContentinsightImplServletsReportingServicesProxyServleTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> reportingservicesProxyWhitelist = null;
        //ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo response = api.comAdobeCqContentinsightImplServletsReportingServicesProxyServle(post, apply, delete, action, $location, propertylist, reportingservicesProxyWhitelist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamCfmImplComponentComponentConfigImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String damCfmComponentResourceType = null;
        String damCfmComponentFileReferenceProp = null;
        String damCfmComponentElementsProp = null;
        String damCfmComponentVariationProp = null;
        //ComAdobeCqDamCfmImplComponentComponentConfigImplInfo response = api.comAdobeCqDamCfmImplComponentComponentConfigImpl(post, apply, delete, action, $location, propertylist, damCfmComponentResourceType, damCfmComponentFileReferenceProp, damCfmComponentElementsProp, damCfmComponentVariationProp);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamCfmImplConfFeatureConfigImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> damCfmResourceTypes = null;
        List<String> damCfmReferenceProperties = null;
        //ComAdobeCqDamCfmImplConfFeatureConfigImplInfo response = api.comAdobeCqDamCfmImplConfFeatureConfigImpl(post, apply, delete, action, $location, propertylist, damCfmResourceTypes, damCfmReferenceProperties);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamCfmImplContentRewriterAssetProcessorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pipelineType = null;
        //ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo response = api.comAdobeCqDamCfmImplContentRewriterAssetProcessor(post, apply, delete, action, $location, propertylist, pipelineType);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamCfmImplContentRewriterParRangeFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pipelineType = null;
        //ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo response = api.comAdobeCqDamCfmImplContentRewriterParRangeFilter(post, apply, delete, action, $location, propertylist, pipelineType);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamCfmImplContentRewriterPayloadFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pipelineType = null;
        //ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo response = api.comAdobeCqDamCfmImplContentRewriterPayloadFilter(post, apply, delete, action, $location, propertylist, pipelineType);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamDmProcessImagePTiffManagerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxMemory = null;
        //ComAdobeCqDamDmProcessImagePTiffManagerImplInfo response = api.comAdobeCqDamDmProcessImagePTiffManagerImpl(post, apply, delete, action, $location, propertylist, maxMemory);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean dmreplicateonmodifyEnabled = null;
        Boolean dmreplicateonmodifyForcesyncdeletes = null;
        //ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo response = api.comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(post, apply, delete, action, $location, propertylist, dmreplicateonmodifyEnabled, dmreplicateonmodifyForcesyncdeletes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamMacSyncHelperImplMACSyncClientImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer comAdobeDamMacSyncClientSoTimeout = null;
        //ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo response = api.comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(post, apply, delete, action, $location, propertylist, comAdobeDamMacSyncClientSoTimeout);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamMacSyncImplDAMSyncServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths = null;
        Boolean comAdobeCqDamMacSyncDamsyncserviceSyncRenditions = null;
        Integer comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs = null;
        String comAdobeCqDamMacSyncDamsyncservicePlatform = null;
        //ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo response = api.comAdobeCqDamMacSyncImplDAMSyncServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, comAdobeCqDamMacSyncDamsyncserviceSyncRenditions, comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs, comAdobeCqDamMacSyncDamsyncservicePlatform);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamProcessorNuiImplNuiAssetProcessorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean nuiEnabled = null;
        String nuiServiceUrl = null;
        String nuiApiKey = null;
        //ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo response = api.comAdobeCqDamProcessorNuiImplNuiAssetProcessor(post, apply, delete, action, $location, propertylist, nuiEnabled, nuiServiceUrl, nuiApiKey);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamS7imagingImplIsImageServerComponentTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String tcpPort = null;
        Boolean allowRemoteAccess = null;
        String maxRenderRgnPixels = null;
        String maxMessageSize = null;
        Integer randomAccessUrlTimeout = null;
        Integer workerThreads = null;
        //ComAdobeCqDamS7imagingImplIsImageServerComponentInfo response = api.comAdobeCqDamS7imagingImplIsImageServerComponent(post, apply, delete, action, $location, propertylist, tcpPort, allowRemoteAccess, maxRenderRgnPixels, maxMessageSize, randomAccessUrlTimeout, workerThreads);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamS7imagingImplPsPlatformServerServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cacheEnable = null;
        List<String> cacheRootPaths = null;
        Integer cacheMaxSize = null;
        Integer cacheMaxEntries = null;
        //ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo response = api.comAdobeCqDamS7imagingImplPsPlatformServerServlet(post, apply, delete, action, $location, propertylist, cacheEnable, cacheRootPaths, cacheMaxSize, cacheMaxEntries);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamWebdavImplIoAssetIOHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String pathPrefix = null;
        Boolean createVersion = null;
        //ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo response = api.comAdobeCqDamWebdavImplIoAssetIOHandler(post, apply, delete, action, $location, propertylist, serviceRanking, pathPrefix, createVersion);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamWebdavVersionLinkingEnable = null;
        Integer cqDamWebdavVersionLinkingSchedulerPeriod = null;
        Integer cqDamWebdavVersionLinkingStagingTimeout = null;
        //ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo response = api.comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(post, apply, delete, action, $location, propertylist, cqDamWebdavVersionLinkingEnable, cqDamWebdavVersionLinkingSchedulerPeriod, cqDamWebdavVersionLinkingStagingTimeout);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamWebdavImplIoSpecialFilesHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters = null;
        //ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo response = api.comAdobeCqDamWebdavImplIoSpecialFilesHandler(post, apply, delete, action, $location, propertylist, comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDeserfwImplDeserializationFirewallImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> firewallDeserializationWhitelist = null;
        List<String> firewallDeserializationBlacklist = null;
        String firewallDeserializationDiagnostics = null;
        //ComAdobeCqDeserfwImplDeserializationFirewallImplInfo response = api.comAdobeCqDeserfwImplDeserializationFirewallImpl(post, apply, delete, action, $location, propertylist, firewallDeserializationWhitelist, firewallDeserializationBlacklist, firewallDeserializationDiagnostics);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDtmImplServiceDTMWebServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer connectionTimeout = null;
        Integer socketTimeout = null;
        //ComAdobeCqDtmImplServiceDTMWebServiceImplInfo response = api.comAdobeCqDtmImplServiceDTMWebServiceImpl(post, apply, delete, action, $location, propertylist, connectionTimeout, socketTimeout);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDtmImplServletsDTMDeployHookServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> dtmStagingIpWhitelist = null;
        List<String> dtmProductionIpWhitelist = null;
        //ComAdobeCqDtmImplServletsDTMDeployHookServletInfo response = api.comAdobeCqDtmImplServletsDTMDeployHookServlet(post, apply, delete, action, $location, propertylist, dtmStagingIpWhitelist, dtmProductionIpWhitelist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDtmReactorImplServiceWebServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String endpointUri = null;
        Integer connectionTimeout = null;
        Integer socketTimeout = null;
        //ComAdobeCqDtmReactorImplServiceWebServiceImplInfo response = api.comAdobeCqDtmReactorImplServiceWebServiceImpl(post, apply, delete, action, $location, propertylist, endpointUri, connectionTimeout, socketTimeout);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqExperiencelogImplExperienceLogConfigServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        List<String> disabledForGroups = null;
        //ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo response = api.comAdobeCqExperiencelogImplExperienceLogConfigServlet(post, apply, delete, action, $location, propertylist, enabled, disabledForGroups);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqHcContentPackagesHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        List<String> packageNames = null;
        //ComAdobeCqHcContentPackagesHealthCheckInfo response = api.comAdobeCqHcContentPackagesHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, packageNames);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqHistoryImplHistoryRequestFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> historyRequestFilterExcludedSelectors = null;
        List<String> historyRequestFilterExcludedExtensions = null;
        //ComAdobeCqHistoryImplHistoryRequestFilterInfo response = api.comAdobeCqHistoryImplHistoryRequestFilter(post, apply, delete, action, $location, propertylist, historyRequestFilterExcludedSelectors, historyRequestFilterExcludedExtensions);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqHistoryImplHistoryServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> historyServiceResourceTypes = null;
        List<String> historyServicePathFilter = null;
        //ComAdobeCqHistoryImplHistoryServiceImplInfo response = api.comAdobeCqHistoryImplHistoryServiceImpl(post, apply, delete, action, $location, propertylist, historyServiceResourceTypes, historyServicePathFilter);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqInboxImplTypeproviderItemTypeProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> inboxImplTypeproviderRegistrypaths = null;
        List<String> inboxImplTypeproviderLegacypaths = null;
        String inboxImplTypeproviderDefaulturlFailureitem = null;
        String inboxImplTypeproviderDefaulturlWorkitem = null;
        String inboxImplTypeproviderDefaulturlTask = null;
        //ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo response = api.comAdobeCqInboxImplTypeproviderItemTypeProvider(post, apply, delete, action, $location, propertylist, inboxImplTypeproviderRegistrypaths, inboxImplTypeproviderLegacypaths, inboxImplTypeproviderDefaulturlFailureitem, inboxImplTypeproviderDefaulturlWorkitem, inboxImplTypeproviderDefaulturlTask);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqProjectsImplServletProjectImageServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String imageQuality = null;
        String imageSupportedResolutions = null;
        //ComAdobeCqProjectsImplServletProjectImageServletInfo response = api.comAdobeCqProjectsImplServletProjectImageServlet(post, apply, delete, action, $location, propertylist, imageQuality, imageSupportedResolutions);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqProjectsPurgeSchedulerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String scheduledpurgeName = null;
        Boolean scheduledpurgePurgeActive = null;
        List<String> scheduledpurgeTemplates = null;
        Boolean scheduledpurgePurgeGroups = null;
        Boolean scheduledpurgePurgeAssets = null;
        Boolean scheduledpurgeTerminateRunningWorkflows = null;
        Integer scheduledpurgeDaysold = null;
        Integer scheduledpurgeSaveThreshold = null;
        //ComAdobeCqProjectsPurgeSchedulerInfo response = api.comAdobeCqProjectsPurgeScheduler(post, apply, delete, action, $location, propertylist, scheduledpurgeName, scheduledpurgePurgeActive, scheduledpurgeTemplates, scheduledpurgePurgeGroups, scheduledpurgePurgeAssets, scheduledpurgeTerminateRunningWorkflows, scheduledpurgeDaysold, scheduledpurgeSaveThreshold);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScheduledExporterImplScheduledExporterImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> includePaths = null;
        String exporterUser = null;
        //ComAdobeCqScheduledExporterImplScheduledExporterImplInfo response = api.comAdobeCqScheduledExporterImplScheduledExporterImpl(post, apply, delete, action, $location, propertylist, includePaths, exporterUser);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String comAdobeCqScreensAnalyticsImplUrl = null;
        String comAdobeCqScreensAnalyticsImplApikey = null;
        String comAdobeCqScreensAnalyticsImplProject = null;
        String comAdobeCqScreensAnalyticsImplEnvironment = null;
        Integer comAdobeCqScreensAnalyticsImplSendFrequency = null;
        //ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo response = api.comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqScreensAnalyticsImplUrl, comAdobeCqScreensAnalyticsImplApikey, comAdobeCqScreensAnalyticsImplProject, comAdobeCqScreensAnalyticsImplEnvironment, comAdobeCqScreensAnalyticsImplSendFrequency);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensDeviceImplDeviceServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer comAdobeAemScreensPlayerPingfrequency = null;
        String comAdobeAemScreensDevicePaswordSpecialchars = null;
        Integer comAdobeAemScreensDevicePaswordMinlowercasechars = null;
        Integer comAdobeAemScreensDevicePaswordMinuppercasechars = null;
        Integer comAdobeAemScreensDevicePaswordMinnumberchars = null;
        Integer comAdobeAemScreensDevicePaswordMinspecialchars = null;
        Integer comAdobeAemScreensDevicePaswordMinlength = null;
        //ComAdobeCqScreensDeviceImplDeviceServiceInfo response = api.comAdobeCqScreensDeviceImplDeviceService(post, apply, delete, action, $location, propertylist, comAdobeAemScreensPlayerPingfrequency, comAdobeAemScreensDevicePaswordSpecialchars, comAdobeAemScreensDevicePaswordMinlowercasechars, comAdobeAemScreensDevicePaswordMinuppercasechars, comAdobeAemScreensDevicePaswordMinnumberchars, comAdobeAemScreensDevicePaswordMinspecialchars, comAdobeAemScreensDevicePaswordMinlength);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer deviceRegistrationTimeout = null;
        //ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo response = api.comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(post, apply, delete, action, $location, propertylist, deviceRegistrationTimeout);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensImplHandlerChannelsUpdateHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqPagesupdatehandlerImageresourcetypes = null;
        List<String> cqPagesupdatehandlerProductresourcetypes = null;
        List<String> cqPagesupdatehandlerVideoresourcetypes = null;
        List<String> cqPagesupdatehandlerDynamicsequenceresourcetypes = null;
        List<String> cqPagesupdatehandlerPreviewmodepaths = null;
        //ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo response = api.comAdobeCqScreensImplHandlerChannelsUpdateHandler(post, apply, delete, action, $location, propertylist, cqPagesupdatehandlerImageresourcetypes, cqPagesupdatehandlerProductresourcetypes, cqPagesupdatehandlerVideoresourcetypes, cqPagesupdatehandlerDynamicsequenceresourcetypes, cqPagesupdatehandlerPreviewmodepaths);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        //ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo response = api.comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(post, apply, delete, action, $location, propertylist, schedulerExpression);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensImplRemoteImplDistributedHttpClientImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer comAdobeAemScreensImplRemoteRequestTimeout = null;
        //ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo response = api.comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(post, apply, delete, action, $location, propertylist, comAdobeAemScreensImplRemoteRequestTimeout);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensImplScreensChannelPostProcessorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> screensChannelsPropertiesToRemove = null;
        //ComAdobeCqScreensImplScreensChannelPostProcessorInfo response = api.comAdobeCqScreensImplScreensChannelPostProcessor(post, apply, delete, action, $location, propertylist, screensChannelsPropertiesToRemove);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath = null;
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency = null;
        Integer comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout = null;
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients = null;
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver = null;
        Integer comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport = null;
        Boolean comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls = null;
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername = null;
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword = null;
        //ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo response = api.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensMqActivemqImplArtemisJMSProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        Integer globalSize = null;
        Integer maxDiskUsage = null;
        Boolean persistenceEnabled = null;
        Integer threadPoolMaxSize = null;
        Integer scheduledThreadPoolMaxSize = null;
        Integer gracefulShutdownTimeout = null;
        List<String> queues = null;
        List<String> topics = null;
        Integer addressesMaxDeliveryAttempts = null;
        Integer addressesExpiryDelay = null;
        String addressesAddressFullMessagePolicy = null;
        Integer addressesMaxSizeBytes = null;
        Integer addressesPageSizeBytes = null;
        Integer addressesPageCacheMaxSize = null;
        String clusterUser = null;
        String clusterPassword = null;
        Integer clusterCallTimeout = null;
        Integer clusterCallFailoverTimeout = null;
        Integer clusterClientFailureCheckPeriod = null;
        Integer clusterNotificationAttempts = null;
        Integer clusterNotificationInterval = null;
        Integer idCacheSize = null;
        Integer clusterConfirmationWindowSize = null;
        Integer clusterConnectionTtl = null;
        Boolean clusterDuplicateDetection = null;
        Integer clusterInitialConnectAttempts = null;
        Integer clusterMaxRetryInterval = null;
        Integer clusterMinLargeMessageSize = null;
        Integer clusterProducerWindowSize = null;
        Integer clusterReconnectAttempts = null;
        Integer clusterRetryInterval = null;
        BigDecimal clusterRetryIntervalMultiplier = null;
        //ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo response = api.comAdobeCqScreensMqActivemqImplArtemisJMSProvider(post, apply, delete, action, $location, propertylist, serviceRanking, globalSize, maxDiskUsage, persistenceEnabled, threadPoolMaxSize, scheduledThreadPoolMaxSize, gracefulShutdownTimeout, queues, topics, addressesMaxDeliveryAttempts, addressesExpiryDelay, addressesAddressFullMessagePolicy, addressesMaxSizeBytes, addressesPageSizeBytes, addressesPageCacheMaxSize, clusterUser, clusterPassword, clusterCallTimeout, clusterCallFailoverTimeout, clusterClientFailureCheckPeriod, clusterNotificationAttempts, clusterNotificationInterval, idCacheSize, clusterConfirmationWindowSize, clusterConnectionTtl, clusterDuplicateDetection, clusterInitialConnectAttempts, clusterMaxRetryInterval, clusterMinLargeMessageSize, clusterProducerWindowSize, clusterReconnectAttempts, clusterRetryInterval, clusterRetryIntervalMultiplier);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath = null;
        String comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency = null;
        //ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo response = api.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean disableSmartSync = null;
        //ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo response = api.comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(post, apply, delete, action, $location, propertylist, disableSmartSync);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensSegmentationImplSegmentationFeatureFlagTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enableDataTriggeredContent = null;
        //ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo response = api.comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(post, apply, delete, action, $location, propertylist, enableDataTriggeredContent);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo response = api.comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo response = api.comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        String dispatcherAddress = null;
        List<String> dispatcherFilterAllowed = null;
        List<String> dispatcherFilterBlocked = null;
        //ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo response = api.comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, dispatcherAddress, dispatcherFilterAllowed, dispatcherFilterBlocked);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo response = api.comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        String webserverAddress = null;
        //ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo response = api.comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, webserverAddress);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialAccountverificationImplAccountManagementConfigImTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enable = null;
        Integer ttl1 = null;
        Integer ttl2 = null;
        //ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo response = api.comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(post, apply, delete, action, $location, propertylist, enable, ttl1, ttl2);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priority = null;
        //ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo response = api.comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(post, apply, delete, action, $location, propertylist, priority);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priority = null;
        //ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo response = api.comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(post, apply, delete, action, $location, propertylist, priority);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        String eventFilter = null;
        //ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo response = api.comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean accepted = null;
        Integer ranked = null;
        //ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo response = api.comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(post, apply, delete, action, $location, propertylist, accepted, ranked);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer ranking = null;
        Boolean enable = null;
        //ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo response = api.comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(post, apply, delete, action, $location, propertylist, ranking, enable);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String streamPath = null;
        String streamName = null;
        //ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo response = api.comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(post, apply, delete, action, $location, propertylist, streamPath, streamName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsITest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxRetry = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
        //ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo response = api.comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(post, apply, delete, action, $location, propertylist, maxRetry, fieldWhitelist, attachmentTypeBlacklist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String attachmentTypeBlacklist = null;
        Integer extensionOrder = null;
        //ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo response = api.comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(post, apply, delete, action, $location, propertylist, attachmentTypeBlacklist, extensionOrder);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCalendarServletsTimeZoneServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer timezonesExpirytime = null;
        //ComAdobeCqSocialCalendarServletsTimeZoneServletInfo response = api.comAdobeCqSocialCalendarServletsTimeZoneServlet(post, apply, delete, action, $location, propertylist, timezonesExpirytime);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer ranking = null;
        //ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo response = api.comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(post, apply, delete, action, $location, propertylist, ranking);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
        //ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo response = api.comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
        //ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo response = api.comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer numUserLimit = null;
        //ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo response = api.comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(post, apply, delete, action, $location, propertylist, numUserLimit);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enableScheduledPostsSearch = null;
        Integer numberOfMinutes = null;
        Integer maxSearchLimit = null;
        //ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo response = api.comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(post, apply, delete, action, $location, propertylist, enableScheduledPostsSearch, numberOfMinutes, maxSearchLimit);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsCorsCORSAuthenticationFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean corsEnabling = null;
        //ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo response = api.comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(post, apply, delete, action, $location, propertylist, corsEnabling);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
        //ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo response = api.comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String contextPath = null;
        //ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo response = api.comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(post, apply, delete, action, $location, propertylist, contextPath);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        //ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo response = api.comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(post, apply, delete, action, $location, propertylist, eventTopics);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
        //ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo response = api.comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String patternTime = null;
        String patternNewline = null;
        String patternDayOfMonth = null;
        String patternMonth = null;
        String patternYear = null;
        String patternDate = null;
        String patternDateTime = null;
        String patternEmail = null;
        //ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo response = api.comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(post, apply, delete, action, $location, propertylist, patternTime, patternNewline, patternDayOfMonth, patternMonth, patternYear, patternDate, patternDateTime, patternEmail);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String emailName = null;
        Boolean emailCreatePostFromReply = null;
        String emailAddCommentIdTo = null;
        Integer emailSubjectMaximumLength = null;
        String emailReplyToAddress = null;
        String emailReplyToDelimiter = null;
        String emailTrackerIdPrefixInSubject = null;
        String emailTrackerIdPrefixInBody = null;
        Boolean emailAsHTML = null;
        String emailDefaultUserName = null;
        String emailTemplatesRootPath = null;
        //ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo response = api.comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(post, apply, delete, action, $location, propertylist, emailName, emailCreatePostFromReply, emailAddCommentIdTo, emailSubjectMaximumLength, emailReplyToAddress, emailReplyToDelimiter, emailTrackerIdPrefixInSubject, emailTrackerIdPrefixInBody, emailAsHTML, emailDefaultUserName, emailTemplatesRootPath);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String connectProtocol = null;
        //ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo response = api.comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(post, apply, delete, action, $location, propertylist, connectProtocol);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
        //ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo response = api.comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
        //ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo response = api.comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
        //ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo response = api.comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
        //ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo response = api.comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> replyEmailPatterns = null;
        Integer priorityOrder = null;
        //ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo response = api.comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(post, apply, delete, action, $location, propertylist, replyEmailPatterns, priorityOrder);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
        //ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo response = api.comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer numberOfDays = null;
        Integer ageOfFile = null;
        //ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo response = api.comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(post, apply, delete, action, $location, propertylist, numberOfDays, ageOfFile);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        String eventFilter = null;
        List<String> verbs = null;
        //ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo response = api.comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, verbs);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enable = null;
        Integer ugCLimit = null;
        Integer ugcLimitDuration = null;
        List<String> domains = null;
        List<String> toList = null;
        //ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo response = api.comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(post, apply, delete, action, $location, propertylist, enable, ugCLimit, ugcLimitDuration, domains, toList);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialConnectOauthImplFacebookProviderImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        String oauthCloudConfigRoot = null;
        String providerConfigRoot = null;
        Boolean providerConfigCreateTagsEnabled = null;
        String providerConfigUserFolder = null;
        Boolean providerConfigFacebookFetchFields = null;
        List<String> providerConfigFacebookFields = null;
        Boolean providerConfigRefreshUserdataEnabled = null;
        //ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo response = api.comAdobeCqSocialConnectOauthImplFacebookProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthCloudConfigRoot, providerConfigRoot, providerConfigCreateTagsEnabled, providerConfigUserFolder, providerConfigFacebookFetchFields, providerConfigFacebookFields, providerConfigRefreshUserdataEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> path = null;
        Integer serviceRanking = null;
        //ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo response = api.comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(post, apply, delete, action, $location, propertylist, path, serviceRanking);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> facebook = null;
        List<String> twitter = null;
        String providerConfigUserFolder = null;
        //ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo response = api.comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(post, apply, delete, action, $location, propertylist, facebook, twitter, providerConfigUserFolder);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialConnectOauthImplTwitterProviderImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        String oauthCloudConfigRoot = null;
        String providerConfigRoot = null;
        String providerConfigUserFolder = null;
        Boolean providerConfigTwitterEnableParams = null;
        List<String> providerConfigTwitterParams = null;
        Boolean providerConfigRefreshUserdataEnabled = null;
        //ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo response = api.comAdobeCqSocialConnectOauthImplTwitterProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthCloudConfigRoot, providerConfigRoot, providerConfigUserFolder, providerConfigTwitterEnableParams, providerConfigTwitterParams, providerConfigRefreshUserdataEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqSocialContentFragmentsServicesEnabled = null;
        Integer cqSocialContentFragmentsServicesWaitTimeSeconds = null;
        //ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo response = api.comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(post, apply, delete, action, $location, propertylist, cqSocialContentFragmentsServicesEnabled, cqSocialContentFragmentsServicesWaitTimeSeconds);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String versionId = null;
        Boolean cacheOn = null;
        Integer concurrencyLevel = null;
        Integer cacheStartSize = null;
        Integer cacheTtl = null;
        Integer cacheSize = null;
        Integer timeLimit = null;
        //ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo response = api.comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(post, apply, delete, action, $location, propertylist, versionId, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize, timeLimit);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String solrZkTimeout = null;
        String solrCommit = null;
        Boolean cacheOn = null;
        Integer concurrencyLevel = null;
        Integer cacheStartSize = null;
        Integer cacheTtl = null;
        Integer cacheSize = null;
        //ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo response = api.comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(post, apply, delete, action, $location, propertylist, solrZkTimeout, solrCommit, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String solrZkTimeout = null;
        String solrCommit = null;
        Boolean cacheOn = null;
        Integer concurrencyLevel = null;
        Integer cacheStartSize = null;
        Integer cacheTtl = null;
        Integer cacheSize = null;
        //ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo response = api.comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(post, apply, delete, action, $location, propertylist, solrZkTimeout, solrCommit, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean isMemberCheck = null;
        //ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo response = api.comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(post, apply, delete, action, $location, propertylist, isMemberCheck);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean isMemberCheck = null;
        //ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo response = api.comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(post, apply, delete, action, $location, propertylist, isMemberCheck);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        //ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo response = api.comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(post, apply, delete, action, $location, propertylist, fieldWhitelist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        //ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo response = api.comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(post, apply, delete, action, $location, propertylist, fieldWhitelist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialEnablementServicesImplAuthorMarkerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        //ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo response = api.comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(post, apply, delete, action, $location, propertylist, serviceRanking);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletSelectors = null;
        String slingServletExtensions = null;
        //ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo response = api.comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(post, apply, delete, action, $location, propertylist, slingServletSelectors, slingServletExtensions);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
        //ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo response = api.comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
        //ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo response = api.comAdobeCqSocialForumClientEndpointsImplForumOperationsService(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialForumDispatcherImplFlushOperationsTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer extensionOrder = null;
        Boolean flushForumontopic = null;
        //ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo response = api.comAdobeCqSocialForumDispatcherImplFlushOperations(post, apply, delete, action, $location, propertylist, extensionOrder, flushForumontopic);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean groupListingPaginationEnable = null;
        Boolean groupListingLazyloadingEnable = null;
        Integer pageSize = null;
        Integer priority = null;
        //ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo response = api.comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(post, apply, delete, action, $location, propertylist, groupListingPaginationEnable, groupListingLazyloadingEnable, pageSize, priority);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialGroupImplGroupServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxWaitTime = null;
        Integer minWaitBetweenRetries = null;
        //ComAdobeCqSocialGroupImplGroupServiceImplInfo response = api.comAdobeCqSocialGroupImplGroupServiceImpl(post, apply, delete, action, $location, propertylist, maxWaitTime, minWaitBetweenRetries);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialHandlebarsGuavaTemplateCacheImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean parameterGuavaCacheEnabled = null;
        String parameterGuavaCacheParams = null;
        Boolean parameterGuavaCacheReload = null;
        Integer serviceRanking = null;
        //ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo response = api.comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(post, apply, delete, action, $location, propertylist, parameterGuavaCacheEnabled, parameterGuavaCacheParams, parameterGuavaCacheReload, serviceRanking);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
        //ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo response = api.comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
        //ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo response = api.comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        //ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo response = api.comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(post, apply, delete, action, $location, propertylist, fieldWhitelist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        //ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo response = api.comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(post, apply, delete, action, $location, propertylist, fieldWhitelist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer everyoneLimit = null;
        Integer priority = null;
        //ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo response = api.comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(post, apply, delete, action, $location, propertylist, everyoneLimit, priority);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> messageProperties = null;
        Integer messageBoxSizeLimit = null;
        Integer messageCountLimit = null;
        Boolean notifyFailure = null;
        String failureMessageFrom = null;
        String failureTemplatePath = null;
        Integer maxRetries = null;
        Integer minWaitBetweenRetries = null;
        Integer countUpdatePoolSize = null;
        String inboxPath = null;
        String sentitemsPath = null;
        Boolean supportAttachments = null;
        Boolean supportGroupMessaging = null;
        Integer maxTotalRecipients = null;
        Integer batchSize = null;
        Integer maxTotalAttachmentSize = null;
        List<String> attachmentTypeBlacklist = null;
        List<String> allowedAttachmentTypes = null;
        String serviceSelector = null;
        List<String> fieldWhitelist = null;
        //ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo response = api.comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(post, apply, delete, action, $location, propertylist, messageProperties, messageBoxSizeLimit, messageCountLimit, notifyFailure, failureMessageFrom, failureTemplatePath, maxRetries, minWaitBetweenRetries, countUpdatePoolSize, inboxPath, sentitemsPath, supportAttachments, supportGroupMessaging, maxTotalRecipients, batchSize, maxTotalAttachmentSize, attachmentTypeBlacklist, allowedAttachmentTypes, serviceSelector, fieldWhitelist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> resourceTypeFilters = null;
        Integer priority = null;
        //ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo response = api.comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(post, apply, delete, action, $location, propertylist, resourceTypeFilters, priority);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialModerationDashboardApiModerationDashboardSocialTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priority = null;
        //ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo response = api.comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(post, apply, delete, action, $location, propertylist, priority);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priority = null;
        //ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo response = api.comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(post, apply, delete, action, $location, propertylist, priority);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> resourceTypeFilters = null;
        Integer priority = null;
        //ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo response = api.comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(post, apply, delete, action, $location, propertylist, resourceTypeFilters, priority);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialNotificationsImplMentionsRouterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        String eventFilter = null;
        //ComAdobeCqSocialNotificationsImplMentionsRouterInfo response = api.comAdobeCqSocialNotificationsImplMentionsRouter(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialNotificationsImplNotificationManagerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxUnreadNotificationCount = null;
        //ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo response = api.comAdobeCqSocialNotificationsImplNotificationManagerImpl(post, apply, delete, action, $location, propertylist, maxUnreadNotificationCount);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialNotificationsImplNotificationsRouterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        String eventFilter = null;
        //ComAdobeCqSocialNotificationsImplNotificationsRouterInfo response = api.comAdobeCqSocialNotificationsImplNotificationsRouter(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
        //ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo response = api.comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportITest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqSocialReportingAnalyticsPollingImporterInterval = null;
        Integer cqSocialReportingAnalyticsPollingImporterPageSize = null;
        //ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo response = api.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(post, apply, delete, action, $location, propertylist, cqSocialReportingAnalyticsPollingImporterInterval, cqSocialReportingAnalyticsPollingImporterPageSize);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer reportFetchDelay = null;
        //ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo response = api.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(post, apply, delete, action, $location, propertylist, reportFetchDelay);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqSocialConsoleAnalyticsSitesMapping = null;
        Integer priority = null;
        //ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo response = api.comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(post, apply, delete, action, $location, propertylist, cqSocialConsoleAnalyticsSitesMapping, priority);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
        //ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo response = api.comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletSelectors = null;
        String slingServletExtensions = null;
        //ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo response = api.comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(post, apply, delete, action, $location, propertylist, slingServletSelectors, slingServletExtensions);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> slingServletSelectors = null;
        String slingServletExtensions = null;
        //ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo response = api.comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(post, apply, delete, action, $location, propertylist, slingServletSelectors, slingServletExtensions);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialScoringImplScoringEventListenerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        String eventFilter = null;
        //ComAdobeCqSocialScoringImplScoringEventListenerInfo response = api.comAdobeCqSocialScoringImplScoringEventListener(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enableFallback = null;
        //ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo response = api.comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(post, apply, delete, action, $location, propertylist, enableFallback);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSiteEndpointsImplSiteOperationServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> sitePathFilters = null;
        String sitePackageGroup = null;
        //ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo response = api.comAdobeCqSocialSiteEndpointsImplSiteOperationService(post, apply, delete, action, $location, propertylist, fieldWhitelist, sitePathFilters, sitePackageGroup);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqSocialConsoleAnalyticsComponents = null;
        //ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo response = api.comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(post, apply, delete, action, $location, propertylist, cqSocialConsoleAnalyticsComponents);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSiteImplSiteConfiguratorImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> componentsUsingTags = null;
        //ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo response = api.comAdobeCqSocialSiteImplSiteConfiguratorImpl(post, apply, delete, action, $location, propertylist, componentsUsingTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSrpImplSocialSolrConnectorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String srpType = null;
        //ComAdobeCqSocialSrpImplSocialSolrConnectorInfo response = api.comAdobeCqSocialSrpImplSocialSolrConnector(post, apply, delete, action, $location, propertylist, srpType);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSyncImplDiffChangesObserverTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        String agentName = null;
        String diffPath = null;
        String propertyNames = null;
        //ComAdobeCqSocialSyncImplDiffChangesObserverInfo response = api.comAdobeCqSocialSyncImplDiffChangesObserver(post, apply, delete, action, $location, propertylist, enabled, agentName, diffPath, propertyNames);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSyncImplGroupSyncListenerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> nodetypes = null;
        List<String> ignorableprops = null;
        String ignorablenodes = null;
        Boolean enabled = null;
        String distfolders = null;
        //ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo response = api.comAdobeCqSocialSyncImplGroupSyncListenerImpl(post, apply, delete, action, $location, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSyncImplPublisherSyncServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> activeRunModes = null;
        //ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo response = api.comAdobeCqSocialSyncImplPublisherSyncServiceImpl(post, apply, delete, action, $location, propertylist, activeRunModes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSyncImplUserSyncListenerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> nodetypes = null;
        List<String> ignorableprops = null;
        List<String> ignorablenodes = null;
        Boolean enabled = null;
        List<String> distfolders = null;
        //ComAdobeCqSocialSyncImplUserSyncListenerImplInfo response = api.comAdobeCqSocialSyncImplUserSyncListenerImpl(post, apply, delete, action, $location, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialTranslationImplTranslationServiceConfigManagerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String translateLanguage = null;
        String translateDisplay = null;
        Boolean translateAttribution = null;
        String translateCaching = null;
        String translateSmartRendering = null;
        String translateCachingDuration = null;
        String translateSessionSaveInterval = null;
        String translateSessionSaveBatchLimit = null;
        //ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo response = api.comAdobeCqSocialTranslationImplTranslationServiceConfigManager(post, apply, delete, action, $location, propertylist, translateLanguage, translateDisplay, translateAttribution, translateCaching, translateSmartRendering, translateCachingDuration, translateSessionSaveInterval, translateSessionSaveBatchLimit);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialTranslationImplUGCLanguageDetectorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        String eventFilter = null;
        List<String> translateListenerType = null;
        List<String> translatePropertyList = null;
        Integer poolSize = null;
        Integer maxPoolSize = null;
        Integer queueSize = null;
        Integer keepAliveTime = null;
        //ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo response = api.comAdobeCqSocialTranslationImplUGCLanguageDetector(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, translateListenerType, translatePropertyList, poolSize, maxPoolSize, queueSize, keepAliveTime);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer threadPoolSize = null;
        Integer delayTime = null;
        Integer workerSleepTime = null;
        //ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo response = api.comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(post, apply, delete, action, $location, propertylist, threadPoolSize, delayTime, workerSleepTime);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer poolSize = null;
        Integer maxPoolSize = null;
        Integer queueSize = null;
        Integer keepAliveTime = null;
        //ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo response = api.comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(post, apply, delete, action, $location, propertylist, poolSize, maxPoolSize, queueSize, keepAliveTime);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseImplPublisherConfigurationImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean isPrimaryPublisher = null;
        //ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo response = api.comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(post, apply, delete, action, $location, propertylist, isPrimaryPublisher);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseImplSocialUtilsImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean legacyCloudUGCPathMapping = null;
        //ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo response = api.comAdobeCqSocialUgcbaseImplSocialUtilsImpl(post, apply, delete, action, $location, propertylist, legacyCloudUGCPathMapping);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseModerationImplAutoModerationImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> automoderationSequence = null;
        Boolean automoderationOnfailurestop = null;
        //ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo response = api.comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(post, apply, delete, action, $location, propertylist, automoderationSequence, automoderationOnfailurestop);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseModerationImplSentimentProcessTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> watchwordsPositive = null;
        List<String> watchwordsNegative = null;
        String watchwordsPath = null;
        String sentimentPath = null;
        //ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo response = api.comAdobeCqSocialUgcbaseModerationImplSentimentProcess(post, apply, delete, action, $location, propertylist, watchwordsPositive, watchwordsNegative, watchwordsPath, sentimentPath);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> defaultAttachmentTypeBlacklist = null;
        List<String> baselineAttachmentTypeBlacklist = null;
        //ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo response = api.comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(post, apply, delete, action, $location, propertylist, defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> parameterWhitelist = null;
        List<String> parameterWhitelistPrefixes = null;
        List<String> binaryParameterWhitelist = null;
        List<String> modifierWhitelist = null;
        List<String> operationWhitelist = null;
        List<String> operationWhitelistPrefixes = null;
        List<String> typehintWhitelist = null;
        List<String> resourcetypeWhitelist = null;
        //ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo response = api.comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(post, apply, delete, action, $location, propertylist, parameterWhitelist, parameterWhitelistPrefixes, binaryParameterWhitelist, modifierWhitelist, operationWhitelist, operationWhitelistPrefixes, typehintWhitelist, resourcetypeWhitelist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletExtensions = null;
        String slingServletPaths = null;
        String slingServletMethods = null;
        //ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo response = api.comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(post, apply, delete, action, $location, propertylist, slingServletExtensions, slingServletPaths, slingServletMethods);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUserImplTransportHttpToPublisherTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enable = null;
        List<String> agentConfiguration = null;
        String contextPath = null;
        List<String> disabledCipherSuites = null;
        List<String> enabledCipherSuites = null;
        //ComAdobeCqSocialUserImplTransportHttpToPublisherInfo response = api.comAdobeCqSocialUserImplTransportHttpToPublisher(post, apply, delete, action, $location, propertylist, enable, agentConfiguration, contextPath, disabledCipherSuites, enabledCipherSuites);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> resourceTypes = null;
        //ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo response = api.comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(post, apply, delete, action, $location, propertylist, resourceTypes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqUpgradesCleanupImplUpgradeContentCleanupTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> deletePathRegexps = null;
        String deleteSql2Query = null;
        //ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo response = api.comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(post, apply, delete, action, $location, propertylist, deletePathRegexps, deleteSql2Query);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> deleteNameRegexps = null;
        //ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo response = api.comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(post, apply, delete, action, $location, propertylist, deleteNameRegexps);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer threshold = null;
        String jobTopicName = null;
        Boolean emailEnabled = null;
        //ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo response = api.comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(post, apply, delete, action, $location, propertylist, threshold, jobTopicName, emailEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        Integer jobPurgeThreshold = null;
        Integer jobPurgeMaxJobs = null;
        //ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo response = api.comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(post, apply, delete, action, $location, propertylist, schedulerExpression, jobPurgeThreshold, jobPurgeMaxJobs);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer threshold = null;
        String jobTopicName = null;
        Boolean emailEnabled = null;
        //ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo response = api.comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(post, apply, delete, action, $location, propertylist, threshold, jobTopicName, emailEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer threshold = null;
        String jobTopicName = null;
        Boolean emailEnabled = null;
        //ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo response = api.comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(post, apply, delete, action, $location, propertylist, threshold, jobTopicName, emailEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmLaunchesImplLaunchesEventHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        Integer launchesEventhandlerThreadpoolMaxsize = null;
        String launchesEventhandlerThreadpoolPriority = null;
        Boolean launchesEventhandlerUpdatelastmodification = null;
        //ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo response = api.comAdobeCqWcmLaunchesImplLaunchesEventHandler(post, apply, delete, action, $location, propertylist, eventFilter, launchesEventhandlerThreadpoolMaxsize, launchesEventhandlerThreadpoolPriority, launchesEventhandlerUpdatelastmodification);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmQrcodeServletWhitelist = null;
        //ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo response = api.comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(post, apply, delete, action, $location, propertylist, cqWcmQrcodeServletWhitelist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer size = null;
        //ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo response = api.comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(post, apply, delete, action, $location, propertylist, size);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String syncTranslationStateSchedulingFormat = null;
        String schedulingRepeatTranslationSchedulingFormat = null;
        String syncTranslationStateLockTimeoutInMinutes = null;
        String exportFormat = null;
        //ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo response = api.comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(post, apply, delete, action, $location, propertylist, syncTranslationStateSchedulingFormat, schedulingRepeatTranslationSchedulingFormat, syncTranslationStateLockTimeoutInMinutes, exportFormat);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> portalOutboxes = null;
        String draftDataService = null;
        String draftMetadataService = null;
        String submitDataService = null;
        String submitMetadataService = null;
        String pendingSignDataService = null;
        String pendingSignMetadataService = null;
        //ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo response = api.comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(post, apply, delete, action, $location, propertylist, portalOutboxes, draftDataService, draftMetadataService, submitDataService, submitMetadataService, pendingSignDataService, pendingSignMetadataService);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeFdFpConfigFormsPortalSchedulerServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String formportalInterval = null;
        //ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo response = api.comAdobeFdFpConfigFormsPortalSchedulerService(post, apply, delete, action, $location, propertylist, formportalInterval);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeFormsCommonServiceImplDefaultDataProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> alloweddataFileLocations = null;
        //ComAdobeFormsCommonServiceImplDefaultDataProviderInfo response = api.comAdobeFormsCommonServiceImplDefaultDataProvider(post, apply, delete, action, $location, propertylist, alloweddataFileLocations);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String tempStorageConfig = null;
        //ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo response = api.comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(post, apply, delete, action, $location, propertylist, tempStorageConfig);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeFormsCommonServletTempCleanUpTaskTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        String durationForTemporaryStorage = null;
        String durationForAnonymousStorage = null;
        //ComAdobeFormsCommonServletTempCleanUpTaskInfo response = api.comAdobeFormsCommonServletTempCleanUpTask(post, apply, delete, action, $location, propertylist, schedulerExpression, durationForTemporaryStorage, durationForAnonymousStorage);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAcpPlatformPlatformServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer queryLimit = null;
        List<String> fileTypeExtensionMap = null;
        //ComAdobeGraniteAcpPlatformPlatformServletInfo response = api.comAdobeGraniteAcpPlatformPlatformServlet(post, apply, delete, action, $location, propertylist, queryLimit, fileTypeExtensionMap);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteActivitystreamsImplActivityManagerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> aggregateRelationships = null;
        Boolean aggregateDescendVirtual = null;
        //ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo response = api.comAdobeGraniteActivitystreamsImplActivityManagerImpl(post, apply, delete, action, $location, propertylist, aggregateRelationships, aggregateDescendVirtual);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAnalyzerBaseSystemStatusServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean disabled = null;
        //ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo response = api.comAdobeGraniteAnalyzerBaseSystemStatusServlet(post, apply, delete, action, $location, propertylist, disabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean disabled = null;
        //ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo response = api.comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(post, apply, delete, action, $location, propertylist, disabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteApicontrollerFilterResolverHookFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String comAdobeCqCdnCdnRewriter = null;
        String comAdobeCqCloudConfigComponents = null;
        String comAdobeCqCloudConfigCore = null;
        String comAdobeCqCloudConfigUi = null;
        String comAdobeCqComAdobeCqEditor = null;
        String comAdobeCqComAdobeCqProjectsCore = null;
        String comAdobeCqComAdobeCqProjectsWcmCore = null;
        String comAdobeCqComAdobeCqUiCommons = null;
        String comAdobeCqComAdobeCqWcmStyle = null;
        String comAdobeCqCqActivitymapIntegration = null;
        String comAdobeCqCqContexthubCommons = null;
        String comAdobeCqCqDtm = null;
        String comAdobeCqCqHealthcheck = null;
        String comAdobeCqCqMultisiteTargeting = null;
        String comAdobeCqCqPreUpgradeCleanup = null;
        String comAdobeCqCqProductInfoProvider = null;
        String comAdobeCqCqRestSites = null;
        String comAdobeCqCqSecurityHc = null;
        String comAdobeCqDamCqDamSvgHandler = null;
        String comAdobeCqDamCqScene7Imaging = null;
        String comAdobeCqDtmReactorCore = null;
        String comAdobeCqDtmReactorUi = null;
        String comAdobeCqExpJspelResolver = null;
        String comAdobeCqInboxCqInbox = null;
        String comAdobeCqJsonSchemaParser = null;
        String comAdobeCqMediaCqMediaPublishingDpsFpCore = null;
        String comAdobeCqMobileCqMobileCaas = null;
        String comAdobeCqMobileCqMobileIndexBuilder = null;
        String comAdobeCqMobileCqMobilePhonegapBuild = null;
        String comAdobeCqMyspell = null;
        String comAdobeCqSampleWeRetailCore = null;
        String comAdobeCqScreensComAdobeCqScreensDcc = null;
        String comAdobeCqScreensComAdobeCqScreensMqCore = null;
        String comAdobeCqSocialCqSocialAsProvider = null;
        String comAdobeCqSocialCqSocialBadgingBasicImpl = null;
        String comAdobeCqSocialCqSocialBadgingImpl = null;
        String comAdobeCqSocialCqSocialCalendarImpl = null;
        String comAdobeCqSocialCqSocialContentFragmentsImpl = null;
        String comAdobeCqSocialCqSocialEnablementImpl = null;
        String comAdobeCqSocialCqSocialGraphImpl = null;
        String comAdobeCqSocialCqSocialIdeationImpl = null;
        String comAdobeCqSocialCqSocialJcrProvider = null;
        String comAdobeCqSocialCqSocialMembersImpl = null;
        String comAdobeCqSocialCqSocialMsProvider = null;
        String comAdobeCqSocialCqSocialNotificationsChannelsWeb = null;
        String comAdobeCqSocialCqSocialNotificationsImpl = null;
        String comAdobeCqSocialCqSocialRdbProvider = null;
        String comAdobeCqSocialCqSocialScfImpl = null;
        String comAdobeCqSocialCqSocialScoringBasicImpl = null;
        String comAdobeCqSocialCqSocialScoringImpl = null;
        String comAdobeCqSocialCqSocialServiceusersImpl = null;
        String comAdobeCqSocialCqSocialSrpImpl = null;
        String comAdobeCqSocialCqSocialUgcbaseImpl = null;
        String comAdobeDamCqDamCfmImpl = null;
        String comAdobeFormsFoundationFormsFoundationBase = null;
        String comAdobeGraniteApicontroller = null;
        String comAdobeGraniteAssetCore = null;
        String comAdobeGraniteAuthSso = null;
        String comAdobeGraniteBundlesHcImpl = null;
        String comAdobeGraniteCompatRouter = null;
        String comAdobeGraniteConf = null;
        String comAdobeGraniteConfUiCore = null;
        String comAdobeGraniteCors = null;
        String comAdobeGraniteCrxExplorer = null;
        String comAdobeGraniteCrxdeLite = null;
        String comAdobeGraniteCryptoConfig = null;
        String comAdobeGraniteCryptoExtension = null;
        String comAdobeGraniteCryptoFile = null;
        String comAdobeGraniteCryptoJcr = null;
        String comAdobeGraniteCsrf = null;
        String comAdobeGraniteDistributionCore = null;
        String comAdobeGraniteDropwizardMetrics = null;
        String comAdobeGraniteFragsImpl = null;
        String comAdobeGraniteGibson = null;
        String comAdobeGraniteInfocollector = null;
        String comAdobeGraniteInstallerFactoryPackages = null;
        String comAdobeGraniteJettySsl = null;
        String comAdobeGraniteJobsAsync = null;
        String comAdobeGraniteMaintenanceOak = null;
        String comAdobeGraniteMonitoringCore = null;
        String comAdobeGraniteQueries = null;
        String comAdobeGraniteReplicationHcImpl = null;
        String comAdobeGraniteRepositoryChecker = null;
        String comAdobeGraniteRepositoryHcImpl = null;
        String comAdobeGraniteRestAssets = null;
        String comAdobeGraniteSecurityUi = null;
        String comAdobeGraniteStartup = null;
        String comAdobeGraniteTagsoup = null;
        String comAdobeGraniteTaskmanagementCore = null;
        String comAdobeGraniteTaskmanagementWorkflow = null;
        String comAdobeGraniteUiClientlibsCompilerLess = null;
        String comAdobeGraniteUiClientlibsProcessorGcc = null;
        String comAdobeGraniteWebconsolePlugins = null;
        String comAdobeGraniteWorkflowConsole = null;
        String comAdobeXmpWorkerFilesNativeFragmentLinux = null;
        String comAdobeXmpWorkerFilesNativeFragmentMacosx = null;
        String comAdobeXmpWorkerFilesNativeFragmentWin = null;
        String comDayCommonsOsgiWrapperSimpleJndi = null;
        String comDayCqCqAuthhandler = null;
        String comDayCqCqCompatConfigupdate = null;
        String comDayCqCqLicensebranding = null;
        String comDayCqCqNotifcationImpl = null;
        String comDayCqCqReplicationAudit = null;
        String comDayCqCqSearchExt = null;
        String comDayCqDamCqDamAnnotationPrint = null;
        String comDayCqDamCqDamAssetUsage = null;
        String comDayCqDamCqDamS7dam = null;
        String comDayCqDamCqDamSimilaritysearch = null;
        String comDayCqDamDamWebdavSupport = null;
        String comDayCqPreUpgradeTasks = null;
        String comDayCqReplicationExtensions = null;
        String comDayCqWcmCqMsmCore = null;
        String comDayCqWcmCqWcmTranslation = null;
        String dayCommonsJrawio = null;
        String orgApacheAriesJmxWhiteboard = null;
        String orgApacheFelixHttpSslfilter = null;
        String orgApacheFelixOrgApacheFelixThreaddump = null;
        String orgApacheFelixWebconsolePluginsDs = null;
        String orgApacheFelixWebconsolePluginsEvent = null;
        String orgApacheFelixWebconsolePluginsMemoryusage = null;
        String orgApacheFelixWebconsolePluginsPackageadmin = null;
        String orgApacheJackrabbitOakAuthLdap = null;
        String orgApacheJackrabbitOakSegmentTar = null;
        String orgApacheJackrabbitOakSolrOsgi = null;
        String orgApacheSlingBundleresourceImpl = null;
        String orgApacheSlingCommonsFsclassloader = null;
        String orgApacheSlingCommonsLogWebconsole = null;
        String orgApacheSlingDatasource = null;
        String orgApacheSlingDiscoveryBase = null;
        String orgApacheSlingDiscoveryOak = null;
        String orgApacheSlingDiscoverySupport = null;
        String orgApacheSlingDistributionApi = null;
        String orgApacheSlingDistributionCore = null;
        String orgApacheSlingExtensionsWebconsolesecurityprovider = null;
        String orgApacheSlingHcWebconsole = null;
        String orgApacheSlingInstallerConsole = null;
        String orgApacheSlingInstallerProviderFile = null;
        String orgApacheSlingInstallerProviderJcr = null;
        String orgApacheSlingJcrDavex = null;
        String orgApacheSlingJcrResourcesecurity = null;
        String orgApacheSlingJmxProvider = null;
        String orgApacheSlingLaunchpadInstaller = null;
        String orgApacheSlingModelsImpl = null;
        String orgApacheSlingRepoinitParser = null;
        String orgApacheSlingResourceInventory = null;
        String orgApacheSlingResourceresolver = null;
        String orgApacheSlingScriptingJavascript = null;
        String orgApacheSlingScriptingJst = null;
        String orgApacheSlingScriptingSightlyJsProvider = null;
        String orgApacheSlingScriptingSightlyModelsProvider = null;
        String orgApacheSlingSecurity = null;
        String orgApacheSlingServletsCompat = null;
        String orgApacheSlingServletsGet = null;
        String orgApacheSlingStartupfilterDisabler = null;
        String orgApacheSlingTracer = null;
        String weRetailClientAppCore = null;
        //ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo response = api.comAdobeGraniteApicontrollerFilterResolverHookFactory(post, apply, delete, action, $location, propertylist, comAdobeCqCdnCdnRewriter, comAdobeCqCloudConfigComponents, comAdobeCqCloudConfigCore, comAdobeCqCloudConfigUi, comAdobeCqComAdobeCqEditor, comAdobeCqComAdobeCqProjectsCore, comAdobeCqComAdobeCqProjectsWcmCore, comAdobeCqComAdobeCqUiCommons, comAdobeCqComAdobeCqWcmStyle, comAdobeCqCqActivitymapIntegration, comAdobeCqCqContexthubCommons, comAdobeCqCqDtm, comAdobeCqCqHealthcheck, comAdobeCqCqMultisiteTargeting, comAdobeCqCqPreUpgradeCleanup, comAdobeCqCqProductInfoProvider, comAdobeCqCqRestSites, comAdobeCqCqSecurityHc, comAdobeCqDamCqDamSvgHandler, comAdobeCqDamCqScene7Imaging, comAdobeCqDtmReactorCore, comAdobeCqDtmReactorUi, comAdobeCqExpJspelResolver, comAdobeCqInboxCqInbox, comAdobeCqJsonSchemaParser, comAdobeCqMediaCqMediaPublishingDpsFpCore, comAdobeCqMobileCqMobileCaas, comAdobeCqMobileCqMobileIndexBuilder, comAdobeCqMobileCqMobilePhonegapBuild, comAdobeCqMyspell, comAdobeCqSampleWeRetailCore, comAdobeCqScreensComAdobeCqScreensDcc, comAdobeCqScreensComAdobeCqScreensMqCore, comAdobeCqSocialCqSocialAsProvider, comAdobeCqSocialCqSocialBadgingBasicImpl, comAdobeCqSocialCqSocialBadgingImpl, comAdobeCqSocialCqSocialCalendarImpl, comAdobeCqSocialCqSocialContentFragmentsImpl, comAdobeCqSocialCqSocialEnablementImpl, comAdobeCqSocialCqSocialGraphImpl, comAdobeCqSocialCqSocialIdeationImpl, comAdobeCqSocialCqSocialJcrProvider, comAdobeCqSocialCqSocialMembersImpl, comAdobeCqSocialCqSocialMsProvider, comAdobeCqSocialCqSocialNotificationsChannelsWeb, comAdobeCqSocialCqSocialNotificationsImpl, comAdobeCqSocialCqSocialRdbProvider, comAdobeCqSocialCqSocialScfImpl, comAdobeCqSocialCqSocialScoringBasicImpl, comAdobeCqSocialCqSocialScoringImpl, comAdobeCqSocialCqSocialServiceusersImpl, comAdobeCqSocialCqSocialSrpImpl, comAdobeCqSocialCqSocialUgcbaseImpl, comAdobeDamCqDamCfmImpl, comAdobeFormsFoundationFormsFoundationBase, comAdobeGraniteApicontroller, comAdobeGraniteAssetCore, comAdobeGraniteAuthSso, comAdobeGraniteBundlesHcImpl, comAdobeGraniteCompatRouter, comAdobeGraniteConf, comAdobeGraniteConfUiCore, comAdobeGraniteCors, comAdobeGraniteCrxExplorer, comAdobeGraniteCrxdeLite, comAdobeGraniteCryptoConfig, comAdobeGraniteCryptoExtension, comAdobeGraniteCryptoFile, comAdobeGraniteCryptoJcr, comAdobeGraniteCsrf, comAdobeGraniteDistributionCore, comAdobeGraniteDropwizardMetrics, comAdobeGraniteFragsImpl, comAdobeGraniteGibson, comAdobeGraniteInfocollector, comAdobeGraniteInstallerFactoryPackages, comAdobeGraniteJettySsl, comAdobeGraniteJobsAsync, comAdobeGraniteMaintenanceOak, comAdobeGraniteMonitoringCore, comAdobeGraniteQueries, comAdobeGraniteReplicationHcImpl, comAdobeGraniteRepositoryChecker, comAdobeGraniteRepositoryHcImpl, comAdobeGraniteRestAssets, comAdobeGraniteSecurityUi, comAdobeGraniteStartup, comAdobeGraniteTagsoup, comAdobeGraniteTaskmanagementCore, comAdobeGraniteTaskmanagementWorkflow, comAdobeGraniteUiClientlibsCompilerLess, comAdobeGraniteUiClientlibsProcessorGcc, comAdobeGraniteWebconsolePlugins, comAdobeGraniteWorkflowConsole, comAdobeXmpWorkerFilesNativeFragmentLinux, comAdobeXmpWorkerFilesNativeFragmentMacosx, comAdobeXmpWorkerFilesNativeFragmentWin, comDayCommonsOsgiWrapperSimpleJndi, comDayCqCqAuthhandler, comDayCqCqCompatConfigupdate, comDayCqCqLicensebranding, comDayCqCqNotifcationImpl, comDayCqCqReplicationAudit, comDayCqCqSearchExt, comDayCqDamCqDamAnnotationPrint, comDayCqDamCqDamAssetUsage, comDayCqDamCqDamS7dam, comDayCqDamCqDamSimilaritysearch, comDayCqDamDamWebdavSupport, comDayCqPreUpgradeTasks, comDayCqReplicationExtensions, comDayCqWcmCqMsmCore, comDayCqWcmCqWcmTranslation, dayCommonsJrawio, orgApacheAriesJmxWhiteboard, orgApacheFelixHttpSslfilter, orgApacheFelixOrgApacheFelixThreaddump, orgApacheFelixWebconsolePluginsDs, orgApacheFelixWebconsolePluginsEvent, orgApacheFelixWebconsolePluginsMemoryusage, orgApacheFelixWebconsolePluginsPackageadmin, orgApacheJackrabbitOakAuthLdap, orgApacheJackrabbitOakSegmentTar, orgApacheJackrabbitOakSolrOsgi, orgApacheSlingBundleresourceImpl, orgApacheSlingCommonsFsclassloader, orgApacheSlingCommonsLogWebconsole, orgApacheSlingDatasource, orgApacheSlingDiscoveryBase, orgApacheSlingDiscoveryOak, orgApacheSlingDiscoverySupport, orgApacheSlingDistributionApi, orgApacheSlingDistributionCore, orgApacheSlingExtensionsWebconsolesecurityprovider, orgApacheSlingHcWebconsole, orgApacheSlingInstallerConsole, orgApacheSlingInstallerProviderFile, orgApacheSlingInstallerProviderJcr, orgApacheSlingJcrDavex, orgApacheSlingJcrResourcesecurity, orgApacheSlingJmxProvider, orgApacheSlingLaunchpadInstaller, orgApacheSlingModelsImpl, orgApacheSlingRepoinitParser, orgApacheSlingResourceInventory, orgApacheSlingResourceresolver, orgApacheSlingScriptingJavascript, orgApacheSlingScriptingJst, orgApacheSlingScriptingSightlyJsProvider, orgApacheSlingScriptingSightlyModelsProvider, orgApacheSlingSecurity, orgApacheSlingServletsCompat, orgApacheSlingServletsGet, orgApacheSlingStartupfilterDisabler, orgApacheSlingTracer, weRetailClientAppCore);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthCertImplClientCertAuthHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        Integer serviceRanking = null;
        //ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo response = api.comAdobeGraniteAuthCertImplClientCertAuthHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthImsTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String configid = null;
        String scope = null;
        //ComAdobeGraniteAuthImsInfo response = api.comAdobeGraniteAuthIms(post, apply, delete, action, $location, propertylist, configid, scope);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        //ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo response = api.comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(post, apply, delete, action, $location, propertylist, oauthProviderId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String authImsClientSecret = null;
        String customizerType = null;
        //ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo response = api.comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(post, apply, delete, action, $location, propertylist, authImsClientSecret, customizerType);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        //ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo response = api.comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(post, apply, delete, action, $location, propertylist, oauthProviderId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthImsImplIMSProviderImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        String oauthProviderImsAuthorizationUrl = null;
        String oauthProviderImsTokenUrl = null;
        String oauthProviderImsProfileUrl = null;
        List<String> oauthProviderImsExtendedDetailsUrls = null;
        String oauthProviderImsValidateTokenUrl = null;
        String oauthProviderImsSessionProperty = null;
        String oauthProviderImsServiceTokenClientId = null;
        String oauthProviderImsServiceTokenClientSecret = null;
        String oauthProviderImsServiceToken = null;
        String imsOrgRef = null;
        List<String> imsGroupMapping = null;
        Boolean oauthProviderImsOnlyLicenseGroup = null;
        //ComAdobeGraniteAuthImsImplIMSProviderImplInfo response = api.comAdobeGraniteAuthImsImplIMSProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthProviderImsAuthorizationUrl, oauthProviderImsTokenUrl, oauthProviderImsProfileUrl, oauthProviderImsExtendedDetailsUrls, oauthProviderImsValidateTokenUrl, oauthProviderImsSessionProperty, oauthProviderImsServiceTokenClientId, oauthProviderImsServiceTokenClientSecret, oauthProviderImsServiceToken, imsOrgRef, imsGroupMapping, oauthProviderImsOnlyLicenseGroup);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthImsImplImsConfigProviderImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthConfigmanagerImsConfigid = null;
        String imsOwningEntity = null;
        String aemInstanceId = null;
        String imsServiceCode = null;
        //ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo response = api.comAdobeGraniteAuthImsImplImsConfigProviderImpl(post, apply, delete, action, $location, propertylist, oauthConfigmanagerImsConfigid, imsOwningEntity, aemInstanceId, imsServiceCode);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthAccesstokenProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String authTokenProviderTitle = null;
        List<String> authTokenProviderDefaultClaims = null;
        String authTokenProviderEndpoint = null;
        String authAccessTokenRequest = null;
        String authTokenProviderKeypairAlias = null;
        Integer authTokenProviderConnTimeout = null;
        Integer authTokenProviderSoTimeout = null;
        String authTokenProviderClientId = null;
        String authTokenProviderScope = null;
        Boolean authTokenProviderReuseAccessToken = null;
        Boolean authTokenProviderRelaxedSsl = null;
        String tokenRequestCustomizerType = null;
        String authTokenValidatorType = null;
        //ComAdobeGraniteAuthOauthAccesstokenProviderInfo response = api.comAdobeGraniteAuthOauthAccesstokenProvider(post, apply, delete, action, $location, propertylist, name, authTokenProviderTitle, authTokenProviderDefaultClaims, authTokenProviderEndpoint, authAccessTokenRequest, authTokenProviderKeypairAlias, authTokenProviderConnTimeout, authTokenProviderSoTimeout, authTokenProviderClientId, authTokenProviderScope, authTokenProviderReuseAccessToken, authTokenProviderRelaxedSsl, tokenRequestCustomizerType, authTokenValidatorType);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        List<String> oauthClientIdsAllowed = null;
        Boolean authBearerSyncIms = null;
        String authTokenRequestParameter = null;
        String oauthBearerConfigid = null;
        Boolean oauthJwtSupport = null;
        //ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo response = api.comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, oauthClientIdsAllowed, authBearerSyncIms, authTokenRequestParameter, oauthBearerConfigid, oauthJwtSupport);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String authTokenValidatorType = null;
        //ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo response = api.comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(post, apply, delete, action, $location, propertylist, authTokenValidatorType);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplFacebookProviderImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        //ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo response = api.comAdobeGraniteAuthOauthImplFacebookProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplGithubProviderImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        String oauthProviderGithubAuthorizationUrl = null;
        String oauthProviderGithubTokenUrl = null;
        String oauthProviderGithubProfileUrl = null;
        //ComAdobeGraniteAuthOauthImplGithubProviderImplInfo response = api.comAdobeGraniteAuthOauthImplGithubProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthProviderGithubAuthorizationUrl, oauthProviderGithubTokenUrl, oauthProviderGithubProfileUrl);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplGraniteProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        String oauthProviderGraniteAuthorizationUrl = null;
        String oauthProviderGraniteTokenUrl = null;
        String oauthProviderGraniteProfileUrl = null;
        String oauthProviderGraniteExtendedDetailsUrls = null;
        //ComAdobeGraniteAuthOauthImplGraniteProviderInfo response = api.comAdobeGraniteAuthOauthImplGraniteProvider(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthProviderGraniteAuthorizationUrl, oauthProviderGraniteTokenUrl, oauthProviderGraniteProfileUrl, oauthProviderGraniteExtendedDetailsUrls);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplHelperProviderConfigManagerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthCookieLoginTimeout = null;
        String oauthCookieMaxAge = null;
        //ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo response = api.comAdobeGraniteAuthOauthImplHelperProviderConfigManager(post, apply, delete, action, $location, propertylist, oauthCookieLoginTimeout, oauthCookieMaxAge);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthCookieLoginTimeout = null;
        String oauthCookieMaxAge = null;
        //ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo response = api.comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(post, apply, delete, action, $location, propertylist, oauthCookieLoginTimeout, oauthCookieMaxAge);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        //ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo response = api.comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(post, apply, delete, action, $location, propertylist, path);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplTwitterProviderImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        //ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo response = api.comAdobeGraniteAuthOauthImplTwitterProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthConfigId = null;
        String oauthClientId = null;
        String oauthClientSecret = null;
        List<String> oauthScope = null;
        String oauthConfigProviderId = null;
        Boolean oauthCreateUsers = null;
        String oauthUseridProperty = null;
        Boolean forceStrictUsernameMatching = null;
        Boolean oauthEncodeUserids = null;
        Boolean oauthHashUserids = null;
        String oauthCallBackUrl = null;
        Boolean oauthAccessTokenPersist = null;
        Boolean oauthAccessTokenPersistCookie = null;
        Boolean oauthCsrfStateProtection = null;
        Boolean oauthRedirectRequestParams = null;
        Boolean oauthConfigSiblingsAllow = null;
        //ComAdobeGraniteAuthOauthProviderInfo response = api.comAdobeGraniteAuthOauthProvider(post, apply, delete, action, $location, propertylist, oauthConfigId, oauthClientId, oauthClientSecret, oauthScope, oauthConfigProviderId, oauthCreateUsers, oauthUseridProperty, forceStrictUsernameMatching, oauthEncodeUserids, oauthHashUserids, oauthCallBackUrl, oauthAccessTokenPersist, oauthAccessTokenPersistCookie, oauthCsrfStateProtection, oauthRedirectRequestParams, oauthConfigSiblingsAllow);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> supportedPaths = null;
        //ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo response = api.comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(post, apply, delete, action, $location, propertylist, supportedPaths);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthSamlSamlAuthenticationHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> path = null;
        Integer serviceRanking = null;
        String idpUrl = null;
        String idpCertAlias = null;
        Boolean idpHttpRedirect = null;
        String serviceProviderEntityId = null;
        String assertionConsumerServiceURL = null;
        String spPrivateKeyAlias = null;
        String keyStorePassword = null;
        String defaultRedirectUrl = null;
        String userIDAttribute = null;
        Boolean useEncryption = null;
        Boolean createUser = null;
        String userIntermediatePath = null;
        Boolean addGroupMemberships = null;
        String groupMembershipAttribute = null;
        List<String> defaultGroups = null;
        String nameIdFormat = null;
        List<String> synchronizeAttributes = null;
        Boolean handleLogout = null;
        String logoutUrl = null;
        Integer clockTolerance = null;
        String digestMethod = null;
        String signatureMethod = null;
        String identitySyncType = null;
        String idpIdentifier = null;
        //ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo response = api.comAdobeGraniteAuthSamlSamlAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, userIntermediatePath, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, identitySyncType, idpIdentifier);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        Integer serviceRanking = null;
        String jaasControlFlag = null;
        String jaasRealmName = null;
        Integer jaasRanking = null;
        List<String> headers = null;
        List<String> cookies = null;
        List<String> parameters = null;
        List<String> usermap = null;
        String format = null;
        String trustedCredentialsAttribute = null;
        //ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo response = api.comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, jaasControlFlag, jaasRealmName, jaasRanking, headers, cookies, parameters, usermap, format, trustedCredentialsAttribute);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplCodeCacheHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        Integer minimumCodeCacheSize = null;
        //ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, minimumCodeCacheSize);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplDavExBundleHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        List<String> ignoredBundles = null;
        //ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, ignoredBundles);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplJobsHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        Integer maxQueuedJobs = null;
        //ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplJobsHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, maxQueuedJobs);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> replicateCommentResourceTypes = null;
        //ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo response = api.comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(post, apply, delete, action, $location, propertylist, replicateCommentResourceTypes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> compatgroups = null;
        Boolean enabled = null;
        //ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo response = api.comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(post, apply, delete, action, $location, propertylist, compatgroups, enabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCompatrouterImplRoutingConfigTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String id = null;
        String compatPath = null;
        String newPath = null;
        //ComAdobeGraniteCompatrouterImplRoutingConfigInfo response = api.comAdobeGraniteCompatrouterImplRoutingConfig(post, apply, delete, action, $location, propertylist, id, compatPath, newPath);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCompatrouterImplSwitchMappingConfigTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String group = null;
        List<String> ids = null;
        //ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo response = api.comAdobeGraniteCompatrouterImplSwitchMappingConfig(post, apply, delete, action, $location, propertylist, group, ids);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        List<String> fallbackPaths = null;
        //ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo response = api.comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(post, apply, delete, action, $location, propertylist, enabled, fallbackPaths);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteContexthubImplContextHubImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean comAdobeGraniteContexthubSilentMode = null;
        Boolean comAdobeGraniteContexthubShowUi = null;
        //ComAdobeGraniteContexthubImplContextHubImplInfo response = api.comAdobeGraniteContexthubImplContextHubImpl(post, apply, delete, action, $location, propertylist, comAdobeGraniteContexthubSilentMode, comAdobeGraniteContexthubShowUi);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCorsImplCORSPolicyImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> alloworigin = null;
        List<String> alloworiginregexp = null;
        List<String> allowedpaths = null;
        List<String> exposedheaders = null;
        Integer maxage = null;
        List<String> supportedheaders = null;
        List<String> supportedmethods = null;
        Boolean supportscredentials = null;
        //ComAdobeGraniteCorsImplCORSPolicyImplInfo response = api.comAdobeGraniteCorsImplCORSPolicyImpl(post, apply, delete, action, $location, propertylist, alloworigin, alloworiginregexp, allowedpaths, exposedheaders, maxage, supportedheaders, supportedmethods, supportscredentials);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCsrfImplCSRFFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> filterMethods = null;
        Boolean filterEnableSafeUserAgents = null;
        List<String> filterSafeUserAgents = null;
        List<String> filterExcludedPaths = null;
        //ComAdobeGraniteCsrfImplCSRFFilterInfo response = api.comAdobeGraniteCsrfImplCSRFFilter(post, apply, delete, action, $location, propertylist, filterMethods, filterEnableSafeUserAgents, filterSafeUserAgents, filterExcludedPaths);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCsrfImplCSRFServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer csrfTokenExpiresIn = null;
        String slingAuthRequirements = null;
        //ComAdobeGraniteCsrfImplCSRFServletInfo response = api.comAdobeGraniteCsrfImplCSRFServlet(post, apply, delete, action, $location, propertylist, csrfTokenExpiresIn, slingAuthRequirements);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String username = null;
        String encryptedPassword = null;
        //ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo response = api.comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(post, apply, delete, action, $location, propertylist, name, username, encryptedPassword);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        String agentName = null;
        String diffPath = null;
        String observedPath = null;
        String serviceName = null;
        String propertyNames = null;
        Integer distributionDelay = null;
        String serviceUserTarget = null;
        //ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo response = api.comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(post, apply, delete, action, $location, propertylist, enabled, agentName, diffPath, observedPath, serviceName, propertyNames, distributionDelay, serviceUserTarget);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplDiffDiffEventListenerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String diffPath = null;
        String serviceName = null;
        String serviceUserTarget = null;
        //ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo response = api.comAdobeGraniteDistributionCoreImplDiffDiffEventListener(post, apply, delete, action, $location, propertylist, diffPath, serviceName, serviceUserTarget);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> importerName = null;
        //ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo response = api.comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(post, apply, delete, action, $location, propertylist, importerName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerName = null;
        Boolean forwardRequests = null;
        //ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo response = api.comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(post, apply, delete, action, $location, propertylist, providerName, forwardRequests);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplReplicationDistributionTransTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean forwardRequests = null;
        //ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo response = api.comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(post, apply, delete, action, $location, propertylist, forwardRequests);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String serviceName = null;
        String userId = null;
        String accessTokenProviderTarget = null;
        //ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo response = api.comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(post, apply, delete, action, $location, propertylist, name, serviceName, userId, accessTokenProviderTarget);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteFragsImplCheckHttpHeaderFlagTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String featureName = null;
        String featureDescription = null;
        String httpHeaderName = null;
        String httpHeaderValuepattern = null;
        //ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo response = api.comAdobeGraniteFragsImplCheckHttpHeaderFlag(post, apply, delete, action, $location, propertylist, featureName, featureDescription, httpHeaderName, httpHeaderValuepattern);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteFragsImplRandomFeatureTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String featureName = null;
        String featureDescription = null;
        String activePercentage = null;
        String cookieName = null;
        Integer cookieMaxAge = null;
        //ComAdobeGraniteFragsImplRandomFeatureInfo response = api.comAdobeGraniteFragsImplRandomFeature(post, apply, delete, action, $location, propertylist, featureName, featureDescription, activePercentage, cookieName, cookieMaxAge);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteHttpcacheFileFileCacheStoreTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String comAdobeGraniteHttpcacheFileDocumentRoot = null;
        String comAdobeGraniteHttpcacheFileIncludeHost = null;
        //ComAdobeGraniteHttpcacheFileFileCacheStoreInfo response = api.comAdobeGraniteHttpcacheFileFileCacheStore(post, apply, delete, action, $location, propertylist, comAdobeGraniteHttpcacheFileDocumentRoot, comAdobeGraniteHttpcacheFileIncludeHost);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteHttpcacheImplOuterCacheFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> comAdobeGraniteHttpcacheUrlPaths = null;
        //ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo response = api.comAdobeGraniteHttpcacheImplOuterCacheFilter(post, apply, delete, action, $location, propertylist, comAdobeGraniteHttpcacheUrlPaths);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteI18nImplBundlePseudoTranslationsTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> pseudoPatterns = null;
        //ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo response = api.comAdobeGraniteI18nImplBundlePseudoTranslations(post, apply, delete, action, $location, propertylist, pseudoPatterns);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteI18nImplPreferencesLocaleResolverServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String securityPreferencesName = null;
        //ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo response = api.comAdobeGraniteI18nImplPreferencesLocaleResolverService(post, apply, delete, action, $location, propertylist, securityPreferencesName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteInfocollectorInfoCollectorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean graniteInfocollectorIncludeThreadDumps = null;
        Boolean graniteInfocollectorIncludeHeapDump = null;
        //ComAdobeGraniteInfocollectorInfoCollectorInfo response = api.comAdobeGraniteInfocollectorInfoCollector(post, apply, delete, action, $location, propertylist, graniteInfocollectorIncludeThreadDumps, graniteInfocollectorIncludeHeapDump);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer comAdobeGraniteJettySslPort = null;
        String comAdobeGraniteJettySslKeystoreUser = null;
        String comAdobeGraniteJettySslKeystorePassword = null;
        List<String> comAdobeGraniteJettySslCiphersuitesExcluded = null;
        List<String> comAdobeGraniteJettySslCiphersuitesIncluded = null;
        String comAdobeGraniteJettySslClientCertificate = null;
        //ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo response = api.comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(post, apply, delete, action, $location, propertylist, comAdobeGraniteJettySslPort, comAdobeGraniteJettySslKeystoreUser, comAdobeGraniteJettySslKeystorePassword, comAdobeGraniteJettySslCiphersuitesExcluded, comAdobeGraniteJettySslCiphersuitesIncluded, comAdobeGraniteJettySslClientCertificate);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteLicenseImplLicenseCheckFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer checkInternval = null;
        List<String> excludeIds = null;
        Boolean encryptPing = null;
        //ComAdobeGraniteLicenseImplLicenseCheckFilterInfo response = api.comAdobeGraniteLicenseImplLicenseCheckFilter(post, apply, delete, action, $location, propertylist, checkInternval, excludeIds, encryptPing);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteLoggingImplLogAnalyserImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer messagesQueueSize = null;
        List<String> loggerConfig = null;
        Integer messagesSize = null;
        //ComAdobeGraniteLoggingImplLogAnalyserImplInfo response = api.comAdobeGraniteLoggingImplLogAnalyserImpl(post, apply, delete, action, $location, propertylist, messagesQueueSize, loggerConfig, messagesSize);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteLoggingImplLogErrorHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo response = api.comAdobeGraniteLoggingImplLogErrorHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean graniteMaintenanceMandatory = null;
        String jobTopics = null;
        //ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo response = api.comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(post, apply, delete, action, $location, propertylist, graniteMaintenanceMandatory, jobTopics);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jobTopics = null;
        //ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo response = api.comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(post, apply, delete, action, $location, propertylist, jobTopics);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fullGcDays = null;
        //ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo response = api.comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(post, apply, delete, action, $location, propertylist, fullGcDays);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteMonitoringImplScriptConfigImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String scriptFilename = null;
        String scriptDisplay = null;
        String scriptPath = null;
        List<String> scriptPlatform = null;
        Integer interval = null;
        String jmxdomain = null;
        //ComAdobeGraniteMonitoringImplScriptConfigImplInfo response = api.comAdobeGraniteMonitoringImplScriptConfigImpl(post, apply, delete, action, $location, propertylist, scriptFilename, scriptDisplay, scriptPath, scriptPlatform, interval, jmxdomain);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        String jaasControlFlag = null;
        String jaasRealmName = null;
        Integer jaasRanking = null;
        Boolean oauthOfflineValidation = null;
        //ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo response = api.comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(post, apply, delete, action, $location, propertylist, path, jaasControlFlag, jaasRealmName, jaasRanking, oauthOfflineValidation);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOauthServerImplAccessTokenCleanupTaskTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        //ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo response = api.comAdobeGraniteOauthServerImplAccessTokenCleanupTask(post, apply, delete, action, $location, propertylist, schedulerExpression);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean oauthClientRevocationActive = null;
        //ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo response = api.comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(post, apply, delete, action, $location, propertylist, oauthClientRevocationActive);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletPaths = null;
        Boolean oauthRevocationActive = null;
        //ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo response = api.comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(post, apply, delete, action, $location, propertylist, slingServletPaths, oauthRevocationActive);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthIssuer = null;
        String oauthAccessTokenExpiresIn = null;
        String osgiHttpWhiteboardServletPattern = null;
        String osgiHttpWhiteboardContextSelect = null;
        //ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo response = api.comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(post, apply, delete, action, $location, propertylist, oauthIssuer, oauthAccessTokenExpiresIn, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean oauthTokenRevocationActive = null;
        //ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo response = api.comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(post, apply, delete, action, $location, propertylist, oauthTokenRevocationActive);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOffloadingImplOffloadingConfiguratorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String offloadingTransporter = null;
        Boolean offloadingCleanupPayload = null;
        //ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo response = api.comAdobeGraniteOffloadingImplOffloadingConfigurator(post, apply, delete, action, $location, propertylist, offloadingTransporter, offloadingCleanupPayload);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOffloadingImplOffloadingJobClonerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean offloadingJobclonerEnabled = null;
        //ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo response = api.comAdobeGraniteOffloadingImplOffloadingJobCloner(post, apply, delete, action, $location, propertylist, offloadingJobclonerEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOffloadingImplOffloadingJobOffloaderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean offloadingOffloaderEnabled = null;
        //ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo response = api.comAdobeGraniteOffloadingImplOffloadingJobOffloader(post, apply, delete, action, $location, propertylist, offloadingOffloaderEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean offloadingAgentmanagerEnabled = null;
        //ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo response = api.comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(post, apply, delete, action, $location, propertylist, offloadingAgentmanagerEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String defaultTransportAgentToWorkerPrefix = null;
        String defaultTransportAgentToMasterPrefix = null;
        String defaultTransportInputPackage = null;
        String defaultTransportOutputPackage = null;
        Boolean defaultTransportReplicationSynchronous = null;
        Boolean defaultTransportContentpackage = null;
        Boolean offloadingTransporterDefaultEnabled = null;
        //ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo response = api.comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(post, apply, delete, action, $location, propertylist, defaultTransportAgentToWorkerPrefix, defaultTransportAgentToMasterPrefix, defaultTransportInputPackage, defaultTransportOutputPackage, defaultTransportReplicationSynchronous, defaultTransportContentpackage, offloadingTransporterDefaultEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer omnisearchSuggestionRequiretextMin = null;
        Boolean omnisearchSuggestionSpellcheckRequire = null;
        //ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo response = api.comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(post, apply, delete, action, $location, propertylist, omnisearchSuggestionRequiretextMin, omnisearchSuggestionSpellcheckRequire);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOptoutImplOptOutServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> optoutCookies = null;
        List<String> optoutHeaders = null;
        List<String> optoutWhitelistCookies = null;
        //ComAdobeGraniteOptoutImplOptOutServiceImplInfo response = api.comAdobeGraniteOptoutImplOptOutServiceImpl(post, apply, delete, action, $location, propertylist, optoutCookies, optoutHeaders, optoutWhitelistCookies);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer indexingCriticalThreshold = null;
        Integer indexingWarnThreshold = null;
        List<String> hcTags = null;
        //ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo response = api.comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(post, apply, delete, action, $location, propertylist, indexingCriticalThreshold, indexingWarnThreshold, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteQueriesImplHcLargeIndexHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer largeIndexCriticalThreshold = null;
        Integer largeIndexWarnThreshold = null;
        List<String> hcTags = null;
        //ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo response = api.comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(post, apply, delete, action, $location, propertylist, largeIndexCriticalThreshold, largeIndexWarnThreshold, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo response = api.comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer getPeriod = null;
        //ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo response = api.comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(post, apply, delete, action, $location, propertylist, getPeriod);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo response = api.comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer numberOfRetriesAllowed = null;
        List<String> hcTags = null;
        //ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo response = api.comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(post, apply, delete, action, $location, propertylist, numberOfRetriesAllowed, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo response = api.comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo response = api.comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        List<String> excludeSearchPath = null;
        //ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo response = api.comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(post, apply, delete, action, $location, propertylist, hcTags, excludeSearchPath);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo response = api.comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo response = api.comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        List<String> accountLogins = null;
        List<String> consoleLogins = null;
        //ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo response = api.comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, accountLogins, consoleLogins);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        Integer diskSpaceWarnThreshold = null;
        Integer diskSpaceErrorThreshold = null;
        //ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo response = api.comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, diskSpaceWarnThreshold, diskSpaceErrorThreshold);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo response = api.comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryImplCommitStatsConfigTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        Integer intervalSeconds = null;
        Integer commitsPerIntervalThreshold = null;
        Integer maxLocationLength = null;
        Integer maxDetailsShown = null;
        Integer minDetailsPercentage = null;
        List<String> threadMatchers = null;
        Integer maxGreedyDepth = null;
        String greedyStackMatchers = null;
        List<String> stackFilters = null;
        List<String> stackMatchers = null;
        List<String> stackCategorizers = null;
        List<String> stackShorteners = null;
        //ComAdobeGraniteRepositoryImplCommitStatsConfigInfo response = api.comAdobeGraniteRepositoryImplCommitStatsConfig(post, apply, delete, action, $location, propertylist, enabled, intervalSeconds, commitsPerIntervalThreshold, maxLocationLength, maxDetailsShown, minDetailsPercentage, threadMatchers, maxGreedyDepth, greedyStackMatchers, stackFilters, stackMatchers, stackCategorizers, stackShorteners);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryServiceUserConfigurationTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        Boolean serviceusersSimpleSubjectPopulation = null;
        List<String> serviceusersList = null;
        //ComAdobeGraniteRepositoryServiceUserConfigurationInfo response = api.comAdobeGraniteRepositoryServiceUserConfiguration(post, apply, delete, action, $location, propertylist, serviceRanking, serviceusersSimpleSubjectPopulation, serviceusersList);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo response = api.comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteResourcestatusImplCompositeStatusTypeTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        List<String> types = null;
        //ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo response = api.comAdobeGraniteResourcestatusImplCompositeStatusType(post, apply, delete, action, $location, propertylist, name, types);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteResourcestatusImplStatusResourceProviderImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerRoot = null;
        //ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo response = api.comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(post, apply, delete, action, $location, propertylist, providerRoot);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRestAssetsImplAssetContentDispositionFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean mimeAllowEmpty = null;
        List<String> mimeAllowed = null;
        //ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo response = api.comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(post, apply, delete, action, $location, propertylist, mimeAllowEmpty, mimeAllowed);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerRoots = null;
        //ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo response = api.comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(post, apply, delete, action, $location, propertylist, providerRoots);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRestImplServletDefaultGETServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer defaultLimit = null;
        Boolean useAbsoluteUri = null;
        //ComAdobeGraniteRestImplServletDefaultGETServletInfo response = api.comAdobeGraniteRestImplServletDefaultGETServlet(post, apply, delete, action, $location, propertylist, defaultLimit, useAbsoluteUri);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        //ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo response = api.comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(post, apply, delete, action, $location, propertylist, hcTags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteSecurityUserUserPropertiesServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String adapterCondition = null;
        List<String> graniteUserpropertiesNodetypes = null;
        List<String> graniteUserpropertiesResourcetypes = null;
        //ComAdobeGraniteSecurityUserUserPropertiesServiceInfo response = api.comAdobeGraniteSecurityUserUserPropertiesService(post, apply, delete, action, $location, propertylist, adapterCondition, graniteUserpropertiesNodetypes, graniteUserpropertiesResourcetypes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteSocialgraphImplSocialGraphFactoryImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String group2memberRelationshipOutgoing = null;
        List<String> group2memberExcludedOutgoing = null;
        String group2memberRelationshipIncoming = null;
        List<String> group2memberExcludedIncoming = null;
        //ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo response = api.comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(post, apply, delete, action, $location, propertylist, group2memberRelationshipOutgoing, group2memberExcludedOutgoing, group2memberRelationshipIncoming, group2memberExcludedIncoming);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        String jmxObjectname = null;
        //ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo response = api.comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(post, apply, delete, action, $location, propertylist, schedulerExpression, jmxObjectname);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String adapterCondition = null;
        //ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo response = api.comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(post, apply, delete, action, $location, propertylist, adapterCondition);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean archivingEnabled = null;
        String schedulerExpression = null;
        Integer archiveSinceDaysCompleted = null;
        //ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo response = api.comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(post, apply, delete, action, $location, propertylist, archivingEnabled, schedulerExpression, archiveSinceDaysCompleted);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean purgeCompleted = null;
        Integer completedAge = null;
        Boolean purgeActive = null;
        Integer activeAge = null;
        Integer saveThreshold = null;
        //ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo response = api.comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(post, apply, delete, action, $location, propertylist, purgeCompleted, completedAge, purgeActive, activeAge, saveThreshold);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String adapterCondition = null;
        List<String> taskmanagerAdmingroups = null;
        //ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo response = api.comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(post, apply, delete, action, $location, propertylist, adapterCondition, taskmanagerAdmingroups);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteThreaddumpThreadDumpCollectorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer schedulerPeriod = null;
        String schedulerRunOn = null;
        Boolean graniteThreaddumpEnabled = null;
        Integer graniteThreaddumpDumpsPerFile = null;
        Boolean graniteThreaddumpEnableGzipCompression = null;
        Boolean graniteThreaddumpEnableDirectoriesCompression = null;
        Boolean graniteThreaddumpEnableJStack = null;
        Integer graniteThreaddumpMaxBackupDays = null;
        String graniteThreaddumpBackupCleanTrigger = null;
        //ComAdobeGraniteThreaddumpThreadDumpCollectorInfo response = api.comAdobeGraniteThreaddumpThreadDumpCollector(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerRunOn, graniteThreaddumpEnabled, graniteThreaddumpDumpsPerFile, graniteThreaddumpEnableGzipCompression, graniteThreaddumpEnableDirectoriesCompression, graniteThreaddumpEnableJStack, graniteThreaddumpMaxBackupDays, graniteThreaddumpBackupCleanTrigger);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String translationFactory = null;
        String defaultConnectorLabel = null;
        String defaultConnectorAttribution = null;
        String defaultConnectorWorkspaceId = null;
        String defaultConnectorSubscriptionKey = null;
        String languageMapLocation = null;
        String categoryMapLocation = null;
        Integer retryAttempts = null;
        Integer timeoutCount = null;
        //ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo response = api.comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(post, apply, delete, action, $location, propertylist, translationFactory, defaultConnectorLabel, defaultConnectorAttribution, defaultConnectorWorkspaceId, defaultConnectorSubscriptionKey, languageMapLocation, categoryMapLocation, retryAttempts, timeoutCount);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteTranslationCoreImplTranslationManagerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String defaultConnectorName = null;
        String defaultCategory = null;
        //ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo response = api.comAdobeGraniteTranslationCoreImplTranslationManagerImpl(post, apply, delete, action, $location, propertylist, defaultConnectorName, defaultCategory);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean htmllibmanagerTiming = null;
        String htmllibmanagerDebugInitJs = null;
        Boolean htmllibmanagerMinify = null;
        Boolean htmllibmanagerDebug = null;
        Boolean htmllibmanagerGzip = null;
        Integer htmllibmanagerMaxDataUriSize = null;
        Integer htmllibmanagerMaxage = null;
        Boolean htmllibmanagerForceCQUrlInfo = null;
        String htmllibmanagerDefaultthemename = null;
        String htmllibmanagerDefaultuserthemename = null;
        String htmllibmanagerClientmanager = null;
        List<String> htmllibmanagerPathList = null;
        List<String> htmllibmanagerExcludedPathList = null;
        List<String> htmllibmanagerProcessorJs = null;
        List<String> htmllibmanagerProcessorCss = null;
        List<String> htmllibmanagerLongcachePatterns = null;
        String htmllibmanagerLongcacheFormat = null;
        Boolean htmllibmanagerUseFileSystemOutputCache = null;
        String htmllibmanagerFileSystemOutputCacheLocation = null;
        List<String> htmllibmanagerDisableReplacement = null;
        //ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo response = api.comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(post, apply, delete, action, $location, propertylist, htmllibmanagerTiming, htmllibmanagerDebugInitJs, htmllibmanagerMinify, htmllibmanagerDebug, htmllibmanagerGzip, htmllibmanagerMaxDataUriSize, htmllibmanagerMaxage, htmllibmanagerForceCQUrlInfo, htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename, htmllibmanagerClientmanager, htmllibmanagerPathList, htmllibmanagerExcludedPathList, htmllibmanagerProcessorJs, htmllibmanagerProcessorCss, htmllibmanagerLongcachePatterns, htmllibmanagerLongcacheFormat, htmllibmanagerUseFileSystemOutputCache, htmllibmanagerFileSystemOutputCacheLocation, htmllibmanagerDisableReplacement);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        //ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo response = api.comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(post, apply, delete, action, $location, propertylist, enabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean graniteWorkflowWorkflowPublishEventServiceEnabled = null;
        //ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo response = api.comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(post, apply, delete, action, $location, propertylist, graniteWorkflowWorkflowPublishEventServiceEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer bucketSize = null;
        //ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo response = api.comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(post, apply, delete, action, $location, propertylist, bucketSize);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer defaultTimeout = null;
        Integer maxTimeout = null;
        Integer defaultPeriod = null;
        //ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo response = api.comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(post, apply, delete, action, $location, propertylist, defaultTimeout, maxTimeout, defaultPeriod);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCoreJobJobHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> jobTopics = null;
        Boolean allowSelfProcessTermination = null;
        //ComAdobeGraniteWorkflowCoreJobJobHandlerInfo response = api.comAdobeGraniteWorkflowCoreJobJobHandler(post, apply, delete, action, $location, propertylist, jobTopics, allowSelfProcessTermination);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jobTopics = null;
        //ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo response = api.comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(post, apply, delete, action, $location, propertylist, jobTopics);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCorePayloadMapCacheTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> getSystemWorkflowModels = null;
        String getPackageRootPath = null;
        //ComAdobeGraniteWorkflowCorePayloadMapCacheInfo response = api.comAdobeGraniteWorkflowCorePayloadMapCache(post, apply, delete, action, $location, propertylist, getSystemWorkflowModels, getPackageRootPath);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> payloadMoveWhiteList = null;
        Boolean payloadMoveHandleFromWorkflowProcess = null;
        //ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo response = api.comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(post, apply, delete, action, $location, propertylist, payloadMoveWhiteList, payloadMoveHandleFromWorkflowProcess);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCoreWorkflowConfigTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWorkflowConfigWorkflowPackagesRootPath = null;
        Boolean cqWorkflowConfigWorkflowProcessLegacyMode = null;
        Boolean cqWorkflowConfigAllowLocking = null;
        //ComAdobeGraniteWorkflowCoreWorkflowConfigInfo response = api.comAdobeGraniteWorkflowCoreWorkflowConfig(post, apply, delete, action, $location, propertylist, cqWorkflowConfigWorkflowPackagesRootPath, cqWorkflowConfigWorkflowProcessLegacyMode, cqWorkflowConfigAllowLocking);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCoreWorkflowSessionFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String graniteWorkflowinboxSortPropertyName = null;
        String graniteWorkflowinboxSortOrder = null;
        Integer cqWorkflowJobRetry = null;
        List<String> cqWorkflowSuperuser = null;
        Integer graniteWorkflowInboxQuerySize = null;
        Boolean graniteWorkflowAdminUserGroupFilter = null;
        Boolean graniteWorkflowEnforceWorkitemAssigneePermissions = null;
        Boolean graniteWorkflowEnforceWorkflowInitiatorPermissions = null;
        Boolean graniteWorkflowInjectTenantIdInJobTopics = null;
        Integer graniteWorkflowMaxPurgeSaveThreshold = null;
        Integer graniteWorkflowMaxPurgeQueryCount = null;
        //ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo response = api.comAdobeGraniteWorkflowCoreWorkflowSessionFactory(post, apply, delete, action, $location, propertylist, graniteWorkflowinboxSortPropertyName, graniteWorkflowinboxSortOrder, cqWorkflowJobRetry, cqWorkflowSuperuser, graniteWorkflowInboxQuerySize, graniteWorkflowAdminUserGroupFilter, graniteWorkflowEnforceWorkitemAssigneePermissions, graniteWorkflowEnforceWorkflowInitiatorPermissions, graniteWorkflowInjectTenantIdInJobTopics, graniteWorkflowMaxPurgeSaveThreshold, graniteWorkflowMaxPurgeQueryCount);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowPurgeSchedulerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String scheduledpurgeName = null;
        String scheduledpurgeWorkflowStatus = null;
        List<String> scheduledpurgeModelIds = null;
        Integer scheduledpurgeDaysold = null;
        //ComAdobeGraniteWorkflowPurgeSchedulerInfo response = api.comAdobeGraniteWorkflowPurgeScheduler(post, apply, delete, action, $location, propertylist, scheduledpurgeName, scheduledpurgeWorkflowStatus, scheduledpurgeModelIds, scheduledpurgeDaysold);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeOctopusNcommBootstrapTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxConnections = null;
        Integer maxRequests = null;
        Integer requestTimeout = null;
        Integer requestRetries = null;
        Integer launchTimeout = null;
        //ComAdobeOctopusNcommBootstrapInfo response = api.comAdobeOctopusNcommBootstrap(post, apply, delete, action, $location, propertylist, maxConnections, maxRequests, requestTimeout, requestRetries, launchTimeout);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String communitiesIntegrationLivefyreSlingEventFilter = null;
        //ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo response = api.comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(post, apply, delete, action, $location, propertylist, communitiesIntegrationLivefyreSlingEventFilter);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeXmpWorkerFilesNcommXMPFilesNCommTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String maxConnections = null;
        String maxRequests = null;
        String requestTimeout = null;
        String logDir = null;
        //ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo response = api.comAdobeXmpWorkerFilesNcommXMPFilesNComm(post, apply, delete, action, $location, propertylist, maxConnections, maxRequests, requestTimeout, logDir);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCommonsDatasourceJdbcpoolJdbcPoolServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jdbcDriverClass = null;
        String jdbcConnectionUri = null;
        String jdbcUsername = null;
        String jdbcPassword = null;
        String jdbcValidationQuery = null;
        Boolean defaultReadonly = null;
        Boolean defaultAutocommit = null;
        Integer poolSize = null;
        Integer poolMaxWaitMsec = null;
        String datasourceName = null;
        List<String> datasourceSvcProperties = null;
        //ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo response = api.comDayCommonsDatasourceJdbcpoolJdbcPoolService(post, apply, delete, action, $location, propertylist, jdbcDriverClass, jdbcConnectionUri, jdbcUsername, jdbcPassword, jdbcValidationQuery, defaultReadonly, defaultAutocommit, poolSize, poolMaxWaitMsec, datasourceName, datasourceSvcProperties);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCommonsHttpclientTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean proxyEnabled = null;
        String proxyHost = null;
        String proxyUser = null;
        String proxyPassword = null;
        String proxyNtlmHost = null;
        String proxyNtlmDomain = null;
        List<String> proxyExceptions = null;
        //ComDayCommonsHttpclientInfo response = api.comDayCommonsHttpclient(post, apply, delete, action, $location, propertylist, proxyEnabled, proxyHost, proxyUser, proxyPassword, proxyNtlmHost, proxyNtlmDomain, proxyExceptions);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsImplStorePropertiesChangeListenerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqStoreListenerAdditionalStorePaths = null;
        //ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo response = api.comDayCqAnalyticsImplStorePropertiesChangeListener(post, apply, delete, action, $location, propertylist, cqStoreListenerAdditionalStorePaths);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> allowedPaths = null;
        Integer cqAnalyticsSaintExporterPagesize = null;
        //ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo response = api.comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(post, apply, delete, action, $location, propertylist, allowedPaths, cqAnalyticsSaintExporterPagesize);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsSitecatalystImplImporterReportImporterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer reportFetchAttempts = null;
        Integer reportFetchDelay = null;
        //ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo response = api.comDayCqAnalyticsSitecatalystImplImporterReportImporter(post, apply, delete, action, $location, propertylist, reportFetchAttempts, reportFetchDelay);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqAnalyticsAdapterfactoryContextstores = null;
        //ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo response = api.comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(post, apply, delete, action, $location, propertylist, cqAnalyticsAdapterfactoryContextstores);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqAnalyticsSitecatalystServiceDatacenterUrl = null;
        List<String> devhostnamepatterns = null;
        Integer connectionTimeout = null;
        Integer socketTimeout = null;
        //ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo response = api.comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(post, apply, delete, action, $location, propertylist, cqAnalyticsSitecatalystServiceDatacenterUrl, devhostnamepatterns, connectionTimeout, socketTimeout);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqAnalyticsTestandtargetAccountoptionsupdaterEnabled = null;
        //ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo response = api.comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetAccountoptionsupdaterEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled = null;
        //ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo response = api.comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled = null;
        //ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo response = api.comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplSegmentImporterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqAnalyticsTestandtargetSegmentimporterEnabled = null;
        //ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo response = api.comDayCqAnalyticsTestandtargetImplSegmentImporter(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetSegmentimporterEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplServiceWebServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String endpointUri = null;
        Integer connectionTimeout = null;
        Integer socketTimeout = null;
        //ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo response = api.comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(post, apply, delete, action, $location, propertylist, endpointUri, connectionTimeout, socketTimeout);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplServletsAdminServerServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String testandtargetEndpointUrl = null;
        //ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo response = api.comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(post, apply, delete, action, $location, propertylist, testandtargetEndpointUrl);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cqAnalyticsTestandtargetApiUrl = null;
        Integer cqAnalyticsTestandtargetTimeout = null;
        Integer cqAnalyticsTestandtargetSockettimeout = null;
        String cqAnalyticsTestandtargetRecommendationsUrlReplace = null;
        String cqAnalyticsTestandtargetRecommendationsUrlReplacewith = null;
        //ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo response = api.comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetApiUrl, cqAnalyticsTestandtargetTimeout, cqAnalyticsTestandtargetSockettimeout, cqAnalyticsTestandtargetRecommendationsUrlReplace, cqAnalyticsTestandtargetRecommendationsUrlReplacewith);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAuthImplCugCugSupportImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cugExemptedPrincipals = null;
        Boolean cugEnabled = null;
        String cugPrincipalsRegex = null;
        String cugPrincipalsReplacement = null;
        //ComDayCqAuthImplCugCugSupportImplInfo response = api.comDayCqAuthImplCugCugSupportImpl(post, apply, delete, action, $location, propertylist, cugExemptedPrincipals, cugEnabled, cugPrincipalsRegex, cugPrincipalsReplacement);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAuthImplLoginSelectorHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        Integer serviceRanking = null;
        List<String> authLoginselectorMappings = null;
        List<String> authLoginselectorChangepwMappings = null;
        String authLoginselectorDefaultloginpage = null;
        String authLoginselectorDefaultchangepwpage = null;
        List<String> authLoginselectorHandle = null;
        Boolean authLoginselectorHandleAllExtensions = null;
        //ComDayCqAuthImplLoginSelectorHandlerInfo response = api.comDayCqAuthImplLoginSelectorHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, authLoginselectorMappings, authLoginselectorChangepwMappings, authLoginselectorDefaultloginpage, authLoginselectorDefaultchangepwpage, authLoginselectorHandle, authLoginselectorHandleAllExtensions);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqCommonsImplExternalizerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> externalizerDomains = null;
        String externalizerHost = null;
        String externalizerContextpath = null;
        Boolean externalizerEncodedpath = null;
        //ComDayCqCommonsImplExternalizerImplInfo response = api.comDayCqCommonsImplExternalizerImpl(post, apply, delete, action, $location, propertylist, externalizerDomains, externalizerHost, externalizerContextpath, externalizerEncodedpath);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqCommonsServletsRootMappingServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String rootmappingTarget = null;
        //ComDayCqCommonsServletsRootMappingServletInfo response = api.comDayCqCommonsServletsRootMappingServlet(post, apply, delete, action, $location, propertylist, rootmappingTarget);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> codeupgradetasks = null;
        List<String> codeupgradetaskfilters = null;
        //ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo response = api.comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(post, apply, delete, action, $location, propertylist, codeupgradetasks, codeupgradetaskfilters);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> upgradeTaskIgnoreList = null;
        //ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo response = api.comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(post, apply, delete, action, $location, propertylist, upgradeTaskIgnoreList);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String effectiveBundleListPath = null;
        //ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo response = api.comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(post, apply, delete, action, $location, propertylist, effectiveBundleListPath);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqContentsyncImplContentSyncManagerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String contentsyncFallbackAuthorizable = null;
        String contentsyncFallbackUpdateuser = null;
        //ComDayCqContentsyncImplContentSyncManagerImplInfo response = api.comDayCqContentsyncImplContentSyncManagerImpl(post, apply, delete, action, $location, propertylist, contentsyncFallbackAuthorizable, contentsyncFallbackUpdateuser);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCommonsHandlerStandardImageHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer largeFileThreshold = null;
        Integer largeCommentThreshold = null;
        Boolean cqDamEnableExtMetaExtraction = null;
        //ComDayCqDamCommonsHandlerStandardImageHandlerInfo response = api.comDayCqDamCommonsHandlerStandardImageHandler(post, apply, delete, action, $location, propertylist, largeFileThreshold, largeCommentThreshold, cqDamEnableExtMetaExtraction);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCommonsMetadataXmpFilterBlackWhiteTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean xmpFilterApplyWhitelist = null;
        List<String> xmpFilterWhitelist = null;
        Boolean xmpFilterApplyBlacklist = null;
        List<String> xmpFilterBlacklist = null;
        //ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo response = api.comDayCqDamCommonsMetadataXmpFilterBlackWhite(post, apply, delete, action, $location, propertylist, xmpFilterApplyWhitelist, xmpFilterWhitelist, xmpFilterApplyBlacklist, xmpFilterBlacklist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCommonsUtilImplAssetCacheImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer largeFileMin = null;
        Boolean cacheApply = null;
        List<String> mimeTypes = null;
        //ComDayCqDamCommonsUtilImplAssetCacheImplInfo response = api.comDayCqDamCommonsUtilImplAssetCacheImpl(post, apply, delete, action, $location, propertylist, largeFileMin, cacheApply, mimeTypes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamConfigAnnotationPdfDocumentWidth = null;
        Integer cqDamConfigAnnotationPdfDocumentHeight = null;
        Integer cqDamConfigAnnotationPdfDocumentPaddingHorizontal = null;
        Integer cqDamConfigAnnotationPdfDocumentPaddingVertical = null;
        Integer cqDamConfigAnnotationPdfFontSize = null;
        String cqDamConfigAnnotationPdfFontColor = null;
        String cqDamConfigAnnotationPdfFontFamily = null;
        String cqDamConfigAnnotationPdfFontLight = null;
        Integer cqDamConfigAnnotationPdfMarginTextImage = null;
        Integer cqDamConfigAnnotationPdfMinImageHeight = null;
        Integer cqDamConfigAnnotationPdfReviewStatusWidth = null;
        String cqDamConfigAnnotationPdfReviewStatusColorApproved = null;
        String cqDamConfigAnnotationPdfReviewStatusColorRejected = null;
        String cqDamConfigAnnotationPdfReviewStatusColorChangesRequested = null;
        Integer cqDamConfigAnnotationPdfAnnotationMarkerWidth = null;
        Integer cqDamConfigAnnotationPdfAssetMinheight = null;
        //ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo response = api.comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(post, apply, delete, action, $location, propertylist, cqDamConfigAnnotationPdfDocumentWidth, cqDamConfigAnnotationPdfDocumentHeight, cqDamConfigAnnotationPdfDocumentPaddingHorizontal, cqDamConfigAnnotationPdfDocumentPaddingVertical, cqDamConfigAnnotationPdfFontSize, cqDamConfigAnnotationPdfFontColor, cqDamConfigAnnotationPdfFontFamily, cqDamConfigAnnotationPdfFontLight, cqDamConfigAnnotationPdfMarginTextImage, cqDamConfigAnnotationPdfMinImageHeight, cqDamConfigAnnotationPdfReviewStatusWidth, cqDamConfigAnnotationPdfReviewStatusColorApproved, cqDamConfigAnnotationPdfReviewStatusColorRejected, cqDamConfigAnnotationPdfReviewStatusColorChangesRequested, cqDamConfigAnnotationPdfAnnotationMarkerWidth, cqDamConfigAnnotationPdfAssetMinheight);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplAssetMoveListenerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        //ComDayCqDamCoreImplAssetMoveListenerInfo response = api.comDayCqDamCoreImplAssetMoveListener(post, apply, delete, action, $location, propertylist, enabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplAssethomeAssetHomePageConfigurationTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean isEnabled = null;
        //ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo response = api.comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(post, apply, delete, action, $location, propertylist, isEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamAdhocAssetSharePrezipMaxcontentsize = null;
        //ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo response = api.comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(post, apply, delete, action, $location, propertylist, cqDamAdhocAssetSharePrezipMaxcontentsize);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplCacheCQBufferedImageCacheTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamImageCacheMaxMemory = null;
        Integer cqDamImageCacheMaxAge = null;
        String cqDamImageCacheMaxDimension = null;
        //ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo response = api.comDayCqDamCoreImplCacheCQBufferedImageCache(post, apply, delete, action, $location, propertylist, cqDamImageCacheMaxMemory, cqDamImageCacheMaxAge, cqDamImageCacheMaxDimension);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplDamChangeEventListenerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> changeeventlistenerObservedPaths = null;
        //ComDayCqDamCoreImplDamChangeEventListenerInfo response = api.comDayCqDamCoreImplDamChangeEventListener(post, apply, delete, action, $location, propertylist, changeeventlistenerObservedPaths);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplDamEventPurgeServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        Integer maxSavedActivities = null;
        Integer saveInterval = null;
        Boolean enableActivityPurge = null;
        String eventTypes = null;
        //ComDayCqDamCoreImplDamEventPurgeServiceInfo response = api.comDayCqDamCoreImplDamEventPurgeService(post, apply, delete, action, $location, propertylist, schedulerExpression, maxSavedActivities, saveInterval, enableActivityPurge, eventTypes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplDamEventRecorderImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        Integer eventQueueLength = null;
        Boolean eventrecorderEnabled = null;
        List<String> eventrecorderBlacklist = null;
        String eventrecorderEventtypes = null;
        //ComDayCqDamCoreImplDamEventRecorderImplInfo response = api.comDayCqDamCoreImplDamEventRecorderImpl(post, apply, delete, action, $location, propertylist, eventFilter, eventQueueLength, eventrecorderEnabled, eventrecorderBlacklist, eventrecorderEventtypes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplEventDamEventAuditListenerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        Boolean enabled = null;
        //ComDayCqDamCoreImplEventDamEventAuditListenerInfo response = api.comDayCqDamCoreImplEventDamEventAuditListener(post, apply, delete, action, $location, propertylist, eventFilter, enabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplExpiryNotificationJobImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamExpiryNotificationSchedulerIstimebased = null;
        String cqDamExpiryNotificationSchedulerTimebasedRule = null;
        Integer cqDamExpiryNotificationSchedulerPeriodRule = null;
        Boolean sendEmail = null;
        Integer assetExpiredLimit = null;
        Integer priorNotificationSeconds = null;
        String cqDamExpiryNotificationUrlProtocol = null;
        //ComDayCqDamCoreImplExpiryNotificationJobImplInfo response = api.comDayCqDamCoreImplExpiryNotificationJobImpl(post, apply, delete, action, $location, propertylist, cqDamExpiryNotificationSchedulerIstimebased, cqDamExpiryNotificationSchedulerTimebasedRule, cqDamExpiryNotificationSchedulerPeriodRule, sendEmail, assetExpiredLimit, priorNotificationSeconds, cqDamExpiryNotificationUrlProtocol);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean isEnabled = null;
        //ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo response = api.comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(post, apply, delete, action, $location, propertylist, isEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplGfxCommonsGfxRendererTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean skipBufferedcache = null;
        //ComDayCqDamCoreImplGfxCommonsGfxRendererInfo response = api.comDayCqDamCoreImplGfxCommonsGfxRenderer(post, apply, delete, action, $location, propertylist, skipBufferedcache);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplHandlerEPSFormatHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String mimetype = null;
        //ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo response = api.comDayCqDamCoreImplHandlerEPSFormatHandler(post, apply, delete, action, $location, propertylist, mimetype);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplHandlerIndesignFormatHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> mimetype = null;
        //ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo response = api.comDayCqDamCoreImplHandlerIndesignFormatHandler(post, apply, delete, action, $location, propertylist, mimetype);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplHandlerJpegHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamEnableExtMetaExtraction = null;
        Integer largeFileThreshold = null;
        Integer largeCommentThreshold = null;
        //ComDayCqDamCoreImplHandlerJpegHandlerInfo response = api.comDayCqDamCoreImplHandlerJpegHandler(post, apply, delete, action, $location, propertylist, cqDamEnableExtMetaExtraction, largeFileThreshold, largeCommentThreshold);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplHandlerXmpNCommXMPHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> xmphandlerCqFormats = null;
        //ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo response = api.comDayCqDamCoreImplHandlerXmpNCommXMPHandler(post, apply, delete, action, $location, propertylist, xmphandlerCqFormats);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplJmxAssetIndexUpdateMonitorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jmxObjectname = null;
        Boolean propertyMeasureEnabled = null;
        String propertyName = null;
        Integer propertyMaxWaitMs = null;
        BigDecimal propertyMaxRate = null;
        Boolean fulltextMeasureEnabled = null;
        String fulltextName = null;
        Integer fulltextMaxWaitMs = null;
        BigDecimal fulltextMaxRate = null;
        //ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo response = api.comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(post, apply, delete, action, $location, propertylist, jmxObjectname, propertyMeasureEnabled, propertyName, propertyMaxWaitMs, propertyMaxRate, fulltextMeasureEnabled, fulltextName, fulltextMaxWaitMs, fulltextMaxRate);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplJmxAssetMigrationMBeanImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jmxObjectname = null;
        //ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo response = api.comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(post, apply, delete, action, $location, propertylist, jmxObjectname);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplJmxAssetUpdateMonitorImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jmxObjectname = null;
        Boolean active = null;
        //ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo response = api.comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(post, apply, delete, action, $location, propertylist, jmxObjectname, active);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String operation = null;
        Boolean emailEnabled = null;
        //ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo response = api.comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(post, apply, delete, action, $location, propertylist, operation, emailEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String operation = null;
        String operationIcon = null;
        String topicName = null;
        Boolean emailEnabled = null;
        //ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo response = api.comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(post, apply, delete, action, $location, propertylist, operation, operationIcon, topicName, emailEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplLightboxLightboxServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletPaths = null;
        List<String> slingServletMethods = null;
        Boolean cqDamEnableAnonymous = null;
        //ComDayCqDamCoreImplLightboxLightboxServletInfo response = api.comDayCqDamCoreImplLightboxLightboxServlet(post, apply, delete, action, $location, propertylist, slingServletPaths, slingServletMethods, cqDamEnableAnonymous);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplMetadataEditorSelectComponentHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> graniteColonData = null;
        //ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo response = api.comDayCqDamCoreImplMetadataEditorSelectComponentHandler(post, apply, delete, action, $location, propertylist, graniteColonData);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamAllowAllMime = null;
        List<String> cqDamAllowedAssetMimes = null;
        //ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo response = api.comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(post, apply, delete, action, $location, propertylist, cqDamAllowAllMime, cqDamAllowedAssetMimes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamDetectAssetMimeFromContent = null;
        //ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo response = api.comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(post, apply, delete, action, $location, propertylist, cqDamDetectAssetMimeFromContent);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplMissingMetadataNotificationJobTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamMissingmetadataNotificationSchedulerIstimebased = null;
        String cqDamMissingmetadataNotificationSchedulerTimebasedRule = null;
        Integer cqDamMissingmetadataNotificationSchedulerPeriodRule = null;
        String cqDamMissingmetadataNotificationRecipient = null;
        //ComDayCqDamCoreImplMissingMetadataNotificationJobInfo response = api.comDayCqDamCoreImplMissingMetadataNotificationJob(post, apply, delete, action, $location, propertylist, cqDamMissingmetadataNotificationSchedulerIstimebased, cqDamMissingmetadataNotificationSchedulerTimebasedRule, cqDamMissingmetadataNotificationSchedulerPeriodRule, cqDamMissingmetadataNotificationRecipient);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        Boolean notifyOnComplete = null;
        //ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo response = api.comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(post, apply, delete, action, $location, propertylist, processLabel, notifyOnComplete);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplProcessTextExtractionProcessTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> mimeTypes = null;
        Integer maxExtract = null;
        //ComDayCqDamCoreImplProcessTextExtractionProcessInfo response = api.comDayCqDamCoreImplProcessTextExtractionProcess(post, apply, delete, action, $location, propertylist, mimeTypes, maxExtract);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplRenditionMakerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean xmpPropagate = null;
        List<String> xmpExcludes = null;
        //ComDayCqDamCoreImplRenditionMakerImplInfo response = api.comDayCqDamCoreImplRenditionMakerImpl(post, apply, delete, action, $location, propertylist, xmpPropagate, xmpExcludes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplReportsReportExportServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer queryBatchSize = null;
        //ComDayCqDamCoreImplReportsReportExportServiceInfo response = api.comDayCqDamCoreImplReportsReportExportService(post, apply, delete, action, $location, propertylist, queryBatchSize);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplReportsReportPurgeServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        Integer maxSavedReports = null;
        Integer timeDuration = null;
        Boolean enableReportPurge = null;
        //ComDayCqDamCoreImplReportsReportPurgeServiceInfo response = api.comDayCqDamCoreImplReportsReportPurgeService(post, apply, delete, action, $location, propertylist, schedulerExpression, maxSavedReports, timeDuration, enableReportPurge);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletAssetDownloadServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        //ComDayCqDamCoreImplServletAssetDownloadServletInfo response = api.comDayCqDamCoreImplServletAssetDownloadServlet(post, apply, delete, action, $location, propertylist, enabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletAssetStatusServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamBatchStatusMaxassets = null;
        //ComDayCqDamCoreImplServletAssetStatusServletInfo response = api.comDayCqDamCoreImplServletAssetStatusServlet(post, apply, delete, action, $location, propertylist, cqDamBatchStatusMaxassets);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletAssetXMPSearchServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamBatchIndesignMaxassets = null;
        //ComDayCqDamCoreImplServletAssetXMPSearchServletInfo response = api.comDayCqDamCoreImplServletAssetXMPSearchServlet(post, apply, delete, action, $location, propertylist, cqDamBatchIndesignMaxassets);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletBatchMetadataServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqDamBatchMetadataAssetDefault = null;
        List<String> cqDamBatchMetadataCollectionDefault = null;
        Integer cqDamBatchMetadataMaxresources = null;
        //ComDayCqDamCoreImplServletBatchMetadataServletInfo response = api.comDayCqDamCoreImplServletBatchMetadataServlet(post, apply, delete, action, $location, propertylist, cqDamBatchMetadataAssetDefault, cqDamBatchMetadataCollectionDefault, cqDamBatchMetadataMaxresources);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletBinaryProviderServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> slingServletResourceTypes = null;
        List<String> slingServletMethods = null;
        Boolean cqDamDrmEnable = null;
        //ComDayCqDamCoreImplServletBinaryProviderServletInfo response = api.comDayCqDamCoreImplServletBinaryProviderServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletMethods, cqDamDrmEnable);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletCollectionServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqDamBatchCollectionProperties = null;
        Integer cqDamBatchCollectionMaxcollections = null;
        //ComDayCqDamCoreImplServletCollectionServletInfo response = api.comDayCqDamCoreImplServletCollectionServlet(post, apply, delete, action, $location, propertylist, cqDamBatchCollectionProperties, cqDamBatchCollectionMaxcollections);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletCollectionsServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqDamBatchCollectionsProperties = null;
        Integer cqDamBatchCollectionsLimit = null;
        //ComDayCqDamCoreImplServletCollectionsServletInfo response = api.comDayCqDamCoreImplServletCollectionsServlet(post, apply, delete, action, $location, propertylist, cqDamBatchCollectionsProperties, cqDamBatchCollectionsLimit);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletCompanionServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String moreInfo = null;
        String slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket = null;
        //ComDayCqDamCoreImplServletCompanionServletInfo response = api.comDayCqDamCoreImplServletCompanionServlet(post, apply, delete, action, $location, propertylist, moreInfo, slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletCreateAssetServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean detectDuplicate = null;
        //ComDayCqDamCoreImplServletCreateAssetServletInfo response = api.comDayCqDamCoreImplServletCreateAssetServlet(post, apply, delete, action, $location, propertylist, detectDuplicate);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletDamContentDispositionFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqMimeTypeBlacklist = null;
        Boolean cqDamEmptyMime = null;
        //ComDayCqDamCoreImplServletDamContentDispositionFilterInfo response = api.comDayCqDamCoreImplServletDamContentDispositionFilter(post, apply, delete, action, $location, propertylist, cqMimeTypeBlacklist, cqDamEmptyMime);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletGuidLookupFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamCoreGuidlookupfilterEnabled = null;
        //ComDayCqDamCoreImplServletGuidLookupFilterInfo response = api.comDayCqDamCoreImplServletGuidLookupFilter(post, apply, delete, action, $location, propertylist, cqDamCoreGuidlookupfilterEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletHealthCheckServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cqDamSyncWorkflowId = null;
        List<String> cqDamSyncFolderTypes = null;
        //ComDayCqDamCoreImplServletHealthCheckServletInfo response = api.comDayCqDamCoreImplServletHealthCheckServlet(post, apply, delete, action, $location, propertylist, cqDamSyncWorkflowId, cqDamSyncFolderTypes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletMetadataGetServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletResourceTypes = null;
        String slingServletMethods = null;
        String slingServletExtensions = null;
        String slingServletSelectors = null;
        //ComDayCqDamCoreImplServletMetadataGetServletInfo response = api.comDayCqDamCoreImplServletMetadataGetServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletMethods, slingServletExtensions, slingServletSelectors);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletMultipleLicenseAcceptServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamDrmEnable = null;
        //ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo response = api.comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(post, apply, delete, action, $location, propertylist, cqDamDrmEnable);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletResourceCollectionServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> slingServletResourceTypes = null;
        String slingServletMethods = null;
        String slingServletSelectors = null;
        String downloadConfig = null;
        String viewSelector = null;
        Boolean sendEmail = null;
        //ComDayCqDamCoreImplServletResourceCollectionServletInfo response = api.comDayCqDamCoreImplServletResourceCollectionServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletMethods, slingServletSelectors, downloadConfig, viewSelector, sendEmail);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean createPreviewEnabled = null;
        Boolean updatePreviewEnabled = null;
        Integer queueSize = null;
        String folderPreviewRenditionRegex = null;
        //ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo response = api.comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(post, apply, delete, action, $location, propertylist, createPreviewEnabled, updatePreviewEnabled, queueSize, folderPreviewRenditionRegex);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplUnzipUnzipConfigTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamConfigUnzipMaxuncompressedsize = null;
        String cqDamConfigUnzipEncoding = null;
        //ComDayCqDamCoreImplUnzipUnzipConfigInfo response = api.comDayCqDamCoreImplUnzipUnzipConfig(post, apply, delete, action, $location, propertylist, cqDamConfigUnzipMaxuncompressedsize, cqDamConfigUnzipEncoding);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreProcessExifToolExtractMetadataProcessTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        Boolean cqDamEnableSha1 = null;
        //ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo response = api.comDayCqDamCoreProcessExifToolExtractMetadataProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamEnableSha1);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreProcessExtractMetadataProcessTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        Boolean cqDamEnableSha1 = null;
        //ComDayCqDamCoreProcessExtractMetadataProcessInfo response = api.comDayCqDamCoreProcessExtractMetadataProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamEnableSha1);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreProcessMetadataProcessorProcessTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        Boolean cqDamEnableSha1 = null;
        List<String> cqDamMetadataXssprotectedProperties = null;
        //ComDayCqDamCoreProcessMetadataProcessorProcessInfo response = api.comDayCqDamCoreProcessMetadataProcessorProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamEnableSha1, cqDamMetadataXssprotectedProperties);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamHandlerFfmpegLocatorImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> executableSearchpath = null;
        //ComDayCqDamHandlerFfmpegLocatorImplInfo response = api.comDayCqDamHandlerFfmpegLocatorImpl(post, apply, delete, action, $location, propertylist, executableSearchpath);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        List<String> fontmgrSystemFontDir = null;
        String fontmgrAdobeFontDir = null;
        String fontmgrCustomerFontDir = null;
        //ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo response = api.comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(post, apply, delete, action, $location, propertylist, eventFilter, fontmgrSystemFontDir, fontmgrAdobeFontDir, fontmgrCustomerFontDir);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamHandlerStandardPdfPdfHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean rasterAnnotation = null;
        //ComDayCqDamHandlerStandardPdfPdfHandlerInfo response = api.comDayCqDamHandlerStandardPdfPdfHandler(post, apply, delete, action, $location, propertylist, rasterAnnotation);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamHandlerStandardPsPostScriptHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean rasterAnnotation = null;
        //ComDayCqDamHandlerStandardPsPostScriptHandlerInfo response = api.comDayCqDamHandlerStandardPsPostScriptHandler(post, apply, delete, action, $location, propertylist, rasterAnnotation);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamHandlerStandardPsdPsdHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer largeFileThreshold = null;
        //ComDayCqDamHandlerStandardPsdPsdHandlerInfo response = api.comDayCqDamHandlerStandardPsdPsdHandler(post, apply, delete, action, $location, propertylist, largeFileThreshold);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamIdsImplIDSJobProcessorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enableMultisession = null;
        Boolean idsCcEnable = null;
        Boolean enableRetry = null;
        Boolean enableRetryScripterror = null;
        String externalizerDomainCqhost = null;
        String externalizerDomainHttp = null;
        //ComDayCqDamIdsImplIDSJobProcessorInfo response = api.comDayCqDamIdsImplIDSJobProcessor(post, apply, delete, action, $location, propertylist, enableMultisession, idsCcEnable, enableRetry, enableRetryScripterror, externalizerDomainCqhost, externalizerDomainHttp);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamIdsImplIDSPoolManagerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxErrorsToBlacklist = null;
        Integer retryIntervalToWhitelist = null;
        Integer connectTimeout = null;
        Integer socketTimeout = null;
        String processLabel = null;
        Integer connectionUseMax = null;
        //ComDayCqDamIdsImplIDSPoolManagerImplInfo response = api.comDayCqDamIdsImplIDSPoolManagerImpl(post, apply, delete, action, $location, propertylist, maxErrorsToBlacklist, retryIntervalToWhitelist, connectTimeout, socketTimeout, processLabel, connectionUseMax);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamInddImplHandlerIndesignXMPHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        Boolean extractPages = null;
        //ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo response = api.comDayCqDamInddImplHandlerIndesignXMPHandler(post, apply, delete, action, $location, propertylist, processLabel, extractPages);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamInddImplServletSnippetCreationServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer snippetcreationMaxcollections = null;
        //ComDayCqDamInddImplServletSnippetCreationServletInfo response = api.comDayCqDamInddImplServletSnippetCreationServlet(post, apply, delete, action, $location, propertylist, snippetcreationMaxcollections);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamInddProcessINDDMediaExtractProcessTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        String cqDamInddPagesRegex = null;
        Boolean idsJobDecoupled = null;
        String idsJobWorkflowModel = null;
        //ComDayCqDamInddProcessINDDMediaExtractProcessInfo response = api.comDayCqDamInddProcessINDDMediaExtractProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamInddPagesRegex, idsJobDecoupled, idsJobWorkflowModel);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer batchCommitSize = null;
        //ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo response = api.comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(post, apply, delete, action, $location, propertylist, batchCommitSize);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        //ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo response = api.comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(post, apply, delete, action, $location, propertylist, schedulerExpression);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean deleteZipFile = null;
        //ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo response = api.comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(post, apply, delete, action, $location, propertylist, deleteZipFile);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamS7damDynamicmediaconfigeventlistenerEnabled = null;
        //ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo response = api.comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(post, apply, delete, action, $location, propertylist, cqDamS7damDynamicmediaconfigeventlistenerEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        Boolean schedulerConcurrent = null;
        //ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo response = api.comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(post, apply, delete, action, $location, propertylist, schedulerExpression, schedulerConcurrent);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonPostServletsSetCreateHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingPostOperation = null;
        String slingServletMethods = null;
        //ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo response = api.comDayCqDamS7damCommonPostServletsSetCreateHandler(post, apply, delete, action, $location, propertylist, slingPostOperation, slingServletMethods);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonPostServletsSetModifyHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingPostOperation = null;
        String slingServletMethods = null;
        //ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo response = api.comDayCqDamS7damCommonPostServletsSetModifyHandler(post, apply, delete, action, $location, propertylist, slingPostOperation, slingServletMethods);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        //ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo response = api.comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(post, apply, delete, action, $location, propertylist, processLabel);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonS7damDamChangeEventListenerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamS7damDamchangeeventlistenerEnabled = null;
        //ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo response = api.comDayCqDamS7damCommonS7damDamChangeEventListener(post, apply, delete, action, $location, propertylist, cqDamS7damDamchangeeventlistenerEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonServletsS7damProductInfoServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletPaths = null;
        String slingServletMethods = null;
        //ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo response = api.comDayCqDamS7damCommonServletsS7damProductInfoServlet(post, apply, delete, action, $location, propertylist, slingServletPaths, slingServletMethods);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName = null;
        Integer cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName = null;
        Integer cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName = null;
        Integer cqDamS7damVideoproxyclientserviceHttpReadtimeoutName = null;
        Integer cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName = null;
        Integer cqDamS7damVideoproxyclientserviceHttpMaxretrycountName = null;
        Integer cqDamS7damVideoproxyclientserviceUploadprogressIntervalName = null;
        //ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo response = api.comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(post, apply, delete, action, $location, propertylist, cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName, cqDamS7damVideoproxyclientserviceHttpReadtimeoutName, cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName, cqDamS7damVideoproxyclientserviceHttpMaxretrycountName, cqDamS7damVideoproxyclientserviceUploadprogressIntervalName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamScene7ImplScene7APIClientImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamScene7ApiclientRecordsperpageNofilterName = null;
        Integer cqDamScene7ApiclientRecordsperpageWithfilterName = null;
        //ComDayCqDamScene7ImplScene7APIClientImplInfo response = api.comDayCqDamScene7ImplScene7APIClientImpl(post, apply, delete, action, $location, propertylist, cqDamScene7ApiclientRecordsperpageNofilterName, cqDamScene7ApiclientRecordsperpageWithfilterName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqDamScene7AssetmimetypeserviceMapping = null;
        //ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo response = api.comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(post, apply, delete, action, $location, propertylist, cqDamScene7AssetmimetypeserviceMapping);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamScene7ImplScene7ConfigurationEventListenerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamScene7ConfigurationeventlistenerEnabled = null;
        //ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo response = api.comDayCqDamScene7ImplScene7ConfigurationEventListener(post, apply, delete, action, $location, propertylist, cqDamScene7ConfigurationeventlistenerEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamScene7ImplScene7DamChangeEventListenerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamScene7DamchangeeventlistenerEnabled = null;
        List<String> cqDamScene7DamchangeeventlistenerObservedPaths = null;
        //ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo response = api.comDayCqDamScene7ImplScene7DamChangeEventListener(post, apply, delete, action, $location, propertylist, cqDamScene7DamchangeeventlistenerEnabled, cqDamScene7DamchangeeventlistenerObservedPaths);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamScene7ImplScene7FlashTemplatesServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String scene7FlashTemplatesRti = null;
        String scene7FlashTemplatesRsi = null;
        String scene7FlashTemplatesRb = null;
        String scene7FlashTemplatesRurl = null;
        String scene7FlashTemplateUrlFormatParameter = null;
        //ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo response = api.comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(post, apply, delete, action, $location, propertylist, scene7FlashTemplatesRti, scene7FlashTemplatesRsi, scene7FlashTemplatesRb, scene7FlashTemplatesRurl, scene7FlashTemplateUrlFormatParameter);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamScene7ImplScene7UploadServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamScene7UploadserviceActivejobtimeoutLabel = null;
        Integer cqDamScene7UploadserviceConnectionmaxperrouteLabel = null;
        //ComDayCqDamScene7ImplScene7UploadServiceImplInfo response = api.comDayCqDamScene7ImplScene7UploadServiceImpl(post, apply, delete, action, $location, propertylist, cqDamScene7UploadserviceActivejobtimeoutLabel, cqDamScene7UploadserviceConnectionmaxperrouteLabel);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String getCacheExpirationUnit = null;
        Integer getCacheExpirationValue = null;
        //ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo response = api.comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(post, apply, delete, action, $location, propertylist, getCacheExpirationUnit, getCacheExpirationValue);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamStockIntegrationImplConfigurationStockConfigurationTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String locale = null;
        String imsConfig = null;
        //ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo response = api.comDayCqDamStockIntegrationImplConfigurationStockConfiguration(post, apply, delete, action, $location, propertylist, name, locale, imsConfig);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamVideoImplServletVideoTestServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        //ComDayCqDamVideoImplServletVideoTestServletInfo response = api.comDayCqDamVideoImplServletVideoTestServlet(post, apply, delete, action, $location, propertylist, enabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqExtwidgetServletsImageSpriteServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxWidth = null;
        Integer maxHeight = null;
        //ComDayCqExtwidgetServletsImageSpriteServletInfo response = api.comDayCqExtwidgetServletsImageSpriteServlet(post, apply, delete, action, $location, propertylist, maxWidth, maxHeight);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqImageInternalFontFontHelperTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fontpath = null;
        Integer oversamplingFactor = null;
        //ComDayCqImageInternalFontFontHelperInfo response = api.comDayCqImageInternalFontFontHelper(post, apply, delete, action, $location, propertylist, fontpath, oversamplingFactor);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqJcrclustersupportClusterStartLevelControllerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean clusterLevelEnable = null;
        Integer clusterMasterLevel = null;
        Integer clusterSlaveLevel = null;
        //ComDayCqJcrclustersupportClusterStartLevelControllerInfo response = api.comDayCqJcrclustersupportClusterStartLevelController(post, apply, delete, action, $location, propertylist, clusterLevelEnable, clusterMasterLevel, clusterSlaveLevel);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMailerDefaultMailServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String smtpHost = null;
        Integer smtpPort = null;
        String smtpUser = null;
        String smtpPassword = null;
        String fromAddress = null;
        Boolean smtpSsl = null;
        Boolean smtpStarttls = null;
        Boolean debugEmail = null;
        //ComDayCqMailerDefaultMailServiceInfo response = api.comDayCqMailerDefaultMailService(post, apply, delete, action, $location, propertylist, smtpHost, smtpPort, smtpUser, smtpPassword, fromAddress, smtpSsl, smtpStarttls, debugEmail);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMailerImplCqMailingServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String maxRecipientCount = null;
        //ComDayCqMailerImplCqMailingServiceInfo response = api.comDayCqMailerImplCqMailingService(post, apply, delete, action, $location, propertylist, maxRecipientCount);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMailerImplEmailCqEmailTemplateFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String mailerEmailCharset = null;
        //ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo response = api.comDayCqMailerImplEmailCqEmailTemplateFactory(post, apply, delete, action, $location, propertylist, mailerEmailCharset);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMailerImplEmailCqRetrieverTemplateFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean mailerEmailEmbed = null;
        String mailerEmailCharset = null;
        String mailerEmailRetrieverUserID = null;
        String mailerEmailRetrieverUserPWD = null;
        //ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo response = api.comDayCqMailerImplEmailCqRetrieverTemplateFactory(post, apply, delete, action, $location, propertylist, mailerEmailEmbed, mailerEmailCharset, mailerEmailRetrieverUserID, mailerEmailRetrieverUserPWD);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmCampaignImplIntegrationConfigImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> aemMcmCampaignFormConstraints = null;
        String aemMcmCampaignPublicUrl = null;
        Boolean aemMcmCampaignRelaxedSSL = null;
        //ComDayCqMcmCampaignImplIntegrationConfigImplInfo response = api.comDayCqMcmCampaignImplIntegrationConfigImpl(post, apply, delete, action, $location, propertylist, aemMcmCampaignFormConstraints, aemMcmCampaignPublicUrl, aemMcmCampaignRelaxedSSL);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        //ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo response = api.comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmCoreNewsletterNewsletterEmailServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String fromAddress = null;
        String senderHost = null;
        String maxBounceCount = null;
        //ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo response = api.comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(post, apply, delete, action, $location, propertylist, fromAddress, senderHost, maxBounceCount);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmImplMCMConfigurationTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> experienceIndirection = null;
        List<String> touchpointIndirection = null;
        //ComDayCqMcmImplMCMConfigurationInfo response = api.comDayCqMcmImplMCMConfiguration(post, apply, delete, action, $location, propertylist, experienceIndirection, touchpointIndirection);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
        //ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo response = api.comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
        //ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo response = api.comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        //ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo response = api.comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        //ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo response = api.comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
        //ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo response = api.comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqNotificationImplNotificationServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        //ComDayCqNotificationImplNotificationServiceImplInfo response = api.comDayCqNotificationImplNotificationServiceImpl(post, apply, delete, action, $location, propertylist, eventFilter);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqPersonalizationImplServletsTargetingConfigurationServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean forcelocation = null;
        //ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo response = api.comDayCqPersonalizationImplServletsTargetingConfigurationServlet(post, apply, delete, action, $location, propertylist, forcelocation);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqPollingImporterImplManagedPollConfigImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String id = null;
        Boolean enabled = null;
        Boolean reference = null;
        Integer interval = null;
        String expression = null;
        String source = null;
        String target = null;
        String login = null;
        String password = null;
        //ComDayCqPollingImporterImplManagedPollConfigImplInfo response = api.comDayCqPollingImporterImplManagedPollConfigImpl(post, apply, delete, action, $location, propertylist, id, enabled, reference, interval, expression, source, target, login, password);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqPollingImporterImplManagedPollingImporterImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String importerUser = null;
        //ComDayCqPollingImporterImplManagedPollingImporterImplInfo response = api.comDayCqPollingImporterImplManagedPollingImporterImpl(post, apply, delete, action, $location, propertylist, importerUser);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqPollingImporterImplPollingImporterImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer importerMinInterval = null;
        String importerUser = null;
        List<String> excludePaths = null;
        List<String> includePaths = null;
        //ComDayCqPollingImporterImplPollingImporterImplInfo response = api.comDayCqPollingImporterImplPollingImporterImpl(post, apply, delete, action, $location, propertylist, importerMinInterval, importerUser, excludePaths, includePaths);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationAuditReplicationEventListenerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        //ComDayCqReplicationAuditReplicationEventListenerInfo response = api.comDayCqReplicationAuditReplicationEventListener(post, apply, delete, action, $location, propertylist, serviceRanking);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationContentStaticContentBuilderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String host = null;
        Integer port = null;
        //ComDayCqReplicationContentStaticContentBuilderInfo response = api.comDayCqReplicationContentStaticContentBuilder(post, apply, delete, action, $location, propertylist, host, port);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplAgentManagerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jobTopics = null;
        String serviceUserTarget = null;
        String agentProviderTarget = null;
        //ComDayCqReplicationImplAgentManagerImplInfo response = api.comDayCqReplicationImplAgentManagerImpl(post, apply, delete, action, $location, propertylist, jobTopics, serviceUserTarget, agentProviderTarget);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplContentDurboBinaryLessContentBuilderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer binaryThreshold = null;
        //ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo response = api.comDayCqReplicationImplContentDurboBinaryLessContentBuilder(post, apply, delete, action, $location, propertylist, binaryThreshold);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplContentDurboDurboImportConfigurationProvTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean preserveHierarchyNodes = null;
        Boolean ignoreVersioning = null;
        Boolean importAcl = null;
        Integer saveThreshold = null;
        Boolean preserveUserPaths = null;
        Boolean preserveUuid = null;
        List<String> preserveUuidNodetypes = null;
        List<String> preserveUuidSubtrees = null;
        Boolean autoCommit = null;
        //ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo response = api.comDayCqReplicationImplContentDurboDurboImportConfigurationProv(post, apply, delete, action, $location, propertylist, preserveHierarchyNodes, ignoreVersioning, importAcl, saveThreshold, preserveUserPaths, preserveUuid, preserveUuidNodetypes, preserveUuidSubtrees, autoCommit);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplReplicationContentFactoryProviderImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean replicationContentUseFileStorage = null;
        Integer replicationContentMaxCommitAttempts = null;
        //ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo response = api.comDayCqReplicationImplReplicationContentFactoryProviderImpl(post, apply, delete, action, $location, propertylist, replicationContentUseFileStorage, replicationContentMaxCommitAttempts);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplReplicationReceiverImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer receiverTmpfileThreshold = null;
        Boolean receiverPackagesUseInstall = null;
        //ComDayCqReplicationImplReplicationReceiverImplInfo response = api.comDayCqReplicationImplReplicationReceiverImpl(post, apply, delete, action, $location, propertylist, receiverTmpfileThreshold, receiverPackagesUseInstall);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplReplicatorImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean distributeEvents = null;
        //ComDayCqReplicationImplReplicatorImplInfo response = api.comDayCqReplicationImplReplicatorImpl(post, apply, delete, action, $location, propertylist, distributeEvents);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplReverseReplicatorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer schedulerPeriod = null;
        //ComDayCqReplicationImplReverseReplicatorInfo response = api.comDayCqReplicationImplReverseReplicator(post, apply, delete, action, $location, propertylist, schedulerPeriod);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplTransportBinaryLessTransportHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> disabledCipherSuites = null;
        List<String> enabledCipherSuites = null;
        //ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo response = api.comDayCqReplicationImplTransportBinaryLessTransportHandler(post, apply, delete, action, $location, propertylist, disabledCipherSuites, enabledCipherSuites);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplTransportHttpTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> disabledCipherSuites = null;
        List<String> enabledCipherSuites = null;
        //ComDayCqReplicationImplTransportHttpInfo response = api.comDayCqReplicationImplTransportHttp(post, apply, delete, action, $location, propertylist, disabledCipherSuites, enabledCipherSuites);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReportingImplCacheCacheImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean repcacheEnable = null;
        Integer repcacheTtl = null;
        Integer repcacheMax = null;
        //ComDayCqReportingImplCacheCacheImplInfo response = api.comDayCqReportingImplCacheCacheImpl(post, apply, delete, action, $location, propertylist, repcacheEnable, repcacheTtl, repcacheMax);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReportingImplConfigServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String repconfTimezone = null;
        String repconfLocale = null;
        String repconfSnapshots = null;
        String repconfRepdir = null;
        Integer repconfHourofday = null;
        Integer repconfMinofhour = null;
        Integer repconfMaxrows = null;
        Boolean repconfFakedata = null;
        String repconfSnapshotuser = null;
        Boolean repconfEnforcesnapshotuser = null;
        //ComDayCqReportingImplConfigServiceImplInfo response = api.comDayCqReportingImplConfigServiceImpl(post, apply, delete, action, $location, propertylist, repconfTimezone, repconfLocale, repconfSnapshots, repconfRepdir, repconfHourofday, repconfMinofhour, repconfMaxrows, repconfFakedata, repconfSnapshotuser, repconfEnforcesnapshotuser);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReportingImplRLogAnalyzerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String requestLogOutput = null;
        //ComDayCqReportingImplRLogAnalyzerInfo response = api.comDayCqReportingImplRLogAnalyzer(post, apply, delete, action, $location, propertylist, requestLogOutput);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqRewriterLinkcheckerImplLinkCheckerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer schedulerPeriod = null;
        Boolean schedulerConcurrent = null;
        Integer serviceBadLinkToleranceInterval = null;
        List<String> serviceCheckOverridePatterns = null;
        Boolean serviceCacheBrokenInternalLinks = null;
        List<String> serviceSpecialLinkPrefix = null;
        List<String> serviceSpecialLinkPatterns = null;
        //ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo response = api.comDayCqRewriterLinkcheckerImplLinkCheckerImpl(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerConcurrent, serviceBadLinkToleranceInterval, serviceCheckOverridePatterns, serviceCacheBrokenInternalLinks, serviceSpecialLinkPrefix, serviceSpecialLinkPatterns);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqRewriterLinkcheckerImplLinkCheckerTaskTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer schedulerPeriod = null;
        Boolean schedulerConcurrent = null;
        Integer goodLinkTestInterval = null;
        Integer badLinkTestInterval = null;
        Integer linkUnusedInterval = null;
        Integer connectionTimeout = null;
        //ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo response = api.comDayCqRewriterLinkcheckerImplLinkCheckerTask(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerConcurrent, goodLinkTestInterval, badLinkTestInterval, linkUnusedInterval, connectionTimeout);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean linkcheckertransformerDisableRewriting = null;
        Boolean linkcheckertransformerDisableChecking = null;
        Integer linkcheckertransformerMapCacheSize = null;
        Boolean linkcheckertransformerStrictExtensionCheck = null;
        Boolean linkcheckertransformerStripHtmltExtension = null;
        List<String> linkcheckertransformerRewriteElements = null;
        List<String> linkcheckertransformerStripExtensionPathBlacklist = null;
        //ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo response = api.comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(post, apply, delete, action, $location, propertylist, linkcheckertransformerDisableRewriting, linkcheckertransformerDisableChecking, linkcheckertransformerMapCacheSize, linkcheckertransformerStrictExtensionCheck, linkcheckertransformerStripHtmltExtension, linkcheckertransformerRewriteElements, linkcheckertransformerStripExtensionPathBlacklist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqRewriterLinkcheckerImplLinkInfoStorageImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceMaxLinksPerHost = null;
        Boolean serviceSaveExternalLinkReferences = null;
        //ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo response = api.comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(post, apply, delete, action, $location, propertylist, serviceMaxLinksPerHost, serviceSaveExternalLinkReferences);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqRewriterProcessorImplHtmlParserFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> htmlparserProcessTags = null;
        Boolean htmlparserPreserveCamelCase = null;
        //ComDayCqRewriterProcessorImplHtmlParserFactoryInfo response = api.comDayCqRewriterProcessorImplHtmlParserFactory(post, apply, delete, action, $location, propertylist, htmlparserProcessTags, htmlparserPreserveCamelCase);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqSearchImplBuilderQueryBuilderImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> excerptProperties = null;
        Integer cacheMaxEntries = null;
        Integer cacheEntryLifetime = null;
        Boolean xpathUnion = null;
        //ComDayCqSearchImplBuilderQueryBuilderImplInfo response = api.comDayCqSearchImplBuilderQueryBuilderImpl(post, apply, delete, action, $location, propertylist, excerptProperties, cacheMaxEntries, cacheEntryLifetime, xpathUnion);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqSearchSuggestImplSuggestionIndexManagerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pathBuilderTarget = null;
        String suggestBasepath = null;
        //ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo response = api.comDayCqSearchSuggestImplSuggestionIndexManagerImpl(post, apply, delete, action, $location, propertylist, pathBuilderTarget, suggestBasepath);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqSearchpromoteConfighandlerEnabled = null;
        //ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo response = api.comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(post, apply, delete, action, $location, propertylist, cqSearchpromoteConfighandlerEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqSearchpromoteImplSearchPromoteServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cqSearchpromoteConfigurationServerUri = null;
        String cqSearchpromoteConfigurationEnvironment = null;
        Integer connectionTimeout = null;
        Integer socketTimeout = null;
        //ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo response = api.comDayCqSearchpromoteImplSearchPromoteServiceImpl(post, apply, delete, action, $location, propertylist, cqSearchpromoteConfigurationServerUri, cqSearchpromoteConfigurationEnvironment, connectionTimeout, socketTimeout);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqSecurityACLSetupTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqAclsetupRules = null;
        //ComDayCqSecurityACLSetupInfo response = api.comDayCqSecurityACLSetup(post, apply, delete, action, $location, propertylist, cqAclsetupRules);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqStatisticsImplStatisticsServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer schedulerPeriod = null;
        Boolean schedulerConcurrent = null;
        String path = null;
        String workspace = null;
        String keywordsPath = null;
        Boolean asyncEntries = null;
        //ComDayCqStatisticsImplStatisticsServiceImplInfo response = api.comDayCqStatisticsImplStatisticsServiceImpl(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerConcurrent, path, workspace, keywordsPath, asyncEntries);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqTaggingImplJcrTagManagerFactoryImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean validationEnabled = null;
        //ComDayCqTaggingImplJcrTagManagerFactoryImplInfo response = api.comDayCqTaggingImplJcrTagManagerFactoryImpl(post, apply, delete, action, $location, propertylist, validationEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqTaggingImplSearchTagPredicateEvaluatorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean ignorePath = null;
        //ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo response = api.comDayCqTaggingImplSearchTagPredicateEvaluator(post, apply, delete, action, $location, propertylist, ignorePath);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqTaggingImplTagGarbageCollectorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        //ComDayCqTaggingImplTagGarbageCollectorInfo response = api.comDayCqTaggingImplTagGarbageCollector(post, apply, delete, action, $location, propertylist, schedulerExpression);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqPagesupdatehandlerImageresourcetypes = null;
        //ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo response = api.comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(post, apply, delete, action, $location, propertylist, cqPagesupdatehandlerImageresourcetypes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqContentsyncPathrewritertransformerMappingLinks = null;
        List<String> cqContentsyncPathrewritertransformerMappingClientlibs = null;
        List<String> cqContentsyncPathrewritertransformerMappingImages = null;
        String cqContentsyncPathrewritertransformerAttributePattern = null;
        String cqContentsyncPathrewritertransformerClientlibraryPattern = null;
        String cqContentsyncPathrewritertransformerClientlibraryReplace = null;
        //ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo response = api.comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(post, apply, delete, action, $location, propertylist, cqContentsyncPathrewritertransformerMappingLinks, cqContentsyncPathrewritertransformerMappingClientlibs, cqContentsyncPathrewritertransformerMappingImages, cqContentsyncPathrewritertransformerAttributePattern, cqContentsyncPathrewritertransformerClientlibraryPattern, cqContentsyncPathrewritertransformerClientlibraryReplace);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplAuthoringUIModeServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String authoringUIModeServiceDefault = null;
        //ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo response = api.comDayCqWcmCoreImplAuthoringUIModeServiceImpl(post, apply, delete, action, $location, propertylist, authoringUIModeServiceDefault);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplCommandsWCMCommandServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> wcmcommandservletDeleteWhitelist = null;
        //ComDayCqWcmCoreImplCommandsWCMCommandServletInfo response = api.comDayCqWcmCoreImplCommandsWCMCommandServlet(post, apply, delete, action, $location, propertylist, wcmcommandservletDeleteWhitelist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String dimDefaultMode = null;
        Boolean dimAppcacheEnabled = null;
        //ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo response = api.comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(post, apply, delete, action, $location, propertylist, dimDefaultMode, dimAppcacheEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplEventPageEventAuditListenerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String configured = null;
        //ComDayCqWcmCoreImplEventPageEventAuditListenerInfo response = api.comDayCqWcmCoreImplEventPageEventAuditListener(post, apply, delete, action, $location, propertylist, configured);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplEventPagePostProcessorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> paths = null;
        //ComDayCqWcmCoreImplEventPagePostProcessorInfo response = api.comDayCqWcmCoreImplEventPagePostProcessor(post, apply, delete, action, $location, propertylist, paths);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplEventRepositoryChangeEventListenerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> paths = null;
        List<String> excludedPaths = null;
        //ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo response = api.comDayCqWcmCoreImplEventRepositoryChangeEventListener(post, apply, delete, action, $location, propertylist, paths, excludedPaths);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplEventTemplatePostProcessorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String paths = null;
        //ComDayCqWcmCoreImplEventTemplatePostProcessorInfo response = api.comDayCqWcmCoreImplEventTemplatePostProcessor(post, apply, delete, action, $location, propertylist, paths);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplLanguageManagerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String langmgrListPath = null;
        List<String> langmgrCountryDefault = null;
        //ComDayCqWcmCoreImplLanguageManagerImplInfo response = api.comDayCqWcmCoreImplLanguageManagerImpl(post, apply, delete, action, $location, propertylist, langmgrListPath, langmgrCountryDefault);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String linkExpiredPrefix = null;
        Boolean linkExpiredRemove = null;
        String linkExpiredSuffix = null;
        String linkInvalidPrefix = null;
        Boolean linkInvalidRemove = null;
        String linkInvalidSuffix = null;
        String linkPredatedPrefix = null;
        Boolean linkPredatedRemove = null;
        String linkPredatedSuffix = null;
        List<String> linkWcmmodes = null;
        //ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo response = api.comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(post, apply, delete, action, $location, propertylist, linkExpiredPrefix, linkExpiredRemove, linkExpiredSuffix, linkInvalidPrefix, linkInvalidRemove, linkInvalidSuffix, linkPredatedPrefix, linkPredatedRemove, linkPredatedSuffix, linkWcmmodes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplPagePageInfoAggregatorImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pageInfoProviderPropertyRegexDefault = null;
        String pageInfoProviderPropertyName = null;
        //ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo response = api.comDayCqWcmCoreImplPagePageInfoAggregatorImpl(post, apply, delete, action, $location, propertylist, pageInfoProviderPropertyRegexDefault, pageInfoProviderPropertyName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplPagePageManagerFactoryImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String illegalCharMapping = null;
        Boolean pageSubTreeActivationCheck = null;
        //ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo response = api.comDayCqWcmCoreImplPagePageManagerFactoryImpl(post, apply, delete, action, $location, propertylist, illegalCharMapping, pageSubTreeActivationCheck);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplReferencesContentContentReferenceConfigTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> contentReferenceConfigResourceTypes = null;
        //ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo response = api.comDayCqWcmCoreImplReferencesContentContentReferenceConfig(post, apply, delete, action, $location, propertylist, contentReferenceConfigResourceTypes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean damShowexpired = null;
        Boolean damShowhidden = null;
        Boolean tagTitleSearch = null;
        String guessTotal = null;
        String damExpiryProperty = null;
        //ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo response = api.comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(post, apply, delete, action, $location, propertylist, damShowexpired, damShowhidden, tagTitleSearch, guessTotal, damExpiryProperty);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> itemResourceTypes = null;
        //ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo response = api.comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(post, apply, delete, action, $location, propertylist, itemResourceTypes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplServletsContentfinderPageViewHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String guessTotal = null;
        Boolean tagTitleSearch = null;
        //ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo response = api.comDayCqWcmCoreImplServletsContentfinderPageViewHandler(post, apply, delete, action, $location, propertylist, guessTotal, tagTitleSearch);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplServletsFindReplaceServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> scope = null;
        //ComDayCqWcmCoreImplServletsFindReplaceServletInfo response = api.comDayCqWcmCoreImplServletsFindReplaceServlet(post, apply, delete, action, $location, propertylist, scope);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplServletsReferenceSearchServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer referencesearchservletMaxReferencesPerPage = null;
        Integer referencesearchservletMaxPages = null;
        //ComDayCqWcmCoreImplServletsReferenceSearchServletInfo response = api.comDayCqWcmCoreImplServletsReferenceSearchServlet(post, apply, delete, action, $location, propertylist, referencesearchservletMaxReferencesPerPage, referencesearchservletMaxPages);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplServletsThumbnailServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String workspace = null;
        List<String> dimensions = null;
        //ComDayCqWcmCoreImplServletsThumbnailServletInfo response = api.comDayCqWcmCoreImplServletsThumbnailServlet(post, apply, delete, action, $location, propertylist, workspace, dimensions);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplUtilsDefaultPageNameValidatorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String nonValidChars = null;
        //ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo response = api.comDayCqWcmCoreImplUtilsDefaultPageNameValidator(post, apply, delete, action, $location, propertylist, nonValidChars);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplVariantsPageVariantsProviderImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String defaultExternalizerDomain = null;
        //ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo response = api.comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(post, apply, delete, action, $location, propertylist, defaultExternalizerDomain);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplVersionManagerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean versionmanagerCreateVersionOnActivation = null;
        Boolean versionmanagerPurgingEnabled = null;
        List<String> versionmanagerPurgePaths = null;
        List<String> versionmanagerIvPaths = null;
        Integer versionmanagerMaxAgeDays = null;
        Integer versionmanagerMaxNumberVersions = null;
        Integer versionmanagerMinNumberVersions = null;
        //ComDayCqWcmCoreImplVersionManagerImplInfo response = api.comDayCqWcmCoreImplVersionManagerImpl(post, apply, delete, action, $location, propertylist, versionmanagerCreateVersionOnActivation, versionmanagerPurgingEnabled, versionmanagerPurgePaths, versionmanagerIvPaths, versionmanagerMaxAgeDays, versionmanagerMaxNumberVersions, versionmanagerMinNumberVersions);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplVersionPurgeTaskTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> versionpurgePaths = null;
        Boolean versionpurgeRecursive = null;
        Integer versionpurgeMaxVersions = null;
        Integer versionpurgeMinVersions = null;
        Integer versionpurgeMaxAgeDays = null;
        //ComDayCqWcmCoreImplVersionPurgeTaskInfo response = api.comDayCqWcmCoreImplVersionPurgeTask(post, apply, delete, action, $location, propertylist, versionpurgePaths, versionpurgeRecursive, versionpurgeMaxVersions, versionpurgeMinVersions, versionpurgeMaxAgeDays);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplWCMDebugFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean wcmdbgfilterEnabled = null;
        Boolean wcmdbgfilterJspDebug = null;
        //ComDayCqWcmCoreImplWCMDebugFilterInfo response = api.comDayCqWcmCoreImplWCMDebugFilter(post, apply, delete, action, $location, propertylist, wcmdbgfilterEnabled, wcmdbgfilterJspDebug);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplWCMDeveloperModeFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean wcmdevmodefilterEnabled = null;
        //ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo response = api.comDayCqWcmCoreImplWCMDeveloperModeFilter(post, apply, delete, action, $location, propertylist, wcmdevmodefilterEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplWarpTimeWarpFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String filterOrder = null;
        String filterScope = null;
        //ComDayCqWcmCoreImplWarpTimeWarpFilterInfo response = api.comDayCqWcmCoreImplWarpTimeWarpFilter(post, apply, delete, action, $location, propertylist, filterOrder, filterScope);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreMvtMVTStatisticsImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String mvtstatisticsTrackingurl = null;
        //ComDayCqWcmCoreMvtMVTStatisticsImplInfo response = api.comDayCqWcmCoreMvtMVTStatisticsImpl(post, apply, delete, action, $location, propertylist, mvtstatisticsTrackingurl);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreStatsPageViewStatisticsImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pageviewstatisticsTrackingurl = null;
        String pageviewstatisticsTrackingscriptEnabled = null;
        //ComDayCqWcmCoreStatsPageViewStatisticsImplInfo response = api.comDayCqWcmCoreStatsPageViewStatisticsImpl(post, apply, delete, action, $location, propertylist, pageviewstatisticsTrackingurl, pageviewstatisticsTrackingscriptEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreWCMRequestFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String wcmfilterMode = null;
        //ComDayCqWcmCoreWCMRequestFilterInfo response = api.comDayCqWcmCoreWCMRequestFilter(post, apply, delete, action, $location, propertylist, wcmfilterMode);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterDesignPackageImporterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> extractFilter = null;
        //ComDayCqWcmDesignimporterDesignPackageImporterInfo response = api.comDayCqWcmDesignimporterDesignPackageImporter(post, apply, delete, action, $location, propertylist, extractFilter);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterImplCanvasBuilderImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String filepattern = null;
        Boolean buildPageNodes = null;
        Boolean buildClientLibs = null;
        Boolean buildCanvasComponent = null;
        //ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo response = api.comDayCqWcmDesignimporterImplCanvasBuilderImpl(post, apply, delete, action, $location, propertylist, filepattern, buildPageNodes, buildClientLibs, buildCanvasComponent);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer minThreadPoolSize = null;
        Integer maxThreadPoolSize = null;
        //ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo response = api.comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(post, apply, delete, action, $location, propertylist, minThreadPoolSize, maxThreadPoolSize);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterImplEntryPreprocessorImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String searchPattern = null;
        String replacePattern = null;
        //ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo response = api.comDayCqWcmDesignimporterImplEntryPreprocessorImpl(post, apply, delete, action, $location, propertylist, searchPattern, replacePattern);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterImplMobileCanvasBuilderImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String filepattern = null;
        List<String> deviceGroups = null;
        Boolean buildPageNodes = null;
        Boolean buildClientLibs = null;
        Boolean buildCanvasComponent = null;
        //ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo response = api.comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(post, apply, delete, action, $location, propertylist, filepattern, deviceGroups, buildPageNodes, buildClientLibs, buildCanvasComponent);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        //ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        //ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        //ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        //ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        //ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
        //ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        //ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        //ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        //ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        //ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        //ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
        //ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        //ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        //ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
        //ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
        //ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        //ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationFormsImplFormChooserServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String serviceName = null;
        String slingServletResourceTypes = null;
        String slingServletSelectors = null;
        List<String> slingServletMethods = null;
        Boolean formsFormchooserservletAdvansesearchRequire = null;
        //ComDayCqWcmFoundationFormsImplFormChooserServletInfo response = api.comDayCqWcmFoundationFormsImplFormChooserServlet(post, apply, delete, action, $location, propertylist, serviceName, slingServletResourceTypes, slingServletSelectors, slingServletMethods, formsFormchooserservletAdvansesearchRequire);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationFormsImplFormParagraphPostProcessorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean formsFormparagraphpostprocessorEnabled = null;
        List<String> formsFormparagraphpostprocessorFormresourcetypes = null;
        //ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo response = api.comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(post, apply, delete, action, $location, propertylist, formsFormparagraphpostprocessorEnabled, formsFormparagraphpostprocessorFormresourcetypes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationFormsImplFormsHandlingServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String nameWhitelist = null;
        Boolean allowExpressions = null;
        //ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo response = api.comDayCqWcmFoundationFormsImplFormsHandlingServlet(post, apply, delete, action, $location, propertylist, nameWhitelist, allowExpressions);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationFormsImplMailServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletResourceTypes = null;
        String slingServletSelectors = null;
        List<String> resourceWhitelist = null;
        String resourceBlacklist = null;
        //ComDayCqWcmFoundationFormsImplMailServletInfo response = api.comDayCqWcmFoundationFormsImplMailServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletSelectors, resourceWhitelist, resourceBlacklist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationImplAdaptiveImageComponentServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> adaptSupportedWidths = null;
        //ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo response = api.comDayCqWcmFoundationImplAdaptiveImageComponentServlet(post, apply, delete, action, $location, propertylist, adaptSupportedWidths);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationImplHTTPAuthHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        Boolean authHttpNologin = null;
        String authHttpRealm = null;
        String authDefaultLoginpage = null;
        List<String> authCredForm = null;
        List<String> authCredUtf8 = null;
        //ComDayCqWcmFoundationImplHTTPAuthHandlerInfo response = api.comDayCqWcmFoundationImplHTTPAuthHandler(post, apply, delete, action, $location, propertylist, path, authHttpNologin, authHttpRealm, authDefaultLoginpage, authCredForm, authCredUtf8);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationImplPageImpressionsTrackerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingAuthRequirements = null;
        //ComDayCqWcmFoundationImplPageImpressionsTrackerInfo response = api.comDayCqWcmFoundationImplPageImpressionsTracker(post, apply, delete, action, $location, propertylist, slingAuthRequirements);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationImplPageRedirectServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> excludedResourceTypes = null;
        //ComDayCqWcmFoundationImplPageRedirectServletInfo response = api.comDayCqWcmFoundationImplPageRedirectServlet(post, apply, delete, action, $location, propertylist, excludedResourceTypes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> defaultAttachmentTypeBlacklist = null;
        List<String> baselineAttachmentTypeBlacklist = null;
        //ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo response = api.comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(post, apply, delete, action, $location, propertylist, defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> parameterWhitelist = null;
        List<String> parameterWhitelistPrefixes = null;
        List<String> binaryParameterWhitelist = null;
        List<String> modifierWhitelist = null;
        List<String> operationWhitelist = null;
        List<String> operationWhitelistPrefixes = null;
        List<String> typehintWhitelist = null;
        List<String> resourcetypeWhitelist = null;
        //ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo response = api.comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(post, apply, delete, action, $location, propertylist, parameterWhitelist, parameterWhitelistPrefixes, binaryParameterWhitelist, modifierWhitelist, operationWhitelist, operationWhitelistPrefixes, typehintWhitelist, resourcetypeWhitelist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean deviceInfoTransformerEnabled = null;
        String deviceInfoTransformerCssStyle = null;
        //ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo response = api.comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(post, apply, delete, action, $location, propertylist, deviceInfoTransformerEnabled, deviceInfoTransformerCssStyle);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMobileCoreImplRedirectRedirectFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean redirectEnabled = null;
        Boolean redirectStatsEnabled = null;
        List<String> redirectExtensions = null;
        List<String> redirectPaths = null;
        //ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo response = api.comDayCqWcmMobileCoreImplRedirectRedirectFilter(post, apply, delete, action, $location, propertylist, redirectEnabled, redirectStatsEnabled, redirectExtensions, redirectPaths);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsContentCopyActionFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
        String contentcopyactionOrderStyle = null;
        //ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo response = api.comDayCqWcmMsmImplActionsContentCopyActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, contentcopyactionOrderStyle);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsContentDeleteActionFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
        //ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo response = api.comDayCqWcmMsmImplActionsContentDeleteActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsContentUpdateActionFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
        List<String> cqWcmMsmActionIgnoredMixin = null;
        //ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo response = api.comDayCqWcmMsmImplActionsContentUpdateActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmActionIgnoredMixin);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsOrderChildrenActionFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
        //ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo response = api.comDayCqWcmMsmImplActionsOrderChildrenActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsPageMoveActionFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
        Boolean cqWcmMsmImplActionsPagemovePropReferenceUpdate = null;
        //ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo response = api.comDayCqWcmMsmImplActionsPageMoveActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmImplActionsPagemovePropReferenceUpdate);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
        Boolean cqWcmMsmImplActionReferencesupdatePropUpdateNested = null;
        //ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo response = api.comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmImplActionReferencesupdatePropUpdateNested);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsVersionCopyActionFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
        //ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo response = api.comDayCqWcmMsmImplActionsVersionCopyActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplLiveRelationshipManagerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String liverelationshipmgrRelationsconfigDefault = null;
        //ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo response = api.comDayCqWcmMsmImplLiveRelationshipManagerImpl(post, apply, delete, action, $location, propertylist, liverelationshipmgrRelationsconfigDefault);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplRolloutManagerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        List<String> rolloutmgrExcludedpropsDefault = null;
        List<String> rolloutmgrExcludedparagraphpropsDefault = null;
        List<String> rolloutmgrExcludednodetypesDefault = null;
        Integer rolloutmgrThreadpoolMaxsize = null;
        Integer rolloutmgrThreadpoolMaxshutdowntime = null;
        String rolloutmgrThreadpoolPriority = null;
        Integer rolloutmgrCommitSize = null;
        Boolean rolloutmgrConflicthandlingEnabled = null;
        //ComDayCqWcmMsmImplRolloutManagerImplInfo response = api.comDayCqWcmMsmImplRolloutManagerImpl(post, apply, delete, action, $location, propertylist, eventFilter, rolloutmgrExcludedpropsDefault, rolloutmgrExcludedparagraphpropsDefault, rolloutmgrExcludednodetypesDefault, rolloutmgrThreadpoolMaxsize, rolloutmgrThreadpoolMaxshutdowntime, rolloutmgrThreadpoolPriority, rolloutmgrCommitSize, rolloutmgrConflicthandlingEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplServletsAuditLogServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer auditlogservletDefaultEventsCount = null;
        String auditlogservletDefaultPath = null;
        //ComDayCqWcmMsmImplServletsAuditLogServletInfo response = api.comDayCqWcmMsmImplServletsAuditLogServlet(post, apply, delete, action, $location, propertylist, auditlogservletDefaultEventsCount, auditlogservletDefaultPath);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmNotificationEmailImplEmailChannelTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String emailFrom = null;
        //ComDayCqWcmNotificationEmailImplEmailChannelInfo response = api.comDayCqWcmNotificationEmailImplEmailChannel(post, apply, delete, action, $location, propertylist, emailFrom);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmNotificationImplNotificationManagerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> eventTopics = null;
        //ComDayCqWcmNotificationImplNotificationManagerImplInfo response = api.comDayCqWcmNotificationImplNotificationManagerImpl(post, apply, delete, action, $location, propertylist, eventTopics);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmScriptingImplBVPManagerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> comDayCqWcmScriptingBvpScriptEngines = null;
        //ComDayCqWcmScriptingImplBVPManagerInfo response = api.comDayCqWcmScriptingImplBVPManager(post, apply, delete, action, $location, propertylist, comDayCqWcmScriptingBvpScriptEngines);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmUndoUndoConfigTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqWcmUndoEnabled = null;
        String cqWcmUndoPath = null;
        Integer cqWcmUndoValidity = null;
        Integer cqWcmUndoSteps = null;
        String cqWcmUndoPersistence = null;
        Boolean cqWcmUndoPersistenceMode = null;
        String cqWcmUndoMarkermode = null;
        List<String> cqWcmUndoWhitelist = null;
        List<String> cqWcmUndoBlacklist = null;
        //ComDayCqWcmUndoUndoConfigInfo response = api.comDayCqWcmUndoUndoConfig(post, apply, delete, action, $location, propertylist, cqWcmUndoEnabled, cqWcmUndoPath, cqWcmUndoValidity, cqWcmUndoSteps, cqWcmUndoPersistence, cqWcmUndoPersistenceMode, cqWcmUndoMarkermode, cqWcmUndoWhitelist, cqWcmUndoBlacklist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmWebservicesupportImplReplicationEventListenerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> flushAgents = null;
        //ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo response = api.comDayCqWcmWebservicesupportImplReplicationEventListener(post, apply, delete, action, $location, propertylist, flushAgents);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmWorkflowImplWcmWorkflowServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        Integer minThreadPoolSize = null;
        Integer maxThreadPoolSize = null;
        Boolean cqWcmWorkflowTerminateOnActivate = null;
        List<String> cqWcmWorklfowTerminateExclusionList = null;
        //ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo response = api.comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(post, apply, delete, action, $location, propertylist, eventFilter, minThreadPoolSize, maxThreadPoolSize, cqWcmWorkflowTerminateOnActivate, cqWcmWorklfowTerminateExclusionList);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmWorkflowImplWorkflowPackageInfoProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> workflowpackageinfoproviderFilter = null;
        String workflowpackageinfoproviderFilterRootpath = null;
        //ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo response = api.comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(post, apply, delete, action, $location, propertylist, workflowpackageinfoproviderFilter, workflowpackageinfoproviderFilterRootpath);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWidgetImplHtmlLibraryManagerImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String htmllibmanagerClientmanager = null;
        Boolean htmllibmanagerDebug = null;
        Boolean htmllibmanagerDebugConsole = null;
        String htmllibmanagerDebugInitJs = null;
        String htmllibmanagerDefaultthemename = null;
        String htmllibmanagerDefaultuserthemename = null;
        String htmllibmanagerFirebuglitePath = null;
        Boolean htmllibmanagerForceCQUrlInfo = null;
        Boolean htmllibmanagerGzip = null;
        Integer htmllibmanagerMaxage = null;
        Integer htmllibmanagerMaxDataUriSize = null;
        Boolean htmllibmanagerMinify = null;
        List<String> htmllibmanagerPathList = null;
        Boolean htmllibmanagerTiming = null;
        //ComDayCqWidgetImplHtmlLibraryManagerImplInfo response = api.comDayCqWidgetImplHtmlLibraryManagerImpl(post, apply, delete, action, $location, propertylist, htmllibmanagerClientmanager, htmllibmanagerDebug, htmllibmanagerDebugConsole, htmllibmanagerDebugInitJs, htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename, htmllibmanagerFirebuglitePath, htmllibmanagerForceCQUrlInfo, htmllibmanagerGzip, htmllibmanagerMaxage, htmllibmanagerMaxDataUriSize, htmllibmanagerMinify, htmllibmanagerPathList, htmllibmanagerTiming);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWidgetImplWidgetExtensionProviderImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> extendableWidgets = null;
        Boolean widgetextensionproviderDebug = null;
        //ComDayCqWidgetImplWidgetExtensionProviderImplInfo response = api.comDayCqWidgetImplWidgetExtensionProviderImpl(post, apply, delete, action, $location, propertylist, extendableWidgets, widgetextensionproviderDebug);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWorkflowImplEmailEMailNotificationServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String fromAddress = null;
        String hostPrefix = null;
        Boolean notifyOnabort = null;
        Boolean notifyOncomplete = null;
        Boolean notifyOncontainercomplete = null;
        Boolean notifyUseronly = null;
        //ComDayCqWorkflowImplEmailEMailNotificationServiceInfo response = api.comDayCqWorkflowImplEmailEMailNotificationService(post, apply, delete, action, $location, propertylist, fromAddress, hostPrefix, notifyOnabort, notifyOncomplete, notifyOncontainercomplete, notifyUseronly);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWorkflowImplEmailTaskEMailNotificationServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean notifyOnupdate = null;
        Boolean notifyOncomplete = null;
        //ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo response = api.comDayCqWorkflowImplEmailTaskEMailNotificationService(post, apply, delete, action, $location, propertylist, notifyOnupdate, notifyOncomplete);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        String tokenRequiredAttr = null;
        String tokenAlternateUrl = null;
        Boolean tokenEncapsulated = null;
        List<String> skipTokenRefresh = null;
        //ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo response = api.comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, tokenRequiredAttr, tokenAlternateUrl, tokenEncapsulated, skipTokenRefresh);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCrxSecurityTokenImplTokenCleanupTaskTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enableTokenCleanupTask = null;
        String schedulerExpression = null;
        Integer batchSize = null;
        //ComDayCrxSecurityTokenImplTokenCleanupTaskInfo response = api.comDayCrxSecurityTokenImplTokenCleanupTask(post, apply, delete, action, $location, propertylist, enableTokenCleanupTask, schedulerExpression, batchSize);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void guideLocalizationServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> supportedLocales = null;
        List<String> localizableProperties = null;
        //GuideLocalizationServiceInfo response = api.guideLocalizationService(post, apply, delete, action, $location, propertylist, supportedLocales, localizableProperties);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void messagingUserComponentFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priority = null;
        //MessagingUserComponentFactoryInfo response = api.messagingUserComponentFactory(post, apply, delete, action, $location, propertylist, priority);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheAriesJmxFrameworkStateConfigTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean attributeChangeNotificationEnabled = null;
        //OrgApacheAriesJmxFrameworkStateConfigInfo response = api.orgApacheAriesJmxFrameworkStateConfig(post, apply, delete, action, $location, propertylist, attributeChangeNotificationEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixEventadminImplEventAdminTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer orgApacheFelixEventadminThreadPoolSize = null;
        BigDecimal orgApacheFelixEventadminAsyncToSyncThreadRatio = null;
        Integer orgApacheFelixEventadminTimeout = null;
        Boolean orgApacheFelixEventadminRequireTopic = null;
        List<String> orgApacheFelixEventadminIgnoreTimeout = null;
        List<String> orgApacheFelixEventadminIgnoreTopic = null;
        //OrgApacheFelixEventadminImplEventAdminInfo response = api.orgApacheFelixEventadminImplEventAdmin(post, apply, delete, action, $location, propertylist, orgApacheFelixEventadminThreadPoolSize, orgApacheFelixEventadminAsyncToSyncThreadRatio, orgApacheFelixEventadminTimeout, orgApacheFelixEventadminRequireTopic, orgApacheFelixEventadminIgnoreTimeout, orgApacheFelixEventadminIgnoreTopic);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixHttpTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String orgApacheFelixHttpHost = null;
        Boolean orgApacheFelixHttpEnable = null;
        Integer orgOsgiServiceHttpPort = null;
        Integer orgApacheFelixHttpTimeout = null;
        Boolean orgApacheFelixHttpsEnable = null;
        Integer orgOsgiServiceHttpPortSecure = null;
        String orgApacheFelixHttpsKeystore = null;
        String orgApacheFelixHttpsKeystorePassword = null;
        String orgApacheFelixHttpsKeystoreKeyPassword = null;
        String orgApacheFelixHttpsTruststore = null;
        String orgApacheFelixHttpsTruststorePassword = null;
        String orgApacheFelixHttpsClientcertificate = null;
        String orgApacheFelixHttpContextPath = null;
        Boolean orgApacheFelixHttpMbeans = null;
        Integer orgApacheFelixHttpSessionTimeout = null;
        Integer orgApacheFelixHttpJettyThreadpoolMax = null;
        Integer orgApacheFelixHttpJettyAcceptors = null;
        Integer orgApacheFelixHttpJettySelectors = null;
        Integer orgApacheFelixHttpJettyHeaderBufferSize = null;
        Integer orgApacheFelixHttpJettyRequestBufferSize = null;
        Integer orgApacheFelixHttpJettyResponseBufferSize = null;
        Integer orgApacheFelixHttpJettyMaxFormSize = null;
        List<String> orgApacheFelixHttpPathExclusions = null;
        List<String> orgApacheFelixHttpsJettyCiphersuitesExcluded = null;
        List<String> orgApacheFelixHttpsJettyCiphersuitesIncluded = null;
        Boolean orgApacheFelixHttpJettySendServerHeader = null;
        List<String> orgApacheFelixHttpsJettyProtocolsIncluded = null;
        List<String> orgApacheFelixHttpsJettyProtocolsExcluded = null;
        Boolean orgApacheFelixProxyLoadBalancerConnectionEnable = null;
        Boolean orgApacheFelixHttpsJettyRenegotiateAllowed = null;
        Boolean orgApacheFelixHttpsJettySessionCookieHttpOnly = null;
        Boolean orgApacheFelixHttpsJettySessionCookieSecure = null;
        String orgEclipseJettyServletSessionIdPathParameterName = null;
        Boolean orgEclipseJettyServletCheckingRemoteSessionIdEncoding = null;
        String orgEclipseJettyServletSessionCookie = null;
        String orgEclipseJettyServletSessionDomain = null;
        String orgEclipseJettyServletSessionPath = null;
        Integer orgEclipseJettyServletMaxAge = null;
        String orgApacheFelixHttpName = null;
        Boolean orgApacheFelixJettyGziphandlerEnable = null;
        Integer orgApacheFelixJettyGzipMinGzipSize = null;
        Integer orgApacheFelixJettyGzipCompressionLevel = null;
        Integer orgApacheFelixJettyGzipInflateBufferSize = null;
        Boolean orgApacheFelixJettyGzipSyncFlush = null;
        List<String> orgApacheFelixJettyGzipExcludedUserAgents = null;
        List<String> orgApacheFelixJettyGzipIncludedMethods = null;
        List<String> orgApacheFelixJettyGzipExcludedMethods = null;
        List<String> orgApacheFelixJettyGzipIncludedPaths = null;
        List<String> orgApacheFelixJettyGzipExcludedPaths = null;
        List<String> orgApacheFelixJettyGzipIncludedMimeTypes = null;
        List<String> orgApacheFelixJettyGzipExcludedMimeTypes = null;
        Boolean orgApacheFelixHttpSessionInvalidate = null;
        Boolean orgApacheFelixHttpSessionUniqueid = null;
        //OrgApacheFelixHttpInfo response = api.orgApacheFelixHttp(post, apply, delete, action, $location, propertylist, orgApacheFelixHttpHost, orgApacheFelixHttpEnable, orgOsgiServiceHttpPort, orgApacheFelixHttpTimeout, orgApacheFelixHttpsEnable, orgOsgiServiceHttpPortSecure, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpContextPath, orgApacheFelixHttpMbeans, orgApacheFelixHttpSessionTimeout, orgApacheFelixHttpJettyThreadpoolMax, orgApacheFelixHttpJettyAcceptors, orgApacheFelixHttpJettySelectors, orgApacheFelixHttpJettyHeaderBufferSize, orgApacheFelixHttpJettyRequestBufferSize, orgApacheFelixHttpJettyResponseBufferSize, orgApacheFelixHttpJettyMaxFormSize, orgApacheFelixHttpPathExclusions, orgApacheFelixHttpsJettyCiphersuitesExcluded, orgApacheFelixHttpsJettyCiphersuitesIncluded, orgApacheFelixHttpJettySendServerHeader, orgApacheFelixHttpsJettyProtocolsIncluded, orgApacheFelixHttpsJettyProtocolsExcluded, orgApacheFelixProxyLoadBalancerConnectionEnable, orgApacheFelixHttpsJettyRenegotiateAllowed, orgApacheFelixHttpsJettySessionCookieHttpOnly, orgApacheFelixHttpsJettySessionCookieSecure, orgEclipseJettyServletSessionIdPathParameterName, orgEclipseJettyServletCheckingRemoteSessionIdEncoding, orgEclipseJettyServletSessionCookie, orgEclipseJettyServletSessionDomain, orgEclipseJettyServletSessionPath, orgEclipseJettyServletMaxAge, orgApacheFelixHttpName, orgApacheFelixJettyGziphandlerEnable, orgApacheFelixJettyGzipMinGzipSize, orgApacheFelixJettyGzipCompressionLevel, orgApacheFelixJettyGzipInflateBufferSize, orgApacheFelixJettyGzipSyncFlush, orgApacheFelixJettyGzipExcludedUserAgents, orgApacheFelixJettyGzipIncludedMethods, orgApacheFelixJettyGzipExcludedMethods, orgApacheFelixJettyGzipIncludedPaths, orgApacheFelixJettyGzipExcludedPaths, orgApacheFelixJettyGzipIncludedMimeTypes, orgApacheFelixJettyGzipExcludedMimeTypes, orgApacheFelixHttpSessionInvalidate, orgApacheFelixHttpSessionUniqueid);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixHttpSslfilterSslFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String sslForwardHeader = null;
        String sslForwardValue = null;
        String sslForwardCertHeader = null;
        Boolean rewriteAbsoluteUrls = null;
        //OrgApacheFelixHttpSslfilterSslFilterInfo response = api.orgApacheFelixHttpSslfilterSslFilter(post, apply, delete, action, $location, propertylist, sslForwardHeader, sslForwardValue, sslForwardCertHeader, rewriteAbsoluteUrls);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixJaasConfigurationFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jaasControlFlag = null;
        Integer jaasRanking = null;
        String jaasRealmName = null;
        String jaasClassname = null;
        List<String> jaasOptions = null;
        //OrgApacheFelixJaasConfigurationFactoryInfo response = api.orgApacheFelixJaasConfigurationFactory(post, apply, delete, action, $location, propertylist, jaasControlFlag, jaasRanking, jaasRealmName, jaasClassname, jaasOptions);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixJaasConfigurationSpiTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jaasDefaultRealmName = null;
        String jaasConfigProviderName = null;
        String jaasGlobalConfigPolicy = null;
        //OrgApacheFelixJaasConfigurationSpiInfo response = api.orgApacheFelixJaasConfigurationSpi(post, apply, delete, action, $location, propertylist, jaasDefaultRealmName, jaasConfigProviderName, jaasGlobalConfigPolicy);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixScrScrServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer dsLoglevel = null;
        Boolean dsFactoryEnabled = null;
        Boolean dsDelayedKeepInstances = null;
        Integer dsLockTimeoutMilliseconds = null;
        Integer dsStopTimeoutMilliseconds = null;
        Boolean dsGlobalExtender = null;
        //OrgApacheFelixScrScrServiceInfo response = api.orgApacheFelixScrScrService(post, apply, delete, action, $location, propertylist, dsLoglevel, dsFactoryEnabled, dsDelayedKeepInstances, dsLockTimeoutMilliseconds, dsStopTimeoutMilliseconds, dsGlobalExtender);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixSystemreadyImplComponentsCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> componentsList = null;
        String type = null;
        //OrgApacheFelixSystemreadyImplComponentsCheckInfo response = api.orgApacheFelixSystemreadyImplComponentsCheck(post, apply, delete, action, $location, propertylist, componentsList, type);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixSystemreadyImplFrameworkStartCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer timeout = null;
        Integer targetStartLevel = null;
        String targetStartLevelPropName = null;
        String type = null;
        //OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo response = api.orgApacheFelixSystemreadyImplFrameworkStartCheck(post, apply, delete, action, $location, propertylist, timeout, targetStartLevel, targetStartLevelPropName, type);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixSystemreadyImplServicesCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> servicesList = null;
        String type = null;
        //OrgApacheFelixSystemreadyImplServicesCheckInfo response = api.orgApacheFelixSystemreadyImplServicesCheck(post, apply, delete, action, $location, propertylist, servicesList, type);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixSystemreadyImplServletSystemAliveServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String osgiHttpWhiteboardServletPattern = null;
        String osgiHttpWhiteboardContextSelect = null;
        //OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo response = api.orgApacheFelixSystemreadyImplServletSystemAliveServlet(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixSystemreadyImplServletSystemReadyServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String osgiHttpWhiteboardServletPattern = null;
        String osgiHttpWhiteboardContextSelect = null;
        //OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo response = api.orgApacheFelixSystemreadyImplServletSystemReadyServlet(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixSystemreadySystemReadyMonitorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer pollInterval = null;
        //OrgApacheFelixSystemreadySystemReadyMonitorInfo response = api.orgApacheFelixSystemreadySystemReadyMonitor(post, apply, delete, action, $location, propertylist, pollInterval);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixWebconsoleInternalServletOsgiManagerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String managerRoot = null;
        String httpServiceFilter = null;
        String defaultRender = null;
        String realm = null;
        String username = null;
        String password = null;
        String category = null;
        String locale = null;
        Integer loglevel = null;
        String plugins = null;
        //OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo response = api.orgApacheFelixWebconsoleInternalServletOsgiManager(post, apply, delete, action, $location, propertylist, managerRoot, httpServiceFilter, defaultRender, realm, username, password, category, locale, loglevel, plugins);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixWebconsolePluginsEventInternalPluginServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxSize = null;
        //OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo response = api.orgApacheFelixWebconsolePluginsEventInternalPluginServlet(post, apply, delete, action, $location, propertylist, maxSize);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer felixMemoryusageDumpThreshold = null;
        Integer felixMemoryusageDumpInterval = null;
        String felixMemoryusageDumpLocation = null;
        //OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo response = api.orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(post, apply, delete, action, $location, propertylist, felixMemoryusageDumpThreshold, felixMemoryusageDumpInterval, felixMemoryusageDumpLocation);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheHttpProxyconfiguratorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean proxyEnabled = null;
        String proxyHost = null;
        Integer proxyPort = null;
        String proxyUser = null;
        String proxyPassword = null;
        List<String> proxyExceptions = null;
        //OrgApacheHttpProxyconfiguratorInfo response = api.orgApacheHttpProxyconfigurator(post, apply, delete, action, $location, propertylist, proxyEnabled, proxyHost, proxyPort, proxyUser, proxyPassword, proxyExceptions);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String dir = null;
        //OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo response = api.orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(post, apply, delete, action, $location, propertylist, dir);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        //OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo response = api.orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(post, apply, delete, action, $location, propertylist, path);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String mongouri = null;
        String db = null;
        Boolean socketKeepAlive = null;
        Integer cache = null;
        Integer nodeCachePercentage = null;
        Integer prevDocCachePercentage = null;
        Integer childrenCachePercentage = null;
        Integer diffCachePercentage = null;
        Integer cacheSegmentCount = null;
        Integer cacheStackMoveDistance = null;
        Integer blobCacheSize = null;
        String persistentCache = null;
        String journalCache = null;
        Boolean customBlobStore = null;
        Integer journalGCInterval = null;
        Integer journalGCMaxAge = null;
        Boolean prefetchExternalChanges = null;
        String role = null;
        Integer versionGcMaxAgeInSecs = null;
        String versionGCExpression = null;
        Integer versionGCTimeLimitInSecs = null;
        Integer blobGcMaxAgeInSecs = null;
        Integer blobTrackSnapshotIntervalInSecs = null;
        String repositoryHome = null;
        Integer maxReplicationLagInSecs = null;
        String documentStoreType = null;
        Boolean bundlingDisabled = null;
        Integer updateLimit = null;
        List<String> persistentCacheIncludes = null;
        String leaseCheckMode = null;
        //OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo response = api.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(post, apply, delete, action, $location, propertylist, mongouri, db, socketKeepAlive, cache, nodeCachePercentage, prevDocCachePercentage, childrenCachePercentage, diffCachePercentage, cacheSegmentCount, cacheStackMoveDistance, blobCacheSize, persistentCache, journalCache, customBlobStore, journalGCInterval, journalGCMaxAge, prefetchExternalChanges, role, versionGcMaxAgeInSecs, versionGCExpression, versionGCTimeLimitInSecs, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, repositoryHome, maxReplicationLagInSecs, documentStoreType, bundlingDisabled, updateLimit, persistentCacheIncludes, leaseCheckMode);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> persistentCacheIncludes = null;
        //OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo response = api.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(post, apply, delete, action, $location, propertylist, persistentCacheIncludes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> includedPaths = null;
        Boolean enableAsyncObserver = null;
        Integer observerQueueSize = null;
        //OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo response = api.orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(post, apply, delete, action, $location, propertylist, includedPaths, enableAsyncObserver, observerQueueSize);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> asyncConfigs = null;
        Integer leaseTimeOutMinutes = null;
        Integer failingIndexTimeoutSeconds = null;
        Integer errorWarnIntervalSeconds = null;
        //OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo response = api.orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(post, apply, delete, action, $location, propertylist, asyncConfigs, leaseTimeOutMinutes, failingIndexTimeoutSeconds, errorWarnIntervalSeconds);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean disabled = null;
        Boolean debug = null;
        String localIndexDir = null;
        Boolean enableOpenIndexAsync = null;
        Integer threadPoolSize = null;
        Boolean prefetchIndexFiles = null;
        Integer extractedTextCacheSizeInMB = null;
        Integer extractedTextCacheExpiryInSecs = null;
        Boolean alwaysUsePreExtractedCache = null;
        Integer booleanClauseLimit = null;
        Boolean enableHybridIndexing = null;
        Integer hybridQueueSize = null;
        Boolean disableStoredIndexDefinition = null;
        Boolean deletedBlobsCollectionEnabled = null;
        Integer propIndexCleanerIntervalInSecs = null;
        Boolean enableSingleBlobIndexFiles = null;
        //OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo response = api.orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(post, apply, delete, action, $location, propertylist, disabled, debug, localIndexDir, enableOpenIndexAsync, threadPoolSize, prefetchIndexFiles, extractedTextCacheSizeInMB, extractedTextCacheExpiryInSecs, alwaysUsePreExtractedCache, booleanClauseLimit, enableHybridIndexing, hybridQueueSize, disableStoredIndexDefinition, deletedBlobsCollectionEnabled, propIndexCleanerIntervalInSecs, enableSingleBlobIndexFiles);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String solrHomePath = null;
        String solrCoreName = null;
        //OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo response = api.orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(post, apply, delete, action, $location, propertylist, solrHomePath, solrCoreName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        //OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo response = api.orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(post, apply, delete, action, $location, propertylist, enabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pathDescField = null;
        String pathChildField = null;
        String pathParentField = null;
        String pathExactField = null;
        String catchAllField = null;
        String collapsedPathField = null;
        String pathDepthField = null;
        String commitPolicy = null;
        Integer rows = null;
        Boolean pathRestrictions = null;
        Boolean propertyRestrictions = null;
        Boolean primarytypesRestrictions = null;
        List<String> ignoredProperties = null;
        List<String> usedProperties = null;
        List<String> typeMappings = null;
        List<String> propertyMappings = null;
        Boolean collapseJcrcontentNodes = null;
        //OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo response = api.orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(post, apply, delete, action, $location, propertylist, pathDescField, pathChildField, pathParentField, pathExactField, catchAllField, collapsedPathField, pathDepthField, commitPolicy, rows, pathRestrictions, propertyRestrictions, primarytypesRestrictions, ignoredProperties, usedProperties, typeMappings, propertyMappings, collapseJcrcontentNodes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String solrHttpUrl = null;
        String solrZkHost = null;
        String solrCollection = null;
        Integer solrSocketTimeout = null;
        Integer solrConnectionTimeout = null;
        Integer solrShardsNo = null;
        Integer solrReplicationFactor = null;
        String solrConfDir = null;
        //OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo response = api.orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(post, apply, delete, action, $location, propertylist, solrHttpUrl, solrZkHost, solrCollection, solrSocketTimeout, solrConnectionTimeout, solrShardsNo, solrReplicationFactor, solrConfDir);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean queryAggregation = null;
        //OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo response = api.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(post, apply, delete, action, $location, propertylist, queryAggregation);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String serverType = null;
        //OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo response = api.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(post, apply, delete, action, $location, propertylist, serverType);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerType = null;
        //OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo response = api.orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(post, apply, delete, action, $location, propertylist, providerType);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxItems = null;
        Integer maxPathDepth = null;
        Boolean enabled = null;
        //OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo response = api.orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(post, apply, delete, action, $location, propertylist, maxItems, maxPathDepth, enabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakQueryQueryEngineSettingsServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer queryLimitInMemory = null;
        Integer queryLimitReads = null;
        Boolean queryFailTraversal = null;
        Boolean fastQuerySize = null;
        //OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo response = api.orgApacheJackrabbitOakQueryQueryEngineSettingsService(post, apply, delete, action, $location, propertylist, queryLimitInMemory, queryLimitReads, queryFailTraversal, fastQuerySize);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String orgApacheJackrabbitOakAuthenticationAppName = null;
        String orgApacheJackrabbitOakAuthenticationConfigSpiName = null;
        //OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo response = api.orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(post, apply, delete, action, $location, propertylist, orgApacheJackrabbitOakAuthenticationAppName, orgApacheJackrabbitOakAuthenticationConfigSpiName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerName = null;
        String hostName = null;
        Integer hostPort = null;
        Boolean hostSsl = null;
        Boolean hostTls = null;
        Boolean hostNoCertCheck = null;
        String bindDn = null;
        String bindPassword = null;
        String searchTimeout = null;
        Integer adminPoolMaxActive = null;
        Boolean adminPoolLookupOnValidate = null;
        Integer userPoolMaxActive = null;
        Boolean userPoolLookupOnValidate = null;
        String userBaseDN = null;
        List<String> userObjectclass = null;
        String userIdAttribute = null;
        String userExtraFilter = null;
        Boolean userMakeDnPath = null;
        String groupBaseDN = null;
        List<String> groupObjectclass = null;
        String groupNameAttribute = null;
        String groupExtraFilter = null;
        Boolean groupMakeDnPath = null;
        String groupMemberAttribute = null;
        Boolean useUidForExtId = null;
        List<String> customattributes = null;
        //OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo response = api.orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(post, apply, delete, action, $location, propertylist, providerName, hostName, hostPort, hostSsl, hostTls, hostNoCertCheck, bindDn, bindPassword, searchTimeout, adminPoolMaxActive, adminPoolLookupOnValidate, userPoolMaxActive, userPoolLookupOnValidate, userBaseDN, userObjectclass, userIdAttribute, userExtraFilter, userMakeDnPath, groupBaseDN, groupObjectclass, groupNameAttribute, groupExtraFilter, groupMakeDnPath, groupMemberAttribute, useUidForExtId, customattributes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String tokenExpiration = null;
        String tokenLength = null;
        Boolean tokenRefresh = null;
        Integer tokenCleanupThreshold = null;
        String passwordHashAlgorithm = null;
        Integer passwordHashIterations = null;
        Integer passwordSaltSize = null;
        //OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo response = api.orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(post, apply, delete, action, $location, propertylist, tokenExpiration, tokenLength, tokenRefresh, tokenCleanupThreshold, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String permissionsJr2 = null;
        String importBehavior = null;
        List<String> readPaths = null;
        List<String> administrativePrincipals = null;
        Integer configurationRanking = null;
        //OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo response = api.orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(post, apply, delete, action, $location, propertylist, permissionsJr2, importBehavior, readPaths, administrativePrincipals, configurationRanking);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> requiredServicePids = null;
        String authorizationCompositionType = null;
        //OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo response = api.orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(post, apply, delete, action, $location, propertylist, requiredServicePids, authorizationCompositionType);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer length = null;
        //OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo response = api.orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(post, apply, delete, action, $location, propertylist, length);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityUserUserConfigurationImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String usersPath = null;
        String groupsPath = null;
        String systemRelativePath = null;
        Integer defaultDepth = null;
        String importBehavior = null;
        String passwordHashAlgorithm = null;
        Integer passwordHashIterations = null;
        Integer passwordSaltSize = null;
        Boolean omitAdminPw = null;
        Boolean supportAutoSave = null;
        Integer passwordMaxAge = null;
        Boolean initialPasswordChange = null;
        Integer passwordHistorySize = null;
        Boolean passwordExpiryForAdmin = null;
        Integer cacheExpiration = null;
        Boolean enableRFC7613UsercaseMappedProfile = null;
        //OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo response = api.orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(post, apply, delete, action, $location, propertylist, usersPath, groupsPath, systemRelativePath, defaultDepth, importBehavior, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize, omitAdminPw, supportAutoSave, passwordMaxAge, initialPasswordChange, passwordHistorySize, passwordExpiryForAdmin, cacheExpiration, enableRFC7613UsercaseMappedProfile);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String accountName = null;
        String containerName = null;
        String accessKey = null;
        String rootPath = null;
        String connectionURL = null;
        //OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo response = api.orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(post, apply, delete, action, $location, propertylist, accountName, containerName, accessKey, rootPath, connectionURL);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String repositoryHome = null;
        String tarmkMode = null;
        Integer tarmkSize = null;
        Integer segmentCacheSize = null;
        Integer stringCacheSize = null;
        Integer templateCacheSize = null;
        Integer stringDeduplicationCacheSize = null;
        Integer templateDeduplicationCacheSize = null;
        Integer nodeDeduplicationCacheSize = null;
        Boolean pauseCompaction = null;
        Integer compactionRetryCount = null;
        Integer compactionForceTimeout = null;
        Integer compactionSizeDeltaEstimation = null;
        Boolean compactionDisableEstimation = null;
        Integer compactionRetainedGenerations = null;
        Integer compactionMemoryThreshold = null;
        Integer compactionProgressLog = null;
        Boolean standby = null;
        Boolean customBlobStore = null;
        Boolean customSegmentStore = null;
        Boolean splitPersistence = null;
        String repositoryBackupDir = null;
        Integer blobGcMaxAgeInSecs = null;
        Integer blobTrackSnapshotIntervalInSecs = null;
        String role = null;
        Boolean registerDescriptors = null;
        Boolean dispatchChanges = null;
        //OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo response = api.orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(post, apply, delete, action, $location, propertylist, repositoryHome, tarmkMode, tarmkSize, segmentCacheSize, stringCacheSize, templateCacheSize, stringDeduplicationCacheSize, templateDeduplicationCacheSize, nodeDeduplicationCacheSize, pauseCompaction, compactionRetryCount, compactionForceTimeout, compactionSizeDeltaEstimation, compactionDisableEstimation, compactionRetainedGenerations, compactionMemoryThreshold, compactionProgressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryBackupDir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, role, registerDescriptors, dispatchChanges);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> commitsTrackerWriterGroups = null;
        //OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo response = api.orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(post, apply, delete, action, $location, propertylist, commitsTrackerWriterGroups);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String repositoryHome = null;
        String tarmkMode = null;
        Integer tarmkSize = null;
        Integer segmentCacheSize = null;
        Integer stringCacheSize = null;
        Integer templateCacheSize = null;
        Integer stringDeduplicationCacheSize = null;
        Integer templateDeduplicationCacheSize = null;
        Integer nodeDeduplicationCacheSize = null;
        Boolean pauseCompaction = null;
        Integer compactionRetryCount = null;
        Integer compactionForceTimeout = null;
        Integer compactionSizeDeltaEstimation = null;
        Boolean compactionDisableEstimation = null;
        Integer compactionRetainedGenerations = null;
        Integer compactionMemoryThreshold = null;
        Integer compactionProgressLog = null;
        Boolean standby = null;
        Boolean customBlobStore = null;
        Boolean customSegmentStore = null;
        Boolean splitPersistence = null;
        String repositoryBackupDir = null;
        Integer blobGcMaxAgeInSecs = null;
        Integer blobTrackSnapshotIntervalInSecs = null;
        //OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo response = api.orgApacheJackrabbitOakSegmentSegmentNodeStoreService(post, apply, delete, action, $location, propertylist, repositoryHome, tarmkMode, tarmkSize, segmentCacheSize, stringCacheSize, templateCacheSize, stringDeduplicationCacheSize, templateDeduplicationCacheSize, nodeDeduplicationCacheSize, pauseCompaction, compactionRetryCount, compactionForceTimeout, compactionSizeDeltaEstimation, compactionDisableEstimation, compactionRetainedGenerations, compactionMemoryThreshold, compactionProgressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryBackupDir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean orgApacheSlingInstallerConfigurationPersist = null;
        String mode = null;
        Integer port = null;
        String primaryHost = null;
        Integer interval = null;
        List<String> primaryAllowedClientIpRanges = null;
        Boolean secure = null;
        Integer standbyReadtimeout = null;
        Boolean standbyAutoclean = null;
        //OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo response = api.orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(post, apply, delete, action, $location, propertylist, orgApacheSlingInstallerConfigurationPersist, mode, port, primaryHost, interval, primaryAllowedClientIpRanges, secure, standbyReadtimeout, standbyAutoclean);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String handlerName = null;
        String userExpirationTime = null;
        List<String> userAutoMembership = null;
        List<String> userPropertyMapping = null;
        String userPathPrefix = null;
        String userMembershipExpTime = null;
        Integer userMembershipNestingDepth = null;
        Boolean userDynamicMembership = null;
        Boolean userDisableMissing = null;
        String groupExpirationTime = null;
        List<String> groupAutoMembership = null;
        List<String> groupPropertyMapping = null;
        String groupPathPrefix = null;
        Boolean enableRFC7613UsercaseMappedProfile = null;
        //OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo response = api.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(post, apply, delete, action, $location, propertylist, handlerName, userExpirationTime, userAutoMembership, userPropertyMapping, userPathPrefix, userMembershipExpTime, userMembershipNestingDepth, userDynamicMembership, userDisableMissing, groupExpirationTime, groupAutoMembership, groupPropertyMapping, groupPathPrefix, enableRFC7613UsercaseMappedProfile);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer jaasRanking = null;
        String jaasControlFlag = null;
        String jaasRealmName = null;
        String idpName = null;
        String syncHandlerName = null;
        //OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo response = api.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(post, apply, delete, action, $location, propertylist, jaasRanking, jaasControlFlag, jaasRealmName, idpName, syncHandlerName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean protectExternalId = null;
        //OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo response = api.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(post, apply, delete, action, $location, propertylist, protectExternalId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cugSupportedPaths = null;
        Boolean cugEnabled = null;
        Integer configurationRanking = null;
        //OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo response = api.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(post, apply, delete, action, $location, propertylist, cugSupportedPaths, cugEnabled, configurationRanking);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> principalNames = null;
        //OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo response = api.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(post, apply, delete, action, $location, propertylist, principalNames);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String enabledActions = null;
        List<String> userPrivilegeNames = null;
        List<String> groupPrivilegeNames = null;
        String constraint = null;
        //OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo response = api.orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(post, apply, delete, action, $location, propertylist, enabledActions, userPrivilegeNames, groupPrivilegeNames, constraint);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitVaultPackagingImplPackagingImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> packageRoots = null;
        //OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo response = api.orgApacheJackrabbitVaultPackagingImplPackagingImpl(post, apply, delete, action, $location, propertylist, packageRoots);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String homePath = null;
        //OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo response = api.orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(post, apply, delete, action, $location, propertylist, homePath);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingAuthCoreImplLogoutServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> slingServletMethods = null;
        String slingServletPaths = null;
        //OrgApacheSlingAuthCoreImplLogoutServletInfo response = api.orgApacheSlingAuthCoreImplLogoutServlet(post, apply, delete, action, $location, propertylist, slingServletMethods, slingServletPaths);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigImplConfigurationBindingsValueProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        //OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo response = api.orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(post, apply, delete, action, $location, propertylist, enabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigImplConfigurationResolverImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> configBucketNames = null;
        //OrgApacheSlingCaconfigImplConfigurationResolverImplInfo response = api.orgApacheSlingCaconfigImplConfigurationResolverImpl(post, apply, delete, action, $location, propertylist, configBucketNames);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        List<String> configPropertyInheritancePropertyNames = null;
        //OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo response = api.orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(post, apply, delete, action, $location, propertylist, enabled, configPropertyInheritancePropertyNames);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        //OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo response = api.orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(post, apply, delete, action, $location, propertylist, enabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String description = null;
        List<String> overrides = null;
        Boolean enabled = null;
        Integer serviceRanking = null;
        //OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo response = api.orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(post, apply, delete, action, $location, propertylist, description, overrides, enabled, serviceRanking);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        Integer serviceRanking = null;
        //OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo response = api.orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(post, apply, delete, action, $location, propertylist, enabled, serviceRanking);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigManagementImplConfigurationManagementSettiTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> ignorePropertyNameRegex = null;
        List<String> configCollectionPropertiesResourceNames = null;
        //OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo response = api.orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(post, apply, delete, action, $location, propertylist, ignorePropertyNameRegex, configCollectionPropertiesResourceNames);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        String configPath = null;
        List<String> fallbackPaths = null;
        List<String> configCollectionInheritancePropertyNames = null;
        //OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo response = api.orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(post, apply, delete, action, $location, propertylist, enabled, configPath, fallbackPaths, configCollectionInheritancePropertyNames);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        List<String> configRefResourceNames = null;
        List<String> configRefPropertyNames = null;
        Integer serviceRanking = null;
        //OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo response = api.orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(post, apply, delete, action, $location, propertylist, enabled, configRefResourceNames, configRefPropertyNames, serviceRanking);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> parserFeatures = null;
        //OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo response = api.orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(post, apply, delete, action, $location, propertylist, parserFeatures);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsLogLogManagerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String orgApacheSlingCommonsLogLevel = null;
        String orgApacheSlingCommonsLogFile = null;
        Integer orgApacheSlingCommonsLogFileNumber = null;
        String orgApacheSlingCommonsLogFileSize = null;
        String orgApacheSlingCommonsLogPattern = null;
        String orgApacheSlingCommonsLogConfigurationFile = null;
        Boolean orgApacheSlingCommonsLogPackagingDataEnabled = null;
        Integer orgApacheSlingCommonsLogMaxCallerDataDepth = null;
        Integer orgApacheSlingCommonsLogMaxOldFileCountInDump = null;
        Integer orgApacheSlingCommonsLogNumOfLines = null;
        //OrgApacheSlingCommonsLogLogManagerInfo response = api.orgApacheSlingCommonsLogLogManager(post, apply, delete, action, $location, propertylist, orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogConfigurationFile, orgApacheSlingCommonsLogPackagingDataEnabled, orgApacheSlingCommonsLogMaxCallerDataDepth, orgApacheSlingCommonsLogMaxOldFileCountInDump, orgApacheSlingCommonsLogNumOfLines);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsLogLogManagerFactoryConfigTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String orgApacheSlingCommonsLogLevel = null;
        String orgApacheSlingCommonsLogFile = null;
        String orgApacheSlingCommonsLogPattern = null;
        List<String> orgApacheSlingCommonsLogNames = null;
        Boolean orgApacheSlingCommonsLogAdditiv = null;
        //OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo response = api.orgApacheSlingCommonsLogLogManagerFactoryConfig(post, apply, delete, action, $location, propertylist, orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogNames, orgApacheSlingCommonsLogAdditiv);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsLogLogManagerFactoryWriterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String orgApacheSlingCommonsLogFile = null;
        Integer orgApacheSlingCommonsLogFileNumber = null;
        String orgApacheSlingCommonsLogFileSize = null;
        Boolean orgApacheSlingCommonsLogFileBuffered = null;
        //OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo response = api.orgApacheSlingCommonsLogLogManagerFactoryWriter(post, apply, delete, action, $location, propertylist, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogFileBuffered);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsMetricsInternalLogReporterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer period = null;
        String timeUnit = null;
        String level = null;
        String loggerName = null;
        String prefix = null;
        String pattern = null;
        String registryName = null;
        //OrgApacheSlingCommonsMetricsInternalLogReporterInfo response = api.orgApacheSlingCommonsMetricsInternalLogReporter(post, apply, delete, action, $location, propertylist, period, timeUnit, level, loggerName, prefix, pattern, registryName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> datasources = null;
        Integer step = null;
        List<String> archives = null;
        String path = null;
        //OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo response = api.orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(post, apply, delete, action, $location, propertylist, datasources, step, archives, path);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsMimeInternalMimeTypeServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> mimeTypes = null;
        //OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo response = api.orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(post, apply, delete, action, $location, propertylist, mimeTypes);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsSchedulerImplQuartzSchedulerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String poolName = null;
        List<String> allowedPoolNames = null;
        Boolean schedulerUseleaderforsingle = null;
        List<String> metricsFilters = null;
        Integer slowThresholdMillis = null;
        //OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo response = api.orgApacheSlingCommonsSchedulerImplQuartzScheduler(post, apply, delete, action, $location, propertylist, poolName, allowedPoolNames, schedulerUseleaderforsingle, metricsFilters, slowThresholdMillis);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxQuartzJobDurationAcceptable = null;
        //OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo response = api.orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(post, apply, delete, action, $location, propertylist, maxQuartzJobDurationAcceptable);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        Integer minPoolSize = null;
        Integer maxPoolSize = null;
        Integer queueSize = null;
        Integer maxThreadAge = null;
        Integer keepAliveTime = null;
        String blockPolicy = null;
        Boolean shutdownGraceful = null;
        Boolean daemon = null;
        Integer shutdownWaitTime = null;
        String priority = null;
        //OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo response = api.orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(post, apply, delete, action, $location, propertylist, name, minPoolSize, maxPoolSize, queueSize, maxThreadAge, keepAliveTime, blockPolicy, shutdownGraceful, daemon, shutdownWaitTime, priority);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDatasourceDataSourceFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String datasourceName = null;
        String datasourceSvcPropName = null;
        String driverClassName = null;
        String url = null;
        String username = null;
        String password = null;
        String defaultAutoCommit = null;
        String defaultReadOnly = null;
        String defaultTransactionIsolation = null;
        String defaultCatalog = null;
        Integer maxActive = null;
        Integer maxIdle = null;
        Integer minIdle = null;
        Integer initialSize = null;
        Integer maxWait = null;
        Integer maxAge = null;
        Boolean testOnBorrow = null;
        Boolean testOnReturn = null;
        Boolean testWhileIdle = null;
        String validationQuery = null;
        Integer validationQueryTimeout = null;
        Integer timeBetweenEvictionRunsMillis = null;
        Integer minEvictableIdleTimeMillis = null;
        String connectionProperties = null;
        String initSQL = null;
        String jdbcInterceptors = null;
        Integer validationInterval = null;
        Boolean logValidationErrors = null;
        List<String> datasourceSvcProperties = null;
        //OrgApacheSlingDatasourceDataSourceFactoryInfo response = api.orgApacheSlingDatasourceDataSourceFactory(post, apply, delete, action, $location, propertylist, datasourceName, datasourceSvcPropName, driverClassName, url, username, password, defaultAutoCommit, defaultReadOnly, defaultTransactionIsolation, defaultCatalog, maxActive, maxIdle, minIdle, initialSize, maxWait, maxAge, testOnBorrow, testOnReturn, testWhileIdle, validationQuery, validationQueryTimeout, timeBetweenEvictionRunsMillis, minEvictableIdleTimeMillis, connectionProperties, initSQL, jdbcInterceptors, validationInterval, logValidationErrors, datasourceSvcProperties);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDatasourceJNDIDataSourceFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String datasourceName = null;
        String datasourceSvcPropName = null;
        String datasourceJndiName = null;
        List<String> jndiProperties = null;
        //OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo response = api.orgApacheSlingDatasourceJNDIDataSourceFactory(post, apply, delete, action, $location, propertylist, datasourceName, datasourceSvcPropName, datasourceJndiName, jndiProperties);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDiscoveryOakConfigTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer connectorPingTimeout = null;
        Integer connectorPingInterval = null;
        Integer discoveryLiteCheckInterval = null;
        Integer clusterSyncServiceTimeout = null;
        Integer clusterSyncServiceInterval = null;
        Boolean enableSyncToken = null;
        Integer minEventDelay = null;
        Integer socketConnectTimeout = null;
        Integer soTimeout = null;
        List<String> topologyConnectorUrls = null;
        List<String> topologyConnectorWhitelist = null;
        Boolean autoStopLocalLoopEnabled = null;
        Boolean gzipConnectorRequestsEnabled = null;
        Boolean hmacEnabled = null;
        Boolean enableEncryption = null;
        String sharedKey = null;
        Integer hmacSharedKeyTTL = null;
        String backoffStandbyFactor = null;
        String backoffStableFactor = null;
        //OrgApacheSlingDiscoveryOakConfigInfo response = api.orgApacheSlingDiscoveryOakConfig(post, apply, delete, action, $location, propertylist, connectorPingTimeout, connectorPingInterval, discoveryLiteCheckInterval, clusterSyncServiceTimeout, clusterSyncServiceInterval, enableSyncToken, minEventDelay, socketConnectTimeout, soTimeout, topologyConnectorUrls, topologyConnectorWhitelist, autoStopLocalLoopEnabled, gzipConnectorRequestsEnabled, hmacEnabled, enableEncryption, sharedKey, hmacSharedKeyTTL, backoffStandbyFactor, backoffStableFactor);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        //OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo response = api.orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String title = null;
        String details = null;
        Boolean enabled = null;
        String serviceName = null;
        String logLevel = null;
        List<String> allowedRoots = null;
        Boolean queueProcessingEnabled = null;
        List<String> packageImporterEndpoints = null;
        List<String> passiveQueues = null;
        List<String> priorityQueues = null;
        String retryStrategy = null;
        Integer retryAttempts = null;
        String requestAuthorizationStrategyTarget = null;
        String transportSecretProviderTarget = null;
        String packageBuilderTarget = null;
        String triggersTarget = null;
        String queueProvider = null;
        Boolean asyncDelivery = null;
        Integer httpConnTimeout = null;
        //OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo response = api.orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, allowedRoots, queueProcessingEnabled, packageImporterEndpoints, passiveQueues, priorityQueues, retryStrategy, retryAttempts, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget, queueProvider, asyncDelivery, httpConnTimeout);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestATest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String jcrPrivilege = null;
        //OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo response = api.orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(post, apply, delete, action, $location, propertylist, name, jcrPrivilege);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String title = null;
        String details = null;
        Boolean enabled = null;
        String serviceName = null;
        String logLevel = null;
        List<String> allowedRoots = null;
        String requestAuthorizationStrategyTarget = null;
        String queueProviderFactoryTarget = null;
        String packageBuilderTarget = null;
        String triggersTarget = null;
        List<String> priorityQueues = null;
        //OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo response = api.orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, allowedRoots, requestAuthorizationStrategyTarget, queueProviderFactoryTarget, packageBuilderTarget, triggersTarget, priorityQueues);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String title = null;
        String details = null;
        Boolean enabled = null;
        String serviceName = null;
        String logLevel = null;
        Boolean queueProcessingEnabled = null;
        List<String> packageExporterEndpoints = null;
        Integer pullItems = null;
        Integer httpConnTimeout = null;
        String requestAuthorizationStrategyTarget = null;
        String transportSecretProviderTarget = null;
        String packageBuilderTarget = null;
        String triggersTarget = null;
        //OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo response = api.orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, packageExporterEndpoints, pullItems, httpConnTimeout, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String title = null;
        String details = null;
        Boolean enabled = null;
        String serviceName = null;
        String logLevel = null;
        Boolean queueProcessingEnabled = null;
        String packageExporterTarget = null;
        String packageImporterTarget = null;
        String requestAuthorizationStrategyTarget = null;
        String triggersTarget = null;
        //OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo response = api.orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, packageExporterTarget, packageImporterTarget, requestAuthorizationStrategyTarget, triggersTarget);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String title = null;
        String details = null;
        Boolean enabled = null;
        String serviceName = null;
        String logLevel = null;
        Boolean queueProcessingEnabled = null;
        List<String> passiveQueues = null;
        List<String> packageExporterEndpoints = null;
        List<String> packageImporterEndpoints = null;
        String retryStrategy = null;
        Integer retryAttempts = null;
        Integer pullItems = null;
        Integer httpConnTimeout = null;
        String requestAuthorizationStrategyTarget = null;
        String transportSecretProviderTarget = null;
        String packageBuilderTarget = null;
        String triggersTarget = null;
        //OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo response = api.orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, passiveQueues, packageExporterEndpoints, packageImporterEndpoints, retryStrategy, retryAttempts, pullItems, httpConnTimeout, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionMonitorDistributionQueueHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        Integer numberOfRetriesAllowed = null;
        //OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo response = api.orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, numberOfRetriesAllowed);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionPackagingImplExporterAgentDistributioTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String queue = null;
        Boolean dropInvalidItems = null;
        String agentTarget = null;
        //OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo response = api.orgApacheSlingDistributionPackagingImplExporterAgentDistributio(post, apply, delete, action, $location, propertylist, name, queue, dropInvalidItems, agentTarget);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionPackagingImplExporterLocalDistributioTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String packageBuilderTarget = null;
        //OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo response = api.orgApacheSlingDistributionPackagingImplExporterLocalDistributio(post, apply, delete, action, $location, propertylist, name, packageBuilderTarget);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionPackagingImplExporterRemoteDistributiTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        List<String> endpoints = null;
        Integer pullItems = null;
        String packageBuilderTarget = null;
        String transportSecretProviderTarget = null;
        //OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo response = api.orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(post, apply, delete, action, $location, propertylist, name, endpoints, pullItems, packageBuilderTarget, transportSecretProviderTarget);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionPackagingImplImporterLocalDistributioTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String packageBuilderTarget = null;
        //OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo response = api.orgApacheSlingDistributionPackagingImplImporterLocalDistributio(post, apply, delete, action, $location, propertylist, name, packageBuilderTarget);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionPackagingImplImporterRemoteDistributiTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        List<String> endpoints = null;
        String transportSecretProviderTarget = null;
        //OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo response = api.orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(post, apply, delete, action, $location, propertylist, name, endpoints, transportSecretProviderTarget);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionPackagingImplImporterRepositoryDistriTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String serviceName = null;
        String path = null;
        String privilegeName = null;
        //OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo response = api.orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(post, apply, delete, action, $location, propertylist, name, serviceName, path, privilegeName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionResourcesImplDistributionConfigurationTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerRoots = null;
        String kind = null;
        //OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo response = api.orgApacheSlingDistributionResourcesImplDistributionConfiguration(post, apply, delete, action, $location, propertylist, providerRoots, kind);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionResourcesImplDistributionServiceResourTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerRoots = null;
        String kind = null;
        //OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo response = api.orgApacheSlingDistributionResourcesImplDistributionServiceResour(post, apply, delete, action, $location, propertylist, providerRoots, kind);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionSerializationImplDistributionPackageBuTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String type = null;
        String formatTarget = null;
        String tempFsFolder = null;
        Integer fileThreshold = null;
        String memoryUnit = null;
        Boolean useOffHeapMemory = null;
        String digestAlgorithm = null;
        Integer monitoringQueueSize = null;
        Integer cleanupDelay = null;
        List<String> packageFilters = null;
        List<String> propertyFilters = null;
        //OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo response = api.orgApacheSlingDistributionSerializationImplDistributionPackageBu(post, apply, delete, action, $location, propertylist, name, type, formatTarget, tempFsFolder, fileThreshold, memoryUnit, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, cleanupDelay, packageFilters, propertyFilters);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionSerializationImplVltVaultDistributionTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String type = null;
        String importMode = null;
        String aclHandling = null;
        String packageRoots = null;
        List<String> packageFilters = null;
        List<String> propertyFilters = null;
        String tempFsFolder = null;
        Boolean useBinaryReferences = null;
        Integer autoSaveThreshold = null;
        Integer cleanupDelay = null;
        Integer fileThreshold = null;
        String MEGA_BYTES = null;
        Boolean useOffHeapMemory = null;
        String digestAlgorithm = null;
        Integer monitoringQueueSize = null;
        List<String> pathsMapping = null;
        Boolean strictImport = null;
        //OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo response = api.orgApacheSlingDistributionSerializationImplVltVaultDistribution(post, apply, delete, action, $location, propertylist, name, type, importMode, aclHandling, packageRoots, packageFilters, propertyFilters, tempFsFolder, useBinaryReferences, autoSaveThreshold, cleanupDelay, fileThreshold, MEGA_BYTES, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, pathsMapping, strictImport);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTransportImplUserCredentialsDistributiTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String username = null;
        String password = null;
        //OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo response = api.orgApacheSlingDistributionTransportImplUserCredentialsDistributi(post, apply, delete, action, $location, propertylist, name, username, password);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTriggerImplDistributionEventDistributeTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String path = null;
        //OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo response = api.orgApacheSlingDistributionTriggerImplDistributionEventDistribute(post, apply, delete, action, $location, propertylist, name, path);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String path = null;
        List<String> ignoredPathsPatterns = null;
        String serviceName = null;
        Boolean deep = null;
        //OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo response = api.orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(post, apply, delete, action, $location, propertylist, name, path, ignoredPathsPatterns, serviceName, deep);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String path = null;
        String serviceName = null;
        String nuggetsPath = null;
        //OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo response = api.orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(post, apply, delete, action, $location, propertylist, name, path, serviceName, nuggetsPath);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String endpoint = null;
        String transportSecretProviderTarget = null;
        //OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo response = api.orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(post, apply, delete, action, $location, propertylist, name, endpoint, transportSecretProviderTarget);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTriggerImplResourceEventDistributionTrTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String path = null;
        //OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo response = api.orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(post, apply, delete, action, $location, propertylist, name, path);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String path = null;
        String seconds = null;
        String serviceName = null;
        //OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo response = api.orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(post, apply, delete, action, $location, propertylist, name, path, seconds, serviceName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEngineImplAuthSlingAuthenticatorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String osgiHttpWhiteboardContextSelect = null;
        String osgiHttpWhiteboardListener = null;
        String authSudoCookie = null;
        String authSudoParameter = null;
        Boolean authAnnonymous = null;
        List<String> slingAuthRequirements = null;
        String slingAuthAnonymousUser = null;
        String slingAuthAnonymousPassword = null;
        String authHttp = null;
        String authHttpRealm = null;
        List<String> authUriSuffix = null;
        //OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo response = api.orgApacheSlingEngineImplAuthSlingAuthenticator(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardContextSelect, osgiHttpWhiteboardListener, authSudoCookie, authSudoParameter, authAnnonymous, slingAuthRequirements, slingAuthAnonymousUser, slingAuthAnonymousPassword, authHttp, authHttpRealm, authUriSuffix);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> extensions = null;
        Integer minDurationMs = null;
        Integer maxDurationMs = null;
        Boolean compactLogFormat = null;
        //OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo response = api.orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(post, apply, delete, action, $location, propertylist, extensions, minDurationMs, maxDurationMs, compactLogFormat);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEngineImplLogRequestLoggerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String requestLogOutput = null;
        Integer requestLogOutputtype = null;
        Boolean requestLogEnabled = null;
        String accessLogOutput = null;
        Integer accessLogOutputtype = null;
        Boolean accessLogEnabled = null;
        //OrgApacheSlingEngineImplLogRequestLoggerInfo response = api.orgApacheSlingEngineImplLogRequestLogger(post, apply, delete, action, $location, propertylist, requestLogOutput, requestLogOutputtype, requestLogEnabled, accessLogOutput, accessLogOutputtype, accessLogEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEngineImplLogRequestLoggerServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String requestLogServiceFormat = null;
        String requestLogServiceOutput = null;
        Integer requestLogServiceOutputtype = null;
        Boolean requestLogServiceOnentry = null;
        //OrgApacheSlingEngineImplLogRequestLoggerServiceInfo response = api.orgApacheSlingEngineImplLogRequestLoggerService(post, apply, delete, action, $location, propertylist, requestLogServiceFormat, requestLogServiceOutput, requestLogServiceOutputtype, requestLogServiceOnentry);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEngineImplSlingMainServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer slingMaxCalls = null;
        Integer slingMaxInclusions = null;
        Boolean slingTraceAllow = null;
        Integer slingMaxRecordRequests = null;
        List<String> slingStorePatternRequests = null;
        String slingServerinfo = null;
        List<String> slingAdditionalResponseHeaders = null;
        //OrgApacheSlingEngineImplSlingMainServletInfo response = api.orgApacheSlingEngineImplSlingMainServlet(post, apply, delete, action, $location, propertylist, slingMaxCalls, slingMaxInclusions, slingTraceAllow, slingMaxRecordRequests, slingStorePatternRequests, slingServerinfo, slingAdditionalResponseHeaders);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEngineParametersTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingDefaultParameterEncoding = null;
        Integer slingDefaultMaxParameters = null;
        String fileLocation = null;
        Integer fileThreshold = null;
        Integer fileMax = null;
        Integer requestMax = null;
        Boolean slingDefaultParameterCheckForAdditionalContainerParameters = null;
        //OrgApacheSlingEngineParametersInfo response = api.orgApacheSlingEngineParameters(post, apply, delete, action, $location, propertylist, slingDefaultParameterEncoding, slingDefaultMaxParameters, fileLocation, fileThreshold, fileMax, requestMax, slingDefaultParameterCheckForAdditionalContainerParameters);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEventImplEventingThreadPoolTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer minPoolSize = null;
        //OrgApacheSlingEventImplEventingThreadPoolInfo response = api.orgApacheSlingEventImplEventingThreadPool(post, apply, delete, action, $location, propertylist, minPoolSize);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEventImplJobsDefaultJobManagerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String queuePriority = null;
        Integer queueRetries = null;
        Integer queueRetrydelay = null;
        Integer queueMaxparallel = null;
        //OrgApacheSlingEventImplJobsDefaultJobManagerInfo response = api.orgApacheSlingEventImplJobsDefaultJobManager(post, apply, delete, action, $location, propertylist, queuePriority, queueRetries, queueRetrydelay, queueMaxparallel);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEventImplJobsJcrPersistenceHandlerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean jobConsumermanagerDisableDistribution = null;
        Integer startupDelay = null;
        Integer cleanupPeriod = null;
        //OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo response = api.orgApacheSlingEventImplJobsJcrPersistenceHandler(post, apply, delete, action, $location, propertylist, jobConsumermanagerDisableDistribution, startupDelay, cleanupPeriod);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEventImplJobsJobConsumerManagerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean orgApacheSlingInstallerConfigurationPersist = null;
        List<String> jobConsumermanagerWhitelist = null;
        List<String> jobConsumermanagerBlacklist = null;
        //OrgApacheSlingEventImplJobsJobConsumerManagerInfo response = api.orgApacheSlingEventImplJobsJobConsumerManager(post, apply, delete, action, $location, propertylist, orgApacheSlingInstallerConfigurationPersist, jobConsumermanagerWhitelist, jobConsumermanagerBlacklist);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEventJobsQueueConfigurationTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String queueName = null;
        List<String> queueTopics = null;
        String queueType = null;
        String queuePriority = null;
        Integer queueRetries = null;
        Integer queueRetrydelay = null;
        BigDecimal queueMaxparallel = null;
        Boolean queueKeepJobs = null;
        Boolean queuePreferRunOnCreationInstance = null;
        Integer queueThreadPoolSize = null;
        Integer serviceRanking = null;
        //OrgApacheSlingEventJobsQueueConfigurationInfo response = api.orgApacheSlingEventJobsQueueConfiguration(post, apply, delete, action, $location, propertylist, queueName, queueTopics, queueType, queuePriority, queueRetries, queueRetrydelay, queueMaxparallel, queueKeepJobs, queuePreferRunOnCreationInstance, queueThreadPoolSize, serviceRanking);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> users = null;
        List<String> groups = null;
        //OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo response = api.orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(post, apply, delete, action, $location, propertylist, users, groups);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingFeatureflagsFeatureTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String description = null;
        Boolean enabled = null;
        //OrgApacheSlingFeatureflagsFeatureInfo response = api.orgApacheSlingFeatureflagsFeature(post, apply, delete, action, $location, propertylist, name, description, enabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingFeatureflagsImplConfiguredFeatureTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String description = null;
        Boolean enabled = null;
        //OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo response = api.orgApacheSlingFeatureflagsImplConfiguredFeature(post, apply, delete, action, $location, propertylist, name, description, enabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHapiImplHApiUtilImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String orgApacheSlingHapiToolsResourcetype = null;
        String orgApacheSlingHapiToolsCollectionresourcetype = null;
        List<String> orgApacheSlingHapiToolsSearchpaths = null;
        String orgApacheSlingHapiToolsExternalurl = null;
        Boolean orgApacheSlingHapiToolsEnabled = null;
        //OrgApacheSlingHapiImplHApiUtilImplInfo response = api.orgApacheSlingHapiImplHApiUtilImpl(post, apply, delete, action, $location, propertylist, orgApacheSlingHapiToolsResourcetype, orgApacheSlingHapiToolsCollectionresourcetype, orgApacheSlingHapiToolsSearchpaths, orgApacheSlingHapiToolsExternalurl, orgApacheSlingHapiToolsEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHcCoreImplCompositeHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        List<String> filterTags = null;
        Boolean filterCombineTagsWithOr = null;
        //OrgApacheSlingHcCoreImplCompositeHealthCheckInfo response = api.orgApacheSlingHcCoreImplCompositeHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, filterTags, filterCombineTagsWithOr);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer timeoutInMs = null;
        Integer longRunningFutureThresholdForCriticalMs = null;
        Integer resultCacheTtlInMs = null;
        //OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo response = api.orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(post, apply, delete, action, $location, propertylist, timeoutInMs, longRunningFutureThresholdForCriticalMs, resultCacheTtlInMs);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHcCoreImplJmxAttributeHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        String mbeanName = null;
        String attributeName = null;
        String attributeValueConstraint = null;
        //OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo response = api.orgApacheSlingHcCoreImplJmxAttributeHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, mbeanName, attributeName, attributeValueConstraint);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHcCoreImplScriptableHealthCheckTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        String expression = null;
        String languageExtension = null;
        //OrgApacheSlingHcCoreImplScriptableHealthCheckInfo response = api.orgApacheSlingHcCoreImplScriptableHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, expression, languageExtension);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHcCoreImplServletHealthCheckExecutorServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String servletPath = null;
        Boolean disabled = null;
        String corsAccessControlAllowOrigin = null;
        //OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo response = api.orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(post, apply, delete, action, $location, propertylist, servletPath, disabled, corsAccessControlAllowOrigin);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer totalWidth = null;
        Integer colWidthName = null;
        Integer colWidthResult = null;
        Integer colWidthTiming = null;
        //OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo response = api.orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(post, apply, delete, action, $location, propertylist, totalWidth, colWidthName, colWidthResult, colWidthTiming);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingI18nImplI18NFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        List<String> slingFilterScope = null;
        //OrgApacheSlingI18nImplI18NFilterInfo response = api.orgApacheSlingI18nImplI18NFilter(post, apply, delete, action, $location, propertylist, serviceRanking, slingFilterScope);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingI18nImplJcrResourceBundleProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String localeDefault = null;
        Boolean preloadBundles = null;
        Integer invalidationDelay = null;
        //OrgApacheSlingI18nImplJcrResourceBundleProviderInfo response = api.orgApacheSlingI18nImplJcrResourceBundleProvider(post, apply, delete, action, $location, propertylist, localeDefault, preloadBundles, invalidationDelay);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingInstallerProviderJcrImplJcrInstallerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> handlerSchemes = null;
        String slingJcrinstallFolderNameRegexp = null;
        Integer slingJcrinstallFolderMaxDepth = null;
        List<String> slingJcrinstallSearchPath = null;
        String slingJcrinstallNewConfigPath = null;
        String slingJcrinstallSignalPath = null;
        Boolean slingJcrinstallEnableWriteback = null;
        //OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo response = api.orgApacheSlingInstallerProviderJcrImplJcrInstaller(post, apply, delete, action, $location, propertylist, handlerSchemes, slingJcrinstallFolderNameRegexp, slingJcrinstallFolderMaxDepth, slingJcrinstallSearchPath, slingJcrinstallNewConfigPath, slingJcrinstallSignalPath, slingJcrinstallEnableWriteback);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrBaseInternalLoginAdminWhitelistTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean whitelistBypass = null;
        String whitelistBundlesRegexp = null;
        //OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo response = api.orgApacheSlingJcrBaseInternalLoginAdminWhitelist(post, apply, delete, action, $location, propertylist, whitelistBypass, whitelistBundlesRegexp);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String whitelistName = null;
        List<String> whitelistBundles = null;
        //OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo response = api.orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(post, apply, delete, action, $location, propertylist, whitelistName, whitelistBundles);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrDavexImplServletsSlingDavExServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String alias = null;
        Boolean davCreateAbsoluteUri = null;
        String davProtectedhandlers = null;
        //OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo response = api.orgApacheSlingJcrDavexImplServletsSlingDavExServlet(post, apply, delete, action, $location, propertylist, alias, davCreateAbsoluteUri, davProtectedhandlers);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String javaNamingFactoryInitial = null;
        String javaNamingProviderUrl = null;
        //OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo response = api.orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(post, apply, delete, action, $location, propertylist, javaNamingFactoryInitial, javaNamingProviderUrl);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer port = null;
        //OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo response = api.orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(post, apply, delete, action, $location, propertylist, port);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrRepoinitImplRepositoryInitializerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> references = null;
        //OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo response = api.orgApacheSlingJcrRepoinitImplRepositoryInitializer(post, apply, delete, action, $location, propertylist, references);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrRepoinitRepositoryInitializerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> references = null;
        List<String> scripts = null;
        //OrgApacheSlingJcrRepoinitRepositoryInitializerInfo response = api.orgApacheSlingJcrRepoinitRepositoryInitializer(post, apply, delete, action, $location, propertylist, references, scripts);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> resourceResolverSearchpath = null;
        Boolean resourceResolverManglenamespaces = null;
        Boolean resourceResolverAllowDirect = null;
        List<String> resourceResolverRequiredProviders = null;
        List<String> resourceResolverRequiredProvidernames = null;
        List<String> resourceResolverVirtual = null;
        List<String> resourceResolverMapping = null;
        String resourceResolverMapLocation = null;
        List<String> resourceResolverMapObservation = null;
        Integer resourceResolverDefaultVanityRedirectStatus = null;
        Boolean resourceResolverEnableVanitypath = null;
        Integer resourceResolverVanitypathMaxEntries = null;
        Boolean resourceResolverVanitypathMaxEntriesStartup = null;
        Integer resourceResolverVanitypathBloomfilterMaxBytes = null;
        Boolean resourceResolverOptimizeAliasResolution = null;
        List<String> resourceResolverVanitypathWhitelist = null;
        List<String> resourceResolverVanitypathBlacklist = null;
        Boolean resourceResolverVanityPrecedence = null;
        Boolean resourceResolverProviderhandlingParanoid = null;
        Boolean resourceResolverLogClosing = null;
        Boolean resourceResolverLogUnclosed = null;
        //OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo response = api.orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(post, apply, delete, action, $location, propertylist, resourceResolverSearchpath, resourceResolverManglenamespaces, resourceResolverAllowDirect, resourceResolverRequiredProviders, resourceResolverRequiredProvidernames, resourceResolverVirtual, resourceResolverMapping, resourceResolverMapLocation, resourceResolverMapObservation, resourceResolverDefaultVanityRedirectStatus, resourceResolverEnableVanitypath, resourceResolverVanitypathMaxEntries, resourceResolverVanitypathMaxEntriesStartup, resourceResolverVanitypathBloomfilterMaxBytes, resourceResolverOptimizeAliasResolution, resourceResolverVanitypathWhitelist, resourceResolverVanitypathBlacklist, resourceResolverVanityPrecedence, resourceResolverProviderhandlingParanoid, resourceResolverLogClosing, resourceResolverLogUnclosed);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrResourceInternalJcrSystemUserValidatorTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean allowOnlySystemUser = null;
        //OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo response = api.orgApacheSlingJcrResourceInternalJcrSystemUserValidator(post, apply, delete, action, $location, propertylist, allowOnlySystemUser);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        String checkpathPrefix = null;
        String jcrPath = null;
        //OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo response = api.orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(post, apply, delete, action, $location, propertylist, path, checkpathPrefix, jcrPath);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String typeCollections = null;
        String typeNoncollections = null;
        String typeContent = null;
        //OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo response = api.orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(post, apply, delete, action, $location, propertylist, serviceRanking, typeCollections, typeNoncollections, typeContent);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        //OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo response = api.orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(post, apply, delete, action, $location, propertylist, serviceRanking);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String davRoot = null;
        Boolean davCreateAbsoluteUri = null;
        String davRealm = null;
        List<String> collectionTypes = null;
        List<String> filterPrefixes = null;
        String filterTypes = null;
        String filterUris = null;
        String typeCollections = null;
        String typeNoncollections = null;
        String typeContent = null;
        //OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo response = api.orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(post, apply, delete, action, $location, propertylist, davRoot, davCreateAbsoluteUri, davRealm, collectionTypes, filterPrefixes, filterTypes, filterUris, typeCollections, typeNoncollections, typeContent);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJmxProviderImplJMXResourceProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerRoots = null;
        //OrgApacheSlingJmxProviderImplJMXResourceProviderInfo response = api.orgApacheSlingJmxProviderImplJMXResourceProvider(post, apply, delete, action, $location, propertylist, providerRoots);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingModelsImplModelAdapterFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String osgiHttpWhiteboardListener = null;
        String osgiHttpWhiteboardContextSelect = null;
        Integer maxRecursionDepth = null;
        Integer cleanupJobPeriod = null;
        //OrgApacheSlingModelsImplModelAdapterFactoryInfo response = api.orgApacheSlingModelsImplModelAdapterFactory(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardListener, osgiHttpWhiteboardContextSelect, maxRecursionDepth, cleanupJobPeriod);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingModelsJacksonexporterImplResourceModuleProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxRecursionLevels = null;
        //OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo response = api.orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(post, apply, delete, action, $location, propertylist, maxRecursionLevels);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String felixInventoryPrinterName = null;
        String felixInventoryPrinterTitle = null;
        String path = null;
        //OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo response = api.orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(post, apply, delete, action, $location, propertylist, felixInventoryPrinterName, felixInventoryPrinterTitle, path);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingResourcemergerImplMergedResourceProviderFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String mergeRoot = null;
        Boolean mergeReadOnly = null;
        //OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo response = api.orgApacheSlingResourcemergerImplMergedResourceProviderFactory(post, apply, delete, action, $location, propertylist, mergeRoot, mergeReadOnly);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingResourcemergerPickerOverridingTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String mergeRoot = null;
        Boolean mergeReadOnly = null;
        //OrgApacheSlingResourcemergerPickerOverridingInfo response = api.orgApacheSlingResourcemergerPickerOverriding(post, apply, delete, action, $location, propertylist, mergeRoot, mergeReadOnly);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingScriptingCoreImplScriptCacheImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer orgApacheSlingScriptingCacheSize = null;
        List<String> orgApacheSlingScriptingCacheAdditionalExtensions = null;
        //OrgApacheSlingScriptingCoreImplScriptCacheImplInfo response = api.orgApacheSlingScriptingCoreImplScriptCacheImpl(post, apply, delete, action, $location, propertylist, orgApacheSlingScriptingCacheSize, orgApacheSlingScriptingCacheAdditionalExtensions);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean logStacktraceOnclose = null;
        //OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo response = api.orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(post, apply, delete, action, $location, propertylist, logStacktraceOnclose);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean javaClassdebuginfo = null;
        String javaJavaEncoding = null;
        String javaCompilerSourceVM = null;
        String javaCompilerTargetVM = null;
        //OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo response = api.orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(post, apply, delete, action, $location, propertylist, javaClassdebuginfo, javaJavaEncoding, javaCompilerSourceVM, javaCompilerTargetVM);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer orgApacheSlingScriptingJavascriptRhinoOptLevel = null;
        //OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo response = api.orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(post, apply, delete, action, $location, propertylist, orgApacheSlingScriptingJavascriptRhinoOptLevel);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingScriptingJspJspScriptEngineFactoryTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jasperCompilerTargetVM = null;
        String jasperCompilerSourceVM = null;
        Boolean jasperClassdebuginfo = null;
        Boolean jasperEnablePooling = null;
        String jasperIeClassId = null;
        Boolean jasperGenStringAsCharArray = null;
        Boolean jasperKeepgenerated = null;
        Boolean jasperMappedfile = null;
        Boolean jasperTrimSpaces = null;
        Boolean jasperDisplaySourceFragments = null;
        Boolean defaultIsSession = null;
        //OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo response = api.orgApacheSlingScriptingJspJspScriptEngineFactory(post, apply, delete, action, $location, propertylist, jasperCompilerTargetVM, jasperCompilerSourceVM, jasperClassdebuginfo, jasperEnablePooling, jasperIeClassId, jasperGenStringAsCharArray, jasperKeepgenerated, jasperMappedfile, jasperTrimSpaces, jasperDisplaySourceFragments, defaultIsSession);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> orgApacheSlingScriptingSightlyJsBindings = null;
        //OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo response = api.orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(post, apply, delete, action, $location, propertylist, orgApacheSlingScriptingSightlyJsBindings);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingSecurityImplContentDispositionFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> slingContentDispositionPaths = null;
        List<String> slingContentDispositionExcludedPaths = null;
        Boolean slingContentDispositionAllPaths = null;
        //OrgApacheSlingSecurityImplContentDispositionFilterInfo response = api.orgApacheSlingSecurityImplContentDispositionFilter(post, apply, delete, action, $location, propertylist, slingContentDispositionPaths, slingContentDispositionExcludedPaths, slingContentDispositionAllPaths);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingSecurityImplReferrerFilterTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean allowEmpty = null;
        List<String> allowHosts = null;
        List<String> allowHostsRegexp = null;
        List<String> filterMethods = null;
        List<String> excludeAgentsRegexp = null;
        //OrgApacheSlingSecurityImplReferrerFilterInfo response = api.orgApacheSlingSecurityImplReferrerFilter(post, apply, delete, action, $location, propertylist, allowEmpty, allowHosts, allowHostsRegexp, filterMethods, excludeAgentsRegexp);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServiceusermappingImplServiceUserMapperImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> userMapping = null;
        String userDefault = null;
        Boolean userEnableDefaultMapping = null;
        Boolean requireValidation = null;
        //OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo response = api.orgApacheSlingServiceusermappingImplServiceUserMapperImpl(post, apply, delete, action, $location, propertylist, userMapping, userDefault, userEnableDefaultMapping, requireValidation);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        List<String> userMapping = null;
        //OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo response = api.orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(post, apply, delete, action, $location, propertylist, serviceRanking, userMapping);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServletsGetDefaultGetServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> aliases = null;
        Boolean index = null;
        List<String> indexFiles = null;
        Boolean enableHtml = null;
        Boolean enableJson = null;
        Boolean enableTxt = null;
        Boolean enableXml = null;
        Integer jsonMaximumresults = null;
        Boolean ecmaSuport = null;
        //OrgApacheSlingServletsGetDefaultGetServletInfo response = api.orgApacheSlingServletsGetDefaultGetServlet(post, apply, delete, action, $location, propertylist, aliases, index, indexFiles, enableHtml, enableJson, enableTxt, enableXml, jsonMaximumresults, ecmaSuport);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServletsGetImplVersionVersionInfoServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> slingServletSelectors = null;
        Boolean ecmaSuport = null;
        //OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo response = api.orgApacheSlingServletsGetImplVersionVersionInfoServlet(post, apply, delete, action, $location, propertylist, slingServletSelectors, ecmaSuport);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServletsPostImplHelperChunkCleanUpTaskTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        Boolean schedulerConcurrent = null;
        Integer chunkCleanupAge = null;
        //OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo response = api.orgApacheSlingServletsPostImplHelperChunkCleanUpTask(post, apply, delete, action, $location, propertylist, schedulerExpression, schedulerConcurrent, chunkCleanupAge);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServletsPostImplSlingPostServletTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> servletPostDateFormats = null;
        List<String> servletPostNodeNameHints = null;
        Integer servletPostNodeNameMaxLength = null;
        Boolean servletPostCheckinNewVersionableNodes = null;
        Boolean servletPostAutoCheckout = null;
        Boolean servletPostAutoCheckin = null;
        String servletPostIgnorePattern = null;
        //OrgApacheSlingServletsPostImplSlingPostServletInfo response = api.orgApacheSlingServletsPostImplSlingPostServlet(post, apply, delete, action, $location, propertylist, servletPostDateFormats, servletPostNodeNameHints, servletPostNodeNameMaxLength, servletPostCheckinNewVersionableNodes, servletPostAutoCheckout, servletPostAutoCheckin, servletPostIgnorePattern);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServletsResolverSlingServletResolverTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String servletresolverServletRoot = null;
        Integer servletresolverCacheSize = null;
        List<String> servletresolverPaths = null;
        List<String> servletresolverDefaultExtensions = null;
        //OrgApacheSlingServletsResolverSlingServletResolverInfo response = api.orgApacheSlingServletsResolverSlingServletResolver(post, apply, delete, action, $location, propertylist, servletresolverServletRoot, servletresolverCacheSize, servletresolverPaths, servletresolverDefaultExtensions);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingSettingsImplSlingSettingsServiceImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingName = null;
        String slingDescription = null;
        //OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo response = api.orgApacheSlingSettingsImplSlingSettingsServiceImpl(post, apply, delete, action, $location, propertylist, slingName, slingDescription);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingStartupfilterImplStartupFilterImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean activeByDefault = null;
        String defaultMessage = null;
        //OrgApacheSlingStartupfilterImplStartupFilterImplInfo response = api.orgApacheSlingStartupfilterImplStartupFilterImpl(post, apply, delete, action, $location, propertylist, activeByDefault, defaultMessage);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingTenantInternalTenantProviderImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String tenantRoot = null;
        List<String> tenantPathMatcher = null;
        //OrgApacheSlingTenantInternalTenantProviderImplInfo response = api.orgApacheSlingTenantInternalTenantProviderImpl(post, apply, delete, action, $location, propertylist, tenantRoot, tenantPathMatcher);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingTracerInternalLogTracerTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> tracerSets = null;
        Boolean enabled = null;
        Boolean servletEnabled = null;
        Integer recordingCacheSizeInMB = null;
        Integer recordingCacheDurationInSecs = null;
        Boolean recordingCompressionEnabled = null;
        Boolean gzipResponse = null;
        //OrgApacheSlingTracerInternalLogTracerInfo response = api.orgApacheSlingTracerInternalLogTracer(post, apply, delete, action, $location, propertylist, tracerSets, enabled, servletEnabled, recordingCacheSizeInMB, recordingCacheDurationInSecs, recordingCompressionEnabled, gzipResponse);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingXssImplXSSFilterImplTest() {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String policyPath = null;
        //OrgApacheSlingXssImplXSSFilterImplInfo response = api.orgApacheSlingXssImplXSSFilterImpl(post, apply, delete, action, $location, propertylist, policyPath);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
}
