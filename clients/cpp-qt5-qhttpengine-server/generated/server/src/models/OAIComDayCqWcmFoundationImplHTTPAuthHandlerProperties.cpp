/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties() {
    this->init();
}

OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::~OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties() {
    
}

void
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::init() {
    m_path_isSet = false;
    m_auth_http_nologin_isSet = false;
    m_auth_http_realm_isSet = false;
    m_auth_default_loginpage_isSet = false;
    m_auth_cred_form_isSet = false;
    m_auth_cred_utf8_isSet = false;
}

void
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(path, json[QString("path")]);
    
    ::OpenAPI::fromJsonValue(auth_http_nologin, json[QString("auth.http.nologin")]);
    
    ::OpenAPI::fromJsonValue(auth_http_realm, json[QString("auth.http.realm")]);
    
    ::OpenAPI::fromJsonValue(auth_default_loginpage, json[QString("auth.default.loginpage")]);
    
    ::OpenAPI::fromJsonValue(auth_cred_form, json[QString("auth.cred.form")]);
    
    ::OpenAPI::fromJsonValue(auth_cred_utf8, json[QString("auth.cred.utf8")]);
    
}

QString
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::asJsonObject() const {
    QJsonObject obj;
	if(path.isSet()){
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(path));
    }
	if(auth_http_nologin.isSet()){
        obj.insert(QString("auth.http.nologin"), ::OpenAPI::toJsonValue(auth_http_nologin));
    }
	if(auth_http_realm.isSet()){
        obj.insert(QString("auth.http.realm"), ::OpenAPI::toJsonValue(auth_http_realm));
    }
	if(auth_default_loginpage.isSet()){
        obj.insert(QString("auth.default.loginpage"), ::OpenAPI::toJsonValue(auth_default_loginpage));
    }
	if(auth_cred_form.isSet()){
        obj.insert(QString("auth.cred.form"), ::OpenAPI::toJsonValue(auth_cred_form));
    }
	if(auth_cred_utf8.isSet()){
        obj.insert(QString("auth.cred.utf8"), ::OpenAPI::toJsonValue(auth_cred_utf8));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::getPath() const {
    return path;
}
void
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::setPath(const OAIConfigNodePropertyString &path) {
    this->path = path;
    this->m_path_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::getAuthHttpNologin() const {
    return auth_http_nologin;
}
void
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::setAuthHttpNologin(const OAIConfigNodePropertyBoolean &auth_http_nologin) {
    this->auth_http_nologin = auth_http_nologin;
    this->m_auth_http_nologin_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::getAuthHttpRealm() const {
    return auth_http_realm;
}
void
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::setAuthHttpRealm(const OAIConfigNodePropertyString &auth_http_realm) {
    this->auth_http_realm = auth_http_realm;
    this->m_auth_http_realm_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::getAuthDefaultLoginpage() const {
    return auth_default_loginpage;
}
void
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::setAuthDefaultLoginpage(const OAIConfigNodePropertyString &auth_default_loginpage) {
    this->auth_default_loginpage = auth_default_loginpage;
    this->m_auth_default_loginpage_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::getAuthCredForm() const {
    return auth_cred_form;
}
void
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::setAuthCredForm(const OAIConfigNodePropertyArray &auth_cred_form) {
    this->auth_cred_form = auth_cred_form;
    this->m_auth_cred_form_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::getAuthCredUtf8() const {
    return auth_cred_utf8;
}
void
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::setAuthCredUtf8(const OAIConfigNodePropertyArray &auth_cred_utf8) {
    this->auth_cred_utf8 = auth_cred_utf8;
    this->m_auth_cred_utf8_isSet = true;
}


bool
OAIComDayCqWcmFoundationImplHTTPAuthHandlerProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(path.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_http_nologin.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_http_realm.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_default_loginpage.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_cred_form.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_cred_utf8.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

