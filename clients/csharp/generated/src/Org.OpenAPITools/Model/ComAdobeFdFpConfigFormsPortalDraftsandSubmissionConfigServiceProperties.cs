/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties :  IEquatable<ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties" /> class.
        /// </summary>
        /// <param name="portalOutboxes">portalOutboxes.</param>
        /// <param name="draftDataService">draftDataService.</param>
        /// <param name="draftMetadataService">draftMetadataService.</param>
        /// <param name="submitDataService">submitDataService.</param>
        /// <param name="submitMetadataService">submitMetadataService.</param>
        /// <param name="pendingSignDataService">pendingSignDataService.</param>
        /// <param name="pendingSignMetadataService">pendingSignMetadataService.</param>
        public ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties(ConfigNodePropertyArray portalOutboxes = default(ConfigNodePropertyArray), ConfigNodePropertyString draftDataService = default(ConfigNodePropertyString), ConfigNodePropertyString draftMetadataService = default(ConfigNodePropertyString), ConfigNodePropertyString submitDataService = default(ConfigNodePropertyString), ConfigNodePropertyString submitMetadataService = default(ConfigNodePropertyString), ConfigNodePropertyString pendingSignDataService = default(ConfigNodePropertyString), ConfigNodePropertyString pendingSignMetadataService = default(ConfigNodePropertyString))
        {
            this.PortalOutboxes = portalOutboxes;
            this.DraftDataService = draftDataService;
            this.DraftMetadataService = draftMetadataService;
            this.SubmitDataService = submitDataService;
            this.SubmitMetadataService = submitMetadataService;
            this.PendingSignDataService = pendingSignDataService;
            this.PendingSignMetadataService = pendingSignMetadataService;
        }
        
        /// <summary>
        /// Gets or Sets PortalOutboxes
        /// </summary>
        [DataMember(Name="portal.outboxes", EmitDefaultValue=false)]
        public ConfigNodePropertyArray PortalOutboxes { get; set; }

        /// <summary>
        /// Gets or Sets DraftDataService
        /// </summary>
        [DataMember(Name="draft.data.service", EmitDefaultValue=false)]
        public ConfigNodePropertyString DraftDataService { get; set; }

        /// <summary>
        /// Gets or Sets DraftMetadataService
        /// </summary>
        [DataMember(Name="draft.metadata.service", EmitDefaultValue=false)]
        public ConfigNodePropertyString DraftMetadataService { get; set; }

        /// <summary>
        /// Gets or Sets SubmitDataService
        /// </summary>
        [DataMember(Name="submit.data.service", EmitDefaultValue=false)]
        public ConfigNodePropertyString SubmitDataService { get; set; }

        /// <summary>
        /// Gets or Sets SubmitMetadataService
        /// </summary>
        [DataMember(Name="submit.metadata.service", EmitDefaultValue=false)]
        public ConfigNodePropertyString SubmitMetadataService { get; set; }

        /// <summary>
        /// Gets or Sets PendingSignDataService
        /// </summary>
        [DataMember(Name="pendingSign.data.service", EmitDefaultValue=false)]
        public ConfigNodePropertyString PendingSignDataService { get; set; }

        /// <summary>
        /// Gets or Sets PendingSignMetadataService
        /// </summary>
        [DataMember(Name="pendingSign.metadata.service", EmitDefaultValue=false)]
        public ConfigNodePropertyString PendingSignMetadataService { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties {\n");
            sb.Append("  PortalOutboxes: ").Append(PortalOutboxes).Append("\n");
            sb.Append("  DraftDataService: ").Append(DraftDataService).Append("\n");
            sb.Append("  DraftMetadataService: ").Append(DraftMetadataService).Append("\n");
            sb.Append("  SubmitDataService: ").Append(SubmitDataService).Append("\n");
            sb.Append("  SubmitMetadataService: ").Append(SubmitMetadataService).Append("\n");
            sb.Append("  PendingSignDataService: ").Append(PendingSignDataService).Append("\n");
            sb.Append("  PendingSignMetadataService: ").Append(PendingSignMetadataService).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PortalOutboxes == input.PortalOutboxes ||
                    (this.PortalOutboxes != null &&
                    this.PortalOutboxes.Equals(input.PortalOutboxes))
                ) && 
                (
                    this.DraftDataService == input.DraftDataService ||
                    (this.DraftDataService != null &&
                    this.DraftDataService.Equals(input.DraftDataService))
                ) && 
                (
                    this.DraftMetadataService == input.DraftMetadataService ||
                    (this.DraftMetadataService != null &&
                    this.DraftMetadataService.Equals(input.DraftMetadataService))
                ) && 
                (
                    this.SubmitDataService == input.SubmitDataService ||
                    (this.SubmitDataService != null &&
                    this.SubmitDataService.Equals(input.SubmitDataService))
                ) && 
                (
                    this.SubmitMetadataService == input.SubmitMetadataService ||
                    (this.SubmitMetadataService != null &&
                    this.SubmitMetadataService.Equals(input.SubmitMetadataService))
                ) && 
                (
                    this.PendingSignDataService == input.PendingSignDataService ||
                    (this.PendingSignDataService != null &&
                    this.PendingSignDataService.Equals(input.PendingSignDataService))
                ) && 
                (
                    this.PendingSignMetadataService == input.PendingSignMetadataService ||
                    (this.PendingSignMetadataService != null &&
                    this.PendingSignMetadataService.Equals(input.PendingSignMetadataService))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PortalOutboxes != null)
                    hashCode = hashCode * 59 + this.PortalOutboxes.GetHashCode();
                if (this.DraftDataService != null)
                    hashCode = hashCode * 59 + this.DraftDataService.GetHashCode();
                if (this.DraftMetadataService != null)
                    hashCode = hashCode * 59 + this.DraftMetadataService.GetHashCode();
                if (this.SubmitDataService != null)
                    hashCode = hashCode * 59 + this.SubmitDataService.GetHashCode();
                if (this.SubmitMetadataService != null)
                    hashCode = hashCode * 59 + this.SubmitMetadataService.GetHashCode();
                if (this.PendingSignDataService != null)
                    hashCode = hashCode * 59 + this.PendingSignDataService.GetHashCode();
                if (this.PendingSignMetadataService != null)
                    hashCode = hashCode * 59 + this.PendingSignMetadataService.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
