/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialSyncImplUserSyncListenerImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::ComAdobeCqSocialSyncImplUserSyncListenerImplProperties()
{
    m_NodetypesIsSet = false;
    m_IgnorablepropsIsSet = false;
    m_IgnorablenodesIsSet = false;
    m_EnabledIsSet = false;
    m_DistfoldersIsSet = false;
}

ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::~ComAdobeCqSocialSyncImplUserSyncListenerImplProperties()
{
}

void ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NodetypesIsSet)
    {
        val[utility::conversions::to_string_t("nodetypes")] = ModelBase::toJson(m_Nodetypes);
    }
    if(m_IgnorablepropsIsSet)
    {
        val[utility::conversions::to_string_t("ignorableprops")] = ModelBase::toJson(m_Ignorableprops);
    }
    if(m_IgnorablenodesIsSet)
    {
        val[utility::conversions::to_string_t("ignorablenodes")] = ModelBase::toJson(m_Ignorablenodes);
    }
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t("enabled")] = ModelBase::toJson(m_Enabled);
    }
    if(m_DistfoldersIsSet)
    {
        val[utility::conversions::to_string_t("distfolders")] = ModelBase::toJson(m_Distfolders);
    }

    return val;
}

void ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("nodetypes")))
    {
        if(!val[utility::conversions::to_string_t("nodetypes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("nodetypes")]);
            setNodetypes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ignorableprops")))
    {
        if(!val[utility::conversions::to_string_t("ignorableprops")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("ignorableprops")]);
            setIgnorableprops( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ignorablenodes")))
    {
        if(!val[utility::conversions::to_string_t("ignorablenodes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("ignorablenodes")]);
            setIgnorablenodes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enabled")))
    {
        if(!val[utility::conversions::to_string_t("enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enabled")]);
            setEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("distfolders")))
    {
        if(!val[utility::conversions::to_string_t("distfolders")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("distfolders")]);
            setDistfolders( newItem );
        }
    }
}

void ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NodetypesIsSet)
    {
        if (m_Nodetypes.get())
        {
            m_Nodetypes->toMultipart(multipart, utility::conversions::to_string_t("nodetypes."));
        }
    }
    if(m_IgnorablepropsIsSet)
    {
        if (m_Ignorableprops.get())
        {
            m_Ignorableprops->toMultipart(multipart, utility::conversions::to_string_t("ignorableprops."));
        }
    }
    if(m_IgnorablenodesIsSet)
    {
        if (m_Ignorablenodes.get())
        {
            m_Ignorablenodes->toMultipart(multipart, utility::conversions::to_string_t("ignorablenodes."));
        }
    }
    if(m_EnabledIsSet)
    {
        if (m_Enabled.get())
        {
            m_Enabled->toMultipart(multipart, utility::conversions::to_string_t("enabled."));
        }
    }
    if(m_DistfoldersIsSet)
    {
        if (m_Distfolders.get())
        {
            m_Distfolders->toMultipart(multipart, utility::conversions::to_string_t("distfolders."));
        }
    }
}

void ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("nodetypes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("nodetypes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("nodetypes."));
            setNodetypes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ignorableprops")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ignorableprops")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ignorableprops."));
            setIgnorableprops( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ignorablenodes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ignorablenodes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ignorablenodes."));
            setIgnorablenodes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enabled."));
            setEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("distfolders")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("distfolders")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("distfolders."));
            setDistfolders( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::getNodetypes() const
{
    return m_Nodetypes;
}


void ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::setNodetypes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Nodetypes = value;
    m_NodetypesIsSet = true;
}
bool ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::nodetypesIsSet() const
{
    return m_NodetypesIsSet;
}

void ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::unsetNodetypes()
{
    m_NodetypesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::getIgnorableprops() const
{
    return m_Ignorableprops;
}


void ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::setIgnorableprops(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Ignorableprops = value;
    m_IgnorablepropsIsSet = true;
}
bool ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::ignorablepropsIsSet() const
{
    return m_IgnorablepropsIsSet;
}

void ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::unsetIgnorableprops()
{
    m_IgnorablepropsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::getIgnorablenodes() const
{
    return m_Ignorablenodes;
}


void ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::setIgnorablenodes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Ignorablenodes = value;
    m_IgnorablenodesIsSet = true;
}
bool ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::ignorablenodesIsSet() const
{
    return m_IgnorablenodesIsSet;
}

void ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::unsetIgnorablenodes()
{
    m_IgnorablenodesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::getEnabled() const
{
    return m_Enabled;
}


void ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::unsetEnabled()
{
    m_EnabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::getDistfolders() const
{
    return m_Distfolders;
}


void ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::setDistfolders(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Distfolders = value;
    m_DistfoldersIsSet = true;
}
bool ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::distfoldersIsSet() const
{
    return m_DistfoldersIsSet;
}

void ComAdobeCqSocialSyncImplUserSyncListenerImplProperties::unsetDistfolders()
{
    m_DistfoldersIsSet = false;
}

}
}
}
}

