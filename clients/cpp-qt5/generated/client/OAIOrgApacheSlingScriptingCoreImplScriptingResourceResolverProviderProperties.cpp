/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties::OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties::OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties() {
    init();
}

OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties::~OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties::init() {
    log_stacktrace_onclose = new OAIConfigNodePropertyBoolean();
    m_log_stacktrace_onclose_isSet = false;
}

void
OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties::cleanup() {
    if(log_stacktrace_onclose != nullptr) { 
        delete log_stacktrace_onclose;
    }
}

OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties*
OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&log_stacktrace_onclose, pJson["log.stacktrace.onclose"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties::asJsonObject() {
    QJsonObject obj;
    if((log_stacktrace_onclose != nullptr) && (log_stacktrace_onclose->isSet())){
        toJsonValue(QString("log.stacktrace.onclose"), log_stacktrace_onclose, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties::getLogStacktraceOnclose() {
    return log_stacktrace_onclose;
}
void
OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties::setLogStacktraceOnclose(OAIConfigNodePropertyBoolean* log_stacktrace_onclose) {
    this->log_stacktrace_onclose = log_stacktrace_onclose;
    this->m_log_stacktrace_onclose_isSet = true;
}


bool
OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(log_stacktrace_onclose != nullptr && log_stacktrace_onclose->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

