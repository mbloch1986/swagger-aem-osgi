/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties()
{
    m_Org_apache_sling_commons_log_fileIsSet = false;
    m_Org_apache_sling_commons_log_file_numberIsSet = false;
    m_Org_apache_sling_commons_log_file_sizeIsSet = false;
    m_Org_apache_sling_commons_log_file_bufferedIsSet = false;
    
}

OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::~OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties()
{
}

void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Org_apache_sling_commons_log_fileIsSet)
    {
        val["org.apache.sling.commons.log.file"] = ModelBase::toJson(m_Org_apache_sling_commons_log_file);
    }
    if(m_Org_apache_sling_commons_log_file_numberIsSet)
    {
        val["org.apache.sling.commons.log.file.number"] = ModelBase::toJson(m_Org_apache_sling_commons_log_file_number);
    }
    if(m_Org_apache_sling_commons_log_file_sizeIsSet)
    {
        val["org.apache.sling.commons.log.file.size"] = ModelBase::toJson(m_Org_apache_sling_commons_log_file_size);
    }
    if(m_Org_apache_sling_commons_log_file_bufferedIsSet)
    {
        val["org.apache.sling.commons.log.file.buffered"] = ModelBase::toJson(m_Org_apache_sling_commons_log_file_buffered);
    }
    

    return val;
}

void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::fromJson(nlohmann::json& val)
{
    if(val.find("org.apache.sling.commons.log.file") != val.end())
    {
        if(!val["org.apache.sling.commons.log.file"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["org.apache.sling.commons.log.file"]);
            setOrgApacheSlingCommonsLogFile( newItem );
        }
        
    }
    if(val.find("org.apache.sling.commons.log.file.number") != val.end())
    {
        if(!val["org.apache.sling.commons.log.file.number"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["org.apache.sling.commons.log.file.number"]);
            setOrgApacheSlingCommonsLogFileNumber( newItem );
        }
        
    }
    if(val.find("org.apache.sling.commons.log.file.size") != val.end())
    {
        if(!val["org.apache.sling.commons.log.file.size"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["org.apache.sling.commons.log.file.size"]);
            setOrgApacheSlingCommonsLogFileSize( newItem );
        }
        
    }
    if(val.find("org.apache.sling.commons.log.file.buffered") != val.end())
    {
        if(!val["org.apache.sling.commons.log.file.buffered"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["org.apache.sling.commons.log.file.buffered"]);
            setOrgApacheSlingCommonsLogFileBuffered( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::getOrgApacheSlingCommonsLogFile() const
{
    return m_Org_apache_sling_commons_log_file;
}
void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::setOrgApacheSlingCommonsLogFile(ConfigNodePropertyString const& value)
{
    m_Org_apache_sling_commons_log_file = value;
    m_Org_apache_sling_commons_log_fileIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::orgApacheSlingCommonsLogFileIsSet() const
{
    return m_Org_apache_sling_commons_log_fileIsSet;
}
void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::unsetOrg_apache_sling_commons_log_file()
{
    m_Org_apache_sling_commons_log_fileIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::getOrgApacheSlingCommonsLogFileNumber() const
{
    return m_Org_apache_sling_commons_log_file_number;
}
void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::setOrgApacheSlingCommonsLogFileNumber(ConfigNodePropertyInteger const& value)
{
    m_Org_apache_sling_commons_log_file_number = value;
    m_Org_apache_sling_commons_log_file_numberIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::orgApacheSlingCommonsLogFileNumberIsSet() const
{
    return m_Org_apache_sling_commons_log_file_numberIsSet;
}
void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::unsetOrg_apache_sling_commons_log_file_number()
{
    m_Org_apache_sling_commons_log_file_numberIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::getOrgApacheSlingCommonsLogFileSize() const
{
    return m_Org_apache_sling_commons_log_file_size;
}
void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::setOrgApacheSlingCommonsLogFileSize(ConfigNodePropertyString const& value)
{
    m_Org_apache_sling_commons_log_file_size = value;
    m_Org_apache_sling_commons_log_file_sizeIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::orgApacheSlingCommonsLogFileSizeIsSet() const
{
    return m_Org_apache_sling_commons_log_file_sizeIsSet;
}
void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::unsetOrg_apache_sling_commons_log_file_size()
{
    m_Org_apache_sling_commons_log_file_sizeIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::getOrgApacheSlingCommonsLogFileBuffered() const
{
    return m_Org_apache_sling_commons_log_file_buffered;
}
void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::setOrgApacheSlingCommonsLogFileBuffered(ConfigNodePropertyBoolean const& value)
{
    m_Org_apache_sling_commons_log_file_buffered = value;
    m_Org_apache_sling_commons_log_file_bufferedIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::orgApacheSlingCommonsLogFileBufferedIsSet() const
{
    return m_Org_apache_sling_commons_log_file_bufferedIsSet;
}
void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::unsetOrg_apache_sling_commons_log_file_buffered()
{
    m_Org_apache_sling_commons_log_file_bufferedIsSet = false;
}

}
}
}
}

