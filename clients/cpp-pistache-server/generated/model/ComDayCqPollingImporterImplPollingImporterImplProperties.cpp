/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqPollingImporterImplPollingImporterImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqPollingImporterImplPollingImporterImplProperties::ComDayCqPollingImporterImplPollingImporterImplProperties()
{
    m_Importer_min_intervalIsSet = false;
    m_Importer_userIsSet = false;
    m_Exclude_pathsIsSet = false;
    m_Include_pathsIsSet = false;
    
}

ComDayCqPollingImporterImplPollingImporterImplProperties::~ComDayCqPollingImporterImplPollingImporterImplProperties()
{
}

void ComDayCqPollingImporterImplPollingImporterImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqPollingImporterImplPollingImporterImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Importer_min_intervalIsSet)
    {
        val["importer.min.interval"] = ModelBase::toJson(m_Importer_min_interval);
    }
    if(m_Importer_userIsSet)
    {
        val["importer.user"] = ModelBase::toJson(m_Importer_user);
    }
    if(m_Exclude_pathsIsSet)
    {
        val["exclude.paths"] = ModelBase::toJson(m_Exclude_paths);
    }
    if(m_Include_pathsIsSet)
    {
        val["include.paths"] = ModelBase::toJson(m_Include_paths);
    }
    

    return val;
}

void ComDayCqPollingImporterImplPollingImporterImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("importer.min.interval") != val.end())
    {
        if(!val["importer.min.interval"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["importer.min.interval"]);
            setImporterMinInterval( newItem );
        }
        
    }
    if(val.find("importer.user") != val.end())
    {
        if(!val["importer.user"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["importer.user"]);
            setImporterUser( newItem );
        }
        
    }
    if(val.find("exclude.paths") != val.end())
    {
        if(!val["exclude.paths"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["exclude.paths"]);
            setExcludePaths( newItem );
        }
        
    }
    if(val.find("include.paths") != val.end())
    {
        if(!val["include.paths"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["include.paths"]);
            setIncludePaths( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComDayCqPollingImporterImplPollingImporterImplProperties::getImporterMinInterval() const
{
    return m_Importer_min_interval;
}
void ComDayCqPollingImporterImplPollingImporterImplProperties::setImporterMinInterval(ConfigNodePropertyInteger const& value)
{
    m_Importer_min_interval = value;
    m_Importer_min_intervalIsSet = true;
}
bool ComDayCqPollingImporterImplPollingImporterImplProperties::importerMinIntervalIsSet() const
{
    return m_Importer_min_intervalIsSet;
}
void ComDayCqPollingImporterImplPollingImporterImplProperties::unsetImporter_min_interval()
{
    m_Importer_min_intervalIsSet = false;
}
ConfigNodePropertyString ComDayCqPollingImporterImplPollingImporterImplProperties::getImporterUser() const
{
    return m_Importer_user;
}
void ComDayCqPollingImporterImplPollingImporterImplProperties::setImporterUser(ConfigNodePropertyString const& value)
{
    m_Importer_user = value;
    m_Importer_userIsSet = true;
}
bool ComDayCqPollingImporterImplPollingImporterImplProperties::importerUserIsSet() const
{
    return m_Importer_userIsSet;
}
void ComDayCqPollingImporterImplPollingImporterImplProperties::unsetImporter_user()
{
    m_Importer_userIsSet = false;
}
ConfigNodePropertyArray ComDayCqPollingImporterImplPollingImporterImplProperties::getExcludePaths() const
{
    return m_Exclude_paths;
}
void ComDayCqPollingImporterImplPollingImporterImplProperties::setExcludePaths(ConfigNodePropertyArray const& value)
{
    m_Exclude_paths = value;
    m_Exclude_pathsIsSet = true;
}
bool ComDayCqPollingImporterImplPollingImporterImplProperties::excludePathsIsSet() const
{
    return m_Exclude_pathsIsSet;
}
void ComDayCqPollingImporterImplPollingImporterImplProperties::unsetExclude_paths()
{
    m_Exclude_pathsIsSet = false;
}
ConfigNodePropertyArray ComDayCqPollingImporterImplPollingImporterImplProperties::getIncludePaths() const
{
    return m_Include_paths;
}
void ComDayCqPollingImporterImplPollingImporterImplProperties::setIncludePaths(ConfigNodePropertyArray const& value)
{
    m_Include_paths = value;
    m_Include_pathsIsSet = true;
}
bool ComDayCqPollingImporterImplPollingImporterImplProperties::includePathsIsSet() const
{
    return m_Include_pathsIsSet;
}
void ComDayCqPollingImporterImplPollingImporterImplProperties::unsetInclude_paths()
{
    m_Include_pathsIsSet = false;
}

}
}
}
}

