<?php
/**
 * OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dav_root' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'dav_create_absolute_uri' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'dav_realm' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'collection_types' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'filter_prefixes' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'filter_types' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'filter_uris' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'type_collections' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'type_noncollections' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'type_content' => '\OpenAPI\Client\Model\ConfigNodePropertyString'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'dav_root' => null,
        'dav_create_absolute_uri' => null,
        'dav_realm' => null,
        'collection_types' => null,
        'filter_prefixes' => null,
        'filter_types' => null,
        'filter_uris' => null,
        'type_collections' => null,
        'type_noncollections' => null,
        'type_content' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dav_root' => 'dav.root',
        'dav_create_absolute_uri' => 'dav.create-absolute-uri',
        'dav_realm' => 'dav.realm',
        'collection_types' => 'collection.types',
        'filter_prefixes' => 'filter.prefixes',
        'filter_types' => 'filter.types',
        'filter_uris' => 'filter.uris',
        'type_collections' => 'type.collections',
        'type_noncollections' => 'type.noncollections',
        'type_content' => 'type.content'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dav_root' => 'setDavRoot',
        'dav_create_absolute_uri' => 'setDavCreateAbsoluteUri',
        'dav_realm' => 'setDavRealm',
        'collection_types' => 'setCollectionTypes',
        'filter_prefixes' => 'setFilterPrefixes',
        'filter_types' => 'setFilterTypes',
        'filter_uris' => 'setFilterUris',
        'type_collections' => 'setTypeCollections',
        'type_noncollections' => 'setTypeNoncollections',
        'type_content' => 'setTypeContent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dav_root' => 'getDavRoot',
        'dav_create_absolute_uri' => 'getDavCreateAbsoluteUri',
        'dav_realm' => 'getDavRealm',
        'collection_types' => 'getCollectionTypes',
        'filter_prefixes' => 'getFilterPrefixes',
        'filter_types' => 'getFilterTypes',
        'filter_uris' => 'getFilterUris',
        'type_collections' => 'getTypeCollections',
        'type_noncollections' => 'getTypeNoncollections',
        'type_content' => 'getTypeContent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dav_root'] = isset($data['dav_root']) ? $data['dav_root'] : null;
        $this->container['dav_create_absolute_uri'] = isset($data['dav_create_absolute_uri']) ? $data['dav_create_absolute_uri'] : null;
        $this->container['dav_realm'] = isset($data['dav_realm']) ? $data['dav_realm'] : null;
        $this->container['collection_types'] = isset($data['collection_types']) ? $data['collection_types'] : null;
        $this->container['filter_prefixes'] = isset($data['filter_prefixes']) ? $data['filter_prefixes'] : null;
        $this->container['filter_types'] = isset($data['filter_types']) ? $data['filter_types'] : null;
        $this->container['filter_uris'] = isset($data['filter_uris']) ? $data['filter_uris'] : null;
        $this->container['type_collections'] = isset($data['type_collections']) ? $data['type_collections'] : null;
        $this->container['type_noncollections'] = isset($data['type_noncollections']) ? $data['type_noncollections'] : null;
        $this->container['type_content'] = isset($data['type_content']) ? $data['type_content'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dav_root
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getDavRoot()
    {
        return $this->container['dav_root'];
    }

    /**
     * Sets dav_root
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $dav_root dav_root
     *
     * @return $this
     */
    public function setDavRoot($dav_root)
    {
        $this->container['dav_root'] = $dav_root;

        return $this;
    }

    /**
     * Gets dav_create_absolute_uri
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getDavCreateAbsoluteUri()
    {
        return $this->container['dav_create_absolute_uri'];
    }

    /**
     * Sets dav_create_absolute_uri
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $dav_create_absolute_uri dav_create_absolute_uri
     *
     * @return $this
     */
    public function setDavCreateAbsoluteUri($dav_create_absolute_uri)
    {
        $this->container['dav_create_absolute_uri'] = $dav_create_absolute_uri;

        return $this;
    }

    /**
     * Gets dav_realm
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getDavRealm()
    {
        return $this->container['dav_realm'];
    }

    /**
     * Sets dav_realm
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $dav_realm dav_realm
     *
     * @return $this
     */
    public function setDavRealm($dav_realm)
    {
        $this->container['dav_realm'] = $dav_realm;

        return $this;
    }

    /**
     * Gets collection_types
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getCollectionTypes()
    {
        return $this->container['collection_types'];
    }

    /**
     * Sets collection_types
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $collection_types collection_types
     *
     * @return $this
     */
    public function setCollectionTypes($collection_types)
    {
        $this->container['collection_types'] = $collection_types;

        return $this;
    }

    /**
     * Gets filter_prefixes
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getFilterPrefixes()
    {
        return $this->container['filter_prefixes'];
    }

    /**
     * Sets filter_prefixes
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $filter_prefixes filter_prefixes
     *
     * @return $this
     */
    public function setFilterPrefixes($filter_prefixes)
    {
        $this->container['filter_prefixes'] = $filter_prefixes;

        return $this;
    }

    /**
     * Gets filter_types
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getFilterTypes()
    {
        return $this->container['filter_types'];
    }

    /**
     * Sets filter_types
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $filter_types filter_types
     *
     * @return $this
     */
    public function setFilterTypes($filter_types)
    {
        $this->container['filter_types'] = $filter_types;

        return $this;
    }

    /**
     * Gets filter_uris
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getFilterUris()
    {
        return $this->container['filter_uris'];
    }

    /**
     * Sets filter_uris
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $filter_uris filter_uris
     *
     * @return $this
     */
    public function setFilterUris($filter_uris)
    {
        $this->container['filter_uris'] = $filter_uris;

        return $this;
    }

    /**
     * Gets type_collections
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getTypeCollections()
    {
        return $this->container['type_collections'];
    }

    /**
     * Sets type_collections
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $type_collections type_collections
     *
     * @return $this
     */
    public function setTypeCollections($type_collections)
    {
        $this->container['type_collections'] = $type_collections;

        return $this;
    }

    /**
     * Gets type_noncollections
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getTypeNoncollections()
    {
        return $this->container['type_noncollections'];
    }

    /**
     * Sets type_noncollections
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $type_noncollections type_noncollections
     *
     * @return $this
     */
    public function setTypeNoncollections($type_noncollections)
    {
        $this->container['type_noncollections'] = $type_noncollections;

        return $this;
    }

    /**
     * Gets type_content
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getTypeContent()
    {
        return $this->container['type_content'];
    }

    /**
     * Sets type_content
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $type_content type_content
     *
     * @return $this
     */
    public function setTypeContent($type_content)
    {
        $this->container['type_content'] = $type_content;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


