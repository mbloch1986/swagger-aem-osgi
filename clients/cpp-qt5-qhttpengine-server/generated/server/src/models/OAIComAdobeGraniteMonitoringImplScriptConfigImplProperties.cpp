/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties() {
    this->init();
}

OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::~OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties() {
    
}

void
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::init() {
    m_script_filename_isSet = false;
    m_script_display_isSet = false;
    m_script_path_isSet = false;
    m_script_platform_isSet = false;
    m_interval_isSet = false;
    m_jmxdomain_isSet = false;
}

void
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(script_filename, json[QString("script.filename")]);
    
    ::OpenAPI::fromJsonValue(script_display, json[QString("script.display")]);
    
    ::OpenAPI::fromJsonValue(script_path, json[QString("script.path")]);
    
    ::OpenAPI::fromJsonValue(script_platform, json[QString("script.platform")]);
    
    ::OpenAPI::fromJsonValue(interval, json[QString("interval")]);
    
    ::OpenAPI::fromJsonValue(jmxdomain, json[QString("jmxdomain")]);
    
}

QString
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(script_filename.isSet()){
        obj.insert(QString("script.filename"), ::OpenAPI::toJsonValue(script_filename));
    }
	if(script_display.isSet()){
        obj.insert(QString("script.display"), ::OpenAPI::toJsonValue(script_display));
    }
	if(script_path.isSet()){
        obj.insert(QString("script.path"), ::OpenAPI::toJsonValue(script_path));
    }
	if(script_platform.isSet()){
        obj.insert(QString("script.platform"), ::OpenAPI::toJsonValue(script_platform));
    }
	if(interval.isSet()){
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(interval));
    }
	if(jmxdomain.isSet()){
        obj.insert(QString("jmxdomain"), ::OpenAPI::toJsonValue(jmxdomain));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptFilename() const {
    return script_filename;
}
void
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptFilename(const OAIConfigNodePropertyString &script_filename) {
    this->script_filename = script_filename;
    this->m_script_filename_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptDisplay() const {
    return script_display;
}
void
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptDisplay(const OAIConfigNodePropertyString &script_display) {
    this->script_display = script_display;
    this->m_script_display_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptPath() const {
    return script_path;
}
void
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptPath(const OAIConfigNodePropertyString &script_path) {
    this->script_path = script_path;
    this->m_script_path_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptPlatform() const {
    return script_platform;
}
void
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptPlatform(const OAIConfigNodePropertyArray &script_platform) {
    this->script_platform = script_platform;
    this->m_script_platform_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::getInterval() const {
    return interval;
}
void
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::setInterval(const OAIConfigNodePropertyInteger &interval) {
    this->interval = interval;
    this->m_interval_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::getJmxdomain() const {
    return jmxdomain;
}
void
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::setJmxdomain(const OAIConfigNodePropertyString &jmxdomain) {
    this->jmxdomain = jmxdomain;
    this->m_jmxdomain_isSet = true;
}


bool
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(script_filename.isSet()){ isObjectUpdated = true; break;}
    
        if(script_display.isSet()){ isObjectUpdated = true; break;}
    
        if(script_path.isSet()){ isObjectUpdated = true; break;}
    
        if(script_platform.isSet()){ isObjectUpdated = true; break;}
    
        if(interval.isSet()){ isObjectUpdated = true; break;}
    
        if(jmxdomain.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

