/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASOrgApacheSlingCommonsMetricsInter
 */
public class OASOrgApacheSlingCommonsMetricsInter {
    /**
     * Get period
     * @return period
     */
    public OASConfigNodePropertyInteger period { get; set; }

    /**
     * Get timeUnit
     * @return timeUnit
     */
    public OASConfigNodePropertyDropDown timeUnit { get; set; }

    /**
     * Get level
     * @return level
     */
    public OASConfigNodePropertyDropDown level { get; set; }

    /**
     * Get loggerName
     * @return loggerName
     */
    public OASConfigNodePropertyString loggerName { get; set; }

    /**
     * Get prefix
     * @return prefix
     */
    public OASConfigNodePropertyString prefix { get; set; }

    /**
     * Get pattern
     * @return pattern
     */
    public OASConfigNodePropertyString pattern { get; set; }

    /**
     * Get registryName
     * @return registryName
     */
    public OASConfigNodePropertyString registryName { get; set; }

    public static OASOrgApacheSlingCommonsMetricsInter getExample() {
        OASOrgApacheSlingCommonsMetricsInter orgApacheSlingCommonsMetricsInternalLogReporterProperties = new OASOrgApacheSlingCommonsMetricsInter();
          orgApacheSlingCommonsMetricsInternalLogReporterProperties.period = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingCommonsMetricsInternalLogReporterProperties.timeUnit = OASConfigNodePropertyDropDown.getExample();
          orgApacheSlingCommonsMetricsInternalLogReporterProperties.level = OASConfigNodePropertyDropDown.getExample();
          orgApacheSlingCommonsMetricsInternalLogReporterProperties.loggerName = OASConfigNodePropertyString.getExample();
          orgApacheSlingCommonsMetricsInternalLogReporterProperties.prefix = OASConfigNodePropertyString.getExample();
          orgApacheSlingCommonsMetricsInternalLogReporterProperties.pattern = OASConfigNodePropertyString.getExample();
          orgApacheSlingCommonsMetricsInternalLogReporterProperties.registryName = OASConfigNodePropertyString.getExample();
        return orgApacheSlingCommonsMetricsInternalLogReporterProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOrgApacheSlingCommonsMetricsInter) {           
            OASOrgApacheSlingCommonsMetricsInter orgApacheSlingCommonsMetricsInternalLogReporterProperties = (OASOrgApacheSlingCommonsMetricsInter) obj;
            return this.period == orgApacheSlingCommonsMetricsInternalLogReporterProperties.period
                && this.timeUnit == orgApacheSlingCommonsMetricsInternalLogReporterProperties.timeUnit
                && this.level == orgApacheSlingCommonsMetricsInternalLogReporterProperties.level
                && this.loggerName == orgApacheSlingCommonsMetricsInternalLogReporterProperties.loggerName
                && this.prefix == orgApacheSlingCommonsMetricsInternalLogReporterProperties.prefix
                && this.pattern == orgApacheSlingCommonsMetricsInternalLogReporterProperties.pattern
                && this.registryName == orgApacheSlingCommonsMetricsInternalLogReporterProperties.registryName;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (period == null ? 0 : System.hashCode(period));
        hashCode = (17 * hashCode) + (timeUnit == null ? 0 : System.hashCode(timeUnit));
        hashCode = (17 * hashCode) + (level == null ? 0 : System.hashCode(level));
        hashCode = (17 * hashCode) + (loggerName == null ? 0 : System.hashCode(loggerName));
        hashCode = (17 * hashCode) + (prefix == null ? 0 : System.hashCode(prefix));
        hashCode = (17 * hashCode) + (pattern == null ? 0 : System.hashCode(pattern));
        hashCode = (17 * hashCode) + (registryName == null ? 0 : System.hashCode(registryName));
        return hashCode;
    }
}

