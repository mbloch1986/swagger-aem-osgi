/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCommonsHttpclientProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCommonsHttpclientProperties::OAIComDayCommonsHttpclientProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCommonsHttpclientProperties::OAIComDayCommonsHttpclientProperties() {
    init();
}

OAIComDayCommonsHttpclientProperties::~OAIComDayCommonsHttpclientProperties() {
    this->cleanup();
}

void
OAIComDayCommonsHttpclientProperties::init() {
    proxy_enabled = new OAIConfigNodePropertyBoolean();
    m_proxy_enabled_isSet = false;
    proxy_host = new OAIConfigNodePropertyString();
    m_proxy_host_isSet = false;
    proxy_user = new OAIConfigNodePropertyString();
    m_proxy_user_isSet = false;
    proxy_password = new OAIConfigNodePropertyString();
    m_proxy_password_isSet = false;
    proxy_ntlm_host = new OAIConfigNodePropertyString();
    m_proxy_ntlm_host_isSet = false;
    proxy_ntlm_domain = new OAIConfigNodePropertyString();
    m_proxy_ntlm_domain_isSet = false;
    proxy_exceptions = new OAIConfigNodePropertyArray();
    m_proxy_exceptions_isSet = false;
}

void
OAIComDayCommonsHttpclientProperties::cleanup() {
    if(proxy_enabled != nullptr) { 
        delete proxy_enabled;
    }
    if(proxy_host != nullptr) { 
        delete proxy_host;
    }
    if(proxy_user != nullptr) { 
        delete proxy_user;
    }
    if(proxy_password != nullptr) { 
        delete proxy_password;
    }
    if(proxy_ntlm_host != nullptr) { 
        delete proxy_ntlm_host;
    }
    if(proxy_ntlm_domain != nullptr) { 
        delete proxy_ntlm_domain;
    }
    if(proxy_exceptions != nullptr) { 
        delete proxy_exceptions;
    }
}

OAIComDayCommonsHttpclientProperties*
OAIComDayCommonsHttpclientProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCommonsHttpclientProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&proxy_enabled, pJson["proxy.enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&proxy_host, pJson["proxy.host"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&proxy_user, pJson["proxy.user"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&proxy_password, pJson["proxy.password"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&proxy_ntlm_host, pJson["proxy.ntlm.host"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&proxy_ntlm_domain, pJson["proxy.ntlm.domain"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&proxy_exceptions, pJson["proxy.exceptions"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComDayCommonsHttpclientProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCommonsHttpclientProperties::asJsonObject() {
    QJsonObject obj;
    if((proxy_enabled != nullptr) && (proxy_enabled->isSet())){
        toJsonValue(QString("proxy.enabled"), proxy_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((proxy_host != nullptr) && (proxy_host->isSet())){
        toJsonValue(QString("proxy.host"), proxy_host, obj, QString("OAIConfigNodePropertyString"));
    }
    if((proxy_user != nullptr) && (proxy_user->isSet())){
        toJsonValue(QString("proxy.user"), proxy_user, obj, QString("OAIConfigNodePropertyString"));
    }
    if((proxy_password != nullptr) && (proxy_password->isSet())){
        toJsonValue(QString("proxy.password"), proxy_password, obj, QString("OAIConfigNodePropertyString"));
    }
    if((proxy_ntlm_host != nullptr) && (proxy_ntlm_host->isSet())){
        toJsonValue(QString("proxy.ntlm.host"), proxy_ntlm_host, obj, QString("OAIConfigNodePropertyString"));
    }
    if((proxy_ntlm_domain != nullptr) && (proxy_ntlm_domain->isSet())){
        toJsonValue(QString("proxy.ntlm.domain"), proxy_ntlm_domain, obj, QString("OAIConfigNodePropertyString"));
    }
    if((proxy_exceptions != nullptr) && (proxy_exceptions->isSet())){
        toJsonValue(QString("proxy.exceptions"), proxy_exceptions, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComDayCommonsHttpclientProperties::getProxyEnabled() {
    return proxy_enabled;
}
void
OAIComDayCommonsHttpclientProperties::setProxyEnabled(OAIConfigNodePropertyBoolean* proxy_enabled) {
    this->proxy_enabled = proxy_enabled;
    this->m_proxy_enabled_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCommonsHttpclientProperties::getProxyHost() {
    return proxy_host;
}
void
OAIComDayCommonsHttpclientProperties::setProxyHost(OAIConfigNodePropertyString* proxy_host) {
    this->proxy_host = proxy_host;
    this->m_proxy_host_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCommonsHttpclientProperties::getProxyUser() {
    return proxy_user;
}
void
OAIComDayCommonsHttpclientProperties::setProxyUser(OAIConfigNodePropertyString* proxy_user) {
    this->proxy_user = proxy_user;
    this->m_proxy_user_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCommonsHttpclientProperties::getProxyPassword() {
    return proxy_password;
}
void
OAIComDayCommonsHttpclientProperties::setProxyPassword(OAIConfigNodePropertyString* proxy_password) {
    this->proxy_password = proxy_password;
    this->m_proxy_password_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCommonsHttpclientProperties::getProxyNtlmHost() {
    return proxy_ntlm_host;
}
void
OAIComDayCommonsHttpclientProperties::setProxyNtlmHost(OAIConfigNodePropertyString* proxy_ntlm_host) {
    this->proxy_ntlm_host = proxy_ntlm_host;
    this->m_proxy_ntlm_host_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCommonsHttpclientProperties::getProxyNtlmDomain() {
    return proxy_ntlm_domain;
}
void
OAIComDayCommonsHttpclientProperties::setProxyNtlmDomain(OAIConfigNodePropertyString* proxy_ntlm_domain) {
    this->proxy_ntlm_domain = proxy_ntlm_domain;
    this->m_proxy_ntlm_domain_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCommonsHttpclientProperties::getProxyExceptions() {
    return proxy_exceptions;
}
void
OAIComDayCommonsHttpclientProperties::setProxyExceptions(OAIConfigNodePropertyArray* proxy_exceptions) {
    this->proxy_exceptions = proxy_exceptions;
    this->m_proxy_exceptions_isSet = true;
}


bool
OAIComDayCommonsHttpclientProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(proxy_enabled != nullptr && proxy_enabled->isSet()){ isObjectUpdated = true; break;}
        if(proxy_host != nullptr && proxy_host->isSet()){ isObjectUpdated = true; break;}
        if(proxy_user != nullptr && proxy_user->isSet()){ isObjectUpdated = true; break;}
        if(proxy_password != nullptr && proxy_password->isSet()){ isObjectUpdated = true; break;}
        if(proxy_ntlm_host != nullptr && proxy_ntlm_host->isSet()){ isObjectUpdated = true; break;}
        if(proxy_ntlm_domain != nullptr && proxy_ntlm_domain->isSet()){ isObjectUpdated = true; break;}
        if(proxy_exceptions != nullptr && proxy_exceptions->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

