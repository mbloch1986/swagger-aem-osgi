/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComDayCqReportingImplConfigServiceImplProperties.h
 *
 * 
 */

#ifndef OAIComDayCqReportingImplConfigServiceImplProperties_H_
#define OAIComDayCqReportingImplConfigServiceImplProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyInteger.h"
#include "OAIOAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIComDayCqReportingImplConfigServiceImplProperties: public OAIObject {
public:
    OAIComDayCqReportingImplConfigServiceImplProperties();
    OAIComDayCqReportingImplConfigServiceImplProperties(QString json);
    ~OAIComDayCqReportingImplConfigServiceImplProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIComDayCqReportingImplConfigServiceImplProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyString* getRepconfTimezone();
    void setRepconfTimezone(OAIConfigNodePropertyString* repconf_timezone);

    OAIConfigNodePropertyString* getRepconfLocale();
    void setRepconfLocale(OAIConfigNodePropertyString* repconf_locale);

    OAIConfigNodePropertyString* getRepconfSnapshots();
    void setRepconfSnapshots(OAIConfigNodePropertyString* repconf_snapshots);

    OAIConfigNodePropertyString* getRepconfRepdir();
    void setRepconfRepdir(OAIConfigNodePropertyString* repconf_repdir);

    OAIConfigNodePropertyInteger* getRepconfHourofday();
    void setRepconfHourofday(OAIConfigNodePropertyInteger* repconf_hourofday);

    OAIConfigNodePropertyInteger* getRepconfMinofhour();
    void setRepconfMinofhour(OAIConfigNodePropertyInteger* repconf_minofhour);

    OAIConfigNodePropertyInteger* getRepconfMaxrows();
    void setRepconfMaxrows(OAIConfigNodePropertyInteger* repconf_maxrows);

    OAIConfigNodePropertyBoolean* getRepconfFakedata();
    void setRepconfFakedata(OAIConfigNodePropertyBoolean* repconf_fakedata);

    OAIConfigNodePropertyString* getRepconfSnapshotuser();
    void setRepconfSnapshotuser(OAIConfigNodePropertyString* repconf_snapshotuser);

    OAIConfigNodePropertyBoolean* getRepconfEnforcesnapshotuser();
    void setRepconfEnforcesnapshotuser(OAIConfigNodePropertyBoolean* repconf_enforcesnapshotuser);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyString* repconf_timezone;
    bool m_repconf_timezone_isSet;

    OAIConfigNodePropertyString* repconf_locale;
    bool m_repconf_locale_isSet;

    OAIConfigNodePropertyString* repconf_snapshots;
    bool m_repconf_snapshots_isSet;

    OAIConfigNodePropertyString* repconf_repdir;
    bool m_repconf_repdir_isSet;

    OAIConfigNodePropertyInteger* repconf_hourofday;
    bool m_repconf_hourofday_isSet;

    OAIConfigNodePropertyInteger* repconf_minofhour;
    bool m_repconf_minofhour_isSet;

    OAIConfigNodePropertyInteger* repconf_maxrows;
    bool m_repconf_maxrows_isSet;

    OAIConfigNodePropertyBoolean* repconf_fakedata;
    bool m_repconf_fakedata_isSet;

    OAIConfigNodePropertyString* repconf_snapshotuser;
    bool m_repconf_snapshotuser_isSet;

    OAIConfigNodePropertyBoolean* repconf_enforcesnapshotuser;
    bool m_repconf_enforcesnapshotuser_isSet;

};

}

#endif /* OAIComDayCqReportingImplConfigServiceImplProperties_H_ */
