/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties {
  #[serde(rename = "parameter.guava.cache.enabled")]
  parameter_guava_cache_enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "parameter.guava.cache.params")]
  parameter_guava_cache_params: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "parameter.guava.cache.reload")]
  parameter_guava_cache_reload: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "service.ranking")]
  service_ranking: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties {
  pub fn new() -> ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties {
    ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties {
      parameter_guava_cache_enabled: None,
      parameter_guava_cache_params: None,
      parameter_guava_cache_reload: None,
      service_ranking: None
    }
  }

  pub fn set_parameter_guava_cache_enabled(&mut self, parameter_guava_cache_enabled: ::models::ConfigNodePropertyBoolean) {
    self.parameter_guava_cache_enabled = Some(parameter_guava_cache_enabled);
  }

  pub fn with_parameter_guava_cache_enabled(mut self, parameter_guava_cache_enabled: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties {
    self.parameter_guava_cache_enabled = Some(parameter_guava_cache_enabled);
    self
  }

  pub fn parameter_guava_cache_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.parameter_guava_cache_enabled.as_ref()
  }

  pub fn reset_parameter_guava_cache_enabled(&mut self) {
    self.parameter_guava_cache_enabled = None;
  }

  pub fn set_parameter_guava_cache_params(&mut self, parameter_guava_cache_params: ::models::ConfigNodePropertyString) {
    self.parameter_guava_cache_params = Some(parameter_guava_cache_params);
  }

  pub fn with_parameter_guava_cache_params(mut self, parameter_guava_cache_params: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties {
    self.parameter_guava_cache_params = Some(parameter_guava_cache_params);
    self
  }

  pub fn parameter_guava_cache_params(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.parameter_guava_cache_params.as_ref()
  }

  pub fn reset_parameter_guava_cache_params(&mut self) {
    self.parameter_guava_cache_params = None;
  }

  pub fn set_parameter_guava_cache_reload(&mut self, parameter_guava_cache_reload: ::models::ConfigNodePropertyBoolean) {
    self.parameter_guava_cache_reload = Some(parameter_guava_cache_reload);
  }

  pub fn with_parameter_guava_cache_reload(mut self, parameter_guava_cache_reload: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties {
    self.parameter_guava_cache_reload = Some(parameter_guava_cache_reload);
    self
  }

  pub fn parameter_guava_cache_reload(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.parameter_guava_cache_reload.as_ref()
  }

  pub fn reset_parameter_guava_cache_reload(&mut self) {
    self.parameter_guava_cache_reload = None;
  }

  pub fn set_service_ranking(&mut self, service_ranking: ::models::ConfigNodePropertyInteger) {
    self.service_ranking = Some(service_ranking);
  }

  pub fn with_service_ranking(mut self, service_ranking: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties {
    self.service_ranking = Some(service_ranking);
    self
  }

  pub fn service_ranking(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.service_ranking.as_ref()
  }

  pub fn reset_service_ranking(&mut self) {
    self.service_ranking = None;
  }

}



