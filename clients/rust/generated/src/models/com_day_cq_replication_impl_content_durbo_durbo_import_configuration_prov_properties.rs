/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties {
  #[serde(rename = "preserve.hierarchy.nodes")]
  preserve_hierarchy_nodes: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "ignore.versioning")]
  ignore_versioning: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "import.acl")]
  import_acl: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "save.threshold")]
  save_threshold: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "preserve.user.paths")]
  preserve_user_paths: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "preserve.uuid")]
  preserve_uuid: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "preserve.uuid.nodetypes")]
  preserve_uuid_nodetypes: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "preserve.uuid.subtrees")]
  preserve_uuid_subtrees: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "auto.commit")]
  auto_commit: Option<::models::ConfigNodePropertyBoolean>
}

impl ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties {
  pub fn new() -> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties {
    ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties {
      preserve_hierarchy_nodes: None,
      ignore_versioning: None,
      import_acl: None,
      save_threshold: None,
      preserve_user_paths: None,
      preserve_uuid: None,
      preserve_uuid_nodetypes: None,
      preserve_uuid_subtrees: None,
      auto_commit: None
    }
  }

  pub fn set_preserve_hierarchy_nodes(&mut self, preserve_hierarchy_nodes: ::models::ConfigNodePropertyBoolean) {
    self.preserve_hierarchy_nodes = Some(preserve_hierarchy_nodes);
  }

  pub fn with_preserve_hierarchy_nodes(mut self, preserve_hierarchy_nodes: ::models::ConfigNodePropertyBoolean) -> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties {
    self.preserve_hierarchy_nodes = Some(preserve_hierarchy_nodes);
    self
  }

  pub fn preserve_hierarchy_nodes(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.preserve_hierarchy_nodes.as_ref()
  }

  pub fn reset_preserve_hierarchy_nodes(&mut self) {
    self.preserve_hierarchy_nodes = None;
  }

  pub fn set_ignore_versioning(&mut self, ignore_versioning: ::models::ConfigNodePropertyBoolean) {
    self.ignore_versioning = Some(ignore_versioning);
  }

  pub fn with_ignore_versioning(mut self, ignore_versioning: ::models::ConfigNodePropertyBoolean) -> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties {
    self.ignore_versioning = Some(ignore_versioning);
    self
  }

  pub fn ignore_versioning(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.ignore_versioning.as_ref()
  }

  pub fn reset_ignore_versioning(&mut self) {
    self.ignore_versioning = None;
  }

  pub fn set_import_acl(&mut self, import_acl: ::models::ConfigNodePropertyBoolean) {
    self.import_acl = Some(import_acl);
  }

  pub fn with_import_acl(mut self, import_acl: ::models::ConfigNodePropertyBoolean) -> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties {
    self.import_acl = Some(import_acl);
    self
  }

  pub fn import_acl(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.import_acl.as_ref()
  }

  pub fn reset_import_acl(&mut self) {
    self.import_acl = None;
  }

  pub fn set_save_threshold(&mut self, save_threshold: ::models::ConfigNodePropertyInteger) {
    self.save_threshold = Some(save_threshold);
  }

  pub fn with_save_threshold(mut self, save_threshold: ::models::ConfigNodePropertyInteger) -> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties {
    self.save_threshold = Some(save_threshold);
    self
  }

  pub fn save_threshold(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.save_threshold.as_ref()
  }

  pub fn reset_save_threshold(&mut self) {
    self.save_threshold = None;
  }

  pub fn set_preserve_user_paths(&mut self, preserve_user_paths: ::models::ConfigNodePropertyBoolean) {
    self.preserve_user_paths = Some(preserve_user_paths);
  }

  pub fn with_preserve_user_paths(mut self, preserve_user_paths: ::models::ConfigNodePropertyBoolean) -> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties {
    self.preserve_user_paths = Some(preserve_user_paths);
    self
  }

  pub fn preserve_user_paths(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.preserve_user_paths.as_ref()
  }

  pub fn reset_preserve_user_paths(&mut self) {
    self.preserve_user_paths = None;
  }

  pub fn set_preserve_uuid(&mut self, preserve_uuid: ::models::ConfigNodePropertyBoolean) {
    self.preserve_uuid = Some(preserve_uuid);
  }

  pub fn with_preserve_uuid(mut self, preserve_uuid: ::models::ConfigNodePropertyBoolean) -> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties {
    self.preserve_uuid = Some(preserve_uuid);
    self
  }

  pub fn preserve_uuid(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.preserve_uuid.as_ref()
  }

  pub fn reset_preserve_uuid(&mut self) {
    self.preserve_uuid = None;
  }

  pub fn set_preserve_uuid_nodetypes(&mut self, preserve_uuid_nodetypes: ::models::ConfigNodePropertyArray) {
    self.preserve_uuid_nodetypes = Some(preserve_uuid_nodetypes);
  }

  pub fn with_preserve_uuid_nodetypes(mut self, preserve_uuid_nodetypes: ::models::ConfigNodePropertyArray) -> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties {
    self.preserve_uuid_nodetypes = Some(preserve_uuid_nodetypes);
    self
  }

  pub fn preserve_uuid_nodetypes(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.preserve_uuid_nodetypes.as_ref()
  }

  pub fn reset_preserve_uuid_nodetypes(&mut self) {
    self.preserve_uuid_nodetypes = None;
  }

  pub fn set_preserve_uuid_subtrees(&mut self, preserve_uuid_subtrees: ::models::ConfigNodePropertyArray) {
    self.preserve_uuid_subtrees = Some(preserve_uuid_subtrees);
  }

  pub fn with_preserve_uuid_subtrees(mut self, preserve_uuid_subtrees: ::models::ConfigNodePropertyArray) -> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties {
    self.preserve_uuid_subtrees = Some(preserve_uuid_subtrees);
    self
  }

  pub fn preserve_uuid_subtrees(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.preserve_uuid_subtrees.as_ref()
  }

  pub fn reset_preserve_uuid_subtrees(&mut self) {
    self.preserve_uuid_subtrees = None;
  }

  pub fn set_auto_commit(&mut self, auto_commit: ::models::ConfigNodePropertyBoolean) {
    self.auto_commit = Some(auto_commit);
  }

  pub fn with_auto_commit(mut self, auto_commit: ::models::ConfigNodePropertyBoolean) -> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties {
    self.auto_commit = Some(auto_commit);
    self
  }

  pub fn auto_commit(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.auto_commit.as_ref()
  }

  pub fn reset_auto_commit(&mut self) {
    self.auto_commit = None;
  }

}



