/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties::ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties()
{
    m_Default_timeoutIsSet = false;
    m_Max_timeoutIsSet = false;
    m_Default_periodIsSet = false;
}

ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties::~ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties()
{
}

void ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Default_timeoutIsSet)
    {
        val[utility::conversions::to_string_t("default.timeout")] = ModelBase::toJson(m_Default_timeout);
    }
    if(m_Max_timeoutIsSet)
    {
        val[utility::conversions::to_string_t("max.timeout")] = ModelBase::toJson(m_Max_timeout);
    }
    if(m_Default_periodIsSet)
    {
        val[utility::conversions::to_string_t("default.period")] = ModelBase::toJson(m_Default_period);
    }

    return val;
}

void ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("default.timeout")))
    {
        if(!val[utility::conversions::to_string_t("default.timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("default.timeout")]);
            setDefaultTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("max.timeout")))
    {
        if(!val[utility::conversions::to_string_t("max.timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("max.timeout")]);
            setMaxTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("default.period")))
    {
        if(!val[utility::conversions::to_string_t("default.period")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("default.period")]);
            setDefaultPeriod( newItem );
        }
    }
}

void ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Default_timeoutIsSet)
    {
        if (m_Default_timeout.get())
        {
            m_Default_timeout->toMultipart(multipart, utility::conversions::to_string_t("default.timeout."));
        }
    }
    if(m_Max_timeoutIsSet)
    {
        if (m_Max_timeout.get())
        {
            m_Max_timeout->toMultipart(multipart, utility::conversions::to_string_t("max.timeout."));
        }
    }
    if(m_Default_periodIsSet)
    {
        if (m_Default_period.get())
        {
            m_Default_period->toMultipart(multipart, utility::conversions::to_string_t("default.period."));
        }
    }
}

void ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("default.timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("default.timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("default.timeout."));
            setDefaultTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("max.timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("max.timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("max.timeout."));
            setMaxTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("default.period")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("default.period")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("default.period."));
            setDefaultPeriod( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties::getDefaultTimeout() const
{
    return m_Default_timeout;
}


void ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties::setDefaultTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Default_timeout = value;
    m_Default_timeoutIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties::defaultTimeoutIsSet() const
{
    return m_Default_timeoutIsSet;
}

void ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties::unsetDefault_timeout()
{
    m_Default_timeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties::getMaxTimeout() const
{
    return m_Max_timeout;
}


void ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties::setMaxTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Max_timeout = value;
    m_Max_timeoutIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties::maxTimeoutIsSet() const
{
    return m_Max_timeoutIsSet;
}

void ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties::unsetMax_timeout()
{
    m_Max_timeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties::getDefaultPeriod() const
{
    return m_Default_period;
}


void ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties::setDefaultPeriod(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Default_period = value;
    m_Default_periodIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties::defaultPeriodIsSet() const
{
    return m_Default_periodIsSet;
}

void ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties::unsetDefault_period()
{
    m_Default_periodIsSet = false;
}

}
}
}
}

