/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties : IEquatable<OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties>
    { 
        /// <summary>
        /// Gets or Sets PoolName
        /// </summary>
        [DataMember(Name="poolName")]
        public ConfigNodePropertyString PoolName { get; set; }

        /// <summary>
        /// Gets or Sets AllowedPoolNames
        /// </summary>
        [DataMember(Name="allowedPoolNames")]
        public ConfigNodePropertyArray AllowedPoolNames { get; set; }

        /// <summary>
        /// Gets or Sets SchedulerUseleaderforsingle
        /// </summary>
        [DataMember(Name="scheduler.useleaderforsingle")]
        public ConfigNodePropertyBoolean SchedulerUseleaderforsingle { get; set; }

        /// <summary>
        /// Gets or Sets MetricsFilters
        /// </summary>
        [DataMember(Name="metrics.filters")]
        public ConfigNodePropertyArray MetricsFilters { get; set; }

        /// <summary>
        /// Gets or Sets SlowThresholdMillis
        /// </summary>
        [DataMember(Name="slowThresholdMillis")]
        public ConfigNodePropertyInteger SlowThresholdMillis { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties {\n");
            sb.Append("  PoolName: ").Append(PoolName).Append("\n");
            sb.Append("  AllowedPoolNames: ").Append(AllowedPoolNames).Append("\n");
            sb.Append("  SchedulerUseleaderforsingle: ").Append(SchedulerUseleaderforsingle).Append("\n");
            sb.Append("  MetricsFilters: ").Append(MetricsFilters).Append("\n");
            sb.Append("  SlowThresholdMillis: ").Append(SlowThresholdMillis).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PoolName == other.PoolName ||
                    PoolName != null &&
                    PoolName.Equals(other.PoolName)
                ) && 
                (
                    AllowedPoolNames == other.AllowedPoolNames ||
                    AllowedPoolNames != null &&
                    AllowedPoolNames.Equals(other.AllowedPoolNames)
                ) && 
                (
                    SchedulerUseleaderforsingle == other.SchedulerUseleaderforsingle ||
                    SchedulerUseleaderforsingle != null &&
                    SchedulerUseleaderforsingle.Equals(other.SchedulerUseleaderforsingle)
                ) && 
                (
                    MetricsFilters == other.MetricsFilters ||
                    MetricsFilters != null &&
                    MetricsFilters.Equals(other.MetricsFilters)
                ) && 
                (
                    SlowThresholdMillis == other.SlowThresholdMillis ||
                    SlowThresholdMillis != null &&
                    SlowThresholdMillis.Equals(other.SlowThresholdMillis)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PoolName != null)
                    hashCode = hashCode * 59 + PoolName.GetHashCode();
                    if (AllowedPoolNames != null)
                    hashCode = hashCode * 59 + AllowedPoolNames.GetHashCode();
                    if (SchedulerUseleaderforsingle != null)
                    hashCode = hashCode * 59 + SchedulerUseleaderforsingle.GetHashCode();
                    if (MetricsFilters != null)
                    hashCode = hashCode * 59 + MetricsFilters.GetHashCode();
                    if (SlowThresholdMillis != null)
                    hashCode = hashCode * 59 + SlowThresholdMillis.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties left, OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties left, OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
