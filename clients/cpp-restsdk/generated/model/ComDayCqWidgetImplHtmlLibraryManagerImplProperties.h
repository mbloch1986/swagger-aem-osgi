/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqWidgetImplHtmlLibraryManagerImplProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqWidgetImplHtmlLibraryManagerImplProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqWidgetImplHtmlLibraryManagerImplProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqWidgetImplHtmlLibraryManagerImplProperties
    : public ModelBase
{
public:
    ComDayCqWidgetImplHtmlLibraryManagerImplProperties();
    virtual ~ComDayCqWidgetImplHtmlLibraryManagerImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComDayCqWidgetImplHtmlLibraryManagerImplProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getHtmllibmanagerClientmanager() const;
    bool htmllibmanagerClientmanagerIsSet() const;
    void unsetHtmllibmanager_clientmanager();
    void setHtmllibmanagerClientmanager(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getHtmllibmanagerDebug() const;
    bool htmllibmanagerDebugIsSet() const;
    void unsetHtmllibmanager_debug();
    void setHtmllibmanagerDebug(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getHtmllibmanagerDebugConsole() const;
    bool htmllibmanagerDebugConsoleIsSet() const;
    void unsetHtmllibmanager_debug_console();
    void setHtmllibmanagerDebugConsole(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getHtmllibmanagerDebugInitJs() const;
    bool htmllibmanagerDebugInitJsIsSet() const;
    void unsetHtmllibmanager_debug_init_js();
    void setHtmllibmanagerDebugInitJs(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getHtmllibmanagerDefaultthemename() const;
    bool htmllibmanagerDefaultthemenameIsSet() const;
    void unsetHtmllibmanager_defaultthemename();
    void setHtmllibmanagerDefaultthemename(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getHtmllibmanagerDefaultuserthemename() const;
    bool htmllibmanagerDefaultuserthemenameIsSet() const;
    void unsetHtmllibmanager_defaultuserthemename();
    void setHtmllibmanagerDefaultuserthemename(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getHtmllibmanagerFirebuglitePath() const;
    bool htmllibmanagerFirebuglitePathIsSet() const;
    void unsetHtmllibmanager_firebuglite_path();
    void setHtmllibmanagerFirebuglitePath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getHtmllibmanagerForceCQUrlInfo() const;
    bool htmllibmanagerForceCQUrlInfoIsSet() const;
    void unsetHtmllibmanager_forceCQUrlInfo();
    void setHtmllibmanagerForceCQUrlInfo(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getHtmllibmanagerGzip() const;
    bool htmllibmanagerGzipIsSet() const;
    void unsetHtmllibmanager_gzip();
    void setHtmllibmanagerGzip(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getHtmllibmanagerMaxage() const;
    bool htmllibmanagerMaxageIsSet() const;
    void unsetHtmllibmanager_maxage();
    void setHtmllibmanagerMaxage(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getHtmllibmanagerMaxDataUriSize() const;
    bool htmllibmanagerMaxDataUriSizeIsSet() const;
    void unsetHtmllibmanager_maxDataUriSize();
    void setHtmllibmanagerMaxDataUriSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getHtmllibmanagerMinify() const;
    bool htmllibmanagerMinifyIsSet() const;
    void unsetHtmllibmanager_minify();
    void setHtmllibmanagerMinify(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getHtmllibmanagerPathList() const;
    bool htmllibmanagerPathListIsSet() const;
    void unsetHtmllibmanager_path_list();
    void setHtmllibmanagerPathList(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getHtmllibmanagerTiming() const;
    bool htmllibmanagerTimingIsSet() const;
    void unsetHtmllibmanager_timing();
    void setHtmllibmanagerTiming(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Htmllibmanager_clientmanager;
    bool m_Htmllibmanager_clientmanagerIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Htmllibmanager_debug;
    bool m_Htmllibmanager_debugIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Htmllibmanager_debug_console;
    bool m_Htmllibmanager_debug_consoleIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Htmllibmanager_debug_init_js;
    bool m_Htmllibmanager_debug_init_jsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Htmllibmanager_defaultthemename;
    bool m_Htmllibmanager_defaultthemenameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Htmllibmanager_defaultuserthemename;
    bool m_Htmllibmanager_defaultuserthemenameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Htmllibmanager_firebuglite_path;
    bool m_Htmllibmanager_firebuglite_pathIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Htmllibmanager_forceCQUrlInfo;
    bool m_Htmllibmanager_forceCQUrlInfoIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Htmllibmanager_gzip;
    bool m_Htmllibmanager_gzipIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Htmllibmanager_maxage;
    bool m_Htmllibmanager_maxageIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Htmllibmanager_maxDataUriSize;
    bool m_Htmllibmanager_maxDataUriSizeIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Htmllibmanager_minify;
    bool m_Htmllibmanager_minifyIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Htmllibmanager_path_list;
    bool m_Htmllibmanager_path_listIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Htmllibmanager_timing;
    bool m_Htmllibmanager_timingIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqWidgetImplHtmlLibraryManagerImplProperties_H_ */
