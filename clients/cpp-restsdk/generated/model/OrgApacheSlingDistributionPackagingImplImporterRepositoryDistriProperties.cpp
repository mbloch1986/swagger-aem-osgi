/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties()
{
    m_NameIsSet = false;
    m_Service_nameIsSet = false;
    m_PathIsSet = false;
    m_Privilege_nameIsSet = false;
}

OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::~OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties()
{
}

void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_Service_nameIsSet)
    {
        val[utility::conversions::to_string_t("service.name")] = ModelBase::toJson(m_Service_name);
    }
    if(m_PathIsSet)
    {
        val[utility::conversions::to_string_t("path")] = ModelBase::toJson(m_Path);
    }
    if(m_Privilege_nameIsSet)
    {
        val[utility::conversions::to_string_t("privilege.name")] = ModelBase::toJson(m_Privilege_name);
    }

    return val;
}

void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        if(!val[utility::conversions::to_string_t("name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("name")]);
            setName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("service.name")))
    {
        if(!val[utility::conversions::to_string_t("service.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("service.name")]);
            setServiceName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("path")))
    {
        if(!val[utility::conversions::to_string_t("path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("path")]);
            setPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("privilege.name")))
    {
        if(!val[utility::conversions::to_string_t("privilege.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("privilege.name")]);
            setPrivilegeName( newItem );
        }
    }
}

void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        if (m_Name.get())
        {
            m_Name->toMultipart(multipart, utility::conversions::to_string_t("name."));
        }
    }
    if(m_Service_nameIsSet)
    {
        if (m_Service_name.get())
        {
            m_Service_name->toMultipart(multipart, utility::conversions::to_string_t("service.name."));
        }
    }
    if(m_PathIsSet)
    {
        if (m_Path.get())
        {
            m_Path->toMultipart(multipart, utility::conversions::to_string_t("path."));
        }
    }
    if(m_Privilege_nameIsSet)
    {
        if (m_Privilege_name.get())
        {
            m_Privilege_name->toMultipart(multipart, utility::conversions::to_string_t("privilege.name."));
        }
    }
}

void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("name."));
            setName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("service.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("service.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("service.name."));
            setServiceName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("path")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("path."));
            setPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("privilege.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("privilege.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("privilege.name."));
            setPrivilegeName( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::getName() const
{
    return m_Name;
}


void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::setName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::nameIsSet() const
{
    return m_NameIsSet;
}

void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::unsetName()
{
    m_NameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::getServiceName() const
{
    return m_Service_name;
}


void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::setServiceName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Service_name = value;
    m_Service_nameIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::serviceNameIsSet() const
{
    return m_Service_nameIsSet;
}

void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::unsetService_name()
{
    m_Service_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::getPath() const
{
    return m_Path;
}


void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::setPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::pathIsSet() const
{
    return m_PathIsSet;
}

void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::unsetPath()
{
    m_PathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::getPrivilegeName() const
{
    return m_Privilege_name;
}


void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::setPrivilegeName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Privilege_name = value;
    m_Privilege_nameIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::privilegeNameIsSet() const
{
    return m_Privilege_nameIsSet;
}

void OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties::unsetPrivilege_name()
{
    m_Privilege_nameIsSet = false;
}

}
}
}
}

