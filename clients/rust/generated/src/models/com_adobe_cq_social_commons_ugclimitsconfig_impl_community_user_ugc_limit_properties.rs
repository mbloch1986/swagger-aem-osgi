/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitProperties {
  #[serde(rename = "enable")]
  enable: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "UGCLimit")]
  ugc_limit: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "ugcLimitDuration")]
  ugc_limit_duration: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "domains")]
  domains: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "toList")]
  to_list: Option<::models::ConfigNodePropertyArray>
}

impl ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitProperties {
  pub fn new() -> ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitProperties {
    ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitProperties {
      enable: None,
      ugc_limit: None,
      ugc_limit_duration: None,
      domains: None,
      to_list: None
    }
  }

  pub fn set_enable(&mut self, enable: ::models::ConfigNodePropertyBoolean) {
    self.enable = Some(enable);
  }

  pub fn with_enable(mut self, enable: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitProperties {
    self.enable = Some(enable);
    self
  }

  pub fn enable(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enable.as_ref()
  }

  pub fn reset_enable(&mut self) {
    self.enable = None;
  }

  pub fn set_ugc_limit(&mut self, ugc_limit: ::models::ConfigNodePropertyInteger) {
    self.ugc_limit = Some(ugc_limit);
  }

  pub fn with_ugc_limit(mut self, ugc_limit: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitProperties {
    self.ugc_limit = Some(ugc_limit);
    self
  }

  pub fn ugc_limit(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.ugc_limit.as_ref()
  }

  pub fn reset_ugc_limit(&mut self) {
    self.ugc_limit = None;
  }

  pub fn set_ugc_limit_duration(&mut self, ugc_limit_duration: ::models::ConfigNodePropertyInteger) {
    self.ugc_limit_duration = Some(ugc_limit_duration);
  }

  pub fn with_ugc_limit_duration(mut self, ugc_limit_duration: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitProperties {
    self.ugc_limit_duration = Some(ugc_limit_duration);
    self
  }

  pub fn ugc_limit_duration(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.ugc_limit_duration.as_ref()
  }

  pub fn reset_ugc_limit_duration(&mut self) {
    self.ugc_limit_duration = None;
  }

  pub fn set_domains(&mut self, domains: ::models::ConfigNodePropertyArray) {
    self.domains = Some(domains);
  }

  pub fn with_domains(mut self, domains: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitProperties {
    self.domains = Some(domains);
    self
  }

  pub fn domains(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.domains.as_ref()
  }

  pub fn reset_domains(&mut self) {
    self.domains = None;
  }

  pub fn set_to_list(&mut self, to_list: ::models::ConfigNodePropertyArray) {
    self.to_list = Some(to_list);
  }

  pub fn with_to_list(mut self, to_list: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitProperties {
    self.to_list = Some(to_list);
    self
  }

  pub fn to_list(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.to_list.as_ref()
  }

  pub fn reset_to_list(&mut self) {
    self.to_list = None;
  }

}



