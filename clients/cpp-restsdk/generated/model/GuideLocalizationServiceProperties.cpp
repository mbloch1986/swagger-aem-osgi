/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GuideLocalizationServiceProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

GuideLocalizationServiceProperties::GuideLocalizationServiceProperties()
{
    m_SupportedLocalesIsSet = false;
    m_Localizable_PropertiesIsSet = false;
}

GuideLocalizationServiceProperties::~GuideLocalizationServiceProperties()
{
}

void GuideLocalizationServiceProperties::validate()
{
    // TODO: implement validation
}

web::json::value GuideLocalizationServiceProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SupportedLocalesIsSet)
    {
        val[utility::conversions::to_string_t("supportedLocales")] = ModelBase::toJson(m_SupportedLocales);
    }
    if(m_Localizable_PropertiesIsSet)
    {
        val[utility::conversions::to_string_t("Localizable Properties")] = ModelBase::toJson(m_Localizable_Properties);
    }

    return val;
}

void GuideLocalizationServiceProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("supportedLocales")))
    {
        if(!val[utility::conversions::to_string_t("supportedLocales")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("supportedLocales")]);
            setSupportedLocales( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Localizable Properties")))
    {
        if(!val[utility::conversions::to_string_t("Localizable Properties")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("Localizable Properties")]);
            setLocalizableProperties( newItem );
        }
    }
}

void GuideLocalizationServiceProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_SupportedLocalesIsSet)
    {
        if (m_SupportedLocales.get())
        {
            m_SupportedLocales->toMultipart(multipart, utility::conversions::to_string_t("supportedLocales."));
        }
    }
    if(m_Localizable_PropertiesIsSet)
    {
        if (m_Localizable_Properties.get())
        {
            m_Localizable_Properties->toMultipart(multipart, utility::conversions::to_string_t("Localizable Properties."));
        }
    }
}

void GuideLocalizationServiceProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("supportedLocales")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("supportedLocales")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("supportedLocales."));
            setSupportedLocales( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Localizable Properties")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("Localizable Properties")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("Localizable Properties."));
            setLocalizableProperties( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> GuideLocalizationServiceProperties::getSupportedLocales() const
{
    return m_SupportedLocales;
}


void GuideLocalizationServiceProperties::setSupportedLocales(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_SupportedLocales = value;
    m_SupportedLocalesIsSet = true;
}
bool GuideLocalizationServiceProperties::supportedLocalesIsSet() const
{
    return m_SupportedLocalesIsSet;
}

void GuideLocalizationServiceProperties::unsetSupportedLocales()
{
    m_SupportedLocalesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> GuideLocalizationServiceProperties::getLocalizableProperties() const
{
    return m_Localizable_Properties;
}


void GuideLocalizationServiceProperties::setLocalizableProperties(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Localizable_Properties = value;
    m_Localizable_PropertiesIsSet = true;
}
bool GuideLocalizationServiceProperties::localizablePropertiesIsSet() const
{
    return m_Localizable_PropertiesIsSet;
}

void GuideLocalizationServiceProperties::unsetLocalizable_Properties()
{
    m_Localizable_PropertiesIsSet = false;
}

}
}
}
}

