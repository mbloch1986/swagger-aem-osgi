/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties::OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties()
{
    m_NameIsSet = false;
    m_UsernameIsSet = false;
    m_PasswordIsSet = false;
    
}

OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties::~OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties()
{
}

void OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_UsernameIsSet)
    {
        val["username"] = ModelBase::toJson(m_Username);
    }
    if(m_PasswordIsSet)
    {
        val["password"] = ModelBase::toJson(m_Password);
    }
    

    return val;
}

void OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties::fromJson(nlohmann::json& val)
{
    if(val.find("name") != val.end())
    {
        if(!val["name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["name"]);
            setName( newItem );
        }
        
    }
    if(val.find("username") != val.end())
    {
        if(!val["username"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["username"]);
            setUsername( newItem );
        }
        
    }
    if(val.find("password") != val.end())
    {
        if(!val["password"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["password"]);
            setPassword( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties::getName() const
{
    return m_Name;
}
void OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties::setName(ConfigNodePropertyString const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties::nameIsSet() const
{
    return m_NameIsSet;
}
void OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties::unsetName()
{
    m_NameIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties::getUsername() const
{
    return m_Username;
}
void OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties::setUsername(ConfigNodePropertyString const& value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties::usernameIsSet() const
{
    return m_UsernameIsSet;
}
void OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties::unsetUsername()
{
    m_UsernameIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties::getPassword() const
{
    return m_Password;
}
void OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties::setPassword(ConfigNodePropertyString const& value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}
bool OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties::passwordIsSet() const
{
    return m_PasswordIsSet;
}
void OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties::unsetPassword()
{
    m_PasswordIsSet = false;
}

}
}
}
}

