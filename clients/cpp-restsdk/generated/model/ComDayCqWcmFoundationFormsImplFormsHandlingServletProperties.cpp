/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties()
{
    m_Name_whitelistIsSet = false;
    m_Allow_expressionsIsSet = false;
}

ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::~ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties()
{
}

void ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Name_whitelistIsSet)
    {
        val[utility::conversions::to_string_t("name.whitelist")] = ModelBase::toJson(m_Name_whitelist);
    }
    if(m_Allow_expressionsIsSet)
    {
        val[utility::conversions::to_string_t("allow.expressions")] = ModelBase::toJson(m_Allow_expressions);
    }

    return val;
}

void ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name.whitelist")))
    {
        if(!val[utility::conversions::to_string_t("name.whitelist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("name.whitelist")]);
            setNameWhitelist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allow.expressions")))
    {
        if(!val[utility::conversions::to_string_t("allow.expressions")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("allow.expressions")]);
            setAllowExpressions( newItem );
        }
    }
}

void ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Name_whitelistIsSet)
    {
        if (m_Name_whitelist.get())
        {
            m_Name_whitelist->toMultipart(multipart, utility::conversions::to_string_t("name.whitelist."));
        }
    }
    if(m_Allow_expressionsIsSet)
    {
        if (m_Allow_expressions.get())
        {
            m_Allow_expressions->toMultipart(multipart, utility::conversions::to_string_t("allow.expressions."));
        }
    }
}

void ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name.whitelist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("name.whitelist")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("name.whitelist."));
            setNameWhitelist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allow.expressions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("allow.expressions")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("allow.expressions."));
            setAllowExpressions( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::getNameWhitelist() const
{
    return m_Name_whitelist;
}


void ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::setNameWhitelist(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Name_whitelist = value;
    m_Name_whitelistIsSet = true;
}
bool ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::nameWhitelistIsSet() const
{
    return m_Name_whitelistIsSet;
}

void ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::unsetName_whitelist()
{
    m_Name_whitelistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::getAllowExpressions() const
{
    return m_Allow_expressions;
}


void ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::setAllowExpressions(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Allow_expressions = value;
    m_Allow_expressionsIsSet = true;
}
bool ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::allowExpressionsIsSet() const
{
    return m_Allow_expressionsIsSet;
}

void ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::unsetAllow_expressions()
{
    m_Allow_expressionsIsSet = false;
}

}
}
}
}

