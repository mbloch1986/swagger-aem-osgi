/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties : IEquatable<ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties>
    { 
        /// <summary>
        /// Gets or Sets OauthConfigmanagerImsConfigid
        /// </summary>
        [DataMember(Name="oauth.configmanager.ims.configid")]
        public ConfigNodePropertyString OauthConfigmanagerImsConfigid { get; set; }

        /// <summary>
        /// Gets or Sets ImsOwningEntity
        /// </summary>
        [DataMember(Name="ims.owningEntity")]
        public ConfigNodePropertyString ImsOwningEntity { get; set; }

        /// <summary>
        /// Gets or Sets AemInstanceId
        /// </summary>
        [DataMember(Name="aem.instanceId")]
        public ConfigNodePropertyString AemInstanceId { get; set; }

        /// <summary>
        /// Gets or Sets ImsServiceCode
        /// </summary>
        [DataMember(Name="ims.serviceCode")]
        public ConfigNodePropertyString ImsServiceCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties {\n");
            sb.Append("  OauthConfigmanagerImsConfigid: ").Append(OauthConfigmanagerImsConfigid).Append("\n");
            sb.Append("  ImsOwningEntity: ").Append(ImsOwningEntity).Append("\n");
            sb.Append("  AemInstanceId: ").Append(AemInstanceId).Append("\n");
            sb.Append("  ImsServiceCode: ").Append(ImsServiceCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OauthConfigmanagerImsConfigid == other.OauthConfigmanagerImsConfigid ||
                    OauthConfigmanagerImsConfigid != null &&
                    OauthConfigmanagerImsConfigid.Equals(other.OauthConfigmanagerImsConfigid)
                ) && 
                (
                    ImsOwningEntity == other.ImsOwningEntity ||
                    ImsOwningEntity != null &&
                    ImsOwningEntity.Equals(other.ImsOwningEntity)
                ) && 
                (
                    AemInstanceId == other.AemInstanceId ||
                    AemInstanceId != null &&
                    AemInstanceId.Equals(other.AemInstanceId)
                ) && 
                (
                    ImsServiceCode == other.ImsServiceCode ||
                    ImsServiceCode != null &&
                    ImsServiceCode.Equals(other.ImsServiceCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OauthConfigmanagerImsConfigid != null)
                    hashCode = hashCode * 59 + OauthConfigmanagerImsConfigid.GetHashCode();
                    if (ImsOwningEntity != null)
                    hashCode = hashCode * 59 + ImsOwningEntity.GetHashCode();
                    if (AemInstanceId != null)
                    hashCode = hashCode * 59 + AemInstanceId.GetHashCode();
                    if (ImsServiceCode != null)
                    hashCode = hashCode * 59 + ImsServiceCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties left, ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties left, ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
