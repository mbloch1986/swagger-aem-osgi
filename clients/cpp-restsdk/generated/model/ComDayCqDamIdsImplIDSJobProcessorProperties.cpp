/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamIdsImplIDSJobProcessorProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamIdsImplIDSJobProcessorProperties::ComDayCqDamIdsImplIDSJobProcessorProperties()
{
    m_Enable_multisessionIsSet = false;
    m_Ids_cc_enableIsSet = false;
    m_Enable_retryIsSet = false;
    m_Enable_retry_scripterrorIsSet = false;
    m_Externalizer_domain_cqhostIsSet = false;
    m_Externalizer_domain_httpIsSet = false;
}

ComDayCqDamIdsImplIDSJobProcessorProperties::~ComDayCqDamIdsImplIDSJobProcessorProperties()
{
}

void ComDayCqDamIdsImplIDSJobProcessorProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamIdsImplIDSJobProcessorProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Enable_multisessionIsSet)
    {
        val[utility::conversions::to_string_t("enable.multisession")] = ModelBase::toJson(m_Enable_multisession);
    }
    if(m_Ids_cc_enableIsSet)
    {
        val[utility::conversions::to_string_t("ids.cc.enable")] = ModelBase::toJson(m_Ids_cc_enable);
    }
    if(m_Enable_retryIsSet)
    {
        val[utility::conversions::to_string_t("enable.retry")] = ModelBase::toJson(m_Enable_retry);
    }
    if(m_Enable_retry_scripterrorIsSet)
    {
        val[utility::conversions::to_string_t("enable.retry.scripterror")] = ModelBase::toJson(m_Enable_retry_scripterror);
    }
    if(m_Externalizer_domain_cqhostIsSet)
    {
        val[utility::conversions::to_string_t("externalizer.domain.cqhost")] = ModelBase::toJson(m_Externalizer_domain_cqhost);
    }
    if(m_Externalizer_domain_httpIsSet)
    {
        val[utility::conversions::to_string_t("externalizer.domain.http")] = ModelBase::toJson(m_Externalizer_domain_http);
    }

    return val;
}

void ComDayCqDamIdsImplIDSJobProcessorProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("enable.multisession")))
    {
        if(!val[utility::conversions::to_string_t("enable.multisession")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enable.multisession")]);
            setEnableMultisession( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ids.cc.enable")))
    {
        if(!val[utility::conversions::to_string_t("ids.cc.enable")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("ids.cc.enable")]);
            setIdsCcEnable( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enable.retry")))
    {
        if(!val[utility::conversions::to_string_t("enable.retry")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enable.retry")]);
            setEnableRetry( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enable.retry.scripterror")))
    {
        if(!val[utility::conversions::to_string_t("enable.retry.scripterror")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enable.retry.scripterror")]);
            setEnableRetryScripterror( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("externalizer.domain.cqhost")))
    {
        if(!val[utility::conversions::to_string_t("externalizer.domain.cqhost")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("externalizer.domain.cqhost")]);
            setExternalizerDomainCqhost( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("externalizer.domain.http")))
    {
        if(!val[utility::conversions::to_string_t("externalizer.domain.http")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("externalizer.domain.http")]);
            setExternalizerDomainHttp( newItem );
        }
    }
}

void ComDayCqDamIdsImplIDSJobProcessorProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Enable_multisessionIsSet)
    {
        if (m_Enable_multisession.get())
        {
            m_Enable_multisession->toMultipart(multipart, utility::conversions::to_string_t("enable.multisession."));
        }
    }
    if(m_Ids_cc_enableIsSet)
    {
        if (m_Ids_cc_enable.get())
        {
            m_Ids_cc_enable->toMultipart(multipart, utility::conversions::to_string_t("ids.cc.enable."));
        }
    }
    if(m_Enable_retryIsSet)
    {
        if (m_Enable_retry.get())
        {
            m_Enable_retry->toMultipart(multipart, utility::conversions::to_string_t("enable.retry."));
        }
    }
    if(m_Enable_retry_scripterrorIsSet)
    {
        if (m_Enable_retry_scripterror.get())
        {
            m_Enable_retry_scripterror->toMultipart(multipart, utility::conversions::to_string_t("enable.retry.scripterror."));
        }
    }
    if(m_Externalizer_domain_cqhostIsSet)
    {
        if (m_Externalizer_domain_cqhost.get())
        {
            m_Externalizer_domain_cqhost->toMultipart(multipart, utility::conversions::to_string_t("externalizer.domain.cqhost."));
        }
    }
    if(m_Externalizer_domain_httpIsSet)
    {
        if (m_Externalizer_domain_http.get())
        {
            m_Externalizer_domain_http->toMultipart(multipart, utility::conversions::to_string_t("externalizer.domain.http."));
        }
    }
}

void ComDayCqDamIdsImplIDSJobProcessorProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("enable.multisession")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enable.multisession")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enable.multisession."));
            setEnableMultisession( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ids.cc.enable")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ids.cc.enable")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ids.cc.enable."));
            setIdsCcEnable( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enable.retry")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enable.retry")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enable.retry."));
            setEnableRetry( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enable.retry.scripterror")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enable.retry.scripterror")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enable.retry.scripterror."));
            setEnableRetryScripterror( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("externalizer.domain.cqhost")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("externalizer.domain.cqhost")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("externalizer.domain.cqhost."));
            setExternalizerDomainCqhost( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("externalizer.domain.http")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("externalizer.domain.http")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("externalizer.domain.http."));
            setExternalizerDomainHttp( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamIdsImplIDSJobProcessorProperties::getEnableMultisession() const
{
    return m_Enable_multisession;
}


void ComDayCqDamIdsImplIDSJobProcessorProperties::setEnableMultisession(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enable_multisession = value;
    m_Enable_multisessionIsSet = true;
}
bool ComDayCqDamIdsImplIDSJobProcessorProperties::enableMultisessionIsSet() const
{
    return m_Enable_multisessionIsSet;
}

void ComDayCqDamIdsImplIDSJobProcessorProperties::unsetEnable_multisession()
{
    m_Enable_multisessionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamIdsImplIDSJobProcessorProperties::getIdsCcEnable() const
{
    return m_Ids_cc_enable;
}


void ComDayCqDamIdsImplIDSJobProcessorProperties::setIdsCcEnable(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Ids_cc_enable = value;
    m_Ids_cc_enableIsSet = true;
}
bool ComDayCqDamIdsImplIDSJobProcessorProperties::idsCcEnableIsSet() const
{
    return m_Ids_cc_enableIsSet;
}

void ComDayCqDamIdsImplIDSJobProcessorProperties::unsetIds_cc_enable()
{
    m_Ids_cc_enableIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamIdsImplIDSJobProcessorProperties::getEnableRetry() const
{
    return m_Enable_retry;
}


void ComDayCqDamIdsImplIDSJobProcessorProperties::setEnableRetry(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enable_retry = value;
    m_Enable_retryIsSet = true;
}
bool ComDayCqDamIdsImplIDSJobProcessorProperties::enableRetryIsSet() const
{
    return m_Enable_retryIsSet;
}

void ComDayCqDamIdsImplIDSJobProcessorProperties::unsetEnable_retry()
{
    m_Enable_retryIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamIdsImplIDSJobProcessorProperties::getEnableRetryScripterror() const
{
    return m_Enable_retry_scripterror;
}


void ComDayCqDamIdsImplIDSJobProcessorProperties::setEnableRetryScripterror(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enable_retry_scripterror = value;
    m_Enable_retry_scripterrorIsSet = true;
}
bool ComDayCqDamIdsImplIDSJobProcessorProperties::enableRetryScripterrorIsSet() const
{
    return m_Enable_retry_scripterrorIsSet;
}

void ComDayCqDamIdsImplIDSJobProcessorProperties::unsetEnable_retry_scripterror()
{
    m_Enable_retry_scripterrorIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamIdsImplIDSJobProcessorProperties::getExternalizerDomainCqhost() const
{
    return m_Externalizer_domain_cqhost;
}


void ComDayCqDamIdsImplIDSJobProcessorProperties::setExternalizerDomainCqhost(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Externalizer_domain_cqhost = value;
    m_Externalizer_domain_cqhostIsSet = true;
}
bool ComDayCqDamIdsImplIDSJobProcessorProperties::externalizerDomainCqhostIsSet() const
{
    return m_Externalizer_domain_cqhostIsSet;
}

void ComDayCqDamIdsImplIDSJobProcessorProperties::unsetExternalizer_domain_cqhost()
{
    m_Externalizer_domain_cqhostIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamIdsImplIDSJobProcessorProperties::getExternalizerDomainHttp() const
{
    return m_Externalizer_domain_http;
}


void ComDayCqDamIdsImplIDSJobProcessorProperties::setExternalizerDomainHttp(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Externalizer_domain_http = value;
    m_Externalizer_domain_httpIsSet = true;
}
bool ComDayCqDamIdsImplIDSJobProcessorProperties::externalizerDomainHttpIsSet() const
{
    return m_Externalizer_domain_httpIsSet;
}

void ComDayCqDamIdsImplIDSJobProcessorProperties::unsetExternalizer_domain_http()
{
    m_Externalizer_domain_httpIsSet = false;
}

}
}
}
}

