/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties()
{
    m_Cq_analytics_testandtarget_api_urlIsSet = false;
    m_Cq_analytics_testandtarget_timeoutIsSet = false;
    m_Cq_analytics_testandtarget_sockettimeoutIsSet = false;
    m_Cq_analytics_testandtarget_recommendations_url_replaceIsSet = false;
    m_Cq_analytics_testandtarget_recommendations_url_replacewithIsSet = false;
    
}

ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::~ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties()
{
}

void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Cq_analytics_testandtarget_api_urlIsSet)
    {
        val["cq.analytics.testandtarget.api.url"] = ModelBase::toJson(m_Cq_analytics_testandtarget_api_url);
    }
    if(m_Cq_analytics_testandtarget_timeoutIsSet)
    {
        val["cq.analytics.testandtarget.timeout"] = ModelBase::toJson(m_Cq_analytics_testandtarget_timeout);
    }
    if(m_Cq_analytics_testandtarget_sockettimeoutIsSet)
    {
        val["cq.analytics.testandtarget.sockettimeout"] = ModelBase::toJson(m_Cq_analytics_testandtarget_sockettimeout);
    }
    if(m_Cq_analytics_testandtarget_recommendations_url_replaceIsSet)
    {
        val["cq.analytics.testandtarget.recommendations.url.replace"] = ModelBase::toJson(m_Cq_analytics_testandtarget_recommendations_url_replace);
    }
    if(m_Cq_analytics_testandtarget_recommendations_url_replacewithIsSet)
    {
        val["cq.analytics.testandtarget.recommendations.url.replacewith"] = ModelBase::toJson(m_Cq_analytics_testandtarget_recommendations_url_replacewith);
    }
    

    return val;
}

void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("cq.analytics.testandtarget.api.url") != val.end())
    {
        if(!val["cq.analytics.testandtarget.api.url"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["cq.analytics.testandtarget.api.url"]);
            setCqAnalyticsTestandtargetApiUrl( newItem );
        }
        
    }
    if(val.find("cq.analytics.testandtarget.timeout") != val.end())
    {
        if(!val["cq.analytics.testandtarget.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cq.analytics.testandtarget.timeout"]);
            setCqAnalyticsTestandtargetTimeout( newItem );
        }
        
    }
    if(val.find("cq.analytics.testandtarget.sockettimeout") != val.end())
    {
        if(!val["cq.analytics.testandtarget.sockettimeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cq.analytics.testandtarget.sockettimeout"]);
            setCqAnalyticsTestandtargetSockettimeout( newItem );
        }
        
    }
    if(val.find("cq.analytics.testandtarget.recommendations.url.replace") != val.end())
    {
        if(!val["cq.analytics.testandtarget.recommendations.url.replace"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["cq.analytics.testandtarget.recommendations.url.replace"]);
            setCqAnalyticsTestandtargetRecommendationsUrlReplace( newItem );
        }
        
    }
    if(val.find("cq.analytics.testandtarget.recommendations.url.replacewith") != val.end())
    {
        if(!val["cq.analytics.testandtarget.recommendations.url.replacewith"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["cq.analytics.testandtarget.recommendations.url.replacewith"]);
            setCqAnalyticsTestandtargetRecommendationsUrlReplacewith( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::getCqAnalyticsTestandtargetApiUrl() const
{
    return m_Cq_analytics_testandtarget_api_url;
}
void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::setCqAnalyticsTestandtargetApiUrl(ConfigNodePropertyString const& value)
{
    m_Cq_analytics_testandtarget_api_url = value;
    m_Cq_analytics_testandtarget_api_urlIsSet = true;
}
bool ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::cqAnalyticsTestandtargetApiUrlIsSet() const
{
    return m_Cq_analytics_testandtarget_api_urlIsSet;
}
void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::unsetCq_analytics_testandtarget_api_url()
{
    m_Cq_analytics_testandtarget_api_urlIsSet = false;
}
ConfigNodePropertyInteger ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::getCqAnalyticsTestandtargetTimeout() const
{
    return m_Cq_analytics_testandtarget_timeout;
}
void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::setCqAnalyticsTestandtargetTimeout(ConfigNodePropertyInteger const& value)
{
    m_Cq_analytics_testandtarget_timeout = value;
    m_Cq_analytics_testandtarget_timeoutIsSet = true;
}
bool ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::cqAnalyticsTestandtargetTimeoutIsSet() const
{
    return m_Cq_analytics_testandtarget_timeoutIsSet;
}
void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::unsetCq_analytics_testandtarget_timeout()
{
    m_Cq_analytics_testandtarget_timeoutIsSet = false;
}
ConfigNodePropertyInteger ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::getCqAnalyticsTestandtargetSockettimeout() const
{
    return m_Cq_analytics_testandtarget_sockettimeout;
}
void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::setCqAnalyticsTestandtargetSockettimeout(ConfigNodePropertyInteger const& value)
{
    m_Cq_analytics_testandtarget_sockettimeout = value;
    m_Cq_analytics_testandtarget_sockettimeoutIsSet = true;
}
bool ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::cqAnalyticsTestandtargetSockettimeoutIsSet() const
{
    return m_Cq_analytics_testandtarget_sockettimeoutIsSet;
}
void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::unsetCq_analytics_testandtarget_sockettimeout()
{
    m_Cq_analytics_testandtarget_sockettimeoutIsSet = false;
}
ConfigNodePropertyString ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::getCqAnalyticsTestandtargetRecommendationsUrlReplace() const
{
    return m_Cq_analytics_testandtarget_recommendations_url_replace;
}
void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::setCqAnalyticsTestandtargetRecommendationsUrlReplace(ConfigNodePropertyString const& value)
{
    m_Cq_analytics_testandtarget_recommendations_url_replace = value;
    m_Cq_analytics_testandtarget_recommendations_url_replaceIsSet = true;
}
bool ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::cqAnalyticsTestandtargetRecommendationsUrlReplaceIsSet() const
{
    return m_Cq_analytics_testandtarget_recommendations_url_replaceIsSet;
}
void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::unsetCq_analytics_testandtarget_recommendations_url_replace()
{
    m_Cq_analytics_testandtarget_recommendations_url_replaceIsSet = false;
}
ConfigNodePropertyString ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::getCqAnalyticsTestandtargetRecommendationsUrlReplacewith() const
{
    return m_Cq_analytics_testandtarget_recommendations_url_replacewith;
}
void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::setCqAnalyticsTestandtargetRecommendationsUrlReplacewith(ConfigNodePropertyString const& value)
{
    m_Cq_analytics_testandtarget_recommendations_url_replacewith = value;
    m_Cq_analytics_testandtarget_recommendations_url_replacewithIsSet = true;
}
bool ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::cqAnalyticsTestandtargetRecommendationsUrlReplacewithIsSet() const
{
    return m_Cq_analytics_testandtarget_recommendations_url_replacewithIsSet;
}
void ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties::unsetCq_analytics_testandtarget_recommendations_url_replacewith()
{
    m_Cq_analytics_testandtarget_recommendations_url_replacewithIsSet = false;
}

}
}
}
}

