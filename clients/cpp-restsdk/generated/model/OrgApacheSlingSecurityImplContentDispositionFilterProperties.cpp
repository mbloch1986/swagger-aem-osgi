/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingSecurityImplContentDispositionFilterProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingSecurityImplContentDispositionFilterProperties::OrgApacheSlingSecurityImplContentDispositionFilterProperties()
{
    m_Sling_content_disposition_pathsIsSet = false;
    m_Sling_content_disposition_excluded_pathsIsSet = false;
    m_Sling_content_disposition_all_pathsIsSet = false;
}

OrgApacheSlingSecurityImplContentDispositionFilterProperties::~OrgApacheSlingSecurityImplContentDispositionFilterProperties()
{
}

void OrgApacheSlingSecurityImplContentDispositionFilterProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingSecurityImplContentDispositionFilterProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Sling_content_disposition_pathsIsSet)
    {
        val[utility::conversions::to_string_t("sling.content.disposition.paths")] = ModelBase::toJson(m_Sling_content_disposition_paths);
    }
    if(m_Sling_content_disposition_excluded_pathsIsSet)
    {
        val[utility::conversions::to_string_t("sling.content.disposition.excluded.paths")] = ModelBase::toJson(m_Sling_content_disposition_excluded_paths);
    }
    if(m_Sling_content_disposition_all_pathsIsSet)
    {
        val[utility::conversions::to_string_t("sling.content.disposition.all.paths")] = ModelBase::toJson(m_Sling_content_disposition_all_paths);
    }

    return val;
}

void OrgApacheSlingSecurityImplContentDispositionFilterProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("sling.content.disposition.paths")))
    {
        if(!val[utility::conversions::to_string_t("sling.content.disposition.paths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.content.disposition.paths")]);
            setSlingContentDispositionPaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sling.content.disposition.excluded.paths")))
    {
        if(!val[utility::conversions::to_string_t("sling.content.disposition.excluded.paths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.content.disposition.excluded.paths")]);
            setSlingContentDispositionExcludedPaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sling.content.disposition.all.paths")))
    {
        if(!val[utility::conversions::to_string_t("sling.content.disposition.all.paths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.content.disposition.all.paths")]);
            setSlingContentDispositionAllPaths( newItem );
        }
    }
}

void OrgApacheSlingSecurityImplContentDispositionFilterProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Sling_content_disposition_pathsIsSet)
    {
        if (m_Sling_content_disposition_paths.get())
        {
            m_Sling_content_disposition_paths->toMultipart(multipart, utility::conversions::to_string_t("sling.content.disposition.paths."));
        }
    }
    if(m_Sling_content_disposition_excluded_pathsIsSet)
    {
        if (m_Sling_content_disposition_excluded_paths.get())
        {
            m_Sling_content_disposition_excluded_paths->toMultipart(multipart, utility::conversions::to_string_t("sling.content.disposition.excluded.paths."));
        }
    }
    if(m_Sling_content_disposition_all_pathsIsSet)
    {
        if (m_Sling_content_disposition_all_paths.get())
        {
            m_Sling_content_disposition_all_paths->toMultipart(multipart, utility::conversions::to_string_t("sling.content.disposition.all.paths."));
        }
    }
}

void OrgApacheSlingSecurityImplContentDispositionFilterProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("sling.content.disposition.paths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.content.disposition.paths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.content.disposition.paths."));
            setSlingContentDispositionPaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sling.content.disposition.excluded.paths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.content.disposition.excluded.paths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.content.disposition.excluded.paths."));
            setSlingContentDispositionExcludedPaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sling.content.disposition.all.paths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.content.disposition.all.paths")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.content.disposition.all.paths."));
            setSlingContentDispositionAllPaths( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingSecurityImplContentDispositionFilterProperties::getSlingContentDispositionPaths() const
{
    return m_Sling_content_disposition_paths;
}


void OrgApacheSlingSecurityImplContentDispositionFilterProperties::setSlingContentDispositionPaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Sling_content_disposition_paths = value;
    m_Sling_content_disposition_pathsIsSet = true;
}
bool OrgApacheSlingSecurityImplContentDispositionFilterProperties::slingContentDispositionPathsIsSet() const
{
    return m_Sling_content_disposition_pathsIsSet;
}

void OrgApacheSlingSecurityImplContentDispositionFilterProperties::unsetSling_content_disposition_paths()
{
    m_Sling_content_disposition_pathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingSecurityImplContentDispositionFilterProperties::getSlingContentDispositionExcludedPaths() const
{
    return m_Sling_content_disposition_excluded_paths;
}


void OrgApacheSlingSecurityImplContentDispositionFilterProperties::setSlingContentDispositionExcludedPaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Sling_content_disposition_excluded_paths = value;
    m_Sling_content_disposition_excluded_pathsIsSet = true;
}
bool OrgApacheSlingSecurityImplContentDispositionFilterProperties::slingContentDispositionExcludedPathsIsSet() const
{
    return m_Sling_content_disposition_excluded_pathsIsSet;
}

void OrgApacheSlingSecurityImplContentDispositionFilterProperties::unsetSling_content_disposition_excluded_paths()
{
    m_Sling_content_disposition_excluded_pathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingSecurityImplContentDispositionFilterProperties::getSlingContentDispositionAllPaths() const
{
    return m_Sling_content_disposition_all_paths;
}


void OrgApacheSlingSecurityImplContentDispositionFilterProperties::setSlingContentDispositionAllPaths(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Sling_content_disposition_all_paths = value;
    m_Sling_content_disposition_all_pathsIsSet = true;
}
bool OrgApacheSlingSecurityImplContentDispositionFilterProperties::slingContentDispositionAllPathsIsSet() const
{
    return m_Sling_content_disposition_all_pathsIsSet;
}

void OrgApacheSlingSecurityImplContentDispositionFilterProperties::unsetSling_content_disposition_all_paths()
{
    m_Sling_content_disposition_all_pathsIsSet = false;
}

}
}
}
}

