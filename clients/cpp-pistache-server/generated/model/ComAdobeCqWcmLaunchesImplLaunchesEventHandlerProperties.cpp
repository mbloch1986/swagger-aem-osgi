/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties()
{
    m_Event_filterIsSet = false;
    m_Launches_eventhandler_threadpool_maxsizeIsSet = false;
    m_Launches_eventhandler_threadpool_priorityIsSet = false;
    m_Launches_eventhandler_updatelastmodificationIsSet = false;
    
}

ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::~ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties()
{
}

void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Event_filterIsSet)
    {
        val["event.filter"] = ModelBase::toJson(m_Event_filter);
    }
    if(m_Launches_eventhandler_threadpool_maxsizeIsSet)
    {
        val["launches.eventhandler.threadpool.maxsize"] = ModelBase::toJson(m_Launches_eventhandler_threadpool_maxsize);
    }
    if(m_Launches_eventhandler_threadpool_priorityIsSet)
    {
        val["launches.eventhandler.threadpool.priority"] = ModelBase::toJson(m_Launches_eventhandler_threadpool_priority);
    }
    if(m_Launches_eventhandler_updatelastmodificationIsSet)
    {
        val["launches.eventhandler.updatelastmodification"] = ModelBase::toJson(m_Launches_eventhandler_updatelastmodification);
    }
    

    return val;
}

void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("event.filter") != val.end())
    {
        if(!val["event.filter"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["event.filter"]);
            setEventFilter( newItem );
        }
        
    }
    if(val.find("launches.eventhandler.threadpool.maxsize") != val.end())
    {
        if(!val["launches.eventhandler.threadpool.maxsize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["launches.eventhandler.threadpool.maxsize"]);
            setLaunchesEventhandlerThreadpoolMaxsize( newItem );
        }
        
    }
    if(val.find("launches.eventhandler.threadpool.priority") != val.end())
    {
        if(!val["launches.eventhandler.threadpool.priority"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["launches.eventhandler.threadpool.priority"]);
            setLaunchesEventhandlerThreadpoolPriority( newItem );
        }
        
    }
    if(val.find("launches.eventhandler.updatelastmodification") != val.end())
    {
        if(!val["launches.eventhandler.updatelastmodification"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["launches.eventhandler.updatelastmodification"]);
            setLaunchesEventhandlerUpdatelastmodification( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::getEventFilter() const
{
    return m_Event_filter;
}
void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::setEventFilter(ConfigNodePropertyString const& value)
{
    m_Event_filter = value;
    m_Event_filterIsSet = true;
}
bool ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::eventFilterIsSet() const
{
    return m_Event_filterIsSet;
}
void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::unsetEvent_filter()
{
    m_Event_filterIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::getLaunchesEventhandlerThreadpoolMaxsize() const
{
    return m_Launches_eventhandler_threadpool_maxsize;
}
void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::setLaunchesEventhandlerThreadpoolMaxsize(ConfigNodePropertyInteger const& value)
{
    m_Launches_eventhandler_threadpool_maxsize = value;
    m_Launches_eventhandler_threadpool_maxsizeIsSet = true;
}
bool ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::launchesEventhandlerThreadpoolMaxsizeIsSet() const
{
    return m_Launches_eventhandler_threadpool_maxsizeIsSet;
}
void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::unsetLaunches_eventhandler_threadpool_maxsize()
{
    m_Launches_eventhandler_threadpool_maxsizeIsSet = false;
}
ConfigNodePropertyDropDown ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::getLaunchesEventhandlerThreadpoolPriority() const
{
    return m_Launches_eventhandler_threadpool_priority;
}
void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::setLaunchesEventhandlerThreadpoolPriority(ConfigNodePropertyDropDown const& value)
{
    m_Launches_eventhandler_threadpool_priority = value;
    m_Launches_eventhandler_threadpool_priorityIsSet = true;
}
bool ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::launchesEventhandlerThreadpoolPriorityIsSet() const
{
    return m_Launches_eventhandler_threadpool_priorityIsSet;
}
void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::unsetLaunches_eventhandler_threadpool_priority()
{
    m_Launches_eventhandler_threadpool_priorityIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::getLaunchesEventhandlerUpdatelastmodification() const
{
    return m_Launches_eventhandler_updatelastmodification;
}
void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::setLaunchesEventhandlerUpdatelastmodification(ConfigNodePropertyBoolean const& value)
{
    m_Launches_eventhandler_updatelastmodification = value;
    m_Launches_eventhandler_updatelastmodificationIsSet = true;
}
bool ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::launchesEventhandlerUpdatelastmodificationIsSet() const
{
    return m_Launches_eventhandler_updatelastmodificationIsSet;
}
void ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::unsetLaunches_eventhandler_updatelastmodification()
{
    m_Launches_eventhandler_updatelastmodificationIsSet = false;
}

}
}
}
}

