/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties
    : public ModelBase
{
public:
    OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties();
    virtual ~OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getDisabled() const;
    bool disabledIsSet() const;
    void unsetDisabled();
    void setDisabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getDebug() const;
    bool debugIsSet() const;
    void unsetDebug();
    void setDebug(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getLocalIndexDir() const;
    bool localIndexDirIsSet() const;
    void unsetLocalIndexDir();
    void setLocalIndexDir(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableOpenIndexAsync() const;
    bool enableOpenIndexAsyncIsSet() const;
    void unsetEnableOpenIndexAsync();
    void setEnableOpenIndexAsync(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getThreadPoolSize() const;
    bool threadPoolSizeIsSet() const;
    void unsetThreadPoolSize();
    void setThreadPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getPrefetchIndexFiles() const;
    bool prefetchIndexFilesIsSet() const;
    void unsetPrefetchIndexFiles();
    void setPrefetchIndexFiles(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getExtractedTextCacheSizeInMB() const;
    bool extractedTextCacheSizeInMBIsSet() const;
    void unsetExtractedTextCacheSizeInMB();
    void setExtractedTextCacheSizeInMB(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getExtractedTextCacheExpiryInSecs() const;
    bool extractedTextCacheExpiryInSecsIsSet() const;
    void unsetExtractedTextCacheExpiryInSecs();
    void setExtractedTextCacheExpiryInSecs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getAlwaysUsePreExtractedCache() const;
    bool alwaysUsePreExtractedCacheIsSet() const;
    void unsetAlwaysUsePreExtractedCache();
    void setAlwaysUsePreExtractedCache(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getBooleanClauseLimit() const;
    bool booleanClauseLimitIsSet() const;
    void unsetBooleanClauseLimit();
    void setBooleanClauseLimit(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableHybridIndexing() const;
    bool enableHybridIndexingIsSet() const;
    void unsetEnableHybridIndexing();
    void setEnableHybridIndexing(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getHybridQueueSize() const;
    bool hybridQueueSizeIsSet() const;
    void unsetHybridQueueSize();
    void setHybridQueueSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getDisableStoredIndexDefinition() const;
    bool disableStoredIndexDefinitionIsSet() const;
    void unsetDisableStoredIndexDefinition();
    void setDisableStoredIndexDefinition(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getDeletedBlobsCollectionEnabled() const;
    bool deletedBlobsCollectionEnabledIsSet() const;
    void unsetDeletedBlobsCollectionEnabled();
    void setDeletedBlobsCollectionEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPropIndexCleanerIntervalInSecs() const;
    bool propIndexCleanerIntervalInSecsIsSet() const;
    void unsetPropIndexCleanerIntervalInSecs();
    void setPropIndexCleanerIntervalInSecs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableSingleBlobIndexFiles() const;
    bool enableSingleBlobIndexFilesIsSet() const;
    void unsetEnableSingleBlobIndexFiles();
    void setEnableSingleBlobIndexFiles(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyBoolean> m_Disabled;
    bool m_DisabledIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Debug;
    bool m_DebugIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_LocalIndexDir;
    bool m_LocalIndexDirIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_EnableOpenIndexAsync;
    bool m_EnableOpenIndexAsyncIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_ThreadPoolSize;
    bool m_ThreadPoolSizeIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_PrefetchIndexFiles;
    bool m_PrefetchIndexFilesIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_ExtractedTextCacheSizeInMB;
    bool m_ExtractedTextCacheSizeInMBIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_ExtractedTextCacheExpiryInSecs;
    bool m_ExtractedTextCacheExpiryInSecsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_AlwaysUsePreExtractedCache;
    bool m_AlwaysUsePreExtractedCacheIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_BooleanClauseLimit;
    bool m_BooleanClauseLimitIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_EnableHybridIndexing;
    bool m_EnableHybridIndexingIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_HybridQueueSize;
    bool m_HybridQueueSizeIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_DisableStoredIndexDefinition;
    bool m_DisableStoredIndexDefinitionIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_DeletedBlobsCollectionEnabled;
    bool m_DeletedBlobsCollectionEnabledIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_PropIndexCleanerIntervalInSecs;
    bool m_PropIndexCleanerIntervalInSecsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_EnableSingleBlobIndexFiles;
    bool m_EnableSingleBlobIndexFilesIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties_H_ */
