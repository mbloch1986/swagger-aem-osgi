/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamCoreImplServletCompanionServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamCoreImplServletCompanionServletProperties::OAIComDayCqDamCoreImplServletCompanionServletProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqDamCoreImplServletCompanionServletProperties::OAIComDayCqDamCoreImplServletCompanionServletProperties() {
    this->init();
}

OAIComDayCqDamCoreImplServletCompanionServletProperties::~OAIComDayCqDamCoreImplServletCompanionServletProperties() {
    
}

void
OAIComDayCqDamCoreImplServletCompanionServletProperties::init() {
    m_more_info_isSet = false;
    m_mntoverlaydamguicontentassetsmoreinfo_htmlpath_isSet = false;
}

void
OAIComDayCqDamCoreImplServletCompanionServletProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqDamCoreImplServletCompanionServletProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(more_info, json[QString("More Info")]);
    
    ::OpenAPI::fromJsonValue(mntoverlaydamguicontentassetsmoreinfo_htmlpath, json[QString("/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}")]);
    
}

QString
OAIComDayCqDamCoreImplServletCompanionServletProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamCoreImplServletCompanionServletProperties::asJsonObject() const {
    QJsonObject obj;
	if(more_info.isSet()){
        obj.insert(QString("More Info"), ::OpenAPI::toJsonValue(more_info));
    }
	if(mntoverlaydamguicontentassetsmoreinfo_htmlpath.isSet()){
        obj.insert(QString("/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}"), ::OpenAPI::toJsonValue(mntoverlaydamguicontentassetsmoreinfo_htmlpath));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComDayCqDamCoreImplServletCompanionServletProperties::getMoreInfo() const {
    return more_info;
}
void
OAIComDayCqDamCoreImplServletCompanionServletProperties::setMoreInfo(const OAIConfigNodePropertyString &more_info) {
    this->more_info = more_info;
    this->m_more_info_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqDamCoreImplServletCompanionServletProperties::getMntoverlaydamguicontentassetsmoreinfoHtmlpath() const {
    return mntoverlaydamguicontentassetsmoreinfo_htmlpath;
}
void
OAIComDayCqDamCoreImplServletCompanionServletProperties::setMntoverlaydamguicontentassetsmoreinfoHtmlpath(const OAIConfigNodePropertyString &mntoverlaydamguicontentassetsmoreinfo_htmlpath) {
    this->mntoverlaydamguicontentassetsmoreinfo_htmlpath = mntoverlaydamguicontentassetsmoreinfo_htmlpath;
    this->m_mntoverlaydamguicontentassetsmoreinfo_htmlpath_isSet = true;
}


bool
OAIComDayCqDamCoreImplServletCompanionServletProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(more_info.isSet()){ isObjectUpdated = true; break;}
    
        if(mntoverlaydamguicontentassetsmoreinfo_htmlpath.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

