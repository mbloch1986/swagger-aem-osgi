/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingDatasourceDataSourceFactoryProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingDatasourceDataSourceFactoryProperties::OrgApacheSlingDatasourceDataSourceFactoryProperties()
{
    
}

OrgApacheSlingDatasourceDataSourceFactoryProperties::~OrgApacheSlingDatasourceDataSourceFactoryProperties()
{
}

std::string OrgApacheSlingDatasourceDataSourceFactoryProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getDatasourceName() const
{
    return m_Datasource_name;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setDatasourceName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Datasource_name = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getDatasourceSvcPropName() const
{
    return m_Datasource_svc_prop_name;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setDatasourceSvcPropName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Datasource_svc_prop_name = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getDriverClassName() const
{
    return m_DriverClassName;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setDriverClassName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_DriverClassName = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getUrl() const
{
    return m_Url;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setUrl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Url = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getUsername() const
{
    return m_Username;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setUsername(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Username = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getPassword() const
{
    return m_Password;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setPassword(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Password = value;
}
std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingDatasourceDataSourceFactoryProperties::getDefaultAutoCommit() const
{
    return m_DefaultAutoCommit;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setDefaultAutoCommit(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_DefaultAutoCommit = value;
}
std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingDatasourceDataSourceFactoryProperties::getDefaultReadOnly() const
{
    return m_DefaultReadOnly;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setDefaultReadOnly(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_DefaultReadOnly = value;
}
std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingDatasourceDataSourceFactoryProperties::getDefaultTransactionIsolation() const
{
    return m_DefaultTransactionIsolation;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setDefaultTransactionIsolation(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_DefaultTransactionIsolation = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getDefaultCatalog() const
{
    return m_DefaultCatalog;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setDefaultCatalog(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_DefaultCatalog = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getMaxActive() const
{
    return m_MaxActive;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setMaxActive(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxActive = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getMaxIdle() const
{
    return m_MaxIdle;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setMaxIdle(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxIdle = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getMinIdle() const
{
    return m_MinIdle;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setMinIdle(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MinIdle = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getInitialSize() const
{
    return m_InitialSize;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setInitialSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_InitialSize = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getMaxWait() const
{
    return m_MaxWait;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setMaxWait(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxWait = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getMaxAge() const
{
    return m_MaxAge;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setMaxAge(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxAge = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDatasourceDataSourceFactoryProperties::getTestOnBorrow() const
{
    return m_TestOnBorrow;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setTestOnBorrow(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_TestOnBorrow = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDatasourceDataSourceFactoryProperties::getTestOnReturn() const
{
    return m_TestOnReturn;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setTestOnReturn(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_TestOnReturn = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDatasourceDataSourceFactoryProperties::getTestWhileIdle() const
{
    return m_TestWhileIdle;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setTestWhileIdle(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_TestWhileIdle = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getValidationQuery() const
{
    return m_ValidationQuery;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setValidationQuery(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_ValidationQuery = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getValidationQueryTimeout() const
{
    return m_ValidationQueryTimeout;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setValidationQueryTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ValidationQueryTimeout = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getTimeBetweenEvictionRunsMillis() const
{
    return m_TimeBetweenEvictionRunsMillis;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setTimeBetweenEvictionRunsMillis(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_TimeBetweenEvictionRunsMillis = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getMinEvictableIdleTimeMillis() const
{
    return m_MinEvictableIdleTimeMillis;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setMinEvictableIdleTimeMillis(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MinEvictableIdleTimeMillis = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getConnectionProperties() const
{
    return m_ConnectionProperties;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setConnectionProperties(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_ConnectionProperties = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getInitSQL() const
{
    return m_InitSQL;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setInitSQL(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_InitSQL = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getJdbcInterceptors() const
{
    return m_JdbcInterceptors;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setJdbcInterceptors(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_JdbcInterceptors = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getValidationInterval() const
{
    return m_ValidationInterval;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setValidationInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ValidationInterval = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDatasourceDataSourceFactoryProperties::getLogValidationErrors() const
{
    return m_LogValidationErrors;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setLogValidationErrors(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_LogValidationErrors = value;
}
std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingDatasourceDataSourceFactoryProperties::getDatasourceSvcProperties() const
{
    return m_Datasource_svc_properties;
}
void OrgApacheSlingDatasourceDataSourceFactoryProperties::setDatasourceSvcProperties(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Datasource_svc_properties = value;
}

}
}
}
}

