/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingHapiImplHApiUtilImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingHapiImplHApiUtilImplProperties::OrgApacheSlingHapiImplHApiUtilImplProperties()
{
    m_Org_apache_sling_hapi_tools_resourcetypeIsSet = false;
    m_Org_apache_sling_hapi_tools_collectionresourcetypeIsSet = false;
    m_Org_apache_sling_hapi_tools_searchpathsIsSet = false;
    m_Org_apache_sling_hapi_tools_externalurlIsSet = false;
    m_Org_apache_sling_hapi_tools_enabledIsSet = false;
}

OrgApacheSlingHapiImplHApiUtilImplProperties::~OrgApacheSlingHapiImplHApiUtilImplProperties()
{
}

void OrgApacheSlingHapiImplHApiUtilImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingHapiImplHApiUtilImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Org_apache_sling_hapi_tools_resourcetypeIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.hapi.tools.resourcetype")] = ModelBase::toJson(m_Org_apache_sling_hapi_tools_resourcetype);
    }
    if(m_Org_apache_sling_hapi_tools_collectionresourcetypeIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.hapi.tools.collectionresourcetype")] = ModelBase::toJson(m_Org_apache_sling_hapi_tools_collectionresourcetype);
    }
    if(m_Org_apache_sling_hapi_tools_searchpathsIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.hapi.tools.searchpaths")] = ModelBase::toJson(m_Org_apache_sling_hapi_tools_searchpaths);
    }
    if(m_Org_apache_sling_hapi_tools_externalurlIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.hapi.tools.externalurl")] = ModelBase::toJson(m_Org_apache_sling_hapi_tools_externalurl);
    }
    if(m_Org_apache_sling_hapi_tools_enabledIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.hapi.tools.enabled")] = ModelBase::toJson(m_Org_apache_sling_hapi_tools_enabled);
    }

    return val;
}

void OrgApacheSlingHapiImplHApiUtilImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.hapi.tools.resourcetype")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.hapi.tools.resourcetype")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.hapi.tools.resourcetype")]);
            setOrgApacheSlingHapiToolsResourcetype( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.hapi.tools.collectionresourcetype")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.hapi.tools.collectionresourcetype")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.hapi.tools.collectionresourcetype")]);
            setOrgApacheSlingHapiToolsCollectionresourcetype( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.hapi.tools.searchpaths")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.hapi.tools.searchpaths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.hapi.tools.searchpaths")]);
            setOrgApacheSlingHapiToolsSearchpaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.hapi.tools.externalurl")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.hapi.tools.externalurl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.hapi.tools.externalurl")]);
            setOrgApacheSlingHapiToolsExternalurl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.hapi.tools.enabled")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.hapi.tools.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.hapi.tools.enabled")]);
            setOrgApacheSlingHapiToolsEnabled( newItem );
        }
    }
}

void OrgApacheSlingHapiImplHApiUtilImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Org_apache_sling_hapi_tools_resourcetypeIsSet)
    {
        if (m_Org_apache_sling_hapi_tools_resourcetype.get())
        {
            m_Org_apache_sling_hapi_tools_resourcetype->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.hapi.tools.resourcetype."));
        }
    }
    if(m_Org_apache_sling_hapi_tools_collectionresourcetypeIsSet)
    {
        if (m_Org_apache_sling_hapi_tools_collectionresourcetype.get())
        {
            m_Org_apache_sling_hapi_tools_collectionresourcetype->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.hapi.tools.collectionresourcetype."));
        }
    }
    if(m_Org_apache_sling_hapi_tools_searchpathsIsSet)
    {
        if (m_Org_apache_sling_hapi_tools_searchpaths.get())
        {
            m_Org_apache_sling_hapi_tools_searchpaths->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.hapi.tools.searchpaths."));
        }
    }
    if(m_Org_apache_sling_hapi_tools_externalurlIsSet)
    {
        if (m_Org_apache_sling_hapi_tools_externalurl.get())
        {
            m_Org_apache_sling_hapi_tools_externalurl->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.hapi.tools.externalurl."));
        }
    }
    if(m_Org_apache_sling_hapi_tools_enabledIsSet)
    {
        if (m_Org_apache_sling_hapi_tools_enabled.get())
        {
            m_Org_apache_sling_hapi_tools_enabled->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.hapi.tools.enabled."));
        }
    }
}

void OrgApacheSlingHapiImplHApiUtilImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.hapi.tools.resourcetype")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.hapi.tools.resourcetype")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.hapi.tools.resourcetype."));
            setOrgApacheSlingHapiToolsResourcetype( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.hapi.tools.collectionresourcetype")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.hapi.tools.collectionresourcetype")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.hapi.tools.collectionresourcetype."));
            setOrgApacheSlingHapiToolsCollectionresourcetype( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.hapi.tools.searchpaths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.hapi.tools.searchpaths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.hapi.tools.searchpaths."));
            setOrgApacheSlingHapiToolsSearchpaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.hapi.tools.externalurl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.hapi.tools.externalurl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.hapi.tools.externalurl."));
            setOrgApacheSlingHapiToolsExternalurl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.hapi.tools.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.hapi.tools.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.hapi.tools.enabled."));
            setOrgApacheSlingHapiToolsEnabled( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingHapiImplHApiUtilImplProperties::getOrgApacheSlingHapiToolsResourcetype() const
{
    return m_Org_apache_sling_hapi_tools_resourcetype;
}


void OrgApacheSlingHapiImplHApiUtilImplProperties::setOrgApacheSlingHapiToolsResourcetype(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_hapi_tools_resourcetype = value;
    m_Org_apache_sling_hapi_tools_resourcetypeIsSet = true;
}
bool OrgApacheSlingHapiImplHApiUtilImplProperties::orgApacheSlingHapiToolsResourcetypeIsSet() const
{
    return m_Org_apache_sling_hapi_tools_resourcetypeIsSet;
}

void OrgApacheSlingHapiImplHApiUtilImplProperties::unsetOrg_apache_sling_hapi_tools_resourcetype()
{
    m_Org_apache_sling_hapi_tools_resourcetypeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingHapiImplHApiUtilImplProperties::getOrgApacheSlingHapiToolsCollectionresourcetype() const
{
    return m_Org_apache_sling_hapi_tools_collectionresourcetype;
}


void OrgApacheSlingHapiImplHApiUtilImplProperties::setOrgApacheSlingHapiToolsCollectionresourcetype(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_hapi_tools_collectionresourcetype = value;
    m_Org_apache_sling_hapi_tools_collectionresourcetypeIsSet = true;
}
bool OrgApacheSlingHapiImplHApiUtilImplProperties::orgApacheSlingHapiToolsCollectionresourcetypeIsSet() const
{
    return m_Org_apache_sling_hapi_tools_collectionresourcetypeIsSet;
}

void OrgApacheSlingHapiImplHApiUtilImplProperties::unsetOrg_apache_sling_hapi_tools_collectionresourcetype()
{
    m_Org_apache_sling_hapi_tools_collectionresourcetypeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingHapiImplHApiUtilImplProperties::getOrgApacheSlingHapiToolsSearchpaths() const
{
    return m_Org_apache_sling_hapi_tools_searchpaths;
}


void OrgApacheSlingHapiImplHApiUtilImplProperties::setOrgApacheSlingHapiToolsSearchpaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Org_apache_sling_hapi_tools_searchpaths = value;
    m_Org_apache_sling_hapi_tools_searchpathsIsSet = true;
}
bool OrgApacheSlingHapiImplHApiUtilImplProperties::orgApacheSlingHapiToolsSearchpathsIsSet() const
{
    return m_Org_apache_sling_hapi_tools_searchpathsIsSet;
}

void OrgApacheSlingHapiImplHApiUtilImplProperties::unsetOrg_apache_sling_hapi_tools_searchpaths()
{
    m_Org_apache_sling_hapi_tools_searchpathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingHapiImplHApiUtilImplProperties::getOrgApacheSlingHapiToolsExternalurl() const
{
    return m_Org_apache_sling_hapi_tools_externalurl;
}


void OrgApacheSlingHapiImplHApiUtilImplProperties::setOrgApacheSlingHapiToolsExternalurl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_hapi_tools_externalurl = value;
    m_Org_apache_sling_hapi_tools_externalurlIsSet = true;
}
bool OrgApacheSlingHapiImplHApiUtilImplProperties::orgApacheSlingHapiToolsExternalurlIsSet() const
{
    return m_Org_apache_sling_hapi_tools_externalurlIsSet;
}

void OrgApacheSlingHapiImplHApiUtilImplProperties::unsetOrg_apache_sling_hapi_tools_externalurl()
{
    m_Org_apache_sling_hapi_tools_externalurlIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingHapiImplHApiUtilImplProperties::getOrgApacheSlingHapiToolsEnabled() const
{
    return m_Org_apache_sling_hapi_tools_enabled;
}


void OrgApacheSlingHapiImplHApiUtilImplProperties::setOrgApacheSlingHapiToolsEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_sling_hapi_tools_enabled = value;
    m_Org_apache_sling_hapi_tools_enabledIsSet = true;
}
bool OrgApacheSlingHapiImplHApiUtilImplProperties::orgApacheSlingHapiToolsEnabledIsSet() const
{
    return m_Org_apache_sling_hapi_tools_enabledIsSet;
}

void OrgApacheSlingHapiImplHApiUtilImplProperties::unsetOrg_apache_sling_hapi_tools_enabled()
{
    m_Org_apache_sling_hapi_tools_enabledIsSet = false;
}

}
}
}
}

