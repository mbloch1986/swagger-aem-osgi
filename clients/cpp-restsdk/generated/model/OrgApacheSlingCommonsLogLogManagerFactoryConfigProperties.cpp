/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties()
{
    m_Org_apache_sling_commons_log_levelIsSet = false;
    m_Org_apache_sling_commons_log_fileIsSet = false;
    m_Org_apache_sling_commons_log_patternIsSet = false;
    m_Org_apache_sling_commons_log_namesIsSet = false;
    m_Org_apache_sling_commons_log_additivIsSet = false;
}

OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::~OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties()
{
}

void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Org_apache_sling_commons_log_levelIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.level")] = ModelBase::toJson(m_Org_apache_sling_commons_log_level);
    }
    if(m_Org_apache_sling_commons_log_fileIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.file")] = ModelBase::toJson(m_Org_apache_sling_commons_log_file);
    }
    if(m_Org_apache_sling_commons_log_patternIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.pattern")] = ModelBase::toJson(m_Org_apache_sling_commons_log_pattern);
    }
    if(m_Org_apache_sling_commons_log_namesIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.names")] = ModelBase::toJson(m_Org_apache_sling_commons_log_names);
    }
    if(m_Org_apache_sling_commons_log_additivIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.additiv")] = ModelBase::toJson(m_Org_apache_sling_commons_log_additiv);
    }

    return val;
}

void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.level")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.level")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.level")]);
            setOrgApacheSlingCommonsLogLevel( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.file")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.file")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.file")]);
            setOrgApacheSlingCommonsLogFile( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.pattern")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.pattern")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.pattern")]);
            setOrgApacheSlingCommonsLogPattern( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.names")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.names")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.names")]);
            setOrgApacheSlingCommonsLogNames( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.additiv")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.additiv")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.additiv")]);
            setOrgApacheSlingCommonsLogAdditiv( newItem );
        }
    }
}

void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Org_apache_sling_commons_log_levelIsSet)
    {
        if (m_Org_apache_sling_commons_log_level.get())
        {
            m_Org_apache_sling_commons_log_level->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.level."));
        }
    }
    if(m_Org_apache_sling_commons_log_fileIsSet)
    {
        if (m_Org_apache_sling_commons_log_file.get())
        {
            m_Org_apache_sling_commons_log_file->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.file."));
        }
    }
    if(m_Org_apache_sling_commons_log_patternIsSet)
    {
        if (m_Org_apache_sling_commons_log_pattern.get())
        {
            m_Org_apache_sling_commons_log_pattern->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.pattern."));
        }
    }
    if(m_Org_apache_sling_commons_log_namesIsSet)
    {
        if (m_Org_apache_sling_commons_log_names.get())
        {
            m_Org_apache_sling_commons_log_names->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.names."));
        }
    }
    if(m_Org_apache_sling_commons_log_additivIsSet)
    {
        if (m_Org_apache_sling_commons_log_additiv.get())
        {
            m_Org_apache_sling_commons_log_additiv->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.additiv."));
        }
    }
}

void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.level")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.level")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.level."));
            setOrgApacheSlingCommonsLogLevel( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.file")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.file")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.file."));
            setOrgApacheSlingCommonsLogFile( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.pattern")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.pattern")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.pattern."));
            setOrgApacheSlingCommonsLogPattern( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.names")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.names")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.names."));
            setOrgApacheSlingCommonsLogNames( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.additiv")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.additiv")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.additiv."));
            setOrgApacheSlingCommonsLogAdditiv( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogLevel() const
{
    return m_Org_apache_sling_commons_log_level;
}


void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogLevel(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Org_apache_sling_commons_log_level = value;
    m_Org_apache_sling_commons_log_levelIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::orgApacheSlingCommonsLogLevelIsSet() const
{
    return m_Org_apache_sling_commons_log_levelIsSet;
}

void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::unsetOrg_apache_sling_commons_log_level()
{
    m_Org_apache_sling_commons_log_levelIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogFile() const
{
    return m_Org_apache_sling_commons_log_file;
}


void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogFile(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_commons_log_file = value;
    m_Org_apache_sling_commons_log_fileIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::orgApacheSlingCommonsLogFileIsSet() const
{
    return m_Org_apache_sling_commons_log_fileIsSet;
}

void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::unsetOrg_apache_sling_commons_log_file()
{
    m_Org_apache_sling_commons_log_fileIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogPattern() const
{
    return m_Org_apache_sling_commons_log_pattern;
}


void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogPattern(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_commons_log_pattern = value;
    m_Org_apache_sling_commons_log_patternIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::orgApacheSlingCommonsLogPatternIsSet() const
{
    return m_Org_apache_sling_commons_log_patternIsSet;
}

void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::unsetOrg_apache_sling_commons_log_pattern()
{
    m_Org_apache_sling_commons_log_patternIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogNames() const
{
    return m_Org_apache_sling_commons_log_names;
}


void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogNames(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Org_apache_sling_commons_log_names = value;
    m_Org_apache_sling_commons_log_namesIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::orgApacheSlingCommonsLogNamesIsSet() const
{
    return m_Org_apache_sling_commons_log_namesIsSet;
}

void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::unsetOrg_apache_sling_commons_log_names()
{
    m_Org_apache_sling_commons_log_namesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogAdditiv() const
{
    return m_Org_apache_sling_commons_log_additiv;
}


void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogAdditiv(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_sling_commons_log_additiv = value;
    m_Org_apache_sling_commons_log_additivIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::orgApacheSlingCommonsLogAdditivIsSet() const
{
    return m_Org_apache_sling_commons_log_additivIsSet;
}

void OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::unsetOrg_apache_sling_commons_log_additiv()
{
    m_Org_apache_sling_commons_log_additivIsSet = false;
}

}
}
}
}

