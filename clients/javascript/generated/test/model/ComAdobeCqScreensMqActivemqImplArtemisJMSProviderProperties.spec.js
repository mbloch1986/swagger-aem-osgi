/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NodeSwaggerAemOsgi);
  }
}(this, function(expect, NodeSwaggerAemOsgi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties', function() {
    it('should create an instance of ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties', function() {
      // uncomment below and update the code to test ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be.a(NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties);
    });

    it('should have the property serviceRanking (base name: "service.ranking")', function() {
      // uncomment below and update the code to test the property serviceRanking
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property globalSize (base name: "global.size")', function() {
      // uncomment below and update the code to test the property globalSize
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property maxDiskUsage (base name: "max.disk.usage")', function() {
      // uncomment below and update the code to test the property maxDiskUsage
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property persistenceEnabled (base name: "persistence.enabled")', function() {
      // uncomment below and update the code to test the property persistenceEnabled
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property threadPoolMaxSize (base name: "thread.pool.max.size")', function() {
      // uncomment below and update the code to test the property threadPoolMaxSize
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property scheduledThreadPoolMaxSize (base name: "scheduled.thread.pool.max.size")', function() {
      // uncomment below and update the code to test the property scheduledThreadPoolMaxSize
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property gracefulShutdownTimeout (base name: "graceful.shutdown.timeout")', function() {
      // uncomment below and update the code to test the property gracefulShutdownTimeout
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property queues (base name: "queues")', function() {
      // uncomment below and update the code to test the property queues
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property topics (base name: "topics")', function() {
      // uncomment below and update the code to test the property topics
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property addressesMaxDeliveryAttempts (base name: "addresses.max.delivery.attempts")', function() {
      // uncomment below and update the code to test the property addressesMaxDeliveryAttempts
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property addressesExpiryDelay (base name: "addresses.expiry.delay")', function() {
      // uncomment below and update the code to test the property addressesExpiryDelay
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property addressesAddressFullMessagePolicy (base name: "addresses.address.full.message.policy")', function() {
      // uncomment below and update the code to test the property addressesAddressFullMessagePolicy
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property addressesMaxSizeBytes (base name: "addresses.max.size.bytes")', function() {
      // uncomment below and update the code to test the property addressesMaxSizeBytes
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property addressesPageSizeBytes (base name: "addresses.page.size.bytes")', function() {
      // uncomment below and update the code to test the property addressesPageSizeBytes
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property addressesPageCacheMaxSize (base name: "addresses.page.cache.max.size")', function() {
      // uncomment below and update the code to test the property addressesPageCacheMaxSize
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property clusterUser (base name: "cluster.user")', function() {
      // uncomment below and update the code to test the property clusterUser
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property clusterPassword (base name: "cluster.password")', function() {
      // uncomment below and update the code to test the property clusterPassword
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property clusterCallTimeout (base name: "cluster.call.timeout")', function() {
      // uncomment below and update the code to test the property clusterCallTimeout
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property clusterCallFailoverTimeout (base name: "cluster.call.failover.timeout")', function() {
      // uncomment below and update the code to test the property clusterCallFailoverTimeout
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property clusterClientFailureCheckPeriod (base name: "cluster.client.failure.check.period")', function() {
      // uncomment below and update the code to test the property clusterClientFailureCheckPeriod
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property clusterNotificationAttempts (base name: "cluster.notification.attempts")', function() {
      // uncomment below and update the code to test the property clusterNotificationAttempts
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property clusterNotificationInterval (base name: "cluster.notification.interval")', function() {
      // uncomment below and update the code to test the property clusterNotificationInterval
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property idCacheSize (base name: "id.cache.size")', function() {
      // uncomment below and update the code to test the property idCacheSize
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property clusterConfirmationWindowSize (base name: "cluster.confirmation.window.size")', function() {
      // uncomment below and update the code to test the property clusterConfirmationWindowSize
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property clusterConnectionTtl (base name: "cluster.connection.ttl")', function() {
      // uncomment below and update the code to test the property clusterConnectionTtl
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property clusterDuplicateDetection (base name: "cluster.duplicate.detection")', function() {
      // uncomment below and update the code to test the property clusterDuplicateDetection
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property clusterInitialConnectAttempts (base name: "cluster.initial.connect.attempts")', function() {
      // uncomment below and update the code to test the property clusterInitialConnectAttempts
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property clusterMaxRetryInterval (base name: "cluster.max.retry.interval")', function() {
      // uncomment below and update the code to test the property clusterMaxRetryInterval
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property clusterMinLargeMessageSize (base name: "cluster.min.large.message.size")', function() {
      // uncomment below and update the code to test the property clusterMinLargeMessageSize
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property clusterProducerWindowSize (base name: "cluster.producer.window.size")', function() {
      // uncomment below and update the code to test the property clusterProducerWindowSize
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property clusterReconnectAttempts (base name: "cluster.reconnect.attempts")', function() {
      // uncomment below and update the code to test the property clusterReconnectAttempts
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property clusterRetryInterval (base name: "cluster.retry.interval")', function() {
      // uncomment below and update the code to test the property clusterRetryInterval
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

    it('should have the property clusterRetryIntervalMultiplier (base name: "cluster.retry.interval.multiplier")', function() {
      // uncomment below and update the code to test the property clusterRetryIntervalMultiplier
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
      //expect(instance).to.be();
    });

  });

}));
