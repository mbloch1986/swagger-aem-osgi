/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties::OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties::OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties() {
    this->init();
}

OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties::~OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties() {
    
}

void
OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties::init() {
    m_dam_cfm_component_resource_type_isSet = false;
    m_dam_cfm_component_file_reference_prop_isSet = false;
    m_dam_cfm_component_elements_prop_isSet = false;
    m_dam_cfm_component_variation_prop_isSet = false;
}

void
OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(dam_cfm_component_resource_type, json[QString("dam.cfm.component.resourceType")]);
    
    ::OpenAPI::fromJsonValue(dam_cfm_component_file_reference_prop, json[QString("dam.cfm.component.fileReferenceProp")]);
    
    ::OpenAPI::fromJsonValue(dam_cfm_component_elements_prop, json[QString("dam.cfm.component.elementsProp")]);
    
    ::OpenAPI::fromJsonValue(dam_cfm_component_variation_prop, json[QString("dam.cfm.component.variationProp")]);
    
}

QString
OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(dam_cfm_component_resource_type.isSet()){
        obj.insert(QString("dam.cfm.component.resourceType"), ::OpenAPI::toJsonValue(dam_cfm_component_resource_type));
    }
	if(dam_cfm_component_file_reference_prop.isSet()){
        obj.insert(QString("dam.cfm.component.fileReferenceProp"), ::OpenAPI::toJsonValue(dam_cfm_component_file_reference_prop));
    }
	if(dam_cfm_component_elements_prop.isSet()){
        obj.insert(QString("dam.cfm.component.elementsProp"), ::OpenAPI::toJsonValue(dam_cfm_component_elements_prop));
    }
	if(dam_cfm_component_variation_prop.isSet()){
        obj.insert(QString("dam.cfm.component.variationProp"), ::OpenAPI::toJsonValue(dam_cfm_component_variation_prop));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties::getDamCfmComponentResourceType() const {
    return dam_cfm_component_resource_type;
}
void
OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties::setDamCfmComponentResourceType(const OAIConfigNodePropertyString &dam_cfm_component_resource_type) {
    this->dam_cfm_component_resource_type = dam_cfm_component_resource_type;
    this->m_dam_cfm_component_resource_type_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties::getDamCfmComponentFileReferenceProp() const {
    return dam_cfm_component_file_reference_prop;
}
void
OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties::setDamCfmComponentFileReferenceProp(const OAIConfigNodePropertyString &dam_cfm_component_file_reference_prop) {
    this->dam_cfm_component_file_reference_prop = dam_cfm_component_file_reference_prop;
    this->m_dam_cfm_component_file_reference_prop_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties::getDamCfmComponentElementsProp() const {
    return dam_cfm_component_elements_prop;
}
void
OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties::setDamCfmComponentElementsProp(const OAIConfigNodePropertyString &dam_cfm_component_elements_prop) {
    this->dam_cfm_component_elements_prop = dam_cfm_component_elements_prop;
    this->m_dam_cfm_component_elements_prop_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties::getDamCfmComponentVariationProp() const {
    return dam_cfm_component_variation_prop;
}
void
OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties::setDamCfmComponentVariationProp(const OAIConfigNodePropertyString &dam_cfm_component_variation_prop) {
    this->dam_cfm_component_variation_prop = dam_cfm_component_variation_prop;
    this->m_dam_cfm_component_variation_prop_isSet = true;
}


bool
OAIComAdobeCqDamCfmImplComponentComponentConfigImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(dam_cfm_component_resource_type.isSet()){ isObjectUpdated = true; break;}
    
        if(dam_cfm_component_file_reference_prop.isSet()){ isObjectUpdated = true; break;}
    
        if(dam_cfm_component_elements_prop.isSet()){ isObjectUpdated = true; break;}
    
        if(dam_cfm_component_variation_prop.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

