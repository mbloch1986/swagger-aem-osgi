/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties :  IEquatable<ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties" /> class.
        /// </summary>
        /// <param name="schedulerPeriod">schedulerPeriod.</param>
        /// <param name="schedulerConcurrent">schedulerConcurrent.</param>
        /// <param name="serviceBadLinkToleranceInterval">serviceBadLinkToleranceInterval.</param>
        /// <param name="serviceCheckOverridePatterns">serviceCheckOverridePatterns.</param>
        /// <param name="serviceCacheBrokenInternalLinks">serviceCacheBrokenInternalLinks.</param>
        /// <param name="serviceSpecialLinkPrefix">serviceSpecialLinkPrefix.</param>
        /// <param name="serviceSpecialLinkPatterns">serviceSpecialLinkPatterns.</param>
        public ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties(ConfigNodePropertyInteger schedulerPeriod = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean schedulerConcurrent = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger serviceBadLinkToleranceInterval = default(ConfigNodePropertyInteger), ConfigNodePropertyArray serviceCheckOverridePatterns = default(ConfigNodePropertyArray), ConfigNodePropertyBoolean serviceCacheBrokenInternalLinks = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray serviceSpecialLinkPrefix = default(ConfigNodePropertyArray), ConfigNodePropertyArray serviceSpecialLinkPatterns = default(ConfigNodePropertyArray))
        {
            this.SchedulerPeriod = schedulerPeriod;
            this.SchedulerConcurrent = schedulerConcurrent;
            this.ServiceBadLinkToleranceInterval = serviceBadLinkToleranceInterval;
            this.ServiceCheckOverridePatterns = serviceCheckOverridePatterns;
            this.ServiceCacheBrokenInternalLinks = serviceCacheBrokenInternalLinks;
            this.ServiceSpecialLinkPrefix = serviceSpecialLinkPrefix;
            this.ServiceSpecialLinkPatterns = serviceSpecialLinkPatterns;
        }
        
        /// <summary>
        /// Gets or Sets SchedulerPeriod
        /// </summary>
        [DataMember(Name="scheduler.period", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger SchedulerPeriod { get; set; }

        /// <summary>
        /// Gets or Sets SchedulerConcurrent
        /// </summary>
        [DataMember(Name="scheduler.concurrent", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean SchedulerConcurrent { get; set; }

        /// <summary>
        /// Gets or Sets ServiceBadLinkToleranceInterval
        /// </summary>
        [DataMember(Name="service.bad_link_tolerance_interval", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ServiceBadLinkToleranceInterval { get; set; }

        /// <summary>
        /// Gets or Sets ServiceCheckOverridePatterns
        /// </summary>
        [DataMember(Name="service.check_override_patterns", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ServiceCheckOverridePatterns { get; set; }

        /// <summary>
        /// Gets or Sets ServiceCacheBrokenInternalLinks
        /// </summary>
        [DataMember(Name="service.cache_broken_internal_links", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ServiceCacheBrokenInternalLinks { get; set; }

        /// <summary>
        /// Gets or Sets ServiceSpecialLinkPrefix
        /// </summary>
        [DataMember(Name="service.special_link_prefix", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ServiceSpecialLinkPrefix { get; set; }

        /// <summary>
        /// Gets or Sets ServiceSpecialLinkPatterns
        /// </summary>
        [DataMember(Name="service.special_link_patterns", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ServiceSpecialLinkPatterns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties {\n");
            sb.Append("  SchedulerPeriod: ").Append(SchedulerPeriod).Append("\n");
            sb.Append("  SchedulerConcurrent: ").Append(SchedulerConcurrent).Append("\n");
            sb.Append("  ServiceBadLinkToleranceInterval: ").Append(ServiceBadLinkToleranceInterval).Append("\n");
            sb.Append("  ServiceCheckOverridePatterns: ").Append(ServiceCheckOverridePatterns).Append("\n");
            sb.Append("  ServiceCacheBrokenInternalLinks: ").Append(ServiceCacheBrokenInternalLinks).Append("\n");
            sb.Append("  ServiceSpecialLinkPrefix: ").Append(ServiceSpecialLinkPrefix).Append("\n");
            sb.Append("  ServiceSpecialLinkPatterns: ").Append(ServiceSpecialLinkPatterns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SchedulerPeriod == input.SchedulerPeriod ||
                    (this.SchedulerPeriod != null &&
                    this.SchedulerPeriod.Equals(input.SchedulerPeriod))
                ) && 
                (
                    this.SchedulerConcurrent == input.SchedulerConcurrent ||
                    (this.SchedulerConcurrent != null &&
                    this.SchedulerConcurrent.Equals(input.SchedulerConcurrent))
                ) && 
                (
                    this.ServiceBadLinkToleranceInterval == input.ServiceBadLinkToleranceInterval ||
                    (this.ServiceBadLinkToleranceInterval != null &&
                    this.ServiceBadLinkToleranceInterval.Equals(input.ServiceBadLinkToleranceInterval))
                ) && 
                (
                    this.ServiceCheckOverridePatterns == input.ServiceCheckOverridePatterns ||
                    (this.ServiceCheckOverridePatterns != null &&
                    this.ServiceCheckOverridePatterns.Equals(input.ServiceCheckOverridePatterns))
                ) && 
                (
                    this.ServiceCacheBrokenInternalLinks == input.ServiceCacheBrokenInternalLinks ||
                    (this.ServiceCacheBrokenInternalLinks != null &&
                    this.ServiceCacheBrokenInternalLinks.Equals(input.ServiceCacheBrokenInternalLinks))
                ) && 
                (
                    this.ServiceSpecialLinkPrefix == input.ServiceSpecialLinkPrefix ||
                    (this.ServiceSpecialLinkPrefix != null &&
                    this.ServiceSpecialLinkPrefix.Equals(input.ServiceSpecialLinkPrefix))
                ) && 
                (
                    this.ServiceSpecialLinkPatterns == input.ServiceSpecialLinkPatterns ||
                    (this.ServiceSpecialLinkPatterns != null &&
                    this.ServiceSpecialLinkPatterns.Equals(input.ServiceSpecialLinkPatterns))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SchedulerPeriod != null)
                    hashCode = hashCode * 59 + this.SchedulerPeriod.GetHashCode();
                if (this.SchedulerConcurrent != null)
                    hashCode = hashCode * 59 + this.SchedulerConcurrent.GetHashCode();
                if (this.ServiceBadLinkToleranceInterval != null)
                    hashCode = hashCode * 59 + this.ServiceBadLinkToleranceInterval.GetHashCode();
                if (this.ServiceCheckOverridePatterns != null)
                    hashCode = hashCode * 59 + this.ServiceCheckOverridePatterns.GetHashCode();
                if (this.ServiceCacheBrokenInternalLinks != null)
                    hashCode = hashCode * 59 + this.ServiceCacheBrokenInternalLinks.GetHashCode();
                if (this.ServiceSpecialLinkPrefix != null)
                    hashCode = hashCode * 59 + this.ServiceSpecialLinkPrefix.GetHashCode();
                if (this.ServiceSpecialLinkPatterns != null)
                    hashCode = hashCode * 59 + this.ServiceSpecialLinkPatterns.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
