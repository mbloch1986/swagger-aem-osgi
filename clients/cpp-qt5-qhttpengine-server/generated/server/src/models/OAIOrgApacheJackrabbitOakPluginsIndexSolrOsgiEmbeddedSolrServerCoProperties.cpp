/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties() {
    this->init();
}

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::~OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties() {
    
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::init() {
    m_solr_home_path_isSet = false;
    m_solr_core_name_isSet = false;
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(solr_home_path, json[QString("solr.home.path")]);
    
    ::OpenAPI::fromJsonValue(solr_core_name, json[QString("solr.core.name")]);
    
}

QString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::asJsonObject() const {
    QJsonObject obj;
	if(solr_home_path.isSet()){
        obj.insert(QString("solr.home.path"), ::OpenAPI::toJsonValue(solr_home_path));
    }
	if(solr_core_name.isSet()){
        obj.insert(QString("solr.core.name"), ::OpenAPI::toJsonValue(solr_core_name));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::getSolrHomePath() const {
    return solr_home_path;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::setSolrHomePath(const OAIConfigNodePropertyString &solr_home_path) {
    this->solr_home_path = solr_home_path;
    this->m_solr_home_path_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::getSolrCoreName() const {
    return solr_core_name;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::setSolrCoreName(const OAIConfigNodePropertyString &solr_core_name) {
    this->solr_core_name = solr_core_name;
    this->m_solr_core_name_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(solr_home_path.isSet()){ isObjectUpdated = true; break;}
    
        if(solr_core_name.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

