/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties() {
    this->init();
}

OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::~OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties() {
    
}

void
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::init() {
    m_messages_queue_size_isSet = false;
    m_logger_config_isSet = false;
    m_messages_size_isSet = false;
}

void
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(messages_queue_size, json[QString("messages.queue.size")]);
    
    ::OpenAPI::fromJsonValue(logger_config, json[QString("logger.config")]);
    
    ::OpenAPI::fromJsonValue(messages_size, json[QString("messages.size")]);
    
}

QString
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(messages_queue_size.isSet()){
        obj.insert(QString("messages.queue.size"), ::OpenAPI::toJsonValue(messages_queue_size));
    }
	if(logger_config.isSet()){
        obj.insert(QString("logger.config"), ::OpenAPI::toJsonValue(logger_config));
    }
	if(messages_size.isSet()){
        obj.insert(QString("messages.size"), ::OpenAPI::toJsonValue(messages_size));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::getMessagesQueueSize() const {
    return messages_queue_size;
}
void
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::setMessagesQueueSize(const OAIConfigNodePropertyInteger &messages_queue_size) {
    this->messages_queue_size = messages_queue_size;
    this->m_messages_queue_size_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::getLoggerConfig() const {
    return logger_config;
}
void
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::setLoggerConfig(const OAIConfigNodePropertyArray &logger_config) {
    this->logger_config = logger_config;
    this->m_logger_config_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::getMessagesSize() const {
    return messages_size;
}
void
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::setMessagesSize(const OAIConfigNodePropertyInteger &messages_size) {
    this->messages_size = messages_size;
    this->m_messages_size_isSet = true;
}


bool
OAIComAdobeGraniteLoggingImplLogAnalyserImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(messages_queue_size.isSet()){ isObjectUpdated = true; break;}
    
        if(logger_config.isSet()){ isObjectUpdated = true; break;}
    
        if(messages_size.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

