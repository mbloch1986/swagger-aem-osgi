/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingSecurityImplReferrerFilterProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingSecurityImplReferrerFilterProperties::OAIOrgApacheSlingSecurityImplReferrerFilterProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingSecurityImplReferrerFilterProperties::OAIOrgApacheSlingSecurityImplReferrerFilterProperties() {
    init();
}

OAIOrgApacheSlingSecurityImplReferrerFilterProperties::~OAIOrgApacheSlingSecurityImplReferrerFilterProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::init() {
    allow_empty = new OAIConfigNodePropertyBoolean();
    m_allow_empty_isSet = false;
    allow_hosts = new OAIConfigNodePropertyArray();
    m_allow_hosts_isSet = false;
    allow_hosts_regexp = new OAIConfigNodePropertyArray();
    m_allow_hosts_regexp_isSet = false;
    filter_methods = new OAIConfigNodePropertyArray();
    m_filter_methods_isSet = false;
    exclude_agents_regexp = new OAIConfigNodePropertyArray();
    m_exclude_agents_regexp_isSet = false;
}

void
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::cleanup() {
    if(allow_empty != nullptr) { 
        delete allow_empty;
    }
    if(allow_hosts != nullptr) { 
        delete allow_hosts;
    }
    if(allow_hosts_regexp != nullptr) { 
        delete allow_hosts_regexp;
    }
    if(filter_methods != nullptr) { 
        delete filter_methods;
    }
    if(exclude_agents_regexp != nullptr) { 
        delete exclude_agents_regexp;
    }
}

OAIOrgApacheSlingSecurityImplReferrerFilterProperties*
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&allow_empty, pJson["allow.empty"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&allow_hosts, pJson["allow.hosts"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&allow_hosts_regexp, pJson["allow.hosts.regexp"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&filter_methods, pJson["filter.methods"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&exclude_agents_regexp, pJson["exclude.agents.regexp"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::asJsonObject() {
    QJsonObject obj;
    if((allow_empty != nullptr) && (allow_empty->isSet())){
        toJsonValue(QString("allow.empty"), allow_empty, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((allow_hosts != nullptr) && (allow_hosts->isSet())){
        toJsonValue(QString("allow.hosts"), allow_hosts, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((allow_hosts_regexp != nullptr) && (allow_hosts_regexp->isSet())){
        toJsonValue(QString("allow.hosts.regexp"), allow_hosts_regexp, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((filter_methods != nullptr) && (filter_methods->isSet())){
        toJsonValue(QString("filter.methods"), filter_methods, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((exclude_agents_regexp != nullptr) && (exclude_agents_regexp->isSet())){
        toJsonValue(QString("exclude.agents.regexp"), exclude_agents_regexp, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::getAllowEmpty() {
    return allow_empty;
}
void
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::setAllowEmpty(OAIConfigNodePropertyBoolean* allow_empty) {
    this->allow_empty = allow_empty;
    this->m_allow_empty_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::getAllowHosts() {
    return allow_hosts;
}
void
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::setAllowHosts(OAIConfigNodePropertyArray* allow_hosts) {
    this->allow_hosts = allow_hosts;
    this->m_allow_hosts_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::getAllowHostsRegexp() {
    return allow_hosts_regexp;
}
void
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::setAllowHostsRegexp(OAIConfigNodePropertyArray* allow_hosts_regexp) {
    this->allow_hosts_regexp = allow_hosts_regexp;
    this->m_allow_hosts_regexp_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::getFilterMethods() {
    return filter_methods;
}
void
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::setFilterMethods(OAIConfigNodePropertyArray* filter_methods) {
    this->filter_methods = filter_methods;
    this->m_filter_methods_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::getExcludeAgentsRegexp() {
    return exclude_agents_regexp;
}
void
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::setExcludeAgentsRegexp(OAIConfigNodePropertyArray* exclude_agents_regexp) {
    this->exclude_agents_regexp = exclude_agents_regexp;
    this->m_exclude_agents_regexp_isSet = true;
}


bool
OAIOrgApacheSlingSecurityImplReferrerFilterProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(allow_empty != nullptr && allow_empty->isSet()){ isObjectUpdated = true; break;}
        if(allow_hosts != nullptr && allow_hosts->isSet()){ isObjectUpdated = true; break;}
        if(allow_hosts_regexp != nullptr && allow_hosts_regexp->isSet()){ isObjectUpdated = true; break;}
        if(filter_methods != nullptr && filter_methods->isSet()){ isObjectUpdated = true; break;}
        if(exclude_agents_regexp != nullptr && exclude_agents_regexp->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

