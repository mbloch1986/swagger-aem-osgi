/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmFoundationFormsImplFormsHandlingServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::OAIComDayCqWcmFoundationFormsImplFormsHandlingServletProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::OAIComDayCqWcmFoundationFormsImplFormsHandlingServletProperties() {
    init();
}

OAIComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::~OAIComDayCqWcmFoundationFormsImplFormsHandlingServletProperties() {
    this->cleanup();
}

void
OAIComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::init() {
    name_whitelist = new OAIConfigNodePropertyString();
    m_name_whitelist_isSet = false;
    allow_expressions = new OAIConfigNodePropertyBoolean();
    m_allow_expressions_isSet = false;
}

void
OAIComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::cleanup() {
    if(name_whitelist != nullptr) { 
        delete name_whitelist;
    }
    if(allow_expressions != nullptr) { 
        delete allow_expressions;
    }
}

OAIComDayCqWcmFoundationFormsImplFormsHandlingServletProperties*
OAIComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&name_whitelist, pJson["name.whitelist"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&allow_expressions, pJson["allow.expressions"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::asJsonObject() {
    QJsonObject obj;
    if((name_whitelist != nullptr) && (name_whitelist->isSet())){
        toJsonValue(QString("name.whitelist"), name_whitelist, obj, QString("OAIConfigNodePropertyString"));
    }
    if((allow_expressions != nullptr) && (allow_expressions->isSet())){
        toJsonValue(QString("allow.expressions"), allow_expressions, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::getNameWhitelist() {
    return name_whitelist;
}
void
OAIComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::setNameWhitelist(OAIConfigNodePropertyString* name_whitelist) {
    this->name_whitelist = name_whitelist;
    this->m_name_whitelist_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::getAllowExpressions() {
    return allow_expressions;
}
void
OAIComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::setAllowExpressions(OAIConfigNodePropertyBoolean* allow_expressions) {
    this->allow_expressions = allow_expressions;
    this->m_allow_expressions_isSet = true;
}


bool
OAIComDayCqWcmFoundationFormsImplFormsHandlingServletProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(name_whitelist != nullptr && name_whitelist->isSet()){ isObjectUpdated = true; break;}
        if(allow_expressions != nullptr && allow_expressions->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

