/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties.h
 *
 * 
 */

#ifndef AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties_H_
#define AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties
    : public ModelBase
{
public:
    AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties();
    virtual ~AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getShowPlaceholder() const;
    void setShowPlaceholder(ConfigNodePropertyBoolean const& value);
    bool showPlaceholderIsSet() const;
    void unsetShowPlaceholder();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMaximumCacheEntries() const;
    void setMaximumCacheEntries(ConfigNodePropertyInteger const& value);
    bool maximumCacheEntriesIsSet() const;
    void unsetMaximumCacheEntries();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyDropDown getAfScriptingCompatversion() const;
    void setAfScriptingCompatversion(ConfigNodePropertyDropDown const& value);
    bool afScriptingCompatversionIsSet() const;
    void unsetAf_scripting_compatversion();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getMakeFileNameUnique() const;
    void setMakeFileNameUnique(ConfigNodePropertyBoolean const& value);
    bool makeFileNameUniqueIsSet() const;
    void unsetMakeFileNameUnique();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getGeneratingCompliantData() const;
    void setGeneratingCompliantData(ConfigNodePropertyBoolean const& value);
    bool generatingCompliantDataIsSet() const;
    void unsetGeneratingCompliantData();

protected:
    ConfigNodePropertyBoolean m_ShowPlaceholder;
    bool m_ShowPlaceholderIsSet;
    ConfigNodePropertyInteger m_MaximumCacheEntries;
    bool m_MaximumCacheEntriesIsSet;
    ConfigNodePropertyDropDown m_Af_scripting_compatversion;
    bool m_Af_scripting_compatversionIsSet;
    ConfigNodePropertyBoolean m_MakeFileNameUnique;
    bool m_MakeFileNameUniqueIsSet;
    ConfigNodePropertyBoolean m_GeneratingCompliantData;
    bool m_GeneratingCompliantDataIsSet;
};

}
}
}
}

#endif /* AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties_H_ */
