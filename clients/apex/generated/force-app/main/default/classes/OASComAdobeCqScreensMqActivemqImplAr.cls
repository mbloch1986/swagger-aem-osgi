/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASComAdobeCqScreensMqActivemqImplAr
 */
public class OASComAdobeCqScreensMqActivemqImplAr implements OAS.MappedProperties {
    /**
     * Get serviceRanking
     * @return serviceRanking
     */
    public OASConfigNodePropertyInteger serviceRanking { get; set; }

    /**
     * Get globalSize
     * @return globalSize
     */
    public OASConfigNodePropertyInteger globalSize { get; set; }

    /**
     * Get maxDiskUsage
     * @return maxDiskUsage
     */
    public OASConfigNodePropertyInteger maxDiskUsage { get; set; }

    /**
     * Get persistenceEnabled
     * @return persistenceEnabled
     */
    public OASConfigNodePropertyBoolean persistenceEnabled { get; set; }

    /**
     * Get threadPoolMaxSize
     * @return threadPoolMaxSize
     */
    public OASConfigNodePropertyInteger threadPoolMaxSize { get; set; }

    /**
     * Get scheduledThreadPoolMaxSize
     * @return scheduledThreadPoolMaxSize
     */
    public OASConfigNodePropertyInteger scheduledThreadPoolMaxSize { get; set; }

    /**
     * Get gracefulShutdownTimeout
     * @return gracefulShutdownTimeout
     */
    public OASConfigNodePropertyInteger gracefulShutdownTimeout { get; set; }

    /**
     * Get queues
     * @return queues
     */
    public OASConfigNodePropertyArray queues { get; set; }

    /**
     * Get topics
     * @return topics
     */
    public OASConfigNodePropertyArray topics { get; set; }

    /**
     * Get addressesMaxDeliveryAttempts
     * @return addressesMaxDeliveryAttempts
     */
    public OASConfigNodePropertyInteger addressesMaxDeliveryAttempts { get; set; }

    /**
     * Get addressesExpiryDelay
     * @return addressesExpiryDelay
     */
    public OASConfigNodePropertyInteger addressesExpiryDelay { get; set; }

    /**
     * Get addressesAddressFullMessagePolicy
     * @return addressesAddressFullMessagePolicy
     */
    public OASConfigNodePropertyDropDown addressesAddressFullMessagePolicy { get; set; }

    /**
     * Get addressesMaxSizeBytes
     * @return addressesMaxSizeBytes
     */
    public OASConfigNodePropertyInteger addressesMaxSizeBytes { get; set; }

    /**
     * Get addressesPageSizeBytes
     * @return addressesPageSizeBytes
     */
    public OASConfigNodePropertyInteger addressesPageSizeBytes { get; set; }

    /**
     * Get addressesPageCacheMaxSize
     * @return addressesPageCacheMaxSize
     */
    public OASConfigNodePropertyInteger addressesPageCacheMaxSize { get; set; }

    /**
     * Get clusterUser
     * @return clusterUser
     */
    public OASConfigNodePropertyString clusterUser { get; set; }

    /**
     * Get clusterPassword
     * @return clusterPassword
     */
    public OASConfigNodePropertyString clusterPassword { get; set; }

    /**
     * Get clusterCallTimeout
     * @return clusterCallTimeout
     */
    public OASConfigNodePropertyInteger clusterCallTimeout { get; set; }

    /**
     * Get clusterCallFailoverTimeout
     * @return clusterCallFailoverTimeout
     */
    public OASConfigNodePropertyInteger clusterCallFailoverTimeout { get; set; }

    /**
     * Get clusterClientFailureCheckPeriod
     * @return clusterClientFailureCheckPeriod
     */
    public OASConfigNodePropertyInteger clusterClientFailureCheckPeriod { get; set; }

    /**
     * Get clusterNotificationAttempts
     * @return clusterNotificationAttempts
     */
    public OASConfigNodePropertyInteger clusterNotificationAttempts { get; set; }

    /**
     * Get clusterNotificationInterval
     * @return clusterNotificationInterval
     */
    public OASConfigNodePropertyInteger clusterNotificationInterval { get; set; }

    /**
     * Get idCacheSize
     * @return idCacheSize
     */
    public OASConfigNodePropertyInteger idCacheSize { get; set; }

    /**
     * Get clusterConfirmationWindowSize
     * @return clusterConfirmationWindowSize
     */
    public OASConfigNodePropertyInteger clusterConfirmationWindowSize { get; set; }

    /**
     * Get clusterConnectionTtl
     * @return clusterConnectionTtl
     */
    public OASConfigNodePropertyInteger clusterConnectionTtl { get; set; }

    /**
     * Get clusterDuplicateDetection
     * @return clusterDuplicateDetection
     */
    public OASConfigNodePropertyBoolean clusterDuplicateDetection { get; set; }

    /**
     * Get clusterInitialConnectAttempts
     * @return clusterInitialConnectAttempts
     */
    public OASConfigNodePropertyInteger clusterInitialConnectAttempts { get; set; }

    /**
     * Get clusterMaxRetryInterval
     * @return clusterMaxRetryInterval
     */
    public OASConfigNodePropertyInteger clusterMaxRetryInterval { get; set; }

    /**
     * Get clusterMinLargeMessageSize
     * @return clusterMinLargeMessageSize
     */
    public OASConfigNodePropertyInteger clusterMinLargeMessageSize { get; set; }

    /**
     * Get clusterProducerWindowSize
     * @return clusterProducerWindowSize
     */
    public OASConfigNodePropertyInteger clusterProducerWindowSize { get; set; }

    /**
     * Get clusterReconnectAttempts
     * @return clusterReconnectAttempts
     */
    public OASConfigNodePropertyInteger clusterReconnectAttempts { get; set; }

    /**
     * Get clusterRetryInterval
     * @return clusterRetryInterval
     */
    public OASConfigNodePropertyInteger clusterRetryInterval { get; set; }

    /**
     * Get clusterRetryIntervalMultiplier
     * @return clusterRetryIntervalMultiplier
     */
    public OASConfigNodePropertyFloat clusterRetryIntervalMultiplier { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'service.ranking' => 'serviceRanking',
        'global.size' => 'globalSize',
        'max.disk.usage' => 'maxDiskUsage',
        'persistence.enabled' => 'persistenceEnabled',
        'thread.pool.max.size' => 'threadPoolMaxSize',
        'scheduled.thread.pool.max.size' => 'scheduledThreadPoolMaxSize',
        'graceful.shutdown.timeout' => 'gracefulShutdownTimeout',
        'addresses.max.delivery.attempts' => 'addressesMaxDeliveryAttempts',
        'addresses.expiry.delay' => 'addressesExpiryDelay',
        'addresses.address.full.message.policy' => 'addressesAddressFullMessagePolicy',
        'addresses.max.size.bytes' => 'addressesMaxSizeBytes',
        'addresses.page.size.bytes' => 'addressesPageSizeBytes',
        'addresses.page.cache.max.size' => 'addressesPageCacheMaxSize',
        'cluster.user' => 'clusterUser',
        'cluster.password' => 'clusterPassword',
        'cluster.call.timeout' => 'clusterCallTimeout',
        'cluster.call.failover.timeout' => 'clusterCallFailoverTimeout',
        'cluster.client.failure.check.period' => 'clusterClientFailureCheckPeriod',
        'cluster.notification.attempts' => 'clusterNotificationAttempts',
        'cluster.notification.interval' => 'clusterNotificationInterval',
        'id.cache.size' => 'idCacheSize',
        'cluster.confirmation.window.size' => 'clusterConfirmationWindowSize',
        'cluster.connection.ttl' => 'clusterConnectionTtl',
        'cluster.duplicate.detection' => 'clusterDuplicateDetection',
        'cluster.initial.connect.attempts' => 'clusterInitialConnectAttempts',
        'cluster.max.retry.interval' => 'clusterMaxRetryInterval',
        'cluster.min.large.message.size' => 'clusterMinLargeMessageSize',
        'cluster.producer.window.size' => 'clusterProducerWindowSize',
        'cluster.reconnect.attempts' => 'clusterReconnectAttempts',
        'cluster.retry.interval' => 'clusterRetryInterval',
        'cluster.retry.interval.multiplier' => 'clusterRetryIntervalMultiplier'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASComAdobeCqScreensMqActivemqImplAr getExample() {
        OASComAdobeCqScreensMqActivemqImplAr comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties = new OASComAdobeCqScreensMqActivemqImplAr();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.serviceRanking = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.globalSize = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.maxDiskUsage = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.persistenceEnabled = OASConfigNodePropertyBoolean.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.threadPoolMaxSize = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.scheduledThreadPoolMaxSize = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.gracefulShutdownTimeout = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.queues = OASConfigNodePropertyArray.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.topics = OASConfigNodePropertyArray.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.addressesMaxDeliveryAttempts = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.addressesExpiryDelay = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.addressesAddressFullMessagePolicy = OASConfigNodePropertyDropDown.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.addressesMaxSizeBytes = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.addressesPageSizeBytes = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.addressesPageCacheMaxSize = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterUser = OASConfigNodePropertyString.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterPassword = OASConfigNodePropertyString.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterCallTimeout = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterCallFailoverTimeout = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterClientFailureCheckPeriod = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterNotificationAttempts = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterNotificationInterval = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.idCacheSize = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterConfirmationWindowSize = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterConnectionTtl = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterDuplicateDetection = OASConfigNodePropertyBoolean.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterInitialConnectAttempts = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterMaxRetryInterval = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterMinLargeMessageSize = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterProducerWindowSize = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterReconnectAttempts = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterRetryInterval = OASConfigNodePropertyInteger.getExample();
          comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterRetryIntervalMultiplier = OASConfigNodePropertyFloat.getExample();
        return comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASComAdobeCqScreensMqActivemqImplAr) {           
            OASComAdobeCqScreensMqActivemqImplAr comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties = (OASComAdobeCqScreensMqActivemqImplAr) obj;
            return this.serviceRanking == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.serviceRanking
                && this.globalSize == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.globalSize
                && this.maxDiskUsage == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.maxDiskUsage
                && this.persistenceEnabled == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.persistenceEnabled
                && this.threadPoolMaxSize == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.threadPoolMaxSize
                && this.scheduledThreadPoolMaxSize == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.scheduledThreadPoolMaxSize
                && this.gracefulShutdownTimeout == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.gracefulShutdownTimeout
                && this.queues == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.queues
                && this.topics == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.topics
                && this.addressesMaxDeliveryAttempts == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.addressesMaxDeliveryAttempts
                && this.addressesExpiryDelay == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.addressesExpiryDelay
                && this.addressesAddressFullMessagePolicy == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.addressesAddressFullMessagePolicy
                && this.addressesMaxSizeBytes == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.addressesMaxSizeBytes
                && this.addressesPageSizeBytes == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.addressesPageSizeBytes
                && this.addressesPageCacheMaxSize == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.addressesPageCacheMaxSize
                && this.clusterUser == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterUser
                && this.clusterPassword == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterPassword
                && this.clusterCallTimeout == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterCallTimeout
                && this.clusterCallFailoverTimeout == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterCallFailoverTimeout
                && this.clusterClientFailureCheckPeriod == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterClientFailureCheckPeriod
                && this.clusterNotificationAttempts == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterNotificationAttempts
                && this.clusterNotificationInterval == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterNotificationInterval
                && this.idCacheSize == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.idCacheSize
                && this.clusterConfirmationWindowSize == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterConfirmationWindowSize
                && this.clusterConnectionTtl == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterConnectionTtl
                && this.clusterDuplicateDetection == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterDuplicateDetection
                && this.clusterInitialConnectAttempts == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterInitialConnectAttempts
                && this.clusterMaxRetryInterval == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterMaxRetryInterval
                && this.clusterMinLargeMessageSize == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterMinLargeMessageSize
                && this.clusterProducerWindowSize == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterProducerWindowSize
                && this.clusterReconnectAttempts == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterReconnectAttempts
                && this.clusterRetryInterval == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterRetryInterval
                && this.clusterRetryIntervalMultiplier == comAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.clusterRetryIntervalMultiplier;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (serviceRanking == null ? 0 : System.hashCode(serviceRanking));
        hashCode = (17 * hashCode) + (globalSize == null ? 0 : System.hashCode(globalSize));
        hashCode = (17 * hashCode) + (maxDiskUsage == null ? 0 : System.hashCode(maxDiskUsage));
        hashCode = (17 * hashCode) + (persistenceEnabled == null ? 0 : System.hashCode(persistenceEnabled));
        hashCode = (17 * hashCode) + (threadPoolMaxSize == null ? 0 : System.hashCode(threadPoolMaxSize));
        hashCode = (17 * hashCode) + (scheduledThreadPoolMaxSize == null ? 0 : System.hashCode(scheduledThreadPoolMaxSize));
        hashCode = (17 * hashCode) + (gracefulShutdownTimeout == null ? 0 : System.hashCode(gracefulShutdownTimeout));
        hashCode = (17 * hashCode) + (queues == null ? 0 : System.hashCode(queues));
        hashCode = (17 * hashCode) + (topics == null ? 0 : System.hashCode(topics));
        hashCode = (17 * hashCode) + (addressesMaxDeliveryAttempts == null ? 0 : System.hashCode(addressesMaxDeliveryAttempts));
        hashCode = (17 * hashCode) + (addressesExpiryDelay == null ? 0 : System.hashCode(addressesExpiryDelay));
        hashCode = (17 * hashCode) + (addressesAddressFullMessagePolicy == null ? 0 : System.hashCode(addressesAddressFullMessagePolicy));
        hashCode = (17 * hashCode) + (addressesMaxSizeBytes == null ? 0 : System.hashCode(addressesMaxSizeBytes));
        hashCode = (17 * hashCode) + (addressesPageSizeBytes == null ? 0 : System.hashCode(addressesPageSizeBytes));
        hashCode = (17 * hashCode) + (addressesPageCacheMaxSize == null ? 0 : System.hashCode(addressesPageCacheMaxSize));
        hashCode = (17 * hashCode) + (clusterUser == null ? 0 : System.hashCode(clusterUser));
        hashCode = (17 * hashCode) + (clusterPassword == null ? 0 : System.hashCode(clusterPassword));
        hashCode = (17 * hashCode) + (clusterCallTimeout == null ? 0 : System.hashCode(clusterCallTimeout));
        hashCode = (17 * hashCode) + (clusterCallFailoverTimeout == null ? 0 : System.hashCode(clusterCallFailoverTimeout));
        hashCode = (17 * hashCode) + (clusterClientFailureCheckPeriod == null ? 0 : System.hashCode(clusterClientFailureCheckPeriod));
        hashCode = (17 * hashCode) + (clusterNotificationAttempts == null ? 0 : System.hashCode(clusterNotificationAttempts));
        hashCode = (17 * hashCode) + (clusterNotificationInterval == null ? 0 : System.hashCode(clusterNotificationInterval));
        hashCode = (17 * hashCode) + (idCacheSize == null ? 0 : System.hashCode(idCacheSize));
        hashCode = (17 * hashCode) + (clusterConfirmationWindowSize == null ? 0 : System.hashCode(clusterConfirmationWindowSize));
        hashCode = (17 * hashCode) + (clusterConnectionTtl == null ? 0 : System.hashCode(clusterConnectionTtl));
        hashCode = (17 * hashCode) + (clusterDuplicateDetection == null ? 0 : System.hashCode(clusterDuplicateDetection));
        hashCode = (17 * hashCode) + (clusterInitialConnectAttempts == null ? 0 : System.hashCode(clusterInitialConnectAttempts));
        hashCode = (17 * hashCode) + (clusterMaxRetryInterval == null ? 0 : System.hashCode(clusterMaxRetryInterval));
        hashCode = (17 * hashCode) + (clusterMinLargeMessageSize == null ? 0 : System.hashCode(clusterMinLargeMessageSize));
        hashCode = (17 * hashCode) + (clusterProducerWindowSize == null ? 0 : System.hashCode(clusterProducerWindowSize));
        hashCode = (17 * hashCode) + (clusterReconnectAttempts == null ? 0 : System.hashCode(clusterReconnectAttempts));
        hashCode = (17 * hashCode) + (clusterRetryInterval == null ? 0 : System.hashCode(clusterRetryInterval));
        hashCode = (17 * hashCode) + (clusterRetryIntervalMultiplier == null ? 0 : System.hashCode(clusterRetryIntervalMultiplier));
        return hashCode;
    }
}

