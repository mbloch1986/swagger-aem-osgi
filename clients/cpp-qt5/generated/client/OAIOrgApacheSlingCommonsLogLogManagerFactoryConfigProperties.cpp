/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties() {
    init();
}

OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::~OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::init() {
    org_apache_sling_commons_log_level = new OAIConfigNodePropertyDropDown();
    m_org_apache_sling_commons_log_level_isSet = false;
    org_apache_sling_commons_log_file = new OAIConfigNodePropertyString();
    m_org_apache_sling_commons_log_file_isSet = false;
    org_apache_sling_commons_log_pattern = new OAIConfigNodePropertyString();
    m_org_apache_sling_commons_log_pattern_isSet = false;
    org_apache_sling_commons_log_names = new OAIConfigNodePropertyArray();
    m_org_apache_sling_commons_log_names_isSet = false;
    org_apache_sling_commons_log_additiv = new OAIConfigNodePropertyBoolean();
    m_org_apache_sling_commons_log_additiv_isSet = false;
}

void
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::cleanup() {
    if(org_apache_sling_commons_log_level != nullptr) { 
        delete org_apache_sling_commons_log_level;
    }
    if(org_apache_sling_commons_log_file != nullptr) { 
        delete org_apache_sling_commons_log_file;
    }
    if(org_apache_sling_commons_log_pattern != nullptr) { 
        delete org_apache_sling_commons_log_pattern;
    }
    if(org_apache_sling_commons_log_names != nullptr) { 
        delete org_apache_sling_commons_log_names;
    }
    if(org_apache_sling_commons_log_additiv != nullptr) { 
        delete org_apache_sling_commons_log_additiv;
    }
}

OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties*
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&org_apache_sling_commons_log_level, pJson["org.apache.sling.commons.log.level"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&org_apache_sling_commons_log_file, pJson["org.apache.sling.commons.log.file"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&org_apache_sling_commons_log_pattern, pJson["org.apache.sling.commons.log.pattern"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&org_apache_sling_commons_log_names, pJson["org.apache.sling.commons.log.names"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&org_apache_sling_commons_log_additiv, pJson["org.apache.sling.commons.log.additiv"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::asJsonObject() {
    QJsonObject obj;
    if((org_apache_sling_commons_log_level != nullptr) && (org_apache_sling_commons_log_level->isSet())){
        toJsonValue(QString("org.apache.sling.commons.log.level"), org_apache_sling_commons_log_level, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((org_apache_sling_commons_log_file != nullptr) && (org_apache_sling_commons_log_file->isSet())){
        toJsonValue(QString("org.apache.sling.commons.log.file"), org_apache_sling_commons_log_file, obj, QString("OAIConfigNodePropertyString"));
    }
    if((org_apache_sling_commons_log_pattern != nullptr) && (org_apache_sling_commons_log_pattern->isSet())){
        toJsonValue(QString("org.apache.sling.commons.log.pattern"), org_apache_sling_commons_log_pattern, obj, QString("OAIConfigNodePropertyString"));
    }
    if((org_apache_sling_commons_log_names != nullptr) && (org_apache_sling_commons_log_names->isSet())){
        toJsonValue(QString("org.apache.sling.commons.log.names"), org_apache_sling_commons_log_names, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((org_apache_sling_commons_log_additiv != nullptr) && (org_apache_sling_commons_log_additiv->isSet())){
        toJsonValue(QString("org.apache.sling.commons.log.additiv"), org_apache_sling_commons_log_additiv, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogLevel() {
    return org_apache_sling_commons_log_level;
}
void
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogLevel(OAIConfigNodePropertyDropDown* org_apache_sling_commons_log_level) {
    this->org_apache_sling_commons_log_level = org_apache_sling_commons_log_level;
    this->m_org_apache_sling_commons_log_level_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogFile() {
    return org_apache_sling_commons_log_file;
}
void
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogFile(OAIConfigNodePropertyString* org_apache_sling_commons_log_file) {
    this->org_apache_sling_commons_log_file = org_apache_sling_commons_log_file;
    this->m_org_apache_sling_commons_log_file_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogPattern() {
    return org_apache_sling_commons_log_pattern;
}
void
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogPattern(OAIConfigNodePropertyString* org_apache_sling_commons_log_pattern) {
    this->org_apache_sling_commons_log_pattern = org_apache_sling_commons_log_pattern;
    this->m_org_apache_sling_commons_log_pattern_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogNames() {
    return org_apache_sling_commons_log_names;
}
void
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogNames(OAIConfigNodePropertyArray* org_apache_sling_commons_log_names) {
    this->org_apache_sling_commons_log_names = org_apache_sling_commons_log_names;
    this->m_org_apache_sling_commons_log_names_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::getOrgApacheSlingCommonsLogAdditiv() {
    return org_apache_sling_commons_log_additiv;
}
void
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::setOrgApacheSlingCommonsLogAdditiv(OAIConfigNodePropertyBoolean* org_apache_sling_commons_log_additiv) {
    this->org_apache_sling_commons_log_additiv = org_apache_sling_commons_log_additiv;
    this->m_org_apache_sling_commons_log_additiv_isSet = true;
}


bool
OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(org_apache_sling_commons_log_level != nullptr && org_apache_sling_commons_log_level->isSet()){ isObjectUpdated = true; break;}
        if(org_apache_sling_commons_log_file != nullptr && org_apache_sling_commons_log_file->isSet()){ isObjectUpdated = true; break;}
        if(org_apache_sling_commons_log_pattern != nullptr && org_apache_sling_commons_log_pattern->isSet()){ isObjectUpdated = true; break;}
        if(org_apache_sling_commons_log_names != nullptr && org_apache_sling_commons_log_names->isSet()){ isObjectUpdated = true; break;}
        if(org_apache_sling_commons_log_additiv != nullptr && org_apache_sling_commons_log_additiv->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

