/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.ConfigNodePropertyInteger;
import org.openapitools.client.model.ConfigNodePropertyString;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties {
  
  @SerializedName("solr.http.url")
  private ConfigNodePropertyString solrHttpUrl = null;
  @SerializedName("solr.zk.host")
  private ConfigNodePropertyString solrZkHost = null;
  @SerializedName("solr.collection")
  private ConfigNodePropertyString solrCollection = null;
  @SerializedName("solr.socket.timeout")
  private ConfigNodePropertyInteger solrSocketTimeout = null;
  @SerializedName("solr.connection.timeout")
  private ConfigNodePropertyInteger solrConnectionTimeout = null;
  @SerializedName("solr.shards.no")
  private ConfigNodePropertyInteger solrShardsNo = null;
  @SerializedName("solr.replication.factor")
  private ConfigNodePropertyInteger solrReplicationFactor = null;
  @SerializedName("solr.conf.dir")
  private ConfigNodePropertyString solrConfDir = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getSolrHttpUrl() {
    return solrHttpUrl;
  }
  public void setSolrHttpUrl(ConfigNodePropertyString solrHttpUrl) {
    this.solrHttpUrl = solrHttpUrl;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getSolrZkHost() {
    return solrZkHost;
  }
  public void setSolrZkHost(ConfigNodePropertyString solrZkHost) {
    this.solrZkHost = solrZkHost;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getSolrCollection() {
    return solrCollection;
  }
  public void setSolrCollection(ConfigNodePropertyString solrCollection) {
    this.solrCollection = solrCollection;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getSolrSocketTimeout() {
    return solrSocketTimeout;
  }
  public void setSolrSocketTimeout(ConfigNodePropertyInteger solrSocketTimeout) {
    this.solrSocketTimeout = solrSocketTimeout;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getSolrConnectionTimeout() {
    return solrConnectionTimeout;
  }
  public void setSolrConnectionTimeout(ConfigNodePropertyInteger solrConnectionTimeout) {
    this.solrConnectionTimeout = solrConnectionTimeout;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getSolrShardsNo() {
    return solrShardsNo;
  }
  public void setSolrShardsNo(ConfigNodePropertyInteger solrShardsNo) {
    this.solrShardsNo = solrShardsNo;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getSolrReplicationFactor() {
    return solrReplicationFactor;
  }
  public void setSolrReplicationFactor(ConfigNodePropertyInteger solrReplicationFactor) {
    this.solrReplicationFactor = solrReplicationFactor;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getSolrConfDir() {
    return solrConfDir;
  }
  public void setSolrConfDir(ConfigNodePropertyString solrConfDir) {
    this.solrConfDir = solrConfDir;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties = (OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties) o;
    return (this.solrHttpUrl == null ? orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.solrHttpUrl == null : this.solrHttpUrl.equals(orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.solrHttpUrl)) &&
        (this.solrZkHost == null ? orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.solrZkHost == null : this.solrZkHost.equals(orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.solrZkHost)) &&
        (this.solrCollection == null ? orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.solrCollection == null : this.solrCollection.equals(orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.solrCollection)) &&
        (this.solrSocketTimeout == null ? orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.solrSocketTimeout == null : this.solrSocketTimeout.equals(orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.solrSocketTimeout)) &&
        (this.solrConnectionTimeout == null ? orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.solrConnectionTimeout == null : this.solrConnectionTimeout.equals(orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.solrConnectionTimeout)) &&
        (this.solrShardsNo == null ? orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.solrShardsNo == null : this.solrShardsNo.equals(orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.solrShardsNo)) &&
        (this.solrReplicationFactor == null ? orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.solrReplicationFactor == null : this.solrReplicationFactor.equals(orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.solrReplicationFactor)) &&
        (this.solrConfDir == null ? orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.solrConfDir == null : this.solrConfDir.equals(orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.solrConfDir));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.solrHttpUrl == null ? 0: this.solrHttpUrl.hashCode());
    result = 31 * result + (this.solrZkHost == null ? 0: this.solrZkHost.hashCode());
    result = 31 * result + (this.solrCollection == null ? 0: this.solrCollection.hashCode());
    result = 31 * result + (this.solrSocketTimeout == null ? 0: this.solrSocketTimeout.hashCode());
    result = 31 * result + (this.solrConnectionTimeout == null ? 0: this.solrConnectionTimeout.hashCode());
    result = 31 * result + (this.solrShardsNo == null ? 0: this.solrShardsNo.hashCode());
    result = 31 * result + (this.solrReplicationFactor == null ? 0: this.solrReplicationFactor.hashCode());
    result = 31 * result + (this.solrConfDir == null ? 0: this.solrConfDir.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties {\n");
    
    sb.append("  solrHttpUrl: ").append(solrHttpUrl).append("\n");
    sb.append("  solrZkHost: ").append(solrZkHost).append("\n");
    sb.append("  solrCollection: ").append(solrCollection).append("\n");
    sb.append("  solrSocketTimeout: ").append(solrSocketTimeout).append("\n");
    sb.append("  solrConnectionTimeout: ").append(solrConnectionTimeout).append("\n");
    sb.append("  solrShardsNo: ").append(solrShardsNo).append("\n");
    sb.append("  solrReplicationFactor: ").append(solrReplicationFactor).append("\n");
    sb.append("  solrConfDir: ").append(solrConfDir).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
