/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties : IEquatable<OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties>
    { 
        /// <summary>
        /// Gets or Sets ResourceResolverSearchpath
        /// </summary>
        [DataMember(Name="resource.resolver.searchpath")]
        public ConfigNodePropertyArray ResourceResolverSearchpath { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverManglenamespaces
        /// </summary>
        [DataMember(Name="resource.resolver.manglenamespaces")]
        public ConfigNodePropertyBoolean ResourceResolverManglenamespaces { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverAllowDirect
        /// </summary>
        [DataMember(Name="resource.resolver.allowDirect")]
        public ConfigNodePropertyBoolean ResourceResolverAllowDirect { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverRequiredProviders
        /// </summary>
        [DataMember(Name="resource.resolver.required.providers")]
        public ConfigNodePropertyArray ResourceResolverRequiredProviders { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverRequiredProvidernames
        /// </summary>
        [DataMember(Name="resource.resolver.required.providernames")]
        public ConfigNodePropertyArray ResourceResolverRequiredProvidernames { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverVirtual
        /// </summary>
        [DataMember(Name="resource.resolver.virtual")]
        public ConfigNodePropertyArray ResourceResolverVirtual { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverMapping
        /// </summary>
        [DataMember(Name="resource.resolver.mapping")]
        public ConfigNodePropertyArray ResourceResolverMapping { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverMapLocation
        /// </summary>
        [DataMember(Name="resource.resolver.map.location")]
        public ConfigNodePropertyString ResourceResolverMapLocation { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverMapObservation
        /// </summary>
        [DataMember(Name="resource.resolver.map.observation")]
        public ConfigNodePropertyArray ResourceResolverMapObservation { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverDefaultVanityRedirectStatus
        /// </summary>
        [DataMember(Name="resource.resolver.default.vanity.redirect.status")]
        public ConfigNodePropertyInteger ResourceResolverDefaultVanityRedirectStatus { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverEnableVanitypath
        /// </summary>
        [DataMember(Name="resource.resolver.enable.vanitypath")]
        public ConfigNodePropertyBoolean ResourceResolverEnableVanitypath { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverVanitypathMaxEntries
        /// </summary>
        [DataMember(Name="resource.resolver.vanitypath.maxEntries")]
        public ConfigNodePropertyInteger ResourceResolverVanitypathMaxEntries { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverVanitypathMaxEntriesStartup
        /// </summary>
        [DataMember(Name="resource.resolver.vanitypath.maxEntries.startup")]
        public ConfigNodePropertyBoolean ResourceResolverVanitypathMaxEntriesStartup { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverVanitypathBloomfilterMaxBytes
        /// </summary>
        [DataMember(Name="resource.resolver.vanitypath.bloomfilter.maxBytes")]
        public ConfigNodePropertyInteger ResourceResolverVanitypathBloomfilterMaxBytes { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverOptimizeAliasResolution
        /// </summary>
        [DataMember(Name="resource.resolver.optimize.alias.resolution")]
        public ConfigNodePropertyBoolean ResourceResolverOptimizeAliasResolution { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverVanitypathWhitelist
        /// </summary>
        [DataMember(Name="resource.resolver.vanitypath.whitelist")]
        public ConfigNodePropertyArray ResourceResolverVanitypathWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverVanitypathBlacklist
        /// </summary>
        [DataMember(Name="resource.resolver.vanitypath.blacklist")]
        public ConfigNodePropertyArray ResourceResolverVanitypathBlacklist { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverVanityPrecedence
        /// </summary>
        [DataMember(Name="resource.resolver.vanity.precedence")]
        public ConfigNodePropertyBoolean ResourceResolverVanityPrecedence { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverProviderhandlingParanoid
        /// </summary>
        [DataMember(Name="resource.resolver.providerhandling.paranoid")]
        public ConfigNodePropertyBoolean ResourceResolverProviderhandlingParanoid { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverLogClosing
        /// </summary>
        [DataMember(Name="resource.resolver.log.closing")]
        public ConfigNodePropertyBoolean ResourceResolverLogClosing { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverLogUnclosed
        /// </summary>
        [DataMember(Name="resource.resolver.log.unclosed")]
        public ConfigNodePropertyBoolean ResourceResolverLogUnclosed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {\n");
            sb.Append("  ResourceResolverSearchpath: ").Append(ResourceResolverSearchpath).Append("\n");
            sb.Append("  ResourceResolverManglenamespaces: ").Append(ResourceResolverManglenamespaces).Append("\n");
            sb.Append("  ResourceResolverAllowDirect: ").Append(ResourceResolverAllowDirect).Append("\n");
            sb.Append("  ResourceResolverRequiredProviders: ").Append(ResourceResolverRequiredProviders).Append("\n");
            sb.Append("  ResourceResolverRequiredProvidernames: ").Append(ResourceResolverRequiredProvidernames).Append("\n");
            sb.Append("  ResourceResolverVirtual: ").Append(ResourceResolverVirtual).Append("\n");
            sb.Append("  ResourceResolverMapping: ").Append(ResourceResolverMapping).Append("\n");
            sb.Append("  ResourceResolverMapLocation: ").Append(ResourceResolverMapLocation).Append("\n");
            sb.Append("  ResourceResolverMapObservation: ").Append(ResourceResolverMapObservation).Append("\n");
            sb.Append("  ResourceResolverDefaultVanityRedirectStatus: ").Append(ResourceResolverDefaultVanityRedirectStatus).Append("\n");
            sb.Append("  ResourceResolverEnableVanitypath: ").Append(ResourceResolverEnableVanitypath).Append("\n");
            sb.Append("  ResourceResolverVanitypathMaxEntries: ").Append(ResourceResolverVanitypathMaxEntries).Append("\n");
            sb.Append("  ResourceResolverVanitypathMaxEntriesStartup: ").Append(ResourceResolverVanitypathMaxEntriesStartup).Append("\n");
            sb.Append("  ResourceResolverVanitypathBloomfilterMaxBytes: ").Append(ResourceResolverVanitypathBloomfilterMaxBytes).Append("\n");
            sb.Append("  ResourceResolverOptimizeAliasResolution: ").Append(ResourceResolverOptimizeAliasResolution).Append("\n");
            sb.Append("  ResourceResolverVanitypathWhitelist: ").Append(ResourceResolverVanitypathWhitelist).Append("\n");
            sb.Append("  ResourceResolverVanitypathBlacklist: ").Append(ResourceResolverVanitypathBlacklist).Append("\n");
            sb.Append("  ResourceResolverVanityPrecedence: ").Append(ResourceResolverVanityPrecedence).Append("\n");
            sb.Append("  ResourceResolverProviderhandlingParanoid: ").Append(ResourceResolverProviderhandlingParanoid).Append("\n");
            sb.Append("  ResourceResolverLogClosing: ").Append(ResourceResolverLogClosing).Append("\n");
            sb.Append("  ResourceResolverLogUnclosed: ").Append(ResourceResolverLogUnclosed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ResourceResolverSearchpath == other.ResourceResolverSearchpath ||
                    ResourceResolverSearchpath != null &&
                    ResourceResolverSearchpath.Equals(other.ResourceResolverSearchpath)
                ) && 
                (
                    ResourceResolverManglenamespaces == other.ResourceResolverManglenamespaces ||
                    ResourceResolverManglenamespaces != null &&
                    ResourceResolverManglenamespaces.Equals(other.ResourceResolverManglenamespaces)
                ) && 
                (
                    ResourceResolverAllowDirect == other.ResourceResolverAllowDirect ||
                    ResourceResolverAllowDirect != null &&
                    ResourceResolverAllowDirect.Equals(other.ResourceResolverAllowDirect)
                ) && 
                (
                    ResourceResolverRequiredProviders == other.ResourceResolverRequiredProviders ||
                    ResourceResolverRequiredProviders != null &&
                    ResourceResolverRequiredProviders.Equals(other.ResourceResolverRequiredProviders)
                ) && 
                (
                    ResourceResolverRequiredProvidernames == other.ResourceResolverRequiredProvidernames ||
                    ResourceResolverRequiredProvidernames != null &&
                    ResourceResolverRequiredProvidernames.Equals(other.ResourceResolverRequiredProvidernames)
                ) && 
                (
                    ResourceResolverVirtual == other.ResourceResolverVirtual ||
                    ResourceResolverVirtual != null &&
                    ResourceResolverVirtual.Equals(other.ResourceResolverVirtual)
                ) && 
                (
                    ResourceResolverMapping == other.ResourceResolverMapping ||
                    ResourceResolverMapping != null &&
                    ResourceResolverMapping.Equals(other.ResourceResolverMapping)
                ) && 
                (
                    ResourceResolverMapLocation == other.ResourceResolverMapLocation ||
                    ResourceResolverMapLocation != null &&
                    ResourceResolverMapLocation.Equals(other.ResourceResolverMapLocation)
                ) && 
                (
                    ResourceResolverMapObservation == other.ResourceResolverMapObservation ||
                    ResourceResolverMapObservation != null &&
                    ResourceResolverMapObservation.Equals(other.ResourceResolverMapObservation)
                ) && 
                (
                    ResourceResolverDefaultVanityRedirectStatus == other.ResourceResolverDefaultVanityRedirectStatus ||
                    ResourceResolverDefaultVanityRedirectStatus != null &&
                    ResourceResolverDefaultVanityRedirectStatus.Equals(other.ResourceResolverDefaultVanityRedirectStatus)
                ) && 
                (
                    ResourceResolverEnableVanitypath == other.ResourceResolverEnableVanitypath ||
                    ResourceResolverEnableVanitypath != null &&
                    ResourceResolverEnableVanitypath.Equals(other.ResourceResolverEnableVanitypath)
                ) && 
                (
                    ResourceResolverVanitypathMaxEntries == other.ResourceResolverVanitypathMaxEntries ||
                    ResourceResolverVanitypathMaxEntries != null &&
                    ResourceResolverVanitypathMaxEntries.Equals(other.ResourceResolverVanitypathMaxEntries)
                ) && 
                (
                    ResourceResolverVanitypathMaxEntriesStartup == other.ResourceResolverVanitypathMaxEntriesStartup ||
                    ResourceResolverVanitypathMaxEntriesStartup != null &&
                    ResourceResolverVanitypathMaxEntriesStartup.Equals(other.ResourceResolverVanitypathMaxEntriesStartup)
                ) && 
                (
                    ResourceResolverVanitypathBloomfilterMaxBytes == other.ResourceResolverVanitypathBloomfilterMaxBytes ||
                    ResourceResolverVanitypathBloomfilterMaxBytes != null &&
                    ResourceResolverVanitypathBloomfilterMaxBytes.Equals(other.ResourceResolverVanitypathBloomfilterMaxBytes)
                ) && 
                (
                    ResourceResolverOptimizeAliasResolution == other.ResourceResolverOptimizeAliasResolution ||
                    ResourceResolverOptimizeAliasResolution != null &&
                    ResourceResolverOptimizeAliasResolution.Equals(other.ResourceResolverOptimizeAliasResolution)
                ) && 
                (
                    ResourceResolverVanitypathWhitelist == other.ResourceResolverVanitypathWhitelist ||
                    ResourceResolverVanitypathWhitelist != null &&
                    ResourceResolverVanitypathWhitelist.Equals(other.ResourceResolverVanitypathWhitelist)
                ) && 
                (
                    ResourceResolverVanitypathBlacklist == other.ResourceResolverVanitypathBlacklist ||
                    ResourceResolverVanitypathBlacklist != null &&
                    ResourceResolverVanitypathBlacklist.Equals(other.ResourceResolverVanitypathBlacklist)
                ) && 
                (
                    ResourceResolverVanityPrecedence == other.ResourceResolverVanityPrecedence ||
                    ResourceResolverVanityPrecedence != null &&
                    ResourceResolverVanityPrecedence.Equals(other.ResourceResolverVanityPrecedence)
                ) && 
                (
                    ResourceResolverProviderhandlingParanoid == other.ResourceResolverProviderhandlingParanoid ||
                    ResourceResolverProviderhandlingParanoid != null &&
                    ResourceResolverProviderhandlingParanoid.Equals(other.ResourceResolverProviderhandlingParanoid)
                ) && 
                (
                    ResourceResolverLogClosing == other.ResourceResolverLogClosing ||
                    ResourceResolverLogClosing != null &&
                    ResourceResolverLogClosing.Equals(other.ResourceResolverLogClosing)
                ) && 
                (
                    ResourceResolverLogUnclosed == other.ResourceResolverLogUnclosed ||
                    ResourceResolverLogUnclosed != null &&
                    ResourceResolverLogUnclosed.Equals(other.ResourceResolverLogUnclosed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ResourceResolverSearchpath != null)
                    hashCode = hashCode * 59 + ResourceResolverSearchpath.GetHashCode();
                    if (ResourceResolverManglenamespaces != null)
                    hashCode = hashCode * 59 + ResourceResolverManglenamespaces.GetHashCode();
                    if (ResourceResolverAllowDirect != null)
                    hashCode = hashCode * 59 + ResourceResolverAllowDirect.GetHashCode();
                    if (ResourceResolverRequiredProviders != null)
                    hashCode = hashCode * 59 + ResourceResolverRequiredProviders.GetHashCode();
                    if (ResourceResolverRequiredProvidernames != null)
                    hashCode = hashCode * 59 + ResourceResolverRequiredProvidernames.GetHashCode();
                    if (ResourceResolverVirtual != null)
                    hashCode = hashCode * 59 + ResourceResolverVirtual.GetHashCode();
                    if (ResourceResolverMapping != null)
                    hashCode = hashCode * 59 + ResourceResolverMapping.GetHashCode();
                    if (ResourceResolverMapLocation != null)
                    hashCode = hashCode * 59 + ResourceResolverMapLocation.GetHashCode();
                    if (ResourceResolverMapObservation != null)
                    hashCode = hashCode * 59 + ResourceResolverMapObservation.GetHashCode();
                    if (ResourceResolverDefaultVanityRedirectStatus != null)
                    hashCode = hashCode * 59 + ResourceResolverDefaultVanityRedirectStatus.GetHashCode();
                    if (ResourceResolverEnableVanitypath != null)
                    hashCode = hashCode * 59 + ResourceResolverEnableVanitypath.GetHashCode();
                    if (ResourceResolverVanitypathMaxEntries != null)
                    hashCode = hashCode * 59 + ResourceResolverVanitypathMaxEntries.GetHashCode();
                    if (ResourceResolverVanitypathMaxEntriesStartup != null)
                    hashCode = hashCode * 59 + ResourceResolverVanitypathMaxEntriesStartup.GetHashCode();
                    if (ResourceResolverVanitypathBloomfilterMaxBytes != null)
                    hashCode = hashCode * 59 + ResourceResolverVanitypathBloomfilterMaxBytes.GetHashCode();
                    if (ResourceResolverOptimizeAliasResolution != null)
                    hashCode = hashCode * 59 + ResourceResolverOptimizeAliasResolution.GetHashCode();
                    if (ResourceResolverVanitypathWhitelist != null)
                    hashCode = hashCode * 59 + ResourceResolverVanitypathWhitelist.GetHashCode();
                    if (ResourceResolverVanitypathBlacklist != null)
                    hashCode = hashCode * 59 + ResourceResolverVanitypathBlacklist.GetHashCode();
                    if (ResourceResolverVanityPrecedence != null)
                    hashCode = hashCode * 59 + ResourceResolverVanityPrecedence.GetHashCode();
                    if (ResourceResolverProviderhandlingParanoid != null)
                    hashCode = hashCode * 59 + ResourceResolverProviderhandlingParanoid.GetHashCode();
                    if (ResourceResolverLogClosing != null)
                    hashCode = hashCode * 59 + ResourceResolverLogClosing.GetHashCode();
                    if (ResourceResolverLogUnclosed != null)
                    hashCode = hashCode * 59 + ResourceResolverLogUnclosed.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties left, OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties left, OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
