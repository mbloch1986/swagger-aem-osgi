/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
  #[serde(rename = "name")]
  name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "type")]
  _type: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "importMode")]
  import_mode: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "aclHandling")]
  acl_handling: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "package.roots")]
  package_roots: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "package.filters")]
  package_filters: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "property.filters")]
  property_filters: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "tempFsFolder")]
  temp_fs_folder: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "useBinaryReferences")]
  use_binary_references: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "autoSaveThreshold")]
  auto_save_threshold: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cleanupDelay")]
  cleanup_delay: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "fileThreshold")]
  file_threshold: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "MEGA_BYTES")]
  MEGA_BYTES: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "useOffHeapMemory")]
  use_off_heap_memory: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "digestAlgorithm")]
  digest_algorithm: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "monitoringQueueSize")]
  monitoring_queue_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "pathsMapping")]
  paths_mapping: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "strictImport")]
  strict_import: Option<::models::ConfigNodePropertyBoolean>
}

impl OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
  pub fn new() -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
      name: None,
      _type: None,
      import_mode: None,
      acl_handling: None,
      package_roots: None,
      package_filters: None,
      property_filters: None,
      temp_fs_folder: None,
      use_binary_references: None,
      auto_save_threshold: None,
      cleanup_delay: None,
      file_threshold: None,
      MEGA_BYTES: None,
      use_off_heap_memory: None,
      digest_algorithm: None,
      monitoring_queue_size: None,
      paths_mapping: None,
      strict_import: None
    }
  }

  pub fn set_name(&mut self, name: ::models::ConfigNodePropertyString) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set__type(&mut self, _type: ::models::ConfigNodePropertyDropDown) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: ::models::ConfigNodePropertyDropDown) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_import_mode(&mut self, import_mode: ::models::ConfigNodePropertyString) {
    self.import_mode = Some(import_mode);
  }

  pub fn with_import_mode(mut self, import_mode: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    self.import_mode = Some(import_mode);
    self
  }

  pub fn import_mode(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.import_mode.as_ref()
  }

  pub fn reset_import_mode(&mut self) {
    self.import_mode = None;
  }

  pub fn set_acl_handling(&mut self, acl_handling: ::models::ConfigNodePropertyString) {
    self.acl_handling = Some(acl_handling);
  }

  pub fn with_acl_handling(mut self, acl_handling: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    self.acl_handling = Some(acl_handling);
    self
  }

  pub fn acl_handling(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.acl_handling.as_ref()
  }

  pub fn reset_acl_handling(&mut self) {
    self.acl_handling = None;
  }

  pub fn set_package_roots(&mut self, package_roots: ::models::ConfigNodePropertyString) {
    self.package_roots = Some(package_roots);
  }

  pub fn with_package_roots(mut self, package_roots: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    self.package_roots = Some(package_roots);
    self
  }

  pub fn package_roots(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.package_roots.as_ref()
  }

  pub fn reset_package_roots(&mut self) {
    self.package_roots = None;
  }

  pub fn set_package_filters(&mut self, package_filters: ::models::ConfigNodePropertyArray) {
    self.package_filters = Some(package_filters);
  }

  pub fn with_package_filters(mut self, package_filters: ::models::ConfigNodePropertyArray) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    self.package_filters = Some(package_filters);
    self
  }

  pub fn package_filters(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.package_filters.as_ref()
  }

  pub fn reset_package_filters(&mut self) {
    self.package_filters = None;
  }

  pub fn set_property_filters(&mut self, property_filters: ::models::ConfigNodePropertyArray) {
    self.property_filters = Some(property_filters);
  }

  pub fn with_property_filters(mut self, property_filters: ::models::ConfigNodePropertyArray) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    self.property_filters = Some(property_filters);
    self
  }

  pub fn property_filters(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.property_filters.as_ref()
  }

  pub fn reset_property_filters(&mut self) {
    self.property_filters = None;
  }

  pub fn set_temp_fs_folder(&mut self, temp_fs_folder: ::models::ConfigNodePropertyString) {
    self.temp_fs_folder = Some(temp_fs_folder);
  }

  pub fn with_temp_fs_folder(mut self, temp_fs_folder: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    self.temp_fs_folder = Some(temp_fs_folder);
    self
  }

  pub fn temp_fs_folder(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.temp_fs_folder.as_ref()
  }

  pub fn reset_temp_fs_folder(&mut self) {
    self.temp_fs_folder = None;
  }

  pub fn set_use_binary_references(&mut self, use_binary_references: ::models::ConfigNodePropertyBoolean) {
    self.use_binary_references = Some(use_binary_references);
  }

  pub fn with_use_binary_references(mut self, use_binary_references: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    self.use_binary_references = Some(use_binary_references);
    self
  }

  pub fn use_binary_references(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.use_binary_references.as_ref()
  }

  pub fn reset_use_binary_references(&mut self) {
    self.use_binary_references = None;
  }

  pub fn set_auto_save_threshold(&mut self, auto_save_threshold: ::models::ConfigNodePropertyInteger) {
    self.auto_save_threshold = Some(auto_save_threshold);
  }

  pub fn with_auto_save_threshold(mut self, auto_save_threshold: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    self.auto_save_threshold = Some(auto_save_threshold);
    self
  }

  pub fn auto_save_threshold(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.auto_save_threshold.as_ref()
  }

  pub fn reset_auto_save_threshold(&mut self) {
    self.auto_save_threshold = None;
  }

  pub fn set_cleanup_delay(&mut self, cleanup_delay: ::models::ConfigNodePropertyInteger) {
    self.cleanup_delay = Some(cleanup_delay);
  }

  pub fn with_cleanup_delay(mut self, cleanup_delay: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    self.cleanup_delay = Some(cleanup_delay);
    self
  }

  pub fn cleanup_delay(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cleanup_delay.as_ref()
  }

  pub fn reset_cleanup_delay(&mut self) {
    self.cleanup_delay = None;
  }

  pub fn set_file_threshold(&mut self, file_threshold: ::models::ConfigNodePropertyInteger) {
    self.file_threshold = Some(file_threshold);
  }

  pub fn with_file_threshold(mut self, file_threshold: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    self.file_threshold = Some(file_threshold);
    self
  }

  pub fn file_threshold(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.file_threshold.as_ref()
  }

  pub fn reset_file_threshold(&mut self) {
    self.file_threshold = None;
  }

  pub fn set_MEGA_BYTES(&mut self, MEGA_BYTES: ::models::ConfigNodePropertyDropDown) {
    self.MEGA_BYTES = Some(MEGA_BYTES);
  }

  pub fn with_MEGA_BYTES(mut self, MEGA_BYTES: ::models::ConfigNodePropertyDropDown) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    self.MEGA_BYTES = Some(MEGA_BYTES);
    self
  }

  pub fn MEGA_BYTES(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.MEGA_BYTES.as_ref()
  }

  pub fn reset_MEGA_BYTES(&mut self) {
    self.MEGA_BYTES = None;
  }

  pub fn set_use_off_heap_memory(&mut self, use_off_heap_memory: ::models::ConfigNodePropertyBoolean) {
    self.use_off_heap_memory = Some(use_off_heap_memory);
  }

  pub fn with_use_off_heap_memory(mut self, use_off_heap_memory: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    self.use_off_heap_memory = Some(use_off_heap_memory);
    self
  }

  pub fn use_off_heap_memory(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.use_off_heap_memory.as_ref()
  }

  pub fn reset_use_off_heap_memory(&mut self) {
    self.use_off_heap_memory = None;
  }

  pub fn set_digest_algorithm(&mut self, digest_algorithm: ::models::ConfigNodePropertyDropDown) {
    self.digest_algorithm = Some(digest_algorithm);
  }

  pub fn with_digest_algorithm(mut self, digest_algorithm: ::models::ConfigNodePropertyDropDown) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    self.digest_algorithm = Some(digest_algorithm);
    self
  }

  pub fn digest_algorithm(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.digest_algorithm.as_ref()
  }

  pub fn reset_digest_algorithm(&mut self) {
    self.digest_algorithm = None;
  }

  pub fn set_monitoring_queue_size(&mut self, monitoring_queue_size: ::models::ConfigNodePropertyInteger) {
    self.monitoring_queue_size = Some(monitoring_queue_size);
  }

  pub fn with_monitoring_queue_size(mut self, monitoring_queue_size: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    self.monitoring_queue_size = Some(monitoring_queue_size);
    self
  }

  pub fn monitoring_queue_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.monitoring_queue_size.as_ref()
  }

  pub fn reset_monitoring_queue_size(&mut self) {
    self.monitoring_queue_size = None;
  }

  pub fn set_paths_mapping(&mut self, paths_mapping: ::models::ConfigNodePropertyArray) {
    self.paths_mapping = Some(paths_mapping);
  }

  pub fn with_paths_mapping(mut self, paths_mapping: ::models::ConfigNodePropertyArray) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    self.paths_mapping = Some(paths_mapping);
    self
  }

  pub fn paths_mapping(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.paths_mapping.as_ref()
  }

  pub fn reset_paths_mapping(&mut self) {
    self.paths_mapping = None;
  }

  pub fn set_strict_import(&mut self, strict_import: ::models::ConfigNodePropertyBoolean) {
    self.strict_import = Some(strict_import);
  }

  pub fn with_strict_import(mut self, strict_import: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    self.strict_import = Some(strict_import);
    self
  }

  pub fn strict_import(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.strict_import.as_ref()
  }

  pub fn reset_strict_import(&mut self) {
    self.strict_import = None;
  }

}



