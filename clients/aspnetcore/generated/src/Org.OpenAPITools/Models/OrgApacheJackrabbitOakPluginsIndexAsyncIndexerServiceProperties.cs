/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties : IEquatable<OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties>
    { 
        /// <summary>
        /// Gets or Sets AsyncConfigs
        /// </summary>
        [DataMember(Name="asyncConfigs")]
        public ConfigNodePropertyArray AsyncConfigs { get; set; }

        /// <summary>
        /// Gets or Sets LeaseTimeOutMinutes
        /// </summary>
        [DataMember(Name="leaseTimeOutMinutes")]
        public ConfigNodePropertyInteger LeaseTimeOutMinutes { get; set; }

        /// <summary>
        /// Gets or Sets FailingIndexTimeoutSeconds
        /// </summary>
        [DataMember(Name="failingIndexTimeoutSeconds")]
        public ConfigNodePropertyInteger FailingIndexTimeoutSeconds { get; set; }

        /// <summary>
        /// Gets or Sets ErrorWarnIntervalSeconds
        /// </summary>
        [DataMember(Name="errorWarnIntervalSeconds")]
        public ConfigNodePropertyInteger ErrorWarnIntervalSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties {\n");
            sb.Append("  AsyncConfigs: ").Append(AsyncConfigs).Append("\n");
            sb.Append("  LeaseTimeOutMinutes: ").Append(LeaseTimeOutMinutes).Append("\n");
            sb.Append("  FailingIndexTimeoutSeconds: ").Append(FailingIndexTimeoutSeconds).Append("\n");
            sb.Append("  ErrorWarnIntervalSeconds: ").Append(ErrorWarnIntervalSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AsyncConfigs == other.AsyncConfigs ||
                    AsyncConfigs != null &&
                    AsyncConfigs.Equals(other.AsyncConfigs)
                ) && 
                (
                    LeaseTimeOutMinutes == other.LeaseTimeOutMinutes ||
                    LeaseTimeOutMinutes != null &&
                    LeaseTimeOutMinutes.Equals(other.LeaseTimeOutMinutes)
                ) && 
                (
                    FailingIndexTimeoutSeconds == other.FailingIndexTimeoutSeconds ||
                    FailingIndexTimeoutSeconds != null &&
                    FailingIndexTimeoutSeconds.Equals(other.FailingIndexTimeoutSeconds)
                ) && 
                (
                    ErrorWarnIntervalSeconds == other.ErrorWarnIntervalSeconds ||
                    ErrorWarnIntervalSeconds != null &&
                    ErrorWarnIntervalSeconds.Equals(other.ErrorWarnIntervalSeconds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AsyncConfigs != null)
                    hashCode = hashCode * 59 + AsyncConfigs.GetHashCode();
                    if (LeaseTimeOutMinutes != null)
                    hashCode = hashCode * 59 + LeaseTimeOutMinutes.GetHashCode();
                    if (FailingIndexTimeoutSeconds != null)
                    hashCode = hashCode * 59 + FailingIndexTimeoutSeconds.GetHashCode();
                    if (ErrorWarnIntervalSeconds != null)
                    hashCode = hashCode * 59 + ErrorWarnIntervalSeconds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties left, OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties left, OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
