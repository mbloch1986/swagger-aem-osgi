/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties.h
 *
 * 
 */

#ifndef OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties_H_
#define OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties
    : public ModelBase
{
public:
    OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties();
    virtual ~OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getOsgiHttpWhiteboardContextSelect() const;
    void setOsgiHttpWhiteboardContextSelect(ConfigNodePropertyString const& value);
    bool osgiHttpWhiteboardContextSelectIsSet() const;
    void unsetOsgi_http_whiteboard_context_select();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getOsgiHttpWhiteboardListener() const;
    void setOsgiHttpWhiteboardListener(ConfigNodePropertyString const& value);
    bool osgiHttpWhiteboardListenerIsSet() const;
    void unsetOsgi_http_whiteboard_listener();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getAuthSudoCookie() const;
    void setAuthSudoCookie(ConfigNodePropertyString const& value);
    bool authSudoCookieIsSet() const;
    void unsetAuth_sudo_cookie();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getAuthSudoParameter() const;
    void setAuthSudoParameter(ConfigNodePropertyString const& value);
    bool authSudoParameterIsSet() const;
    void unsetAuth_sudo_parameter();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getAuthAnnonymous() const;
    void setAuthAnnonymous(ConfigNodePropertyBoolean const& value);
    bool authAnnonymousIsSet() const;
    void unsetAuth_annonymous();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getSlingAuthRequirements() const;
    void setSlingAuthRequirements(ConfigNodePropertyArray const& value);
    bool slingAuthRequirementsIsSet() const;
    void unsetSling_auth_requirements();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getSlingAuthAnonymousUser() const;
    void setSlingAuthAnonymousUser(ConfigNodePropertyString const& value);
    bool slingAuthAnonymousUserIsSet() const;
    void unsetSling_auth_anonymous_user();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getSlingAuthAnonymousPassword() const;
    void setSlingAuthAnonymousPassword(ConfigNodePropertyString const& value);
    bool slingAuthAnonymousPasswordIsSet() const;
    void unsetSling_auth_anonymous_password();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyDropDown getAuthHttp() const;
    void setAuthHttp(ConfigNodePropertyDropDown const& value);
    bool authHttpIsSet() const;
    void unsetAuth_http();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getAuthHttpRealm() const;
    void setAuthHttpRealm(ConfigNodePropertyString const& value);
    bool authHttpRealmIsSet() const;
    void unsetAuth_http_realm();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getAuthUriSuffix() const;
    void setAuthUriSuffix(ConfigNodePropertyArray const& value);
    bool authUriSuffixIsSet() const;
    void unsetAuth_uri_suffix();

protected:
    ConfigNodePropertyString m_Osgi_http_whiteboard_context_select;
    bool m_Osgi_http_whiteboard_context_selectIsSet;
    ConfigNodePropertyString m_Osgi_http_whiteboard_listener;
    bool m_Osgi_http_whiteboard_listenerIsSet;
    ConfigNodePropertyString m_Auth_sudo_cookie;
    bool m_Auth_sudo_cookieIsSet;
    ConfigNodePropertyString m_Auth_sudo_parameter;
    bool m_Auth_sudo_parameterIsSet;
    ConfigNodePropertyBoolean m_Auth_annonymous;
    bool m_Auth_annonymousIsSet;
    ConfigNodePropertyArray m_Sling_auth_requirements;
    bool m_Sling_auth_requirementsIsSet;
    ConfigNodePropertyString m_Sling_auth_anonymous_user;
    bool m_Sling_auth_anonymous_userIsSet;
    ConfigNodePropertyString m_Sling_auth_anonymous_password;
    bool m_Sling_auth_anonymous_passwordIsSet;
    ConfigNodePropertyDropDown m_Auth_http;
    bool m_Auth_httpIsSet;
    ConfigNodePropertyString m_Auth_http_realm;
    bool m_Auth_http_realmIsSet;
    ConfigNodePropertyArray m_Auth_uri_suffix;
    bool m_Auth_uri_suffixIsSet;
};

}
}
}
}

#endif /* OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties_H_ */
