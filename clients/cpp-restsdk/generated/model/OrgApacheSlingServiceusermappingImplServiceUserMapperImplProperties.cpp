/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties()
{
    m_User_mappingIsSet = false;
    m_User_defaultIsSet = false;
    m_User_enable_default_mappingIsSet = false;
    m_Require_validationIsSet = false;
}

OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::~OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties()
{
}

void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_User_mappingIsSet)
    {
        val[utility::conversions::to_string_t("user.mapping")] = ModelBase::toJson(m_User_mapping);
    }
    if(m_User_defaultIsSet)
    {
        val[utility::conversions::to_string_t("user.default")] = ModelBase::toJson(m_User_default);
    }
    if(m_User_enable_default_mappingIsSet)
    {
        val[utility::conversions::to_string_t("user.enable.default.mapping")] = ModelBase::toJson(m_User_enable_default_mapping);
    }
    if(m_Require_validationIsSet)
    {
        val[utility::conversions::to_string_t("require.validation")] = ModelBase::toJson(m_Require_validation);
    }

    return val;
}

void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("user.mapping")))
    {
        if(!val[utility::conversions::to_string_t("user.mapping")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("user.mapping")]);
            setUserMapping( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user.default")))
    {
        if(!val[utility::conversions::to_string_t("user.default")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("user.default")]);
            setUserDefault( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user.enable.default.mapping")))
    {
        if(!val[utility::conversions::to_string_t("user.enable.default.mapping")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("user.enable.default.mapping")]);
            setUserEnableDefaultMapping( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("require.validation")))
    {
        if(!val[utility::conversions::to_string_t("require.validation")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("require.validation")]);
            setRequireValidation( newItem );
        }
    }
}

void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_User_mappingIsSet)
    {
        if (m_User_mapping.get())
        {
            m_User_mapping->toMultipart(multipart, utility::conversions::to_string_t("user.mapping."));
        }
    }
    if(m_User_defaultIsSet)
    {
        if (m_User_default.get())
        {
            m_User_default->toMultipart(multipart, utility::conversions::to_string_t("user.default."));
        }
    }
    if(m_User_enable_default_mappingIsSet)
    {
        if (m_User_enable_default_mapping.get())
        {
            m_User_enable_default_mapping->toMultipart(multipart, utility::conversions::to_string_t("user.enable.default.mapping."));
        }
    }
    if(m_Require_validationIsSet)
    {
        if (m_Require_validation.get())
        {
            m_Require_validation->toMultipart(multipart, utility::conversions::to_string_t("require.validation."));
        }
    }
}

void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("user.mapping")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("user.mapping")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("user.mapping."));
            setUserMapping( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user.default")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("user.default")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("user.default."));
            setUserDefault( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user.enable.default.mapping")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("user.enable.default.mapping")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("user.enable.default.mapping."));
            setUserEnableDefaultMapping( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("require.validation")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("require.validation")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("require.validation."));
            setRequireValidation( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::getUserMapping() const
{
    return m_User_mapping;
}


void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::setUserMapping(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_User_mapping = value;
    m_User_mappingIsSet = true;
}
bool OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::userMappingIsSet() const
{
    return m_User_mappingIsSet;
}

void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::unsetUser_mapping()
{
    m_User_mappingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::getUserDefault() const
{
    return m_User_default;
}


void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::setUserDefault(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_User_default = value;
    m_User_defaultIsSet = true;
}
bool OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::userDefaultIsSet() const
{
    return m_User_defaultIsSet;
}

void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::unsetUser_default()
{
    m_User_defaultIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::getUserEnableDefaultMapping() const
{
    return m_User_enable_default_mapping;
}


void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::setUserEnableDefaultMapping(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_User_enable_default_mapping = value;
    m_User_enable_default_mappingIsSet = true;
}
bool OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::userEnableDefaultMappingIsSet() const
{
    return m_User_enable_default_mappingIsSet;
}

void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::unsetUser_enable_default_mapping()
{
    m_User_enable_default_mappingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::getRequireValidation() const
{
    return m_Require_validation;
}


void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::setRequireValidation(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Require_validation = value;
    m_Require_validationIsSet = true;
}
bool OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::requireValidationIsSet() const
{
    return m_Require_validationIsSet;
}

void OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties::unsetRequire_validation()
{
    m_Require_validationIsSet = false;
}

}
}
}
}

