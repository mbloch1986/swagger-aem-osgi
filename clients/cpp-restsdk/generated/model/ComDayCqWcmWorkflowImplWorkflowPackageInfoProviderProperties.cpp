/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties()
{
    m_Workflowpackageinfoprovider_filterIsSet = false;
    m_Workflowpackageinfoprovider_filter_rootpathIsSet = false;
}

ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::~ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties()
{
}

void ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Workflowpackageinfoprovider_filterIsSet)
    {
        val[utility::conversions::to_string_t("workflowpackageinfoprovider.filter")] = ModelBase::toJson(m_Workflowpackageinfoprovider_filter);
    }
    if(m_Workflowpackageinfoprovider_filter_rootpathIsSet)
    {
        val[utility::conversions::to_string_t("workflowpackageinfoprovider.filter.rootpath")] = ModelBase::toJson(m_Workflowpackageinfoprovider_filter_rootpath);
    }

    return val;
}

void ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("workflowpackageinfoprovider.filter")))
    {
        if(!val[utility::conversions::to_string_t("workflowpackageinfoprovider.filter")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("workflowpackageinfoprovider.filter")]);
            setWorkflowpackageinfoproviderFilter( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workflowpackageinfoprovider.filter.rootpath")))
    {
        if(!val[utility::conversions::to_string_t("workflowpackageinfoprovider.filter.rootpath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("workflowpackageinfoprovider.filter.rootpath")]);
            setWorkflowpackageinfoproviderFilterRootpath( newItem );
        }
    }
}

void ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Workflowpackageinfoprovider_filterIsSet)
    {
        if (m_Workflowpackageinfoprovider_filter.get())
        {
            m_Workflowpackageinfoprovider_filter->toMultipart(multipart, utility::conversions::to_string_t("workflowpackageinfoprovider.filter."));
        }
    }
    if(m_Workflowpackageinfoprovider_filter_rootpathIsSet)
    {
        if (m_Workflowpackageinfoprovider_filter_rootpath.get())
        {
            m_Workflowpackageinfoprovider_filter_rootpath->toMultipart(multipart, utility::conversions::to_string_t("workflowpackageinfoprovider.filter.rootpath."));
        }
    }
}

void ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("workflowpackageinfoprovider.filter")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("workflowpackageinfoprovider.filter")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("workflowpackageinfoprovider.filter."));
            setWorkflowpackageinfoproviderFilter( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workflowpackageinfoprovider.filter.rootpath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("workflowpackageinfoprovider.filter.rootpath")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("workflowpackageinfoprovider.filter.rootpath."));
            setWorkflowpackageinfoproviderFilterRootpath( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::getWorkflowpackageinfoproviderFilter() const
{
    return m_Workflowpackageinfoprovider_filter;
}


void ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::setWorkflowpackageinfoproviderFilter(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Workflowpackageinfoprovider_filter = value;
    m_Workflowpackageinfoprovider_filterIsSet = true;
}
bool ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::workflowpackageinfoproviderFilterIsSet() const
{
    return m_Workflowpackageinfoprovider_filterIsSet;
}

void ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::unsetWorkflowpackageinfoprovider_filter()
{
    m_Workflowpackageinfoprovider_filterIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::getWorkflowpackageinfoproviderFilterRootpath() const
{
    return m_Workflowpackageinfoprovider_filter_rootpath;
}


void ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::setWorkflowpackageinfoproviderFilterRootpath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Workflowpackageinfoprovider_filter_rootpath = value;
    m_Workflowpackageinfoprovider_filter_rootpathIsSet = true;
}
bool ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::workflowpackageinfoproviderFilterRootpathIsSet() const
{
    return m_Workflowpackageinfoprovider_filter_rootpathIsSet;
}

void ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::unsetWorkflowpackageinfoprovider_filter_rootpath()
{
    m_Workflowpackageinfoprovider_filter_rootpathIsSet = false;
}

}
}
}
}

