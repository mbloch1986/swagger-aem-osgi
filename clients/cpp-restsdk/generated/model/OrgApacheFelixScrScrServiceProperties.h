/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheFelixScrScrServiceProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheFelixScrScrServiceProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheFelixScrScrServiceProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheFelixScrScrServiceProperties
    : public ModelBase
{
public:
    OrgApacheFelixScrScrServiceProperties();
    virtual ~OrgApacheFelixScrScrServiceProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheFelixScrScrServiceProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getDsLoglevel() const;
    bool dsLoglevelIsSet() const;
    void unsetDs_loglevel();
    void setDsLoglevel(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getDsFactoryEnabled() const;
    bool dsFactoryEnabledIsSet() const;
    void unsetDs_factory_enabled();
    void setDsFactoryEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getDsDelayedKeepInstances() const;
    bool dsDelayedKeepInstancesIsSet() const;
    void unsetDs_delayed_keepInstances();
    void setDsDelayedKeepInstances(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getDsLockTimeoutMilliseconds() const;
    bool dsLockTimeoutMillisecondsIsSet() const;
    void unsetDs_lock_timeout_milliseconds();
    void setDsLockTimeoutMilliseconds(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getDsStopTimeoutMilliseconds() const;
    bool dsStopTimeoutMillisecondsIsSet() const;
    void unsetDs_stop_timeout_milliseconds();
    void setDsStopTimeoutMilliseconds(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getDsGlobalExtender() const;
    bool dsGlobalExtenderIsSet() const;
    void unsetDs_global_extender();
    void setDsGlobalExtender(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyDropDown> m_Ds_loglevel;
    bool m_Ds_loglevelIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Ds_factory_enabled;
    bool m_Ds_factory_enabledIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Ds_delayed_keepInstances;
    bool m_Ds_delayed_keepInstancesIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Ds_lock_timeout_milliseconds;
    bool m_Ds_lock_timeout_millisecondsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Ds_stop_timeout_milliseconds;
    bool m_Ds_stop_timeout_millisecondsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Ds_global_extender;
    bool m_Ds_global_extenderIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheFelixScrScrServiceProperties_H_ */
