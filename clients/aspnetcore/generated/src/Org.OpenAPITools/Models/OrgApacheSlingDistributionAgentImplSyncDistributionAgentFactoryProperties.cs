/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties : IEquatable<OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties>
    { 
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public ConfigNodePropertyString Name { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title")]
        public ConfigNodePropertyString Title { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="details")]
        public ConfigNodePropertyString Details { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled")]
        public ConfigNodePropertyBoolean Enabled { get; set; }

        /// <summary>
        /// Gets or Sets ServiceName
        /// </summary>
        [DataMember(Name="serviceName")]
        public ConfigNodePropertyString ServiceName { get; set; }

        /// <summary>
        /// Gets or Sets LogLevel
        /// </summary>
        [DataMember(Name="log.level")]
        public ConfigNodePropertyDropDown LogLevel { get; set; }

        /// <summary>
        /// Gets or Sets QueueProcessingEnabled
        /// </summary>
        [DataMember(Name="queue.processing.enabled")]
        public ConfigNodePropertyBoolean QueueProcessingEnabled { get; set; }

        /// <summary>
        /// Gets or Sets PassiveQueues
        /// </summary>
        [DataMember(Name="passiveQueues")]
        public ConfigNodePropertyArray PassiveQueues { get; set; }

        /// <summary>
        /// Gets or Sets PackageExporterEndpoints
        /// </summary>
        [DataMember(Name="packageExporter.endpoints")]
        public ConfigNodePropertyArray PackageExporterEndpoints { get; set; }

        /// <summary>
        /// Gets or Sets PackageImporterEndpoints
        /// </summary>
        [DataMember(Name="packageImporter.endpoints")]
        public ConfigNodePropertyArray PackageImporterEndpoints { get; set; }

        /// <summary>
        /// Gets or Sets RetryStrategy
        /// </summary>
        [DataMember(Name="retry.strategy")]
        public ConfigNodePropertyDropDown RetryStrategy { get; set; }

        /// <summary>
        /// Gets or Sets RetryAttempts
        /// </summary>
        [DataMember(Name="retry.attempts")]
        public ConfigNodePropertyInteger RetryAttempts { get; set; }

        /// <summary>
        /// Gets or Sets PullItems
        /// </summary>
        [DataMember(Name="pull.items")]
        public ConfigNodePropertyInteger PullItems { get; set; }

        /// <summary>
        /// Gets or Sets HttpConnTimeout
        /// </summary>
        [DataMember(Name="http.conn.timeout")]
        public ConfigNodePropertyInteger HttpConnTimeout { get; set; }

        /// <summary>
        /// Gets or Sets RequestAuthorizationStrategyTarget
        /// </summary>
        [DataMember(Name="requestAuthorizationStrategy.target")]
        public ConfigNodePropertyString RequestAuthorizationStrategyTarget { get; set; }

        /// <summary>
        /// Gets or Sets TransportSecretProviderTarget
        /// </summary>
        [DataMember(Name="transportSecretProvider.target")]
        public ConfigNodePropertyString TransportSecretProviderTarget { get; set; }

        /// <summary>
        /// Gets or Sets PackageBuilderTarget
        /// </summary>
        [DataMember(Name="packageBuilder.target")]
        public ConfigNodePropertyString PackageBuilderTarget { get; set; }

        /// <summary>
        /// Gets or Sets TriggersTarget
        /// </summary>
        [DataMember(Name="triggers.target")]
        public ConfigNodePropertyString TriggersTarget { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  LogLevel: ").Append(LogLevel).Append("\n");
            sb.Append("  QueueProcessingEnabled: ").Append(QueueProcessingEnabled).Append("\n");
            sb.Append("  PassiveQueues: ").Append(PassiveQueues).Append("\n");
            sb.Append("  PackageExporterEndpoints: ").Append(PackageExporterEndpoints).Append("\n");
            sb.Append("  PackageImporterEndpoints: ").Append(PackageImporterEndpoints).Append("\n");
            sb.Append("  RetryStrategy: ").Append(RetryStrategy).Append("\n");
            sb.Append("  RetryAttempts: ").Append(RetryAttempts).Append("\n");
            sb.Append("  PullItems: ").Append(PullItems).Append("\n");
            sb.Append("  HttpConnTimeout: ").Append(HttpConnTimeout).Append("\n");
            sb.Append("  RequestAuthorizationStrategyTarget: ").Append(RequestAuthorizationStrategyTarget).Append("\n");
            sb.Append("  TransportSecretProviderTarget: ").Append(TransportSecretProviderTarget).Append("\n");
            sb.Append("  PackageBuilderTarget: ").Append(PackageBuilderTarget).Append("\n");
            sb.Append("  TriggersTarget: ").Append(TriggersTarget).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Details == other.Details ||
                    Details != null &&
                    Details.Equals(other.Details)
                ) && 
                (
                    Enabled == other.Enabled ||
                    Enabled != null &&
                    Enabled.Equals(other.Enabled)
                ) && 
                (
                    ServiceName == other.ServiceName ||
                    ServiceName != null &&
                    ServiceName.Equals(other.ServiceName)
                ) && 
                (
                    LogLevel == other.LogLevel ||
                    LogLevel != null &&
                    LogLevel.Equals(other.LogLevel)
                ) && 
                (
                    QueueProcessingEnabled == other.QueueProcessingEnabled ||
                    QueueProcessingEnabled != null &&
                    QueueProcessingEnabled.Equals(other.QueueProcessingEnabled)
                ) && 
                (
                    PassiveQueues == other.PassiveQueues ||
                    PassiveQueues != null &&
                    PassiveQueues.Equals(other.PassiveQueues)
                ) && 
                (
                    PackageExporterEndpoints == other.PackageExporterEndpoints ||
                    PackageExporterEndpoints != null &&
                    PackageExporterEndpoints.Equals(other.PackageExporterEndpoints)
                ) && 
                (
                    PackageImporterEndpoints == other.PackageImporterEndpoints ||
                    PackageImporterEndpoints != null &&
                    PackageImporterEndpoints.Equals(other.PackageImporterEndpoints)
                ) && 
                (
                    RetryStrategy == other.RetryStrategy ||
                    RetryStrategy != null &&
                    RetryStrategy.Equals(other.RetryStrategy)
                ) && 
                (
                    RetryAttempts == other.RetryAttempts ||
                    RetryAttempts != null &&
                    RetryAttempts.Equals(other.RetryAttempts)
                ) && 
                (
                    PullItems == other.PullItems ||
                    PullItems != null &&
                    PullItems.Equals(other.PullItems)
                ) && 
                (
                    HttpConnTimeout == other.HttpConnTimeout ||
                    HttpConnTimeout != null &&
                    HttpConnTimeout.Equals(other.HttpConnTimeout)
                ) && 
                (
                    RequestAuthorizationStrategyTarget == other.RequestAuthorizationStrategyTarget ||
                    RequestAuthorizationStrategyTarget != null &&
                    RequestAuthorizationStrategyTarget.Equals(other.RequestAuthorizationStrategyTarget)
                ) && 
                (
                    TransportSecretProviderTarget == other.TransportSecretProviderTarget ||
                    TransportSecretProviderTarget != null &&
                    TransportSecretProviderTarget.Equals(other.TransportSecretProviderTarget)
                ) && 
                (
                    PackageBuilderTarget == other.PackageBuilderTarget ||
                    PackageBuilderTarget != null &&
                    PackageBuilderTarget.Equals(other.PackageBuilderTarget)
                ) && 
                (
                    TriggersTarget == other.TriggersTarget ||
                    TriggersTarget != null &&
                    TriggersTarget.Equals(other.TriggersTarget)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Details != null)
                    hashCode = hashCode * 59 + Details.GetHashCode();
                    if (Enabled != null)
                    hashCode = hashCode * 59 + Enabled.GetHashCode();
                    if (ServiceName != null)
                    hashCode = hashCode * 59 + ServiceName.GetHashCode();
                    if (LogLevel != null)
                    hashCode = hashCode * 59 + LogLevel.GetHashCode();
                    if (QueueProcessingEnabled != null)
                    hashCode = hashCode * 59 + QueueProcessingEnabled.GetHashCode();
                    if (PassiveQueues != null)
                    hashCode = hashCode * 59 + PassiveQueues.GetHashCode();
                    if (PackageExporterEndpoints != null)
                    hashCode = hashCode * 59 + PackageExporterEndpoints.GetHashCode();
                    if (PackageImporterEndpoints != null)
                    hashCode = hashCode * 59 + PackageImporterEndpoints.GetHashCode();
                    if (RetryStrategy != null)
                    hashCode = hashCode * 59 + RetryStrategy.GetHashCode();
                    if (RetryAttempts != null)
                    hashCode = hashCode * 59 + RetryAttempts.GetHashCode();
                    if (PullItems != null)
                    hashCode = hashCode * 59 + PullItems.GetHashCode();
                    if (HttpConnTimeout != null)
                    hashCode = hashCode * 59 + HttpConnTimeout.GetHashCode();
                    if (RequestAuthorizationStrategyTarget != null)
                    hashCode = hashCode * 59 + RequestAuthorizationStrategyTarget.GetHashCode();
                    if (TransportSecretProviderTarget != null)
                    hashCode = hashCode * 59 + TransportSecretProviderTarget.GetHashCode();
                    if (PackageBuilderTarget != null)
                    hashCode = hashCode * 59 + PackageBuilderTarget.GetHashCode();
                    if (TriggersTarget != null)
                    hashCode = hashCode * 59 + TriggersTarget.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties left, OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties left, OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
