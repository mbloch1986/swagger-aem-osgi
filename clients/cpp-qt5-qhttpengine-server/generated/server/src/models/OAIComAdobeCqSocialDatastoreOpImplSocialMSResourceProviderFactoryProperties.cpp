/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties() {
    this->init();
}

OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::~OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties() {
    
}

void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::init() {
    m_solr_zk_timeout_isSet = false;
    m_solr_commit_isSet = false;
    m_cache_on_isSet = false;
    m_concurrency_level_isSet = false;
    m_cache_start_size_isSet = false;
    m_cache_ttl_isSet = false;
    m_cache_size_isSet = false;
}

void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(solr_zk_timeout, json[QString("solr.zk.timeout")]);
    
    ::OpenAPI::fromJsonValue(solr_commit, json[QString("solr.commit")]);
    
    ::OpenAPI::fromJsonValue(cache_on, json[QString("cache.on")]);
    
    ::OpenAPI::fromJsonValue(concurrency_level, json[QString("concurrency.level")]);
    
    ::OpenAPI::fromJsonValue(cache_start_size, json[QString("cache.start.size")]);
    
    ::OpenAPI::fromJsonValue(cache_ttl, json[QString("cache.ttl")]);
    
    ::OpenAPI::fromJsonValue(cache_size, json[QString("cache.size")]);
    
}

QString
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::asJsonObject() const {
    QJsonObject obj;
	if(solr_zk_timeout.isSet()){
        obj.insert(QString("solr.zk.timeout"), ::OpenAPI::toJsonValue(solr_zk_timeout));
    }
	if(solr_commit.isSet()){
        obj.insert(QString("solr.commit"), ::OpenAPI::toJsonValue(solr_commit));
    }
	if(cache_on.isSet()){
        obj.insert(QString("cache.on"), ::OpenAPI::toJsonValue(cache_on));
    }
	if(concurrency_level.isSet()){
        obj.insert(QString("concurrency.level"), ::OpenAPI::toJsonValue(concurrency_level));
    }
	if(cache_start_size.isSet()){
        obj.insert(QString("cache.start.size"), ::OpenAPI::toJsonValue(cache_start_size));
    }
	if(cache_ttl.isSet()){
        obj.insert(QString("cache.ttl"), ::OpenAPI::toJsonValue(cache_ttl));
    }
	if(cache_size.isSet()){
        obj.insert(QString("cache.size"), ::OpenAPI::toJsonValue(cache_size));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::getSolrZkTimeout() const {
    return solr_zk_timeout;
}
void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::setSolrZkTimeout(const OAIConfigNodePropertyString &solr_zk_timeout) {
    this->solr_zk_timeout = solr_zk_timeout;
    this->m_solr_zk_timeout_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::getSolrCommit() const {
    return solr_commit;
}
void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::setSolrCommit(const OAIConfigNodePropertyString &solr_commit) {
    this->solr_commit = solr_commit;
    this->m_solr_commit_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::getCacheOn() const {
    return cache_on;
}
void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::setCacheOn(const OAIConfigNodePropertyBoolean &cache_on) {
    this->cache_on = cache_on;
    this->m_cache_on_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::getConcurrencyLevel() const {
    return concurrency_level;
}
void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::setConcurrencyLevel(const OAIConfigNodePropertyInteger &concurrency_level) {
    this->concurrency_level = concurrency_level;
    this->m_concurrency_level_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::getCacheStartSize() const {
    return cache_start_size;
}
void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::setCacheStartSize(const OAIConfigNodePropertyInteger &cache_start_size) {
    this->cache_start_size = cache_start_size;
    this->m_cache_start_size_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::getCacheTtl() const {
    return cache_ttl;
}
void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::setCacheTtl(const OAIConfigNodePropertyInteger &cache_ttl) {
    this->cache_ttl = cache_ttl;
    this->m_cache_ttl_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::getCacheSize() const {
    return cache_size;
}
void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::setCacheSize(const OAIConfigNodePropertyInteger &cache_size) {
    this->cache_size = cache_size;
    this->m_cache_size_isSet = true;
}


bool
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(solr_zk_timeout.isSet()){ isObjectUpdated = true; break;}
    
        if(solr_commit.isSet()){ isObjectUpdated = true; break;}
    
        if(cache_on.isSet()){ isObjectUpdated = true; break;}
    
        if(concurrency_level.isSet()){ isObjectUpdated = true; break;}
    
        if(cache_start_size.isSet()){ isObjectUpdated = true; break;}
    
        if(cache_ttl.isSet()){ isObjectUpdated = true; break;}
    
        if(cache_size.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

