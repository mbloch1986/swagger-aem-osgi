/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties {
  #[serde(rename = "poolSize")]
  pool_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "maxPoolSize")]
  max_pool_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "queueSize")]
  queue_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "keepAliveTime")]
  keep_alive_time: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties {
  pub fn new() -> ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties {
    ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties {
      pool_size: None,
      max_pool_size: None,
      queue_size: None,
      keep_alive_time: None
    }
  }

  pub fn set_pool_size(&mut self, pool_size: ::models::ConfigNodePropertyInteger) {
    self.pool_size = Some(pool_size);
  }

  pub fn with_pool_size(mut self, pool_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties {
    self.pool_size = Some(pool_size);
    self
  }

  pub fn pool_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.pool_size.as_ref()
  }

  pub fn reset_pool_size(&mut self) {
    self.pool_size = None;
  }

  pub fn set_max_pool_size(&mut self, max_pool_size: ::models::ConfigNodePropertyInteger) {
    self.max_pool_size = Some(max_pool_size);
  }

  pub fn with_max_pool_size(mut self, max_pool_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties {
    self.max_pool_size = Some(max_pool_size);
    self
  }

  pub fn max_pool_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.max_pool_size.as_ref()
  }

  pub fn reset_max_pool_size(&mut self) {
    self.max_pool_size = None;
  }

  pub fn set_queue_size(&mut self, queue_size: ::models::ConfigNodePropertyInteger) {
    self.queue_size = Some(queue_size);
  }

  pub fn with_queue_size(mut self, queue_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties {
    self.queue_size = Some(queue_size);
    self
  }

  pub fn queue_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.queue_size.as_ref()
  }

  pub fn reset_queue_size(&mut self) {
    self.queue_size = None;
  }

  pub fn set_keep_alive_time(&mut self, keep_alive_time: ::models::ConfigNodePropertyInteger) {
    self.keep_alive_time = Some(keep_alive_time);
  }

  pub fn with_keep_alive_time(mut self, keep_alive_time: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties {
    self.keep_alive_time = Some(keep_alive_time);
    self
  }

  pub fn keep_alive_time(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.keep_alive_time.as_ref()
  }

  pub fn reset_keep_alive_time(&mut self) {
    self.keep_alive_time = None;
  }

}



