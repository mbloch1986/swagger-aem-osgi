/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties() {
    this->init();
}

OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::~OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties() {
    
}

void
OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::init() {
    m_cdn_config_distribution_domain_isSet = false;
    m_cdn_config_enable_rewriting_isSet = false;
    m_cdn_config_path_prefixes_isSet = false;
    m_cdn_config_cdnttl_isSet = false;
    m_cdn_config_application_protocol_isSet = false;
}

void
OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(cdn_config_distribution_domain, json[QString("cdn.config.distribution.domain")]);
    
    ::OpenAPI::fromJsonValue(cdn_config_enable_rewriting, json[QString("cdn.config.enable.rewriting")]);
    
    ::OpenAPI::fromJsonValue(cdn_config_path_prefixes, json[QString("cdn.config.path.prefixes")]);
    
    ::OpenAPI::fromJsonValue(cdn_config_cdnttl, json[QString("cdn.config.cdnttl")]);
    
    ::OpenAPI::fromJsonValue(cdn_config_application_protocol, json[QString("cdn.config.application.protocol")]);
    
}

QString
OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(cdn_config_distribution_domain.isSet()){
        obj.insert(QString("cdn.config.distribution.domain"), ::OpenAPI::toJsonValue(cdn_config_distribution_domain));
    }
	if(cdn_config_enable_rewriting.isSet()){
        obj.insert(QString("cdn.config.enable.rewriting"), ::OpenAPI::toJsonValue(cdn_config_enable_rewriting));
    }
	if(cdn_config_path_prefixes.isSet()){
        obj.insert(QString("cdn.config.path.prefixes"), ::OpenAPI::toJsonValue(cdn_config_path_prefixes));
    }
	if(cdn_config_cdnttl.isSet()){
        obj.insert(QString("cdn.config.cdnttl"), ::OpenAPI::toJsonValue(cdn_config_cdnttl));
    }
	if(cdn_config_application_protocol.isSet()){
        obj.insert(QString("cdn.config.application.protocol"), ::OpenAPI::toJsonValue(cdn_config_application_protocol));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::getCdnConfigDistributionDomain() const {
    return cdn_config_distribution_domain;
}
void
OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::setCdnConfigDistributionDomain(const OAIConfigNodePropertyString &cdn_config_distribution_domain) {
    this->cdn_config_distribution_domain = cdn_config_distribution_domain;
    this->m_cdn_config_distribution_domain_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::getCdnConfigEnableRewriting() const {
    return cdn_config_enable_rewriting;
}
void
OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::setCdnConfigEnableRewriting(const OAIConfigNodePropertyBoolean &cdn_config_enable_rewriting) {
    this->cdn_config_enable_rewriting = cdn_config_enable_rewriting;
    this->m_cdn_config_enable_rewriting_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::getCdnConfigPathPrefixes() const {
    return cdn_config_path_prefixes;
}
void
OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::setCdnConfigPathPrefixes(const OAIConfigNodePropertyArray &cdn_config_path_prefixes) {
    this->cdn_config_path_prefixes = cdn_config_path_prefixes;
    this->m_cdn_config_path_prefixes_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::getCdnConfigCdnttl() const {
    return cdn_config_cdnttl;
}
void
OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::setCdnConfigCdnttl(const OAIConfigNodePropertyInteger &cdn_config_cdnttl) {
    this->cdn_config_cdnttl = cdn_config_cdnttl;
    this->m_cdn_config_cdnttl_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::getCdnConfigApplicationProtocol() const {
    return cdn_config_application_protocol;
}
void
OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::setCdnConfigApplicationProtocol(const OAIConfigNodePropertyString &cdn_config_application_protocol) {
    this->cdn_config_application_protocol = cdn_config_application_protocol;
    this->m_cdn_config_application_protocol_isSet = true;
}


bool
OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(cdn_config_distribution_domain.isSet()){ isObjectUpdated = true; break;}
    
        if(cdn_config_enable_rewriting.isSet()){ isObjectUpdated = true; break;}
    
        if(cdn_config_path_prefixes.isSet()){ isObjectUpdated = true; break;}
    
        if(cdn_config_cdnttl.isSet()){ isObjectUpdated = true; break;}
    
        if(cdn_config_application_protocol.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

