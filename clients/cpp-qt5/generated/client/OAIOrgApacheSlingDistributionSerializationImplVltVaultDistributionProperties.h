/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.h
 *
 * 
 */

#ifndef OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties_H_
#define OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyArray.h"
#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyDropDown.h"
#include "OAIOAIConfigNodePropertyInteger.h"
#include "OAIOAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties: public OAIObject {
public:
    OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties();
    OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties(QString json);
    ~OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyString* getName();
    void setName(OAIConfigNodePropertyString* name);

    OAIConfigNodePropertyDropDown* getType();
    void setType(OAIConfigNodePropertyDropDown* type);

    OAIConfigNodePropertyString* getImportMode();
    void setImportMode(OAIConfigNodePropertyString* import_mode);

    OAIConfigNodePropertyString* getAclHandling();
    void setAclHandling(OAIConfigNodePropertyString* acl_handling);

    OAIConfigNodePropertyString* getPackageRoots();
    void setPackageRoots(OAIConfigNodePropertyString* package_roots);

    OAIConfigNodePropertyArray* getPackageFilters();
    void setPackageFilters(OAIConfigNodePropertyArray* package_filters);

    OAIConfigNodePropertyArray* getPropertyFilters();
    void setPropertyFilters(OAIConfigNodePropertyArray* property_filters);

    OAIConfigNodePropertyString* getTempFsFolder();
    void setTempFsFolder(OAIConfigNodePropertyString* temp_fs_folder);

    OAIConfigNodePropertyBoolean* getUseBinaryReferences();
    void setUseBinaryReferences(OAIConfigNodePropertyBoolean* use_binary_references);

    OAIConfigNodePropertyInteger* getAutoSaveThreshold();
    void setAutoSaveThreshold(OAIConfigNodePropertyInteger* auto_save_threshold);

    OAIConfigNodePropertyInteger* getCleanupDelay();
    void setCleanupDelay(OAIConfigNodePropertyInteger* cleanup_delay);

    OAIConfigNodePropertyInteger* getFileThreshold();
    void setFileThreshold(OAIConfigNodePropertyInteger* file_threshold);

    OAIConfigNodePropertyDropDown* getMegaBytes();
    void setMegaBytes(OAIConfigNodePropertyDropDown* mega_bytes);

    OAIConfigNodePropertyBoolean* getUseOffHeapMemory();
    void setUseOffHeapMemory(OAIConfigNodePropertyBoolean* use_off_heap_memory);

    OAIConfigNodePropertyDropDown* getDigestAlgorithm();
    void setDigestAlgorithm(OAIConfigNodePropertyDropDown* digest_algorithm);

    OAIConfigNodePropertyInteger* getMonitoringQueueSize();
    void setMonitoringQueueSize(OAIConfigNodePropertyInteger* monitoring_queue_size);

    OAIConfigNodePropertyArray* getPathsMapping();
    void setPathsMapping(OAIConfigNodePropertyArray* paths_mapping);

    OAIConfigNodePropertyBoolean* getStrictImport();
    void setStrictImport(OAIConfigNodePropertyBoolean* strict_import);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyString* name;
    bool m_name_isSet;

    OAIConfigNodePropertyDropDown* type;
    bool m_type_isSet;

    OAIConfigNodePropertyString* import_mode;
    bool m_import_mode_isSet;

    OAIConfigNodePropertyString* acl_handling;
    bool m_acl_handling_isSet;

    OAIConfigNodePropertyString* package_roots;
    bool m_package_roots_isSet;

    OAIConfigNodePropertyArray* package_filters;
    bool m_package_filters_isSet;

    OAIConfigNodePropertyArray* property_filters;
    bool m_property_filters_isSet;

    OAIConfigNodePropertyString* temp_fs_folder;
    bool m_temp_fs_folder_isSet;

    OAIConfigNodePropertyBoolean* use_binary_references;
    bool m_use_binary_references_isSet;

    OAIConfigNodePropertyInteger* auto_save_threshold;
    bool m_auto_save_threshold_isSet;

    OAIConfigNodePropertyInteger* cleanup_delay;
    bool m_cleanup_delay_isSet;

    OAIConfigNodePropertyInteger* file_threshold;
    bool m_file_threshold_isSet;

    OAIConfigNodePropertyDropDown* mega_bytes;
    bool m_mega_bytes_isSet;

    OAIConfigNodePropertyBoolean* use_off_heap_memory;
    bool m_use_off_heap_memory_isSet;

    OAIConfigNodePropertyDropDown* digest_algorithm;
    bool m_digest_algorithm_isSet;

    OAIConfigNodePropertyInteger* monitoring_queue_size;
    bool m_monitoring_queue_size_isSet;

    OAIConfigNodePropertyArray* paths_mapping;
    bool m_paths_mapping_isSet;

    OAIConfigNodePropertyBoolean* strict_import;
    bool m_strict_import_isSet;

};

}

#endif /* OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties_H_ */
