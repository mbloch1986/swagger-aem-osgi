/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties {
  #[serde(rename = "service.ranking")]
  service_ranking: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "tagpattern")]
  tagpattern: Option<::models::ConfigNodePropertyString>
}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties {
  pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties {
    ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties {
      service_ranking: None,
      tagpattern: None
    }
  }

  pub fn set_service_ranking(&mut self, service_ranking: ::models::ConfigNodePropertyInteger) {
    self.service_ranking = Some(service_ranking);
  }

  pub fn with_service_ranking(mut self, service_ranking: ::models::ConfigNodePropertyInteger) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties {
    self.service_ranking = Some(service_ranking);
    self
  }

  pub fn service_ranking(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.service_ranking.as_ref()
  }

  pub fn reset_service_ranking(&mut self) {
    self.service_ranking = None;
  }

  pub fn set_tagpattern(&mut self, tagpattern: ::models::ConfigNodePropertyString) {
    self.tagpattern = Some(tagpattern);
  }

  pub fn with_tagpattern(mut self, tagpattern: ::models::ConfigNodePropertyString) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties {
    self.tagpattern = Some(tagpattern);
    self
  }

  pub fn tagpattern(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.tagpattern.as_ref()
  }

  pub fn reset_tagpattern(&mut self) {
    self.tagpattern = None;
  }

}



