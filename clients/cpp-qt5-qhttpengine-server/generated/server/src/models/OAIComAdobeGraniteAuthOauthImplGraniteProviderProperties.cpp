/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties::OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties::OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties() {
    this->init();
}

OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties::~OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties() {
    
}

void
OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties::init() {
    m_oauth_provider_id_isSet = false;
    m_oauth_provider_granite_authorization_url_isSet = false;
    m_oauth_provider_granite_token_url_isSet = false;
    m_oauth_provider_granite_profile_url_isSet = false;
    m_oauth_provider_granite_extended_details_urls_isSet = false;
}

void
OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(oauth_provider_id, json[QString("oauth.provider.id")]);
    
    ::OpenAPI::fromJsonValue(oauth_provider_granite_authorization_url, json[QString("oauth.provider.granite.authorization.url")]);
    
    ::OpenAPI::fromJsonValue(oauth_provider_granite_token_url, json[QString("oauth.provider.granite.token.url")]);
    
    ::OpenAPI::fromJsonValue(oauth_provider_granite_profile_url, json[QString("oauth.provider.granite.profile.url")]);
    
    ::OpenAPI::fromJsonValue(oauth_provider_granite_extended_details_urls, json[QString("oauth.provider.granite.extended.details.urls")]);
    
}

QString
OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties::asJsonObject() const {
    QJsonObject obj;
	if(oauth_provider_id.isSet()){
        obj.insert(QString("oauth.provider.id"), ::OpenAPI::toJsonValue(oauth_provider_id));
    }
	if(oauth_provider_granite_authorization_url.isSet()){
        obj.insert(QString("oauth.provider.granite.authorization.url"), ::OpenAPI::toJsonValue(oauth_provider_granite_authorization_url));
    }
	if(oauth_provider_granite_token_url.isSet()){
        obj.insert(QString("oauth.provider.granite.token.url"), ::OpenAPI::toJsonValue(oauth_provider_granite_token_url));
    }
	if(oauth_provider_granite_profile_url.isSet()){
        obj.insert(QString("oauth.provider.granite.profile.url"), ::OpenAPI::toJsonValue(oauth_provider_granite_profile_url));
    }
	if(oauth_provider_granite_extended_details_urls.isSet()){
        obj.insert(QString("oauth.provider.granite.extended.details.urls"), ::OpenAPI::toJsonValue(oauth_provider_granite_extended_details_urls));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties::getOauthProviderId() const {
    return oauth_provider_id;
}
void
OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties::setOauthProviderId(const OAIConfigNodePropertyString &oauth_provider_id) {
    this->oauth_provider_id = oauth_provider_id;
    this->m_oauth_provider_id_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties::getOauthProviderGraniteAuthorizationUrl() const {
    return oauth_provider_granite_authorization_url;
}
void
OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties::setOauthProviderGraniteAuthorizationUrl(const OAIConfigNodePropertyString &oauth_provider_granite_authorization_url) {
    this->oauth_provider_granite_authorization_url = oauth_provider_granite_authorization_url;
    this->m_oauth_provider_granite_authorization_url_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties::getOauthProviderGraniteTokenUrl() const {
    return oauth_provider_granite_token_url;
}
void
OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties::setOauthProviderGraniteTokenUrl(const OAIConfigNodePropertyString &oauth_provider_granite_token_url) {
    this->oauth_provider_granite_token_url = oauth_provider_granite_token_url;
    this->m_oauth_provider_granite_token_url_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties::getOauthProviderGraniteProfileUrl() const {
    return oauth_provider_granite_profile_url;
}
void
OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties::setOauthProviderGraniteProfileUrl(const OAIConfigNodePropertyString &oauth_provider_granite_profile_url) {
    this->oauth_provider_granite_profile_url = oauth_provider_granite_profile_url;
    this->m_oauth_provider_granite_profile_url_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties::getOauthProviderGraniteExtendedDetailsUrls() const {
    return oauth_provider_granite_extended_details_urls;
}
void
OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties::setOauthProviderGraniteExtendedDetailsUrls(const OAIConfigNodePropertyString &oauth_provider_granite_extended_details_urls) {
    this->oauth_provider_granite_extended_details_urls = oauth_provider_granite_extended_details_urls;
    this->m_oauth_provider_granite_extended_details_urls_isSet = true;
}


bool
OAIComAdobeGraniteAuthOauthImplGraniteProviderProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(oauth_provider_id.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_provider_granite_authorization_url.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_provider_granite_token_url.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_provider_granite_profile_url.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_provider_granite_extended_details_urls.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

