/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties()
{
    m_ExtensionsIsSet = false;
    m_MinDurationMsIsSet = false;
    m_MaxDurationMsIsSet = false;
    m_CompactLogFormatIsSet = false;
    
}

OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::~OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties()
{
}

void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_ExtensionsIsSet)
    {
        val["extensions"] = ModelBase::toJson(m_Extensions);
    }
    if(m_MinDurationMsIsSet)
    {
        val["minDurationMs"] = ModelBase::toJson(m_MinDurationMs);
    }
    if(m_MaxDurationMsIsSet)
    {
        val["maxDurationMs"] = ModelBase::toJson(m_MaxDurationMs);
    }
    if(m_CompactLogFormatIsSet)
    {
        val["compactLogFormat"] = ModelBase::toJson(m_CompactLogFormat);
    }
    

    return val;
}

void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::fromJson(nlohmann::json& val)
{
    if(val.find("extensions") != val.end())
    {
        if(!val["extensions"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["extensions"]);
            setExtensions( newItem );
        }
        
    }
    if(val.find("minDurationMs") != val.end())
    {
        if(!val["minDurationMs"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["minDurationMs"]);
            setMinDurationMs( newItem );
        }
        
    }
    if(val.find("maxDurationMs") != val.end())
    {
        if(!val["maxDurationMs"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["maxDurationMs"]);
            setMaxDurationMs( newItem );
        }
        
    }
    if(val.find("compactLogFormat") != val.end())
    {
        if(!val["compactLogFormat"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["compactLogFormat"]);
            setCompactLogFormat( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::getExtensions() const
{
    return m_Extensions;
}
void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::setExtensions(ConfigNodePropertyArray const& value)
{
    m_Extensions = value;
    m_ExtensionsIsSet = true;
}
bool OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::extensionsIsSet() const
{
    return m_ExtensionsIsSet;
}
void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::unsetExtensions()
{
    m_ExtensionsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::getMinDurationMs() const
{
    return m_MinDurationMs;
}
void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::setMinDurationMs(ConfigNodePropertyInteger const& value)
{
    m_MinDurationMs = value;
    m_MinDurationMsIsSet = true;
}
bool OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::minDurationMsIsSet() const
{
    return m_MinDurationMsIsSet;
}
void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::unsetMinDurationMs()
{
    m_MinDurationMsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::getMaxDurationMs() const
{
    return m_MaxDurationMs;
}
void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::setMaxDurationMs(ConfigNodePropertyInteger const& value)
{
    m_MaxDurationMs = value;
    m_MaxDurationMsIsSet = true;
}
bool OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::maxDurationMsIsSet() const
{
    return m_MaxDurationMsIsSet;
}
void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::unsetMaxDurationMs()
{
    m_MaxDurationMsIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::getCompactLogFormat() const
{
    return m_CompactLogFormat;
}
void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::setCompactLogFormat(ConfigNodePropertyBoolean const& value)
{
    m_CompactLogFormat = value;
    m_CompactLogFormatIsSet = true;
}
bool OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::compactLogFormatIsSet() const
{
    return m_CompactLogFormatIsSet;
}
void OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::unsetCompactLogFormat()
{
    m_CompactLogFormatIsSet = false;
}

}
}
}
}

