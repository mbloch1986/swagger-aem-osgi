/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties :  IEquatable<OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties" /> class.
        /// </summary>
        /// <param name="permissionsJr2">permissionsJr2.</param>
        /// <param name="importBehavior">importBehavior.</param>
        /// <param name="readPaths">readPaths.</param>
        /// <param name="administrativePrincipals">administrativePrincipals.</param>
        /// <param name="configurationRanking">configurationRanking.</param>
        public OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties(ConfigNodePropertyDropDown permissionsJr2 = default(ConfigNodePropertyDropDown), ConfigNodePropertyDropDown importBehavior = default(ConfigNodePropertyDropDown), ConfigNodePropertyArray readPaths = default(ConfigNodePropertyArray), ConfigNodePropertyArray administrativePrincipals = default(ConfigNodePropertyArray), ConfigNodePropertyInteger configurationRanking = default(ConfigNodePropertyInteger))
        {
            this.PermissionsJr2 = permissionsJr2;
            this.ImportBehavior = importBehavior;
            this.ReadPaths = readPaths;
            this.AdministrativePrincipals = administrativePrincipals;
            this.ConfigurationRanking = configurationRanking;
        }
        
        /// <summary>
        /// Gets or Sets PermissionsJr2
        /// </summary>
        [DataMember(Name="permissionsJr2", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown PermissionsJr2 { get; set; }

        /// <summary>
        /// Gets or Sets ImportBehavior
        /// </summary>
        [DataMember(Name="importBehavior", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown ImportBehavior { get; set; }

        /// <summary>
        /// Gets or Sets ReadPaths
        /// </summary>
        [DataMember(Name="readPaths", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ReadPaths { get; set; }

        /// <summary>
        /// Gets or Sets AdministrativePrincipals
        /// </summary>
        [DataMember(Name="administrativePrincipals", EmitDefaultValue=false)]
        public ConfigNodePropertyArray AdministrativePrincipals { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationRanking
        /// </summary>
        [DataMember(Name="configurationRanking", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ConfigurationRanking { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties {\n");
            sb.Append("  PermissionsJr2: ").Append(PermissionsJr2).Append("\n");
            sb.Append("  ImportBehavior: ").Append(ImportBehavior).Append("\n");
            sb.Append("  ReadPaths: ").Append(ReadPaths).Append("\n");
            sb.Append("  AdministrativePrincipals: ").Append(AdministrativePrincipals).Append("\n");
            sb.Append("  ConfigurationRanking: ").Append(ConfigurationRanking).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PermissionsJr2 == input.PermissionsJr2 ||
                    (this.PermissionsJr2 != null &&
                    this.PermissionsJr2.Equals(input.PermissionsJr2))
                ) && 
                (
                    this.ImportBehavior == input.ImportBehavior ||
                    (this.ImportBehavior != null &&
                    this.ImportBehavior.Equals(input.ImportBehavior))
                ) && 
                (
                    this.ReadPaths == input.ReadPaths ||
                    (this.ReadPaths != null &&
                    this.ReadPaths.Equals(input.ReadPaths))
                ) && 
                (
                    this.AdministrativePrincipals == input.AdministrativePrincipals ||
                    (this.AdministrativePrincipals != null &&
                    this.AdministrativePrincipals.Equals(input.AdministrativePrincipals))
                ) && 
                (
                    this.ConfigurationRanking == input.ConfigurationRanking ||
                    (this.ConfigurationRanking != null &&
                    this.ConfigurationRanking.Equals(input.ConfigurationRanking))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PermissionsJr2 != null)
                    hashCode = hashCode * 59 + this.PermissionsJr2.GetHashCode();
                if (this.ImportBehavior != null)
                    hashCode = hashCode * 59 + this.ImportBehavior.GetHashCode();
                if (this.ReadPaths != null)
                    hashCode = hashCode * 59 + this.ReadPaths.GetHashCode();
                if (this.AdministrativePrincipals != null)
                    hashCode = hashCode * 59 + this.AdministrativePrincipals.GetHashCode();
                if (this.ConfigurationRanking != null)
                    hashCode = hashCode * 59 + this.ConfigurationRanking.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
