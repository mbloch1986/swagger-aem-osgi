/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties()
{
    m_DescriptionIsSet = false;
    m_OverridesIsSet = false;
    m_EnabledIsSet = false;
    m_Service_rankingIsSet = false;
    
}

OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::~OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties()
{
}

void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_DescriptionIsSet)
    {
        val["description"] = ModelBase::toJson(m_Description);
    }
    if(m_OverridesIsSet)
    {
        val["overrides"] = ModelBase::toJson(m_Overrides);
    }
    if(m_EnabledIsSet)
    {
        val["enabled"] = ModelBase::toJson(m_Enabled);
    }
    if(m_Service_rankingIsSet)
    {
        val["service.ranking"] = ModelBase::toJson(m_Service_ranking);
    }
    

    return val;
}

void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::fromJson(nlohmann::json& val)
{
    if(val.find("description") != val.end())
    {
        if(!val["description"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["description"]);
            setDescription( newItem );
        }
        
    }
    if(val.find("overrides") != val.end())
    {
        if(!val["overrides"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["overrides"]);
            setOverrides( newItem );
        }
        
    }
    if(val.find("enabled") != val.end())
    {
        if(!val["enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enabled"]);
            setEnabled( newItem );
        }
        
    }
    if(val.find("service.ranking") != val.end())
    {
        if(!val["service.ranking"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["service.ranking"]);
            setServiceRanking( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::getDescription() const
{
    return m_Description;
}
void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::setDescription(ConfigNodePropertyString const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::unsetDescription()
{
    m_DescriptionIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::getOverrides() const
{
    return m_Overrides;
}
void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::setOverrides(ConfigNodePropertyArray const& value)
{
    m_Overrides = value;
    m_OverridesIsSet = true;
}
bool OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::overridesIsSet() const
{
    return m_OverridesIsSet;
}
void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::unsetOverrides()
{
    m_OverridesIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::getEnabled() const
{
    return m_Enabled;
}
void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::setEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::enabledIsSet() const
{
    return m_EnabledIsSet;
}
void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::unsetEnabled()
{
    m_EnabledIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::getServiceRanking() const
{
    return m_Service_ranking;
}
void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::setServiceRanking(ConfigNodePropertyInteger const& value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}
bool OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}
void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}

}
}
}
}

