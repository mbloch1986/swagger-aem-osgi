/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties()
{
    m_SyncTranslationState_schedulingFormatIsSet = false;
    m_SchedulingRepeatTranslation_schedulingFormatIsSet = false;
    m_SyncTranslationState_lockTimeoutInMinutesIsSet = false;
    m_Export_formatIsSet = false;
    
}

ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::~ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties()
{
}

void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_SyncTranslationState_schedulingFormatIsSet)
    {
        val["syncTranslationState.schedulingFormat"] = ModelBase::toJson(m_SyncTranslationState_schedulingFormat);
    }
    if(m_SchedulingRepeatTranslation_schedulingFormatIsSet)
    {
        val["schedulingRepeatTranslation.schedulingFormat"] = ModelBase::toJson(m_SchedulingRepeatTranslation_schedulingFormat);
    }
    if(m_SyncTranslationState_lockTimeoutInMinutesIsSet)
    {
        val["syncTranslationState.lockTimeoutInMinutes"] = ModelBase::toJson(m_SyncTranslationState_lockTimeoutInMinutes);
    }
    if(m_Export_formatIsSet)
    {
        val["export.format"] = ModelBase::toJson(m_Export_format);
    }
    

    return val;
}

void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("syncTranslationState.schedulingFormat") != val.end())
    {
        if(!val["syncTranslationState.schedulingFormat"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["syncTranslationState.schedulingFormat"]);
            setSyncTranslationStateSchedulingFormat( newItem );
        }
        
    }
    if(val.find("schedulingRepeatTranslation.schedulingFormat") != val.end())
    {
        if(!val["schedulingRepeatTranslation.schedulingFormat"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["schedulingRepeatTranslation.schedulingFormat"]);
            setSchedulingRepeatTranslationSchedulingFormat( newItem );
        }
        
    }
    if(val.find("syncTranslationState.lockTimeoutInMinutes") != val.end())
    {
        if(!val["syncTranslationState.lockTimeoutInMinutes"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["syncTranslationState.lockTimeoutInMinutes"]);
            setSyncTranslationStateLockTimeoutInMinutes( newItem );
        }
        
    }
    if(val.find("export.format") != val.end())
    {
        if(!val["export.format"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["export.format"]);
            setExportFormat( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::getSyncTranslationStateSchedulingFormat() const
{
    return m_SyncTranslationState_schedulingFormat;
}
void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::setSyncTranslationStateSchedulingFormat(ConfigNodePropertyString const& value)
{
    m_SyncTranslationState_schedulingFormat = value;
    m_SyncTranslationState_schedulingFormatIsSet = true;
}
bool ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::syncTranslationStateSchedulingFormatIsSet() const
{
    return m_SyncTranslationState_schedulingFormatIsSet;
}
void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::unsetSyncTranslationState_schedulingFormat()
{
    m_SyncTranslationState_schedulingFormatIsSet = false;
}
ConfigNodePropertyString ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::getSchedulingRepeatTranslationSchedulingFormat() const
{
    return m_SchedulingRepeatTranslation_schedulingFormat;
}
void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::setSchedulingRepeatTranslationSchedulingFormat(ConfigNodePropertyString const& value)
{
    m_SchedulingRepeatTranslation_schedulingFormat = value;
    m_SchedulingRepeatTranslation_schedulingFormatIsSet = true;
}
bool ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::schedulingRepeatTranslationSchedulingFormatIsSet() const
{
    return m_SchedulingRepeatTranslation_schedulingFormatIsSet;
}
void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::unsetSchedulingRepeatTranslation_schedulingFormat()
{
    m_SchedulingRepeatTranslation_schedulingFormatIsSet = false;
}
ConfigNodePropertyString ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::getSyncTranslationStateLockTimeoutInMinutes() const
{
    return m_SyncTranslationState_lockTimeoutInMinutes;
}
void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::setSyncTranslationStateLockTimeoutInMinutes(ConfigNodePropertyString const& value)
{
    m_SyncTranslationState_lockTimeoutInMinutes = value;
    m_SyncTranslationState_lockTimeoutInMinutesIsSet = true;
}
bool ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::syncTranslationStateLockTimeoutInMinutesIsSet() const
{
    return m_SyncTranslationState_lockTimeoutInMinutesIsSet;
}
void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::unsetSyncTranslationState_lockTimeoutInMinutes()
{
    m_SyncTranslationState_lockTimeoutInMinutesIsSet = false;
}
ConfigNodePropertyDropDown ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::getExportFormat() const
{
    return m_Export_format;
}
void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::setExportFormat(ConfigNodePropertyDropDown const& value)
{
    m_Export_format = value;
    m_Export_formatIsSet = true;
}
bool ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::exportFormatIsSet() const
{
    return m_Export_formatIsSet;
}
void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::unsetExport_format()
{
    m_Export_formatIsSet = false;
}

}
}
}
}

