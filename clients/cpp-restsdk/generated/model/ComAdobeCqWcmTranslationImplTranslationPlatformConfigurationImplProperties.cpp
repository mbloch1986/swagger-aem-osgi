/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties()
{
    m_SyncTranslationState_schedulingFormatIsSet = false;
    m_SchedulingRepeatTranslation_schedulingFormatIsSet = false;
    m_SyncTranslationState_lockTimeoutInMinutesIsSet = false;
    m_Export_formatIsSet = false;
}

ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::~ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties()
{
}

void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SyncTranslationState_schedulingFormatIsSet)
    {
        val[utility::conversions::to_string_t("syncTranslationState.schedulingFormat")] = ModelBase::toJson(m_SyncTranslationState_schedulingFormat);
    }
    if(m_SchedulingRepeatTranslation_schedulingFormatIsSet)
    {
        val[utility::conversions::to_string_t("schedulingRepeatTranslation.schedulingFormat")] = ModelBase::toJson(m_SchedulingRepeatTranslation_schedulingFormat);
    }
    if(m_SyncTranslationState_lockTimeoutInMinutesIsSet)
    {
        val[utility::conversions::to_string_t("syncTranslationState.lockTimeoutInMinutes")] = ModelBase::toJson(m_SyncTranslationState_lockTimeoutInMinutes);
    }
    if(m_Export_formatIsSet)
    {
        val[utility::conversions::to_string_t("export.format")] = ModelBase::toJson(m_Export_format);
    }

    return val;
}

void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("syncTranslationState.schedulingFormat")))
    {
        if(!val[utility::conversions::to_string_t("syncTranslationState.schedulingFormat")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("syncTranslationState.schedulingFormat")]);
            setSyncTranslationStateSchedulingFormat( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("schedulingRepeatTranslation.schedulingFormat")))
    {
        if(!val[utility::conversions::to_string_t("schedulingRepeatTranslation.schedulingFormat")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("schedulingRepeatTranslation.schedulingFormat")]);
            setSchedulingRepeatTranslationSchedulingFormat( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("syncTranslationState.lockTimeoutInMinutes")))
    {
        if(!val[utility::conversions::to_string_t("syncTranslationState.lockTimeoutInMinutes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("syncTranslationState.lockTimeoutInMinutes")]);
            setSyncTranslationStateLockTimeoutInMinutes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("export.format")))
    {
        if(!val[utility::conversions::to_string_t("export.format")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("export.format")]);
            setExportFormat( newItem );
        }
    }
}

void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_SyncTranslationState_schedulingFormatIsSet)
    {
        if (m_SyncTranslationState_schedulingFormat.get())
        {
            m_SyncTranslationState_schedulingFormat->toMultipart(multipart, utility::conversions::to_string_t("syncTranslationState.schedulingFormat."));
        }
    }
    if(m_SchedulingRepeatTranslation_schedulingFormatIsSet)
    {
        if (m_SchedulingRepeatTranslation_schedulingFormat.get())
        {
            m_SchedulingRepeatTranslation_schedulingFormat->toMultipart(multipart, utility::conversions::to_string_t("schedulingRepeatTranslation.schedulingFormat."));
        }
    }
    if(m_SyncTranslationState_lockTimeoutInMinutesIsSet)
    {
        if (m_SyncTranslationState_lockTimeoutInMinutes.get())
        {
            m_SyncTranslationState_lockTimeoutInMinutes->toMultipart(multipart, utility::conversions::to_string_t("syncTranslationState.lockTimeoutInMinutes."));
        }
    }
    if(m_Export_formatIsSet)
    {
        if (m_Export_format.get())
        {
            m_Export_format->toMultipart(multipart, utility::conversions::to_string_t("export.format."));
        }
    }
}

void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("syncTranslationState.schedulingFormat")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("syncTranslationState.schedulingFormat")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("syncTranslationState.schedulingFormat."));
            setSyncTranslationStateSchedulingFormat( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("schedulingRepeatTranslation.schedulingFormat")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("schedulingRepeatTranslation.schedulingFormat")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("schedulingRepeatTranslation.schedulingFormat."));
            setSchedulingRepeatTranslationSchedulingFormat( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("syncTranslationState.lockTimeoutInMinutes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("syncTranslationState.lockTimeoutInMinutes")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("syncTranslationState.lockTimeoutInMinutes."));
            setSyncTranslationStateLockTimeoutInMinutes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("export.format")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("export.format")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("export.format."));
            setExportFormat( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::getSyncTranslationStateSchedulingFormat() const
{
    return m_SyncTranslationState_schedulingFormat;
}


void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::setSyncTranslationStateSchedulingFormat(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_SyncTranslationState_schedulingFormat = value;
    m_SyncTranslationState_schedulingFormatIsSet = true;
}
bool ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::syncTranslationStateSchedulingFormatIsSet() const
{
    return m_SyncTranslationState_schedulingFormatIsSet;
}

void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::unsetSyncTranslationState_schedulingFormat()
{
    m_SyncTranslationState_schedulingFormatIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::getSchedulingRepeatTranslationSchedulingFormat() const
{
    return m_SchedulingRepeatTranslation_schedulingFormat;
}


void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::setSchedulingRepeatTranslationSchedulingFormat(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_SchedulingRepeatTranslation_schedulingFormat = value;
    m_SchedulingRepeatTranslation_schedulingFormatIsSet = true;
}
bool ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::schedulingRepeatTranslationSchedulingFormatIsSet() const
{
    return m_SchedulingRepeatTranslation_schedulingFormatIsSet;
}

void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::unsetSchedulingRepeatTranslation_schedulingFormat()
{
    m_SchedulingRepeatTranslation_schedulingFormatIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::getSyncTranslationStateLockTimeoutInMinutes() const
{
    return m_SyncTranslationState_lockTimeoutInMinutes;
}


void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::setSyncTranslationStateLockTimeoutInMinutes(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_SyncTranslationState_lockTimeoutInMinutes = value;
    m_SyncTranslationState_lockTimeoutInMinutesIsSet = true;
}
bool ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::syncTranslationStateLockTimeoutInMinutesIsSet() const
{
    return m_SyncTranslationState_lockTimeoutInMinutesIsSet;
}

void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::unsetSyncTranslationState_lockTimeoutInMinutes()
{
    m_SyncTranslationState_lockTimeoutInMinutesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::getExportFormat() const
{
    return m_Export_format;
}


void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::setExportFormat(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Export_format = value;
    m_Export_formatIsSet = true;
}
bool ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::exportFormatIsSet() const
{
    return m_Export_formatIsSet;
}

void ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::unsetExport_format()
{
    m_Export_formatIsSet = false;
}

}
}
}
}

