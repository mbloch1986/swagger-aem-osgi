/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqWcmCoreImplVersionPurgeTaskProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqWcmCoreImplVersionPurgeTaskProperties::ComDayCqWcmCoreImplVersionPurgeTaskProperties()
{
    m_Versionpurge_pathsIsSet = false;
    m_Versionpurge_recursiveIsSet = false;
    m_Versionpurge_maxVersionsIsSet = false;
    m_Versionpurge_minVersionsIsSet = false;
    m_Versionpurge_maxAgeDaysIsSet = false;
    
}

ComDayCqWcmCoreImplVersionPurgeTaskProperties::~ComDayCqWcmCoreImplVersionPurgeTaskProperties()
{
}

void ComDayCqWcmCoreImplVersionPurgeTaskProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqWcmCoreImplVersionPurgeTaskProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Versionpurge_pathsIsSet)
    {
        val["versionpurge.paths"] = ModelBase::toJson(m_Versionpurge_paths);
    }
    if(m_Versionpurge_recursiveIsSet)
    {
        val["versionpurge.recursive"] = ModelBase::toJson(m_Versionpurge_recursive);
    }
    if(m_Versionpurge_maxVersionsIsSet)
    {
        val["versionpurge.maxVersions"] = ModelBase::toJson(m_Versionpurge_maxVersions);
    }
    if(m_Versionpurge_minVersionsIsSet)
    {
        val["versionpurge.minVersions"] = ModelBase::toJson(m_Versionpurge_minVersions);
    }
    if(m_Versionpurge_maxAgeDaysIsSet)
    {
        val["versionpurge.maxAgeDays"] = ModelBase::toJson(m_Versionpurge_maxAgeDays);
    }
    

    return val;
}

void ComDayCqWcmCoreImplVersionPurgeTaskProperties::fromJson(nlohmann::json& val)
{
    if(val.find("versionpurge.paths") != val.end())
    {
        if(!val["versionpurge.paths"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["versionpurge.paths"]);
            setVersionpurgePaths( newItem );
        }
        
    }
    if(val.find("versionpurge.recursive") != val.end())
    {
        if(!val["versionpurge.recursive"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["versionpurge.recursive"]);
            setVersionpurgeRecursive( newItem );
        }
        
    }
    if(val.find("versionpurge.maxVersions") != val.end())
    {
        if(!val["versionpurge.maxVersions"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["versionpurge.maxVersions"]);
            setVersionpurgeMaxVersions( newItem );
        }
        
    }
    if(val.find("versionpurge.minVersions") != val.end())
    {
        if(!val["versionpurge.minVersions"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["versionpurge.minVersions"]);
            setVersionpurgeMinVersions( newItem );
        }
        
    }
    if(val.find("versionpurge.maxAgeDays") != val.end())
    {
        if(!val["versionpurge.maxAgeDays"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["versionpurge.maxAgeDays"]);
            setVersionpurgeMaxAgeDays( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgePaths() const
{
    return m_Versionpurge_paths;
}
void ComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgePaths(ConfigNodePropertyArray const& value)
{
    m_Versionpurge_paths = value;
    m_Versionpurge_pathsIsSet = true;
}
bool ComDayCqWcmCoreImplVersionPurgeTaskProperties::versionpurgePathsIsSet() const
{
    return m_Versionpurge_pathsIsSet;
}
void ComDayCqWcmCoreImplVersionPurgeTaskProperties::unsetVersionpurge_paths()
{
    m_Versionpurge_pathsIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgeRecursive() const
{
    return m_Versionpurge_recursive;
}
void ComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgeRecursive(ConfigNodePropertyBoolean const& value)
{
    m_Versionpurge_recursive = value;
    m_Versionpurge_recursiveIsSet = true;
}
bool ComDayCqWcmCoreImplVersionPurgeTaskProperties::versionpurgeRecursiveIsSet() const
{
    return m_Versionpurge_recursiveIsSet;
}
void ComDayCqWcmCoreImplVersionPurgeTaskProperties::unsetVersionpurge_recursive()
{
    m_Versionpurge_recursiveIsSet = false;
}
ConfigNodePropertyInteger ComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgeMaxVersions() const
{
    return m_Versionpurge_maxVersions;
}
void ComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgeMaxVersions(ConfigNodePropertyInteger const& value)
{
    m_Versionpurge_maxVersions = value;
    m_Versionpurge_maxVersionsIsSet = true;
}
bool ComDayCqWcmCoreImplVersionPurgeTaskProperties::versionpurgeMaxVersionsIsSet() const
{
    return m_Versionpurge_maxVersionsIsSet;
}
void ComDayCqWcmCoreImplVersionPurgeTaskProperties::unsetVersionpurge_maxVersions()
{
    m_Versionpurge_maxVersionsIsSet = false;
}
ConfigNodePropertyInteger ComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgeMinVersions() const
{
    return m_Versionpurge_minVersions;
}
void ComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgeMinVersions(ConfigNodePropertyInteger const& value)
{
    m_Versionpurge_minVersions = value;
    m_Versionpurge_minVersionsIsSet = true;
}
bool ComDayCqWcmCoreImplVersionPurgeTaskProperties::versionpurgeMinVersionsIsSet() const
{
    return m_Versionpurge_minVersionsIsSet;
}
void ComDayCqWcmCoreImplVersionPurgeTaskProperties::unsetVersionpurge_minVersions()
{
    m_Versionpurge_minVersionsIsSet = false;
}
ConfigNodePropertyInteger ComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgeMaxAgeDays() const
{
    return m_Versionpurge_maxAgeDays;
}
void ComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgeMaxAgeDays(ConfigNodePropertyInteger const& value)
{
    m_Versionpurge_maxAgeDays = value;
    m_Versionpurge_maxAgeDaysIsSet = true;
}
bool ComDayCqWcmCoreImplVersionPurgeTaskProperties::versionpurgeMaxAgeDaysIsSet() const
{
    return m_Versionpurge_maxAgeDaysIsSet;
}
void ComDayCqWcmCoreImplVersionPurgeTaskProperties::unsetVersionpurge_maxAgeDays()
{
    m_Versionpurge_maxAgeDaysIsSet = false;
}

}
}
}
}

