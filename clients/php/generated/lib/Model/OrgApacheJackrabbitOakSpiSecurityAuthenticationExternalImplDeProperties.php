<?php
/**
 * OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'handler_name' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'user_expiration_time' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'user_auto_membership' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'user_property_mapping' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'user_path_prefix' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'user_membership_exp_time' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'user_membership_nesting_depth' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'user_dynamic_membership' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'user_disable_missing' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'group_expiration_time' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'group_auto_membership' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'group_property_mapping' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'group_path_prefix' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'enable_rfc7613_usercase_mapped_profile' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'handler_name' => null,
        'user_expiration_time' => null,
        'user_auto_membership' => null,
        'user_property_mapping' => null,
        'user_path_prefix' => null,
        'user_membership_exp_time' => null,
        'user_membership_nesting_depth' => null,
        'user_dynamic_membership' => null,
        'user_disable_missing' => null,
        'group_expiration_time' => null,
        'group_auto_membership' => null,
        'group_property_mapping' => null,
        'group_path_prefix' => null,
        'enable_rfc7613_usercase_mapped_profile' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'handler_name' => 'handler.name',
        'user_expiration_time' => 'user.expirationTime',
        'user_auto_membership' => 'user.autoMembership',
        'user_property_mapping' => 'user.propertyMapping',
        'user_path_prefix' => 'user.pathPrefix',
        'user_membership_exp_time' => 'user.membershipExpTime',
        'user_membership_nesting_depth' => 'user.membershipNestingDepth',
        'user_dynamic_membership' => 'user.dynamicMembership',
        'user_disable_missing' => 'user.disableMissing',
        'group_expiration_time' => 'group.expirationTime',
        'group_auto_membership' => 'group.autoMembership',
        'group_property_mapping' => 'group.propertyMapping',
        'group_path_prefix' => 'group.pathPrefix',
        'enable_rfc7613_usercase_mapped_profile' => 'enableRFC7613UsercaseMappedProfile'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'handler_name' => 'setHandlerName',
        'user_expiration_time' => 'setUserExpirationTime',
        'user_auto_membership' => 'setUserAutoMembership',
        'user_property_mapping' => 'setUserPropertyMapping',
        'user_path_prefix' => 'setUserPathPrefix',
        'user_membership_exp_time' => 'setUserMembershipExpTime',
        'user_membership_nesting_depth' => 'setUserMembershipNestingDepth',
        'user_dynamic_membership' => 'setUserDynamicMembership',
        'user_disable_missing' => 'setUserDisableMissing',
        'group_expiration_time' => 'setGroupExpirationTime',
        'group_auto_membership' => 'setGroupAutoMembership',
        'group_property_mapping' => 'setGroupPropertyMapping',
        'group_path_prefix' => 'setGroupPathPrefix',
        'enable_rfc7613_usercase_mapped_profile' => 'setEnableRfc7613UsercaseMappedProfile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'handler_name' => 'getHandlerName',
        'user_expiration_time' => 'getUserExpirationTime',
        'user_auto_membership' => 'getUserAutoMembership',
        'user_property_mapping' => 'getUserPropertyMapping',
        'user_path_prefix' => 'getUserPathPrefix',
        'user_membership_exp_time' => 'getUserMembershipExpTime',
        'user_membership_nesting_depth' => 'getUserMembershipNestingDepth',
        'user_dynamic_membership' => 'getUserDynamicMembership',
        'user_disable_missing' => 'getUserDisableMissing',
        'group_expiration_time' => 'getGroupExpirationTime',
        'group_auto_membership' => 'getGroupAutoMembership',
        'group_property_mapping' => 'getGroupPropertyMapping',
        'group_path_prefix' => 'getGroupPathPrefix',
        'enable_rfc7613_usercase_mapped_profile' => 'getEnableRfc7613UsercaseMappedProfile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['handler_name'] = isset($data['handler_name']) ? $data['handler_name'] : null;
        $this->container['user_expiration_time'] = isset($data['user_expiration_time']) ? $data['user_expiration_time'] : null;
        $this->container['user_auto_membership'] = isset($data['user_auto_membership']) ? $data['user_auto_membership'] : null;
        $this->container['user_property_mapping'] = isset($data['user_property_mapping']) ? $data['user_property_mapping'] : null;
        $this->container['user_path_prefix'] = isset($data['user_path_prefix']) ? $data['user_path_prefix'] : null;
        $this->container['user_membership_exp_time'] = isset($data['user_membership_exp_time']) ? $data['user_membership_exp_time'] : null;
        $this->container['user_membership_nesting_depth'] = isset($data['user_membership_nesting_depth']) ? $data['user_membership_nesting_depth'] : null;
        $this->container['user_dynamic_membership'] = isset($data['user_dynamic_membership']) ? $data['user_dynamic_membership'] : null;
        $this->container['user_disable_missing'] = isset($data['user_disable_missing']) ? $data['user_disable_missing'] : null;
        $this->container['group_expiration_time'] = isset($data['group_expiration_time']) ? $data['group_expiration_time'] : null;
        $this->container['group_auto_membership'] = isset($data['group_auto_membership']) ? $data['group_auto_membership'] : null;
        $this->container['group_property_mapping'] = isset($data['group_property_mapping']) ? $data['group_property_mapping'] : null;
        $this->container['group_path_prefix'] = isset($data['group_path_prefix']) ? $data['group_path_prefix'] : null;
        $this->container['enable_rfc7613_usercase_mapped_profile'] = isset($data['enable_rfc7613_usercase_mapped_profile']) ? $data['enable_rfc7613_usercase_mapped_profile'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets handler_name
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getHandlerName()
    {
        return $this->container['handler_name'];
    }

    /**
     * Sets handler_name
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $handler_name handler_name
     *
     * @return $this
     */
    public function setHandlerName($handler_name)
    {
        $this->container['handler_name'] = $handler_name;

        return $this;
    }

    /**
     * Gets user_expiration_time
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getUserExpirationTime()
    {
        return $this->container['user_expiration_time'];
    }

    /**
     * Sets user_expiration_time
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $user_expiration_time user_expiration_time
     *
     * @return $this
     */
    public function setUserExpirationTime($user_expiration_time)
    {
        $this->container['user_expiration_time'] = $user_expiration_time;

        return $this;
    }

    /**
     * Gets user_auto_membership
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getUserAutoMembership()
    {
        return $this->container['user_auto_membership'];
    }

    /**
     * Sets user_auto_membership
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $user_auto_membership user_auto_membership
     *
     * @return $this
     */
    public function setUserAutoMembership($user_auto_membership)
    {
        $this->container['user_auto_membership'] = $user_auto_membership;

        return $this;
    }

    /**
     * Gets user_property_mapping
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getUserPropertyMapping()
    {
        return $this->container['user_property_mapping'];
    }

    /**
     * Sets user_property_mapping
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $user_property_mapping user_property_mapping
     *
     * @return $this
     */
    public function setUserPropertyMapping($user_property_mapping)
    {
        $this->container['user_property_mapping'] = $user_property_mapping;

        return $this;
    }

    /**
     * Gets user_path_prefix
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getUserPathPrefix()
    {
        return $this->container['user_path_prefix'];
    }

    /**
     * Sets user_path_prefix
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $user_path_prefix user_path_prefix
     *
     * @return $this
     */
    public function setUserPathPrefix($user_path_prefix)
    {
        $this->container['user_path_prefix'] = $user_path_prefix;

        return $this;
    }

    /**
     * Gets user_membership_exp_time
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getUserMembershipExpTime()
    {
        return $this->container['user_membership_exp_time'];
    }

    /**
     * Sets user_membership_exp_time
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $user_membership_exp_time user_membership_exp_time
     *
     * @return $this
     */
    public function setUserMembershipExpTime($user_membership_exp_time)
    {
        $this->container['user_membership_exp_time'] = $user_membership_exp_time;

        return $this;
    }

    /**
     * Gets user_membership_nesting_depth
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getUserMembershipNestingDepth()
    {
        return $this->container['user_membership_nesting_depth'];
    }

    /**
     * Sets user_membership_nesting_depth
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $user_membership_nesting_depth user_membership_nesting_depth
     *
     * @return $this
     */
    public function setUserMembershipNestingDepth($user_membership_nesting_depth)
    {
        $this->container['user_membership_nesting_depth'] = $user_membership_nesting_depth;

        return $this;
    }

    /**
     * Gets user_dynamic_membership
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getUserDynamicMembership()
    {
        return $this->container['user_dynamic_membership'];
    }

    /**
     * Sets user_dynamic_membership
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $user_dynamic_membership user_dynamic_membership
     *
     * @return $this
     */
    public function setUserDynamicMembership($user_dynamic_membership)
    {
        $this->container['user_dynamic_membership'] = $user_dynamic_membership;

        return $this;
    }

    /**
     * Gets user_disable_missing
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getUserDisableMissing()
    {
        return $this->container['user_disable_missing'];
    }

    /**
     * Sets user_disable_missing
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $user_disable_missing user_disable_missing
     *
     * @return $this
     */
    public function setUserDisableMissing($user_disable_missing)
    {
        $this->container['user_disable_missing'] = $user_disable_missing;

        return $this;
    }

    /**
     * Gets group_expiration_time
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getGroupExpirationTime()
    {
        return $this->container['group_expiration_time'];
    }

    /**
     * Sets group_expiration_time
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $group_expiration_time group_expiration_time
     *
     * @return $this
     */
    public function setGroupExpirationTime($group_expiration_time)
    {
        $this->container['group_expiration_time'] = $group_expiration_time;

        return $this;
    }

    /**
     * Gets group_auto_membership
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getGroupAutoMembership()
    {
        return $this->container['group_auto_membership'];
    }

    /**
     * Sets group_auto_membership
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $group_auto_membership group_auto_membership
     *
     * @return $this
     */
    public function setGroupAutoMembership($group_auto_membership)
    {
        $this->container['group_auto_membership'] = $group_auto_membership;

        return $this;
    }

    /**
     * Gets group_property_mapping
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getGroupPropertyMapping()
    {
        return $this->container['group_property_mapping'];
    }

    /**
     * Sets group_property_mapping
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $group_property_mapping group_property_mapping
     *
     * @return $this
     */
    public function setGroupPropertyMapping($group_property_mapping)
    {
        $this->container['group_property_mapping'] = $group_property_mapping;

        return $this;
    }

    /**
     * Gets group_path_prefix
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getGroupPathPrefix()
    {
        return $this->container['group_path_prefix'];
    }

    /**
     * Sets group_path_prefix
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $group_path_prefix group_path_prefix
     *
     * @return $this
     */
    public function setGroupPathPrefix($group_path_prefix)
    {
        $this->container['group_path_prefix'] = $group_path_prefix;

        return $this;
    }

    /**
     * Gets enable_rfc7613_usercase_mapped_profile
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getEnableRfc7613UsercaseMappedProfile()
    {
        return $this->container['enable_rfc7613_usercase_mapped_profile'];
    }

    /**
     * Sets enable_rfc7613_usercase_mapped_profile
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $enable_rfc7613_usercase_mapped_profile enable_rfc7613_usercase_mapped_profile
     *
     * @return $this
     */
    public function setEnableRfc7613UsercaseMappedProfile($enable_rfc7613_usercase_mapped_profile)
    {
        $this->container['enable_rfc7613_usercase_mapped_profile'] = $enable_rfc7613_usercase_mapped_profile;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


