/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties()
{
    m_Replication_content_useFileStorageIsSet = false;
    m_Replication_content_maxCommitAttemptsIsSet = false;
    
}

ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::~ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties()
{
}

void ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Replication_content_useFileStorageIsSet)
    {
        val["replication.content.useFileStorage"] = ModelBase::toJson(m_Replication_content_useFileStorage);
    }
    if(m_Replication_content_maxCommitAttemptsIsSet)
    {
        val["replication.content.maxCommitAttempts"] = ModelBase::toJson(m_Replication_content_maxCommitAttempts);
    }
    

    return val;
}

void ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("replication.content.useFileStorage") != val.end())
    {
        if(!val["replication.content.useFileStorage"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["replication.content.useFileStorage"]);
            setReplicationContentUseFileStorage( newItem );
        }
        
    }
    if(val.find("replication.content.maxCommitAttempts") != val.end())
    {
        if(!val["replication.content.maxCommitAttempts"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["replication.content.maxCommitAttempts"]);
            setReplicationContentMaxCommitAttempts( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::getReplicationContentUseFileStorage() const
{
    return m_Replication_content_useFileStorage;
}
void ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::setReplicationContentUseFileStorage(ConfigNodePropertyBoolean const& value)
{
    m_Replication_content_useFileStorage = value;
    m_Replication_content_useFileStorageIsSet = true;
}
bool ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::replicationContentUseFileStorageIsSet() const
{
    return m_Replication_content_useFileStorageIsSet;
}
void ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::unsetReplication_content_useFileStorage()
{
    m_Replication_content_useFileStorageIsSet = false;
}
ConfigNodePropertyInteger ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::getReplicationContentMaxCommitAttempts() const
{
    return m_Replication_content_maxCommitAttempts;
}
void ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::setReplicationContentMaxCommitAttempts(ConfigNodePropertyInteger const& value)
{
    m_Replication_content_maxCommitAttempts = value;
    m_Replication_content_maxCommitAttemptsIsSet = true;
}
bool ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::replicationContentMaxCommitAttemptsIsSet() const
{
    return m_Replication_content_maxCommitAttemptsIsSet;
}
void ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::unsetReplication_content_maxCommitAttempts()
{
    m_Replication_content_maxCommitAttemptsIsSet = false;
}

}
}
}
}

