/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqPollingImporterImplManagedPollConfigImplProperties.h
 *
 * 
 */

#ifndef ComDayCqPollingImporterImplManagedPollConfigImplProperties_H_
#define ComDayCqPollingImporterImplManagedPollConfigImplProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqPollingImporterImplManagedPollConfigImplProperties
{
public:
    ComDayCqPollingImporterImplManagedPollConfigImplProperties();
    virtual ~ComDayCqPollingImporterImplManagedPollConfigImplProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// ComDayCqPollingImporterImplManagedPollConfigImplProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getId() const;
    void setId(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnabled() const;
    void setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getReference() const;
    void setReference(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getInterval() const;
    void setInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getExpression() const;
    void setExpression(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSource() const;
    void setSource(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTarget() const;
    void setTarget(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getLogin() const;
    void setLogin(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPassword() const;
    void setPassword(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Id;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Enabled;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Reference;
    std::shared_ptr<ConfigNodePropertyInteger> m_Interval;
    std::shared_ptr<ConfigNodePropertyString> m_Expression;
    std::shared_ptr<ConfigNodePropertyString> m_Source;
    std::shared_ptr<ConfigNodePropertyString> m_Target;
    std::shared_ptr<ConfigNodePropertyString> m_Login;
    std::shared_ptr<ConfigNodePropertyString> m_Password;
};

}
}
}
}

#endif /* ComDayCqPollingImporterImplManagedPollConfigImplProperties_H_ */
