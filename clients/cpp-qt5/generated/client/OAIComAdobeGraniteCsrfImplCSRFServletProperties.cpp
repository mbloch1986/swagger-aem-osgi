/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteCsrfImplCSRFServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteCsrfImplCSRFServletProperties::OAIComAdobeGraniteCsrfImplCSRFServletProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteCsrfImplCSRFServletProperties::OAIComAdobeGraniteCsrfImplCSRFServletProperties() {
    init();
}

OAIComAdobeGraniteCsrfImplCSRFServletProperties::~OAIComAdobeGraniteCsrfImplCSRFServletProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteCsrfImplCSRFServletProperties::init() {
    csrf_token_expires_in = new OAIConfigNodePropertyInteger();
    m_csrf_token_expires_in_isSet = false;
    sling_auth_requirements = new OAIConfigNodePropertyString();
    m_sling_auth_requirements_isSet = false;
}

void
OAIComAdobeGraniteCsrfImplCSRFServletProperties::cleanup() {
    if(csrf_token_expires_in != nullptr) { 
        delete csrf_token_expires_in;
    }
    if(sling_auth_requirements != nullptr) { 
        delete sling_auth_requirements;
    }
}

OAIComAdobeGraniteCsrfImplCSRFServletProperties*
OAIComAdobeGraniteCsrfImplCSRFServletProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteCsrfImplCSRFServletProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&csrf_token_expires_in, pJson["csrf.token.expires.in"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&sling_auth_requirements, pJson["sling.auth.requirements"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeGraniteCsrfImplCSRFServletProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteCsrfImplCSRFServletProperties::asJsonObject() {
    QJsonObject obj;
    if((csrf_token_expires_in != nullptr) && (csrf_token_expires_in->isSet())){
        toJsonValue(QString("csrf.token.expires.in"), csrf_token_expires_in, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((sling_auth_requirements != nullptr) && (sling_auth_requirements->isSet())){
        toJsonValue(QString("sling.auth.requirements"), sling_auth_requirements, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteCsrfImplCSRFServletProperties::getCsrfTokenExpiresIn() {
    return csrf_token_expires_in;
}
void
OAIComAdobeGraniteCsrfImplCSRFServletProperties::setCsrfTokenExpiresIn(OAIConfigNodePropertyInteger* csrf_token_expires_in) {
    this->csrf_token_expires_in = csrf_token_expires_in;
    this->m_csrf_token_expires_in_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteCsrfImplCSRFServletProperties::getSlingAuthRequirements() {
    return sling_auth_requirements;
}
void
OAIComAdobeGraniteCsrfImplCSRFServletProperties::setSlingAuthRequirements(OAIConfigNodePropertyString* sling_auth_requirements) {
    this->sling_auth_requirements = sling_auth_requirements;
    this->m_sling_auth_requirements_isSet = true;
}


bool
OAIComAdobeGraniteCsrfImplCSRFServletProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(csrf_token_expires_in != nullptr && csrf_token_expires_in->isSet()){ isObjectUpdated = true; break;}
        if(sling_auth_requirements != nullptr && sling_auth_requirements->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

