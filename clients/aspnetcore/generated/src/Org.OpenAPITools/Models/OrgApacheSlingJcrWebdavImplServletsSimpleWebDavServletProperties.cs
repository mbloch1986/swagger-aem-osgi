/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties : IEquatable<OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties>
    { 
        /// <summary>
        /// Gets or Sets DavRoot
        /// </summary>
        [DataMember(Name="dav.root")]
        public ConfigNodePropertyString DavRoot { get; set; }

        /// <summary>
        /// Gets or Sets DavCreateAbsoluteUri
        /// </summary>
        [DataMember(Name="dav.create-absolute-uri")]
        public ConfigNodePropertyBoolean DavCreateAbsoluteUri { get; set; }

        /// <summary>
        /// Gets or Sets DavRealm
        /// </summary>
        [DataMember(Name="dav.realm")]
        public ConfigNodePropertyString DavRealm { get; set; }

        /// <summary>
        /// Gets or Sets CollectionTypes
        /// </summary>
        [DataMember(Name="collection.types")]
        public ConfigNodePropertyArray CollectionTypes { get; set; }

        /// <summary>
        /// Gets or Sets FilterPrefixes
        /// </summary>
        [DataMember(Name="filter.prefixes")]
        public ConfigNodePropertyArray FilterPrefixes { get; set; }

        /// <summary>
        /// Gets or Sets FilterTypes
        /// </summary>
        [DataMember(Name="filter.types")]
        public ConfigNodePropertyString FilterTypes { get; set; }

        /// <summary>
        /// Gets or Sets FilterUris
        /// </summary>
        [DataMember(Name="filter.uris")]
        public ConfigNodePropertyString FilterUris { get; set; }

        /// <summary>
        /// Gets or Sets TypeCollections
        /// </summary>
        [DataMember(Name="type.collections")]
        public ConfigNodePropertyString TypeCollections { get; set; }

        /// <summary>
        /// Gets or Sets TypeNoncollections
        /// </summary>
        [DataMember(Name="type.noncollections")]
        public ConfigNodePropertyString TypeNoncollections { get; set; }

        /// <summary>
        /// Gets or Sets TypeContent
        /// </summary>
        [DataMember(Name="type.content")]
        public ConfigNodePropertyString TypeContent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {\n");
            sb.Append("  DavRoot: ").Append(DavRoot).Append("\n");
            sb.Append("  DavCreateAbsoluteUri: ").Append(DavCreateAbsoluteUri).Append("\n");
            sb.Append("  DavRealm: ").Append(DavRealm).Append("\n");
            sb.Append("  CollectionTypes: ").Append(CollectionTypes).Append("\n");
            sb.Append("  FilterPrefixes: ").Append(FilterPrefixes).Append("\n");
            sb.Append("  FilterTypes: ").Append(FilterTypes).Append("\n");
            sb.Append("  FilterUris: ").Append(FilterUris).Append("\n");
            sb.Append("  TypeCollections: ").Append(TypeCollections).Append("\n");
            sb.Append("  TypeNoncollections: ").Append(TypeNoncollections).Append("\n");
            sb.Append("  TypeContent: ").Append(TypeContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DavRoot == other.DavRoot ||
                    DavRoot != null &&
                    DavRoot.Equals(other.DavRoot)
                ) && 
                (
                    DavCreateAbsoluteUri == other.DavCreateAbsoluteUri ||
                    DavCreateAbsoluteUri != null &&
                    DavCreateAbsoluteUri.Equals(other.DavCreateAbsoluteUri)
                ) && 
                (
                    DavRealm == other.DavRealm ||
                    DavRealm != null &&
                    DavRealm.Equals(other.DavRealm)
                ) && 
                (
                    CollectionTypes == other.CollectionTypes ||
                    CollectionTypes != null &&
                    CollectionTypes.Equals(other.CollectionTypes)
                ) && 
                (
                    FilterPrefixes == other.FilterPrefixes ||
                    FilterPrefixes != null &&
                    FilterPrefixes.Equals(other.FilterPrefixes)
                ) && 
                (
                    FilterTypes == other.FilterTypes ||
                    FilterTypes != null &&
                    FilterTypes.Equals(other.FilterTypes)
                ) && 
                (
                    FilterUris == other.FilterUris ||
                    FilterUris != null &&
                    FilterUris.Equals(other.FilterUris)
                ) && 
                (
                    TypeCollections == other.TypeCollections ||
                    TypeCollections != null &&
                    TypeCollections.Equals(other.TypeCollections)
                ) && 
                (
                    TypeNoncollections == other.TypeNoncollections ||
                    TypeNoncollections != null &&
                    TypeNoncollections.Equals(other.TypeNoncollections)
                ) && 
                (
                    TypeContent == other.TypeContent ||
                    TypeContent != null &&
                    TypeContent.Equals(other.TypeContent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DavRoot != null)
                    hashCode = hashCode * 59 + DavRoot.GetHashCode();
                    if (DavCreateAbsoluteUri != null)
                    hashCode = hashCode * 59 + DavCreateAbsoluteUri.GetHashCode();
                    if (DavRealm != null)
                    hashCode = hashCode * 59 + DavRealm.GetHashCode();
                    if (CollectionTypes != null)
                    hashCode = hashCode * 59 + CollectionTypes.GetHashCode();
                    if (FilterPrefixes != null)
                    hashCode = hashCode * 59 + FilterPrefixes.GetHashCode();
                    if (FilterTypes != null)
                    hashCode = hashCode * 59 + FilterTypes.GetHashCode();
                    if (FilterUris != null)
                    hashCode = hashCode * 59 + FilterUris.GetHashCode();
                    if (TypeCollections != null)
                    hashCode = hashCode * 59 + TypeCollections.GetHashCode();
                    if (TypeNoncollections != null)
                    hashCode = hashCode * 59 + TypeNoncollections.GetHashCode();
                    if (TypeContent != null)
                    hashCode = hashCode * 59 + TypeContent.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties left, OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties left, OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
