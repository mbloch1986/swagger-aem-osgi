/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties
    : public ModelBase
{
public:
    OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties();
    virtual ~OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getJasperCompilerTargetVM() const;
    bool jasperCompilerTargetVMIsSet() const;
    void unsetJasper_compilerTargetVM();
    void setJasperCompilerTargetVM(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getJasperCompilerSourceVM() const;
    bool jasperCompilerSourceVMIsSet() const;
    void unsetJasper_compilerSourceVM();
    void setJasperCompilerSourceVM(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getJasperClassdebuginfo() const;
    bool jasperClassdebuginfoIsSet() const;
    void unsetJasper_classdebuginfo();
    void setJasperClassdebuginfo(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getJasperEnablePooling() const;
    bool jasperEnablePoolingIsSet() const;
    void unsetJasper_enablePooling();
    void setJasperEnablePooling(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getJasperIeClassId() const;
    bool jasperIeClassIdIsSet() const;
    void unsetJasper_ieClassId();
    void setJasperIeClassId(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getJasperGenStringAsCharArray() const;
    bool jasperGenStringAsCharArrayIsSet() const;
    void unsetJasper_genStringAsCharArray();
    void setJasperGenStringAsCharArray(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getJasperKeepgenerated() const;
    bool jasperKeepgeneratedIsSet() const;
    void unsetJasper_keepgenerated();
    void setJasperKeepgenerated(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getJasperMappedfile() const;
    bool jasperMappedfileIsSet() const;
    void unsetJasper_mappedfile();
    void setJasperMappedfile(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getJasperTrimSpaces() const;
    bool jasperTrimSpacesIsSet() const;
    void unsetJasper_trimSpaces();
    void setJasperTrimSpaces(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getJasperDisplaySourceFragments() const;
    bool jasperDisplaySourceFragmentsIsSet() const;
    void unsetJasper_displaySourceFragments();
    void setJasperDisplaySourceFragments(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getDefaultIsSession() const;
    bool defaultIsSessionIsSet() const;
    void unsetDefault_is_session();
    void setDefaultIsSession(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Jasper_compilerTargetVM;
    bool m_Jasper_compilerTargetVMIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Jasper_compilerSourceVM;
    bool m_Jasper_compilerSourceVMIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Jasper_classdebuginfo;
    bool m_Jasper_classdebuginfoIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Jasper_enablePooling;
    bool m_Jasper_enablePoolingIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Jasper_ieClassId;
    bool m_Jasper_ieClassIdIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Jasper_genStringAsCharArray;
    bool m_Jasper_genStringAsCharArrayIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Jasper_keepgenerated;
    bool m_Jasper_keepgeneratedIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Jasper_mappedfile;
    bool m_Jasper_mappedfileIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Jasper_trimSpaces;
    bool m_Jasper_trimSpacesIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Jasper_displaySourceFragments;
    bool m_Jasper_displaySourceFragmentsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Default_is_session;
    bool m_Default_is_sessionIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties_H_ */
