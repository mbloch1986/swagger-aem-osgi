/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties() {
    init();
}

OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::~OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties() {
    this->cleanup();
}

void
OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::init() {
    timeout = new OAIConfigNodePropertyInteger();
    m_timeout_isSet = false;
    target_start_level = new OAIConfigNodePropertyInteger();
    m_target_start_level_isSet = false;
    target_start_level_prop_name = new OAIConfigNodePropertyString();
    m_target_start_level_prop_name_isSet = false;
    type = new OAIConfigNodePropertyDropDown();
    m_type_isSet = false;
}

void
OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::cleanup() {
    if(timeout != nullptr) { 
        delete timeout;
    }
    if(target_start_level != nullptr) { 
        delete target_start_level;
    }
    if(target_start_level_prop_name != nullptr) { 
        delete target_start_level_prop_name;
    }
    if(type != nullptr) { 
        delete type;
    }
}

OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties*
OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&timeout, pJson["timeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&target_start_level, pJson["target.start.level"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&target_start_level_prop_name, pJson["target.start.level.prop.name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&type, pJson["type"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
}

QString
OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::asJsonObject() {
    QJsonObject obj;
    if((timeout != nullptr) && (timeout->isSet())){
        toJsonValue(QString("timeout"), timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((target_start_level != nullptr) && (target_start_level->isSet())){
        toJsonValue(QString("target.start.level"), target_start_level, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((target_start_level_prop_name != nullptr) && (target_start_level_prop_name->isSet())){
        toJsonValue(QString("target.start.level.prop.name"), target_start_level_prop_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((type != nullptr) && (type->isSet())){
        toJsonValue(QString("type"), type, obj, QString("OAIConfigNodePropertyDropDown"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::getTimeout() {
    return timeout;
}
void
OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::setTimeout(OAIConfigNodePropertyInteger* timeout) {
    this->timeout = timeout;
    this->m_timeout_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::getTargetStartLevel() {
    return target_start_level;
}
void
OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::setTargetStartLevel(OAIConfigNodePropertyInteger* target_start_level) {
    this->target_start_level = target_start_level;
    this->m_target_start_level_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::getTargetStartLevelPropName() {
    return target_start_level_prop_name;
}
void
OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::setTargetStartLevelPropName(OAIConfigNodePropertyString* target_start_level_prop_name) {
    this->target_start_level_prop_name = target_start_level_prop_name;
    this->m_target_start_level_prop_name_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::getType() {
    return type;
}
void
OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::setType(OAIConfigNodePropertyDropDown* type) {
    this->type = type;
    this->m_type_isSet = true;
}


bool
OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(timeout != nullptr && timeout->isSet()){ isObjectUpdated = true; break;}
        if(target_start_level != nullptr && target_start_level->isSet()){ isObjectUpdated = true; break;}
        if(target_start_level_prop_name != nullptr && target_start_level_prop_name->isSet()){ isObjectUpdated = true; break;}
        if(type != nullptr && type->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

