<?php
/**
 * OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'async_configs' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'lease_time_out_minutes' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'failing_index_timeout_seconds' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'error_warn_interval_seconds' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'async_configs' => null,
        'lease_time_out_minutes' => null,
        'failing_index_timeout_seconds' => null,
        'error_warn_interval_seconds' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'async_configs' => 'asyncConfigs',
        'lease_time_out_minutes' => 'leaseTimeOutMinutes',
        'failing_index_timeout_seconds' => 'failingIndexTimeoutSeconds',
        'error_warn_interval_seconds' => 'errorWarnIntervalSeconds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'async_configs' => 'setAsyncConfigs',
        'lease_time_out_minutes' => 'setLeaseTimeOutMinutes',
        'failing_index_timeout_seconds' => 'setFailingIndexTimeoutSeconds',
        'error_warn_interval_seconds' => 'setErrorWarnIntervalSeconds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'async_configs' => 'getAsyncConfigs',
        'lease_time_out_minutes' => 'getLeaseTimeOutMinutes',
        'failing_index_timeout_seconds' => 'getFailingIndexTimeoutSeconds',
        'error_warn_interval_seconds' => 'getErrorWarnIntervalSeconds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['async_configs'] = isset($data['async_configs']) ? $data['async_configs'] : null;
        $this->container['lease_time_out_minutes'] = isset($data['lease_time_out_minutes']) ? $data['lease_time_out_minutes'] : null;
        $this->container['failing_index_timeout_seconds'] = isset($data['failing_index_timeout_seconds']) ? $data['failing_index_timeout_seconds'] : null;
        $this->container['error_warn_interval_seconds'] = isset($data['error_warn_interval_seconds']) ? $data['error_warn_interval_seconds'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets async_configs
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getAsyncConfigs()
    {
        return $this->container['async_configs'];
    }

    /**
     * Sets async_configs
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $async_configs async_configs
     *
     * @return $this
     */
    public function setAsyncConfigs($async_configs)
    {
        $this->container['async_configs'] = $async_configs;

        return $this;
    }

    /**
     * Gets lease_time_out_minutes
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getLeaseTimeOutMinutes()
    {
        return $this->container['lease_time_out_minutes'];
    }

    /**
     * Sets lease_time_out_minutes
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $lease_time_out_minutes lease_time_out_minutes
     *
     * @return $this
     */
    public function setLeaseTimeOutMinutes($lease_time_out_minutes)
    {
        $this->container['lease_time_out_minutes'] = $lease_time_out_minutes;

        return $this;
    }

    /**
     * Gets failing_index_timeout_seconds
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getFailingIndexTimeoutSeconds()
    {
        return $this->container['failing_index_timeout_seconds'];
    }

    /**
     * Sets failing_index_timeout_seconds
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $failing_index_timeout_seconds failing_index_timeout_seconds
     *
     * @return $this
     */
    public function setFailingIndexTimeoutSeconds($failing_index_timeout_seconds)
    {
        $this->container['failing_index_timeout_seconds'] = $failing_index_timeout_seconds;

        return $this;
    }

    /**
     * Gets error_warn_interval_seconds
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getErrorWarnIntervalSeconds()
    {
        return $this->container['error_warn_interval_seconds'];
    }

    /**
     * Sets error_warn_interval_seconds
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $error_warn_interval_seconds error_warn_interval_seconds
     *
     * @return $this
     */
    public function setErrorWarnIntervalSeconds($error_warn_interval_seconds)
    {
        $this->container['error_warn_interval_seconds'] = $error_warn_interval_seconds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


