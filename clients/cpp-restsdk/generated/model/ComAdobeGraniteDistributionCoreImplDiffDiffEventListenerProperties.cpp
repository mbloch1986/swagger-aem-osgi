/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties()
{
    m_DiffPathIsSet = false;
    m_ServiceNameIsSet = false;
    m_ServiceUser_targetIsSet = false;
}

ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::~ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties()
{
}

void ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DiffPathIsSet)
    {
        val[utility::conversions::to_string_t("diffPath")] = ModelBase::toJson(m_DiffPath);
    }
    if(m_ServiceNameIsSet)
    {
        val[utility::conversions::to_string_t("serviceName")] = ModelBase::toJson(m_ServiceName);
    }
    if(m_ServiceUser_targetIsSet)
    {
        val[utility::conversions::to_string_t("serviceUser.target")] = ModelBase::toJson(m_ServiceUser_target);
    }

    return val;
}

void ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("diffPath")))
    {
        if(!val[utility::conversions::to_string_t("diffPath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("diffPath")]);
            setDiffPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("serviceName")))
    {
        if(!val[utility::conversions::to_string_t("serviceName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("serviceName")]);
            setServiceName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("serviceUser.target")))
    {
        if(!val[utility::conversions::to_string_t("serviceUser.target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("serviceUser.target")]);
            setServiceUserTarget( newItem );
        }
    }
}

void ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_DiffPathIsSet)
    {
        if (m_DiffPath.get())
        {
            m_DiffPath->toMultipart(multipart, utility::conversions::to_string_t("diffPath."));
        }
    }
    if(m_ServiceNameIsSet)
    {
        if (m_ServiceName.get())
        {
            m_ServiceName->toMultipart(multipart, utility::conversions::to_string_t("serviceName."));
        }
    }
    if(m_ServiceUser_targetIsSet)
    {
        if (m_ServiceUser_target.get())
        {
            m_ServiceUser_target->toMultipart(multipart, utility::conversions::to_string_t("serviceUser.target."));
        }
    }
}

void ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("diffPath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("diffPath")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("diffPath."));
            setDiffPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("serviceName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("serviceName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("serviceName."));
            setServiceName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("serviceUser.target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("serviceUser.target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("serviceUser.target."));
            setServiceUserTarget( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::getDiffPath() const
{
    return m_DiffPath;
}


void ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::setDiffPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_DiffPath = value;
    m_DiffPathIsSet = true;
}
bool ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::diffPathIsSet() const
{
    return m_DiffPathIsSet;
}

void ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::unsetDiffPath()
{
    m_DiffPathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::getServiceName() const
{
    return m_ServiceName;
}


void ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::setServiceName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_ServiceName = value;
    m_ServiceNameIsSet = true;
}
bool ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::serviceNameIsSet() const
{
    return m_ServiceNameIsSet;
}

void ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::unsetServiceName()
{
    m_ServiceNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::getServiceUserTarget() const
{
    return m_ServiceUser_target;
}


void ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::setServiceUserTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_ServiceUser_target = value;
    m_ServiceUser_targetIsSet = true;
}
bool ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::serviceUserTargetIsSet() const
{
    return m_ServiceUser_targetIsSet;
}

void ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::unsetServiceUser_target()
{
    m_ServiceUser_targetIsSet = false;
}

}
}
}
}

