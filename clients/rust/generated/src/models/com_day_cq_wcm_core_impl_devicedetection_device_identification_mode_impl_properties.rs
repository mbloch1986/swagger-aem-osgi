/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties {
  #[serde(rename = "dim.default.mode")]
  dim_default_mode: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "dim.appcache.enabled")]
  dim_appcache_enabled: Option<::models::ConfigNodePropertyBoolean>
}

impl ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties {
  pub fn new() -> ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties {
    ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties {
      dim_default_mode: None,
      dim_appcache_enabled: None
    }
  }

  pub fn set_dim_default_mode(&mut self, dim_default_mode: ::models::ConfigNodePropertyDropDown) {
    self.dim_default_mode = Some(dim_default_mode);
  }

  pub fn with_dim_default_mode(mut self, dim_default_mode: ::models::ConfigNodePropertyDropDown) -> ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties {
    self.dim_default_mode = Some(dim_default_mode);
    self
  }

  pub fn dim_default_mode(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.dim_default_mode.as_ref()
  }

  pub fn reset_dim_default_mode(&mut self) {
    self.dim_default_mode = None;
  }

  pub fn set_dim_appcache_enabled(&mut self, dim_appcache_enabled: ::models::ConfigNodePropertyBoolean) {
    self.dim_appcache_enabled = Some(dim_appcache_enabled);
  }

  pub fn with_dim_appcache_enabled(mut self, dim_appcache_enabled: ::models::ConfigNodePropertyBoolean) -> ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties {
    self.dim_appcache_enabled = Some(dim_appcache_enabled);
    self
  }

  pub fn dim_appcache_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.dim_appcache_enabled.as_ref()
  }

  pub fn reset_dim_appcache_enabled(&mut self) {
    self.dim_appcache_enabled = None;
  }

}



