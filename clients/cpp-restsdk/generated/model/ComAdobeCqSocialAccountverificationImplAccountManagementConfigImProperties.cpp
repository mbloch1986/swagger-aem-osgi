/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties::ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties()
{
    m_EnableIsSet = false;
    m_Ttl1IsSet = false;
    m_Ttl2IsSet = false;
}

ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties::~ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties()
{
}

void ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EnableIsSet)
    {
        val[utility::conversions::to_string_t("enable")] = ModelBase::toJson(m_Enable);
    }
    if(m_Ttl1IsSet)
    {
        val[utility::conversions::to_string_t("ttl1")] = ModelBase::toJson(m_Ttl1);
    }
    if(m_Ttl2IsSet)
    {
        val[utility::conversions::to_string_t("ttl2")] = ModelBase::toJson(m_Ttl2);
    }

    return val;
}

void ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("enable")))
    {
        if(!val[utility::conversions::to_string_t("enable")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enable")]);
            setEnable( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ttl1")))
    {
        if(!val[utility::conversions::to_string_t("ttl1")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("ttl1")]);
            setTtl1( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ttl2")))
    {
        if(!val[utility::conversions::to_string_t("ttl2")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("ttl2")]);
            setTtl2( newItem );
        }
    }
}

void ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_EnableIsSet)
    {
        if (m_Enable.get())
        {
            m_Enable->toMultipart(multipart, utility::conversions::to_string_t("enable."));
        }
    }
    if(m_Ttl1IsSet)
    {
        if (m_Ttl1.get())
        {
            m_Ttl1->toMultipart(multipart, utility::conversions::to_string_t("ttl1."));
        }
    }
    if(m_Ttl2IsSet)
    {
        if (m_Ttl2.get())
        {
            m_Ttl2->toMultipart(multipart, utility::conversions::to_string_t("ttl2."));
        }
    }
}

void ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("enable")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enable")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enable."));
            setEnable( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ttl1")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ttl1")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ttl1."));
            setTtl1( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ttl2")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ttl2")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ttl2."));
            setTtl2( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties::getEnable() const
{
    return m_Enable;
}


void ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties::setEnable(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enable = value;
    m_EnableIsSet = true;
}
bool ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties::enableIsSet() const
{
    return m_EnableIsSet;
}

void ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties::unsetEnable()
{
    m_EnableIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties::getTtl1() const
{
    return m_Ttl1;
}


void ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties::setTtl1(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Ttl1 = value;
    m_Ttl1IsSet = true;
}
bool ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties::ttl1IsSet() const
{
    return m_Ttl1IsSet;
}

void ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties::unsetTtl1()
{
    m_Ttl1IsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties::getTtl2() const
{
    return m_Ttl2;
}


void ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties::setTtl2(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Ttl2 = value;
    m_Ttl2IsSet = true;
}
bool ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties::ttl2IsSet() const
{
    return m_Ttl2IsSet;
}

void ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties::unsetTtl2()
{
    m_Ttl2IsSet = false;
}

}
}
}
}

