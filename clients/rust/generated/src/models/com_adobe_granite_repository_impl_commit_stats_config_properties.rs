/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
  #[serde(rename = "enabled")]
  enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "intervalSeconds")]
  interval_seconds: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "commitsPerIntervalThreshold")]
  commits_per_interval_threshold: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "maxLocationLength")]
  max_location_length: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "maxDetailsShown")]
  max_details_shown: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "minDetailsPercentage")]
  min_details_percentage: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "threadMatchers")]
  thread_matchers: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "maxGreedyDepth")]
  max_greedy_depth: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "greedyStackMatchers")]
  greedy_stack_matchers: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "stackFilters")]
  stack_filters: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "stackMatchers")]
  stack_matchers: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "stackCategorizers")]
  stack_categorizers: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "stackShorteners")]
  stack_shorteners: Option<::models::ConfigNodePropertyArray>
}

impl ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
  pub fn new() -> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
    ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
      enabled: None,
      interval_seconds: None,
      commits_per_interval_threshold: None,
      max_location_length: None,
      max_details_shown: None,
      min_details_percentage: None,
      thread_matchers: None,
      max_greedy_depth: None,
      greedy_stack_matchers: None,
      stack_filters: None,
      stack_matchers: None,
      stack_categorizers: None,
      stack_shorteners: None
    }
  }

  pub fn set_enabled(&mut self, enabled: ::models::ConfigNodePropertyBoolean) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_interval_seconds(&mut self, interval_seconds: ::models::ConfigNodePropertyInteger) {
    self.interval_seconds = Some(interval_seconds);
  }

  pub fn with_interval_seconds(mut self, interval_seconds: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
    self.interval_seconds = Some(interval_seconds);
    self
  }

  pub fn interval_seconds(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.interval_seconds.as_ref()
  }

  pub fn reset_interval_seconds(&mut self) {
    self.interval_seconds = None;
  }

  pub fn set_commits_per_interval_threshold(&mut self, commits_per_interval_threshold: ::models::ConfigNodePropertyInteger) {
    self.commits_per_interval_threshold = Some(commits_per_interval_threshold);
  }

  pub fn with_commits_per_interval_threshold(mut self, commits_per_interval_threshold: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
    self.commits_per_interval_threshold = Some(commits_per_interval_threshold);
    self
  }

  pub fn commits_per_interval_threshold(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.commits_per_interval_threshold.as_ref()
  }

  pub fn reset_commits_per_interval_threshold(&mut self) {
    self.commits_per_interval_threshold = None;
  }

  pub fn set_max_location_length(&mut self, max_location_length: ::models::ConfigNodePropertyInteger) {
    self.max_location_length = Some(max_location_length);
  }

  pub fn with_max_location_length(mut self, max_location_length: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
    self.max_location_length = Some(max_location_length);
    self
  }

  pub fn max_location_length(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.max_location_length.as_ref()
  }

  pub fn reset_max_location_length(&mut self) {
    self.max_location_length = None;
  }

  pub fn set_max_details_shown(&mut self, max_details_shown: ::models::ConfigNodePropertyInteger) {
    self.max_details_shown = Some(max_details_shown);
  }

  pub fn with_max_details_shown(mut self, max_details_shown: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
    self.max_details_shown = Some(max_details_shown);
    self
  }

  pub fn max_details_shown(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.max_details_shown.as_ref()
  }

  pub fn reset_max_details_shown(&mut self) {
    self.max_details_shown = None;
  }

  pub fn set_min_details_percentage(&mut self, min_details_percentage: ::models::ConfigNodePropertyInteger) {
    self.min_details_percentage = Some(min_details_percentage);
  }

  pub fn with_min_details_percentage(mut self, min_details_percentage: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
    self.min_details_percentage = Some(min_details_percentage);
    self
  }

  pub fn min_details_percentage(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.min_details_percentage.as_ref()
  }

  pub fn reset_min_details_percentage(&mut self) {
    self.min_details_percentage = None;
  }

  pub fn set_thread_matchers(&mut self, thread_matchers: ::models::ConfigNodePropertyArray) {
    self.thread_matchers = Some(thread_matchers);
  }

  pub fn with_thread_matchers(mut self, thread_matchers: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
    self.thread_matchers = Some(thread_matchers);
    self
  }

  pub fn thread_matchers(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.thread_matchers.as_ref()
  }

  pub fn reset_thread_matchers(&mut self) {
    self.thread_matchers = None;
  }

  pub fn set_max_greedy_depth(&mut self, max_greedy_depth: ::models::ConfigNodePropertyInteger) {
    self.max_greedy_depth = Some(max_greedy_depth);
  }

  pub fn with_max_greedy_depth(mut self, max_greedy_depth: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
    self.max_greedy_depth = Some(max_greedy_depth);
    self
  }

  pub fn max_greedy_depth(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.max_greedy_depth.as_ref()
  }

  pub fn reset_max_greedy_depth(&mut self) {
    self.max_greedy_depth = None;
  }

  pub fn set_greedy_stack_matchers(&mut self, greedy_stack_matchers: ::models::ConfigNodePropertyString) {
    self.greedy_stack_matchers = Some(greedy_stack_matchers);
  }

  pub fn with_greedy_stack_matchers(mut self, greedy_stack_matchers: ::models::ConfigNodePropertyString) -> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
    self.greedy_stack_matchers = Some(greedy_stack_matchers);
    self
  }

  pub fn greedy_stack_matchers(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.greedy_stack_matchers.as_ref()
  }

  pub fn reset_greedy_stack_matchers(&mut self) {
    self.greedy_stack_matchers = None;
  }

  pub fn set_stack_filters(&mut self, stack_filters: ::models::ConfigNodePropertyArray) {
    self.stack_filters = Some(stack_filters);
  }

  pub fn with_stack_filters(mut self, stack_filters: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
    self.stack_filters = Some(stack_filters);
    self
  }

  pub fn stack_filters(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.stack_filters.as_ref()
  }

  pub fn reset_stack_filters(&mut self) {
    self.stack_filters = None;
  }

  pub fn set_stack_matchers(&mut self, stack_matchers: ::models::ConfigNodePropertyArray) {
    self.stack_matchers = Some(stack_matchers);
  }

  pub fn with_stack_matchers(mut self, stack_matchers: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
    self.stack_matchers = Some(stack_matchers);
    self
  }

  pub fn stack_matchers(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.stack_matchers.as_ref()
  }

  pub fn reset_stack_matchers(&mut self) {
    self.stack_matchers = None;
  }

  pub fn set_stack_categorizers(&mut self, stack_categorizers: ::models::ConfigNodePropertyArray) {
    self.stack_categorizers = Some(stack_categorizers);
  }

  pub fn with_stack_categorizers(mut self, stack_categorizers: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
    self.stack_categorizers = Some(stack_categorizers);
    self
  }

  pub fn stack_categorizers(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.stack_categorizers.as_ref()
  }

  pub fn reset_stack_categorizers(&mut self) {
    self.stack_categorizers = None;
  }

  pub fn set_stack_shorteners(&mut self, stack_shorteners: ::models::ConfigNodePropertyArray) {
    self.stack_shorteners = Some(stack_shorteners);
  }

  pub fn with_stack_shorteners(mut self, stack_shorteners: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
    self.stack_shorteners = Some(stack_shorteners);
    self
  }

  pub fn stack_shorteners(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.stack_shorteners.as_ref()
  }

  pub fn reset_stack_shorteners(&mut self) {
    self.stack_shorteners = None;
  }

}



