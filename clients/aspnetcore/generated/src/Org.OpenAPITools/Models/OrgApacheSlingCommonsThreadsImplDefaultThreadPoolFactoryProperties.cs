/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties : IEquatable<OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties>
    { 
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public ConfigNodePropertyString Name { get; set; }

        /// <summary>
        /// Gets or Sets MinPoolSize
        /// </summary>
        [DataMember(Name="minPoolSize")]
        public ConfigNodePropertyInteger MinPoolSize { get; set; }

        /// <summary>
        /// Gets or Sets MaxPoolSize
        /// </summary>
        [DataMember(Name="maxPoolSize")]
        public ConfigNodePropertyInteger MaxPoolSize { get; set; }

        /// <summary>
        /// Gets or Sets QueueSize
        /// </summary>
        [DataMember(Name="queueSize")]
        public ConfigNodePropertyInteger QueueSize { get; set; }

        /// <summary>
        /// Gets or Sets MaxThreadAge
        /// </summary>
        [DataMember(Name="maxThreadAge")]
        public ConfigNodePropertyInteger MaxThreadAge { get; set; }

        /// <summary>
        /// Gets or Sets KeepAliveTime
        /// </summary>
        [DataMember(Name="keepAliveTime")]
        public ConfigNodePropertyInteger KeepAliveTime { get; set; }

        /// <summary>
        /// Gets or Sets BlockPolicy
        /// </summary>
        [DataMember(Name="blockPolicy")]
        public ConfigNodePropertyDropDown BlockPolicy { get; set; }

        /// <summary>
        /// Gets or Sets ShutdownGraceful
        /// </summary>
        [DataMember(Name="shutdownGraceful")]
        public ConfigNodePropertyBoolean ShutdownGraceful { get; set; }

        /// <summary>
        /// Gets or Sets Daemon
        /// </summary>
        [DataMember(Name="daemon")]
        public ConfigNodePropertyBoolean Daemon { get; set; }

        /// <summary>
        /// Gets or Sets ShutdownWaitTime
        /// </summary>
        [DataMember(Name="shutdownWaitTime")]
        public ConfigNodePropertyInteger ShutdownWaitTime { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority")]
        public ConfigNodePropertyDropDown Priority { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MinPoolSize: ").Append(MinPoolSize).Append("\n");
            sb.Append("  MaxPoolSize: ").Append(MaxPoolSize).Append("\n");
            sb.Append("  QueueSize: ").Append(QueueSize).Append("\n");
            sb.Append("  MaxThreadAge: ").Append(MaxThreadAge).Append("\n");
            sb.Append("  KeepAliveTime: ").Append(KeepAliveTime).Append("\n");
            sb.Append("  BlockPolicy: ").Append(BlockPolicy).Append("\n");
            sb.Append("  ShutdownGraceful: ").Append(ShutdownGraceful).Append("\n");
            sb.Append("  Daemon: ").Append(Daemon).Append("\n");
            sb.Append("  ShutdownWaitTime: ").Append(ShutdownWaitTime).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    MinPoolSize == other.MinPoolSize ||
                    MinPoolSize != null &&
                    MinPoolSize.Equals(other.MinPoolSize)
                ) && 
                (
                    MaxPoolSize == other.MaxPoolSize ||
                    MaxPoolSize != null &&
                    MaxPoolSize.Equals(other.MaxPoolSize)
                ) && 
                (
                    QueueSize == other.QueueSize ||
                    QueueSize != null &&
                    QueueSize.Equals(other.QueueSize)
                ) && 
                (
                    MaxThreadAge == other.MaxThreadAge ||
                    MaxThreadAge != null &&
                    MaxThreadAge.Equals(other.MaxThreadAge)
                ) && 
                (
                    KeepAliveTime == other.KeepAliveTime ||
                    KeepAliveTime != null &&
                    KeepAliveTime.Equals(other.KeepAliveTime)
                ) && 
                (
                    BlockPolicy == other.BlockPolicy ||
                    BlockPolicy != null &&
                    BlockPolicy.Equals(other.BlockPolicy)
                ) && 
                (
                    ShutdownGraceful == other.ShutdownGraceful ||
                    ShutdownGraceful != null &&
                    ShutdownGraceful.Equals(other.ShutdownGraceful)
                ) && 
                (
                    Daemon == other.Daemon ||
                    Daemon != null &&
                    Daemon.Equals(other.Daemon)
                ) && 
                (
                    ShutdownWaitTime == other.ShutdownWaitTime ||
                    ShutdownWaitTime != null &&
                    ShutdownWaitTime.Equals(other.ShutdownWaitTime)
                ) && 
                (
                    Priority == other.Priority ||
                    Priority != null &&
                    Priority.Equals(other.Priority)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (MinPoolSize != null)
                    hashCode = hashCode * 59 + MinPoolSize.GetHashCode();
                    if (MaxPoolSize != null)
                    hashCode = hashCode * 59 + MaxPoolSize.GetHashCode();
                    if (QueueSize != null)
                    hashCode = hashCode * 59 + QueueSize.GetHashCode();
                    if (MaxThreadAge != null)
                    hashCode = hashCode * 59 + MaxThreadAge.GetHashCode();
                    if (KeepAliveTime != null)
                    hashCode = hashCode * 59 + KeepAliveTime.GetHashCode();
                    if (BlockPolicy != null)
                    hashCode = hashCode * 59 + BlockPolicy.GetHashCode();
                    if (ShutdownGraceful != null)
                    hashCode = hashCode * 59 + ShutdownGraceful.GetHashCode();
                    if (Daemon != null)
                    hashCode = hashCode * 59 + Daemon.GetHashCode();
                    if (ShutdownWaitTime != null)
                    hashCode = hashCode * 59 + ShutdownWaitTime.GetHashCode();
                    if (Priority != null)
                    hashCode = hashCode * 59 + Priority.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties left, OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties left, OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
