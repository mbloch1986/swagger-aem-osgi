/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties : IEquatable<OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties>
    { 
        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled")]
        public ConfigNodePropertyBoolean Enabled { get; set; }

        /// <summary>
        /// Gets or Sets ConfigPath
        /// </summary>
        [DataMember(Name="configPath")]
        public ConfigNodePropertyString ConfigPath { get; set; }

        /// <summary>
        /// Gets or Sets FallbackPaths
        /// </summary>
        [DataMember(Name="fallbackPaths")]
        public ConfigNodePropertyArray FallbackPaths { get; set; }

        /// <summary>
        /// Gets or Sets ConfigCollectionInheritancePropertyNames
        /// </summary>
        [DataMember(Name="configCollectionInheritancePropertyNames")]
        public ConfigNodePropertyArray ConfigCollectionInheritancePropertyNames { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  ConfigPath: ").Append(ConfigPath).Append("\n");
            sb.Append("  FallbackPaths: ").Append(FallbackPaths).Append("\n");
            sb.Append("  ConfigCollectionInheritancePropertyNames: ").Append(ConfigCollectionInheritancePropertyNames).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Enabled == other.Enabled ||
                    Enabled != null &&
                    Enabled.Equals(other.Enabled)
                ) && 
                (
                    ConfigPath == other.ConfigPath ||
                    ConfigPath != null &&
                    ConfigPath.Equals(other.ConfigPath)
                ) && 
                (
                    FallbackPaths == other.FallbackPaths ||
                    FallbackPaths != null &&
                    FallbackPaths.Equals(other.FallbackPaths)
                ) && 
                (
                    ConfigCollectionInheritancePropertyNames == other.ConfigCollectionInheritancePropertyNames ||
                    ConfigCollectionInheritancePropertyNames != null &&
                    ConfigCollectionInheritancePropertyNames.Equals(other.ConfigCollectionInheritancePropertyNames)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Enabled != null)
                    hashCode = hashCode * 59 + Enabled.GetHashCode();
                    if (ConfigPath != null)
                    hashCode = hashCode * 59 + ConfigPath.GetHashCode();
                    if (FallbackPaths != null)
                    hashCode = hashCode * 59 + FallbackPaths.GetHashCode();
                    if (ConfigCollectionInheritancePropertyNames != null)
                    hashCode = hashCode * 59 + ConfigCollectionInheritancePropertyNames.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties left, OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties left, OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
