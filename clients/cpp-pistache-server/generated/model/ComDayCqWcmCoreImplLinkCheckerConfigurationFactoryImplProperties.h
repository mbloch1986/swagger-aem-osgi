/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties.h
 *
 * 
 */

#ifndef ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties_H_
#define ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties
    : public ModelBase
{
public:
    ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties();
    virtual ~ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getLinkExpiredPrefix() const;
    void setLinkExpiredPrefix(ConfigNodePropertyString const& value);
    bool linkExpiredPrefixIsSet() const;
    void unsetLink_expired_prefix();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getLinkExpiredRemove() const;
    void setLinkExpiredRemove(ConfigNodePropertyBoolean const& value);
    bool linkExpiredRemoveIsSet() const;
    void unsetLink_expired_remove();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getLinkExpiredSuffix() const;
    void setLinkExpiredSuffix(ConfigNodePropertyString const& value);
    bool linkExpiredSuffixIsSet() const;
    void unsetLink_expired_suffix();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getLinkInvalidPrefix() const;
    void setLinkInvalidPrefix(ConfigNodePropertyString const& value);
    bool linkInvalidPrefixIsSet() const;
    void unsetLink_invalid_prefix();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getLinkInvalidRemove() const;
    void setLinkInvalidRemove(ConfigNodePropertyBoolean const& value);
    bool linkInvalidRemoveIsSet() const;
    void unsetLink_invalid_remove();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getLinkInvalidSuffix() const;
    void setLinkInvalidSuffix(ConfigNodePropertyString const& value);
    bool linkInvalidSuffixIsSet() const;
    void unsetLink_invalid_suffix();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getLinkPredatedPrefix() const;
    void setLinkPredatedPrefix(ConfigNodePropertyString const& value);
    bool linkPredatedPrefixIsSet() const;
    void unsetLink_predated_prefix();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getLinkPredatedRemove() const;
    void setLinkPredatedRemove(ConfigNodePropertyBoolean const& value);
    bool linkPredatedRemoveIsSet() const;
    void unsetLink_predated_remove();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getLinkPredatedSuffix() const;
    void setLinkPredatedSuffix(ConfigNodePropertyString const& value);
    bool linkPredatedSuffixIsSet() const;
    void unsetLink_predated_suffix();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getLinkWcmmodes() const;
    void setLinkWcmmodes(ConfigNodePropertyArray const& value);
    bool linkWcmmodesIsSet() const;
    void unsetLink_wcmmodes();

protected:
    ConfigNodePropertyString m_Link_expired_prefix;
    bool m_Link_expired_prefixIsSet;
    ConfigNodePropertyBoolean m_Link_expired_remove;
    bool m_Link_expired_removeIsSet;
    ConfigNodePropertyString m_Link_expired_suffix;
    bool m_Link_expired_suffixIsSet;
    ConfigNodePropertyString m_Link_invalid_prefix;
    bool m_Link_invalid_prefixIsSet;
    ConfigNodePropertyBoolean m_Link_invalid_remove;
    bool m_Link_invalid_removeIsSet;
    ConfigNodePropertyString m_Link_invalid_suffix;
    bool m_Link_invalid_suffixIsSet;
    ConfigNodePropertyString m_Link_predated_prefix;
    bool m_Link_predated_prefixIsSet;
    ConfigNodePropertyBoolean m_Link_predated_remove;
    bool m_Link_predated_removeIsSet;
    ConfigNodePropertyString m_Link_predated_suffix;
    bool m_Link_predated_suffixIsSet;
    ConfigNodePropertyArray m_Link_wcmmodes;
    bool m_Link_wcmmodesIsSet;
};

}
}
}
}

#endif /* ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties_H_ */
