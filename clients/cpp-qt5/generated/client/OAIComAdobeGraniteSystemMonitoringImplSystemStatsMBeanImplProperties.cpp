/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties::OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties::OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties() {
    init();
}

OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties::~OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties::init() {
    scheduler_expression = new OAIConfigNodePropertyString();
    m_scheduler_expression_isSet = false;
    jmx_objectname = new OAIConfigNodePropertyString();
    m_jmx_objectname_isSet = false;
}

void
OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties::cleanup() {
    if(scheduler_expression != nullptr) { 
        delete scheduler_expression;
    }
    if(jmx_objectname != nullptr) { 
        delete jmx_objectname;
    }
}

OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties*
OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&scheduler_expression, pJson["scheduler.expression"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&jmx_objectname, pJson["jmx.objectname"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties::asJsonObject() {
    QJsonObject obj;
    if((scheduler_expression != nullptr) && (scheduler_expression->isSet())){
        toJsonValue(QString("scheduler.expression"), scheduler_expression, obj, QString("OAIConfigNodePropertyString"));
    }
    if((jmx_objectname != nullptr) && (jmx_objectname->isSet())){
        toJsonValue(QString("jmx.objectname"), jmx_objectname, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties::getSchedulerExpression() {
    return scheduler_expression;
}
void
OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties::setSchedulerExpression(OAIConfigNodePropertyString* scheduler_expression) {
    this->scheduler_expression = scheduler_expression;
    this->m_scheduler_expression_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties::getJmxObjectname() {
    return jmx_objectname;
}
void
OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties::setJmxObjectname(OAIConfigNodePropertyString* jmx_objectname) {
    this->jmx_objectname = jmx_objectname;
    this->m_jmx_objectname_isSet = true;
}


bool
OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(scheduler_expression != nullptr && scheduler_expression->isSet()){ isObjectUpdated = true; break;}
        if(jmx_objectname != nullptr && jmx_objectname->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

