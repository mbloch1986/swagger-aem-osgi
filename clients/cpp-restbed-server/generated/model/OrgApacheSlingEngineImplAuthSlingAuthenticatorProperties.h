/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties.h
 *
 * 
 */

#ifndef OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties_H_
#define OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties
{
public:
    OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties();
    virtual ~OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOsgiHttpWhiteboardContextSelect() const;
    void setOsgiHttpWhiteboardContextSelect(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOsgiHttpWhiteboardListener() const;
    void setOsgiHttpWhiteboardListener(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAuthSudoCookie() const;
    void setAuthSudoCookie(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAuthSudoParameter() const;
    void setAuthSudoParameter(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getAuthAnnonymous() const;
    void setAuthAnnonymous(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getSlingAuthRequirements() const;
    void setSlingAuthRequirements(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSlingAuthAnonymousUser() const;
    void setSlingAuthAnonymousUser(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSlingAuthAnonymousPassword() const;
    void setSlingAuthAnonymousPassword(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getAuthHttp() const;
    void setAuthHttp(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAuthHttpRealm() const;
    void setAuthHttpRealm(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getAuthUriSuffix() const;
    void setAuthUriSuffix(std::shared_ptr<ConfigNodePropertyArray> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Osgi_http_whiteboard_context_select;
    std::shared_ptr<ConfigNodePropertyString> m_Osgi_http_whiteboard_listener;
    std::shared_ptr<ConfigNodePropertyString> m_Auth_sudo_cookie;
    std::shared_ptr<ConfigNodePropertyString> m_Auth_sudo_parameter;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Auth_annonymous;
    std::shared_ptr<ConfigNodePropertyArray> m_Sling_auth_requirements;
    std::shared_ptr<ConfigNodePropertyString> m_Sling_auth_anonymous_user;
    std::shared_ptr<ConfigNodePropertyString> m_Sling_auth_anonymous_password;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Auth_http;
    std::shared_ptr<ConfigNodePropertyString> m_Auth_http_realm;
    std::shared_ptr<ConfigNodePropertyArray> m_Auth_uri_suffix;
};

}
}
}
}

#endif /* OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties_H_ */
