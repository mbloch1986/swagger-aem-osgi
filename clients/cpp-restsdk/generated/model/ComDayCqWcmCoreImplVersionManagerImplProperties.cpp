/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqWcmCoreImplVersionManagerImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqWcmCoreImplVersionManagerImplProperties::ComDayCqWcmCoreImplVersionManagerImplProperties()
{
    m_Versionmanager_createVersionOnActivationIsSet = false;
    m_Versionmanager_purgingEnabledIsSet = false;
    m_Versionmanager_purgePathsIsSet = false;
    m_Versionmanager_ivPathsIsSet = false;
    m_Versionmanager_maxAgeDaysIsSet = false;
    m_Versionmanager_maxNumberVersionsIsSet = false;
    m_Versionmanager_minNumberVersionsIsSet = false;
}

ComDayCqWcmCoreImplVersionManagerImplProperties::~ComDayCqWcmCoreImplVersionManagerImplProperties()
{
}

void ComDayCqWcmCoreImplVersionManagerImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqWcmCoreImplVersionManagerImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Versionmanager_createVersionOnActivationIsSet)
    {
        val[utility::conversions::to_string_t("versionmanager.createVersionOnActivation")] = ModelBase::toJson(m_Versionmanager_createVersionOnActivation);
    }
    if(m_Versionmanager_purgingEnabledIsSet)
    {
        val[utility::conversions::to_string_t("versionmanager.purgingEnabled")] = ModelBase::toJson(m_Versionmanager_purgingEnabled);
    }
    if(m_Versionmanager_purgePathsIsSet)
    {
        val[utility::conversions::to_string_t("versionmanager.purgePaths")] = ModelBase::toJson(m_Versionmanager_purgePaths);
    }
    if(m_Versionmanager_ivPathsIsSet)
    {
        val[utility::conversions::to_string_t("versionmanager.ivPaths")] = ModelBase::toJson(m_Versionmanager_ivPaths);
    }
    if(m_Versionmanager_maxAgeDaysIsSet)
    {
        val[utility::conversions::to_string_t("versionmanager.maxAgeDays")] = ModelBase::toJson(m_Versionmanager_maxAgeDays);
    }
    if(m_Versionmanager_maxNumberVersionsIsSet)
    {
        val[utility::conversions::to_string_t("versionmanager.maxNumberVersions")] = ModelBase::toJson(m_Versionmanager_maxNumberVersions);
    }
    if(m_Versionmanager_minNumberVersionsIsSet)
    {
        val[utility::conversions::to_string_t("versionmanager.minNumberVersions")] = ModelBase::toJson(m_Versionmanager_minNumberVersions);
    }

    return val;
}

void ComDayCqWcmCoreImplVersionManagerImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("versionmanager.createVersionOnActivation")))
    {
        if(!val[utility::conversions::to_string_t("versionmanager.createVersionOnActivation")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("versionmanager.createVersionOnActivation")]);
            setVersionmanagerCreateVersionOnActivation( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionmanager.purgingEnabled")))
    {
        if(!val[utility::conversions::to_string_t("versionmanager.purgingEnabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("versionmanager.purgingEnabled")]);
            setVersionmanagerPurgingEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionmanager.purgePaths")))
    {
        if(!val[utility::conversions::to_string_t("versionmanager.purgePaths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("versionmanager.purgePaths")]);
            setVersionmanagerPurgePaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionmanager.ivPaths")))
    {
        if(!val[utility::conversions::to_string_t("versionmanager.ivPaths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("versionmanager.ivPaths")]);
            setVersionmanagerIvPaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionmanager.maxAgeDays")))
    {
        if(!val[utility::conversions::to_string_t("versionmanager.maxAgeDays")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("versionmanager.maxAgeDays")]);
            setVersionmanagerMaxAgeDays( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionmanager.maxNumberVersions")))
    {
        if(!val[utility::conversions::to_string_t("versionmanager.maxNumberVersions")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("versionmanager.maxNumberVersions")]);
            setVersionmanagerMaxNumberVersions( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionmanager.minNumberVersions")))
    {
        if(!val[utility::conversions::to_string_t("versionmanager.minNumberVersions")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("versionmanager.minNumberVersions")]);
            setVersionmanagerMinNumberVersions( newItem );
        }
    }
}

void ComDayCqWcmCoreImplVersionManagerImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Versionmanager_createVersionOnActivationIsSet)
    {
        if (m_Versionmanager_createVersionOnActivation.get())
        {
            m_Versionmanager_createVersionOnActivation->toMultipart(multipart, utility::conversions::to_string_t("versionmanager.createVersionOnActivation."));
        }
    }
    if(m_Versionmanager_purgingEnabledIsSet)
    {
        if (m_Versionmanager_purgingEnabled.get())
        {
            m_Versionmanager_purgingEnabled->toMultipart(multipart, utility::conversions::to_string_t("versionmanager.purgingEnabled."));
        }
    }
    if(m_Versionmanager_purgePathsIsSet)
    {
        if (m_Versionmanager_purgePaths.get())
        {
            m_Versionmanager_purgePaths->toMultipart(multipart, utility::conversions::to_string_t("versionmanager.purgePaths."));
        }
    }
    if(m_Versionmanager_ivPathsIsSet)
    {
        if (m_Versionmanager_ivPaths.get())
        {
            m_Versionmanager_ivPaths->toMultipart(multipart, utility::conversions::to_string_t("versionmanager.ivPaths."));
        }
    }
    if(m_Versionmanager_maxAgeDaysIsSet)
    {
        if (m_Versionmanager_maxAgeDays.get())
        {
            m_Versionmanager_maxAgeDays->toMultipart(multipart, utility::conversions::to_string_t("versionmanager.maxAgeDays."));
        }
    }
    if(m_Versionmanager_maxNumberVersionsIsSet)
    {
        if (m_Versionmanager_maxNumberVersions.get())
        {
            m_Versionmanager_maxNumberVersions->toMultipart(multipart, utility::conversions::to_string_t("versionmanager.maxNumberVersions."));
        }
    }
    if(m_Versionmanager_minNumberVersionsIsSet)
    {
        if (m_Versionmanager_minNumberVersions.get())
        {
            m_Versionmanager_minNumberVersions->toMultipart(multipart, utility::conversions::to_string_t("versionmanager.minNumberVersions."));
        }
    }
}

void ComDayCqWcmCoreImplVersionManagerImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("versionmanager.createVersionOnActivation")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("versionmanager.createVersionOnActivation")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("versionmanager.createVersionOnActivation."));
            setVersionmanagerCreateVersionOnActivation( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionmanager.purgingEnabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("versionmanager.purgingEnabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("versionmanager.purgingEnabled."));
            setVersionmanagerPurgingEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionmanager.purgePaths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("versionmanager.purgePaths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("versionmanager.purgePaths."));
            setVersionmanagerPurgePaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionmanager.ivPaths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("versionmanager.ivPaths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("versionmanager.ivPaths."));
            setVersionmanagerIvPaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionmanager.maxAgeDays")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("versionmanager.maxAgeDays")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("versionmanager.maxAgeDays."));
            setVersionmanagerMaxAgeDays( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionmanager.maxNumberVersions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("versionmanager.maxNumberVersions")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("versionmanager.maxNumberVersions."));
            setVersionmanagerMaxNumberVersions( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionmanager.minNumberVersions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("versionmanager.minNumberVersions")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("versionmanager.minNumberVersions."));
            setVersionmanagerMinNumberVersions( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerCreateVersionOnActivation() const
{
    return m_Versionmanager_createVersionOnActivation;
}


void ComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerCreateVersionOnActivation(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Versionmanager_createVersionOnActivation = value;
    m_Versionmanager_createVersionOnActivationIsSet = true;
}
bool ComDayCqWcmCoreImplVersionManagerImplProperties::versionmanagerCreateVersionOnActivationIsSet() const
{
    return m_Versionmanager_createVersionOnActivationIsSet;
}

void ComDayCqWcmCoreImplVersionManagerImplProperties::unsetVersionmanager_createVersionOnActivation()
{
    m_Versionmanager_createVersionOnActivationIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerPurgingEnabled() const
{
    return m_Versionmanager_purgingEnabled;
}


void ComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerPurgingEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Versionmanager_purgingEnabled = value;
    m_Versionmanager_purgingEnabledIsSet = true;
}
bool ComDayCqWcmCoreImplVersionManagerImplProperties::versionmanagerPurgingEnabledIsSet() const
{
    return m_Versionmanager_purgingEnabledIsSet;
}

void ComDayCqWcmCoreImplVersionManagerImplProperties::unsetVersionmanager_purgingEnabled()
{
    m_Versionmanager_purgingEnabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerPurgePaths() const
{
    return m_Versionmanager_purgePaths;
}


void ComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerPurgePaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Versionmanager_purgePaths = value;
    m_Versionmanager_purgePathsIsSet = true;
}
bool ComDayCqWcmCoreImplVersionManagerImplProperties::versionmanagerPurgePathsIsSet() const
{
    return m_Versionmanager_purgePathsIsSet;
}

void ComDayCqWcmCoreImplVersionManagerImplProperties::unsetVersionmanager_purgePaths()
{
    m_Versionmanager_purgePathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerIvPaths() const
{
    return m_Versionmanager_ivPaths;
}


void ComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerIvPaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Versionmanager_ivPaths = value;
    m_Versionmanager_ivPathsIsSet = true;
}
bool ComDayCqWcmCoreImplVersionManagerImplProperties::versionmanagerIvPathsIsSet() const
{
    return m_Versionmanager_ivPathsIsSet;
}

void ComDayCqWcmCoreImplVersionManagerImplProperties::unsetVersionmanager_ivPaths()
{
    m_Versionmanager_ivPathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerMaxAgeDays() const
{
    return m_Versionmanager_maxAgeDays;
}


void ComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerMaxAgeDays(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Versionmanager_maxAgeDays = value;
    m_Versionmanager_maxAgeDaysIsSet = true;
}
bool ComDayCqWcmCoreImplVersionManagerImplProperties::versionmanagerMaxAgeDaysIsSet() const
{
    return m_Versionmanager_maxAgeDaysIsSet;
}

void ComDayCqWcmCoreImplVersionManagerImplProperties::unsetVersionmanager_maxAgeDays()
{
    m_Versionmanager_maxAgeDaysIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerMaxNumberVersions() const
{
    return m_Versionmanager_maxNumberVersions;
}


void ComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerMaxNumberVersions(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Versionmanager_maxNumberVersions = value;
    m_Versionmanager_maxNumberVersionsIsSet = true;
}
bool ComDayCqWcmCoreImplVersionManagerImplProperties::versionmanagerMaxNumberVersionsIsSet() const
{
    return m_Versionmanager_maxNumberVersionsIsSet;
}

void ComDayCqWcmCoreImplVersionManagerImplProperties::unsetVersionmanager_maxNumberVersions()
{
    m_Versionmanager_maxNumberVersionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerMinNumberVersions() const
{
    return m_Versionmanager_minNumberVersions;
}


void ComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerMinNumberVersions(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Versionmanager_minNumberVersions = value;
    m_Versionmanager_minNumberVersionsIsSet = true;
}
bool ComDayCqWcmCoreImplVersionManagerImplProperties::versionmanagerMinNumberVersionsIsSet() const
{
    return m_Versionmanager_minNumberVersionsIsSet;
}

void ComDayCqWcmCoreImplVersionManagerImplProperties::unsetVersionmanager_minNumberVersions()
{
    m_Versionmanager_minNumberVersionsIsSet = false;
}

}
}
}
}

