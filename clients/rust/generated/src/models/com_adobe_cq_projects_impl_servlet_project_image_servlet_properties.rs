/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqProjectsImplServletProjectImageServletProperties {
  #[serde(rename = "image.quality")]
  image_quality: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "image.supported.resolutions")]
  image_supported_resolutions: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeCqProjectsImplServletProjectImageServletProperties {
  pub fn new() -> ComAdobeCqProjectsImplServletProjectImageServletProperties {
    ComAdobeCqProjectsImplServletProjectImageServletProperties {
      image_quality: None,
      image_supported_resolutions: None
    }
  }

  pub fn set_image_quality(&mut self, image_quality: ::models::ConfigNodePropertyString) {
    self.image_quality = Some(image_quality);
  }

  pub fn with_image_quality(mut self, image_quality: ::models::ConfigNodePropertyString) -> ComAdobeCqProjectsImplServletProjectImageServletProperties {
    self.image_quality = Some(image_quality);
    self
  }

  pub fn image_quality(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.image_quality.as_ref()
  }

  pub fn reset_image_quality(&mut self) {
    self.image_quality = None;
  }

  pub fn set_image_supported_resolutions(&mut self, image_supported_resolutions: ::models::ConfigNodePropertyString) {
    self.image_supported_resolutions = Some(image_supported_resolutions);
  }

  pub fn with_image_supported_resolutions(mut self, image_supported_resolutions: ::models::ConfigNodePropertyString) -> ComAdobeCqProjectsImplServletProjectImageServletProperties {
    self.image_supported_resolutions = Some(image_supported_resolutions);
    self
  }

  pub fn image_supported_resolutions(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.image_supported_resolutions.as_ref()
  }

  pub fn reset_image_supported_resolutions(&mut self) {
    self.image_supported_resolutions = None;
  }

}



