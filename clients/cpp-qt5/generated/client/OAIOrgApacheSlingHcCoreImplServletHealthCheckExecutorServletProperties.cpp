/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties() {
    init();
}

OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::~OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::init() {
    servlet_path = new OAIConfigNodePropertyString();
    m_servlet_path_isSet = false;
    disabled = new OAIConfigNodePropertyBoolean();
    m_disabled_isSet = false;
    cors_access_control_allow_origin = new OAIConfigNodePropertyString();
    m_cors_access_control_allow_origin_isSet = false;
}

void
OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::cleanup() {
    if(servlet_path != nullptr) { 
        delete servlet_path;
    }
    if(disabled != nullptr) { 
        delete disabled;
    }
    if(cors_access_control_allow_origin != nullptr) { 
        delete cors_access_control_allow_origin;
    }
}

OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties*
OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&servlet_path, pJson["servletPath"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&disabled, pJson["disabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&cors_access_control_allow_origin, pJson["cors.accessControlAllowOrigin"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::asJsonObject() {
    QJsonObject obj;
    if((servlet_path != nullptr) && (servlet_path->isSet())){
        toJsonValue(QString("servletPath"), servlet_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((disabled != nullptr) && (disabled->isSet())){
        toJsonValue(QString("disabled"), disabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((cors_access_control_allow_origin != nullptr) && (cors_access_control_allow_origin->isSet())){
        toJsonValue(QString("cors.accessControlAllowOrigin"), cors_access_control_allow_origin, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::getServletPath() {
    return servlet_path;
}
void
OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::setServletPath(OAIConfigNodePropertyString* servlet_path) {
    this->servlet_path = servlet_path;
    this->m_servlet_path_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::getDisabled() {
    return disabled;
}
void
OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::setDisabled(OAIConfigNodePropertyBoolean* disabled) {
    this->disabled = disabled;
    this->m_disabled_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::getCorsAccessControlAllowOrigin() {
    return cors_access_control_allow_origin;
}
void
OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::setCorsAccessControlAllowOrigin(OAIConfigNodePropertyString* cors_access_control_allow_origin) {
    this->cors_access_control_allow_origin = cors_access_control_allow_origin;
    this->m_cors_access_control_allow_origin_isSet = true;
}


bool
OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(servlet_path != nullptr && servlet_path->isSet()){ isObjectUpdated = true; break;}
        if(disabled != nullptr && disabled->isSet()){ isObjectUpdated = true; break;}
        if(cors_access_control_allow_origin != nullptr && cors_access_control_allow_origin->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

