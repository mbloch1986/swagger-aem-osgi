/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties {
  #[serde(rename = "attachmentTypeBlacklist")]
  attachment_type_blacklist: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "extension.order")]
  extension_order: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties {
  pub fn new() -> ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties {
    ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties {
      attachment_type_blacklist: None,
      extension_order: None
    }
  }

  pub fn set_attachment_type_blacklist(&mut self, attachment_type_blacklist: ::models::ConfigNodePropertyString) {
    self.attachment_type_blacklist = Some(attachment_type_blacklist);
  }

  pub fn with_attachment_type_blacklist(mut self, attachment_type_blacklist: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties {
    self.attachment_type_blacklist = Some(attachment_type_blacklist);
    self
  }

  pub fn attachment_type_blacklist(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.attachment_type_blacklist.as_ref()
  }

  pub fn reset_attachment_type_blacklist(&mut self) {
    self.attachment_type_blacklist = None;
  }

  pub fn set_extension_order(&mut self, extension_order: ::models::ConfigNodePropertyInteger) {
    self.extension_order = Some(extension_order);
  }

  pub fn with_extension_order(mut self, extension_order: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties {
    self.extension_order = Some(extension_order);
    self
  }

  pub fn extension_order(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.extension_order.as_ref()
  }

  pub fn reset_extension_order(&mut self) {
    self.extension_order = None;
  }

}



