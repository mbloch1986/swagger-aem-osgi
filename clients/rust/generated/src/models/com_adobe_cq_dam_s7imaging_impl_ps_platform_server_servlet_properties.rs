/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties {
  #[serde(rename = "cache.enable")]
  cache_enable: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "cache.rootPaths")]
  cache_root_paths: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "cache.maxSize")]
  cache_max_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cache.maxEntries")]
  cache_max_entries: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties {
  pub fn new() -> ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties {
    ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties {
      cache_enable: None,
      cache_root_paths: None,
      cache_max_size: None,
      cache_max_entries: None
    }
  }

  pub fn set_cache_enable(&mut self, cache_enable: ::models::ConfigNodePropertyBoolean) {
    self.cache_enable = Some(cache_enable);
  }

  pub fn with_cache_enable(mut self, cache_enable: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties {
    self.cache_enable = Some(cache_enable);
    self
  }

  pub fn cache_enable(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.cache_enable.as_ref()
  }

  pub fn reset_cache_enable(&mut self) {
    self.cache_enable = None;
  }

  pub fn set_cache_root_paths(&mut self, cache_root_paths: ::models::ConfigNodePropertyArray) {
    self.cache_root_paths = Some(cache_root_paths);
  }

  pub fn with_cache_root_paths(mut self, cache_root_paths: ::models::ConfigNodePropertyArray) -> ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties {
    self.cache_root_paths = Some(cache_root_paths);
    self
  }

  pub fn cache_root_paths(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.cache_root_paths.as_ref()
  }

  pub fn reset_cache_root_paths(&mut self) {
    self.cache_root_paths = None;
  }

  pub fn set_cache_max_size(&mut self, cache_max_size: ::models::ConfigNodePropertyInteger) {
    self.cache_max_size = Some(cache_max_size);
  }

  pub fn with_cache_max_size(mut self, cache_max_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties {
    self.cache_max_size = Some(cache_max_size);
    self
  }

  pub fn cache_max_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cache_max_size.as_ref()
  }

  pub fn reset_cache_max_size(&mut self) {
    self.cache_max_size = None;
  }

  pub fn set_cache_max_entries(&mut self, cache_max_entries: ::models::ConfigNodePropertyInteger) {
    self.cache_max_entries = Some(cache_max_entries);
  }

  pub fn with_cache_max_entries(mut self, cache_max_entries: ::models::ConfigNodePropertyInteger) -> ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties {
    self.cache_max_entries = Some(cache_max_entries);
    self
  }

  pub fn cache_max_entries(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cache_max_entries.as_ref()
  }

  pub fn reset_cache_max_entries(&mut self) {
    self.cache_max_entries = None;
  }

}



