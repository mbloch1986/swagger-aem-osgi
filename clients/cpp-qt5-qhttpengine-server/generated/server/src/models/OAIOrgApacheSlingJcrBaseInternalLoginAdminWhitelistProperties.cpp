/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties() {
    this->init();
}

OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::~OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties() {
    
}

void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::init() {
    m_whitelist_bypass_isSet = false;
    m_whitelist_bundles_regexp_isSet = false;
}

void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(whitelist_bypass, json[QString("whitelist.bypass")]);
    
    ::OpenAPI::fromJsonValue(whitelist_bundles_regexp, json[QString("whitelist.bundles.regexp")]);
    
}

QString
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::asJsonObject() const {
    QJsonObject obj;
	if(whitelist_bypass.isSet()){
        obj.insert(QString("whitelist.bypass"), ::OpenAPI::toJsonValue(whitelist_bypass));
    }
	if(whitelist_bundles_regexp.isSet()){
        obj.insert(QString("whitelist.bundles.regexp"), ::OpenAPI::toJsonValue(whitelist_bundles_regexp));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::getWhitelistBypass() const {
    return whitelist_bypass;
}
void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::setWhitelistBypass(const OAIConfigNodePropertyBoolean &whitelist_bypass) {
    this->whitelist_bypass = whitelist_bypass;
    this->m_whitelist_bypass_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::getWhitelistBundlesRegexp() const {
    return whitelist_bundles_regexp;
}
void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::setWhitelistBundlesRegexp(const OAIConfigNodePropertyString &whitelist_bundles_regexp) {
    this->whitelist_bundles_regexp = whitelist_bundles_regexp;
    this->m_whitelist_bundles_regexp_isSet = true;
}


bool
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(whitelist_bypass.isSet()){ isObjectUpdated = true; break;}
    
        if(whitelist_bundles_regexp.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

