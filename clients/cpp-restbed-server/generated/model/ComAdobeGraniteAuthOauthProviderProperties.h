/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteAuthOauthProviderProperties.h
 *
 * 
 */

#ifndef ComAdobeGraniteAuthOauthProviderProperties_H_
#define ComAdobeGraniteAuthOauthProviderProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteAuthOauthProviderProperties
{
public:
    ComAdobeGraniteAuthOauthProviderProperties();
    virtual ~ComAdobeGraniteAuthOauthProviderProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// ComAdobeGraniteAuthOauthProviderProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthConfigId() const;
    void setOauthConfigId(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthClientId() const;
    void setOauthClientId(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthClientSecret() const;
    void setOauthClientSecret(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getOauthScope() const;
    void setOauthScope(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthConfigProviderId() const;
    void setOauthConfigProviderId(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOauthCreateUsers() const;
    void setOauthCreateUsers(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthUseridProperty() const;
    void setOauthUseridProperty(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getForceStrictUsernameMatching() const;
    void setForceStrictUsernameMatching(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOauthEncodeUserids() const;
    void setOauthEncodeUserids(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOauthHashUserids() const;
    void setOauthHashUserids(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOauthCallBackUrl() const;
    void setOauthCallBackUrl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOauthAccessTokenPersist() const;
    void setOauthAccessTokenPersist(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOauthAccessTokenPersistCookie() const;
    void setOauthAccessTokenPersistCookie(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOauthCsrfStateProtection() const;
    void setOauthCsrfStateProtection(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOauthRedirectRequestParams() const;
    void setOauthRedirectRequestParams(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getOauthConfigSiblingsAllow() const;
    void setOauthConfigSiblingsAllow(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_config_id;
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_client_id;
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_client_secret;
    std::shared_ptr<ConfigNodePropertyArray> m_Oauth_scope;
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_config_provider_id;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Oauth_create_users;
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_userid_property;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Force_strict_username_matching;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Oauth_encode_userids;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Oauth_hash_userids;
    std::shared_ptr<ConfigNodePropertyString> m_Oauth_callBackUrl;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Oauth_access_token_persist;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Oauth_access_token_persist_cookie;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Oauth_csrf_state_protection;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Oauth_redirect_request_params;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Oauth_config_siblings_allow;
};

}
}
}
}

#endif /* ComAdobeGraniteAuthOauthProviderProperties_H_ */
