/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIGuideLocalizationServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIGuideLocalizationServiceProperties::OAIGuideLocalizationServiceProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIGuideLocalizationServiceProperties::OAIGuideLocalizationServiceProperties() {
    init();
}

OAIGuideLocalizationServiceProperties::~OAIGuideLocalizationServiceProperties() {
    this->cleanup();
}

void
OAIGuideLocalizationServiceProperties::init() {
    supported_locales = new OAIConfigNodePropertyArray();
    m_supported_locales_isSet = false;
    localizable_properties = new OAIConfigNodePropertyArray();
    m_localizable_properties_isSet = false;
}

void
OAIGuideLocalizationServiceProperties::cleanup() {
    if(supported_locales != nullptr) { 
        delete supported_locales;
    }
    if(localizable_properties != nullptr) { 
        delete localizable_properties;
    }
}

OAIGuideLocalizationServiceProperties*
OAIGuideLocalizationServiceProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIGuideLocalizationServiceProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&supported_locales, pJson["supportedLocales"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&localizable_properties, pJson["Localizable Properties"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIGuideLocalizationServiceProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIGuideLocalizationServiceProperties::asJsonObject() {
    QJsonObject obj;
    if((supported_locales != nullptr) && (supported_locales->isSet())){
        toJsonValue(QString("supportedLocales"), supported_locales, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((localizable_properties != nullptr) && (localizable_properties->isSet())){
        toJsonValue(QString("Localizable Properties"), localizable_properties, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIGuideLocalizationServiceProperties::getSupportedLocales() {
    return supported_locales;
}
void
OAIGuideLocalizationServiceProperties::setSupportedLocales(OAIConfigNodePropertyArray* supported_locales) {
    this->supported_locales = supported_locales;
    this->m_supported_locales_isSet = true;
}

OAIConfigNodePropertyArray*
OAIGuideLocalizationServiceProperties::getLocalizableProperties() {
    return localizable_properties;
}
void
OAIGuideLocalizationServiceProperties::setLocalizableProperties(OAIConfigNodePropertyArray* localizable_properties) {
    this->localizable_properties = localizable_properties;
    this->m_localizable_properties_isSet = true;
}


bool
OAIGuideLocalizationServiceProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(supported_locales != nullptr && supported_locales->isSet()){ isObjectUpdated = true; break;}
        if(localizable_properties != nullptr && localizable_properties->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

