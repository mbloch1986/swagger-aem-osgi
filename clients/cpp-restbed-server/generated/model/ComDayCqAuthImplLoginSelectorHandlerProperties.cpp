/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqAuthImplLoginSelectorHandlerProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqAuthImplLoginSelectorHandlerProperties::ComDayCqAuthImplLoginSelectorHandlerProperties()
{
    
}

ComDayCqAuthImplLoginSelectorHandlerProperties::~ComDayCqAuthImplLoginSelectorHandlerProperties()
{
}

std::string ComDayCqAuthImplLoginSelectorHandlerProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void ComDayCqAuthImplLoginSelectorHandlerProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqAuthImplLoginSelectorHandlerProperties::getPath() const
{
    return m_Path;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::setPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Path = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComDayCqAuthImplLoginSelectorHandlerProperties::getServiceRanking() const
{
    return m_Service_ranking;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::setServiceRanking(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Service_ranking = value;
}
std::shared_ptr<ConfigNodePropertyArray> ComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorMappings() const
{
    return m_Auth_loginselector_mappings;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorMappings(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Auth_loginselector_mappings = value;
}
std::shared_ptr<ConfigNodePropertyArray> ComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorChangepwMappings() const
{
    return m_Auth_loginselector_changepw_mappings;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorChangepwMappings(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Auth_loginselector_changepw_mappings = value;
}
std::shared_ptr<ConfigNodePropertyString> ComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorDefaultloginpage() const
{
    return m_Auth_loginselector_defaultloginpage;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorDefaultloginpage(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Auth_loginselector_defaultloginpage = value;
}
std::shared_ptr<ConfigNodePropertyString> ComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorDefaultchangepwpage() const
{
    return m_Auth_loginselector_defaultchangepwpage;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorDefaultchangepwpage(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Auth_loginselector_defaultchangepwpage = value;
}
std::shared_ptr<ConfigNodePropertyArray> ComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorHandle() const
{
    return m_Auth_loginselector_handle;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorHandle(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Auth_loginselector_handle = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorHandleAllExtensions() const
{
    return m_Auth_loginselector_handle_all_extensions;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorHandleAllExtensions(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Auth_loginselector_handle_all_extensions = value;
}

}
}
}
}

