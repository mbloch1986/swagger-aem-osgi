/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqReportingImplConfigServiceImplProperties.h
 *
 * 
 */

#ifndef ComDayCqReportingImplConfigServiceImplProperties_H_
#define ComDayCqReportingImplConfigServiceImplProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqReportingImplConfigServiceImplProperties
{
public:
    ComDayCqReportingImplConfigServiceImplProperties();
    virtual ~ComDayCqReportingImplConfigServiceImplProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// ComDayCqReportingImplConfigServiceImplProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRepconfTimezone() const;
    void setRepconfTimezone(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRepconfLocale() const;
    void setRepconfLocale(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRepconfSnapshots() const;
    void setRepconfSnapshots(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRepconfRepdir() const;
    void setRepconfRepdir(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getRepconfHourofday() const;
    void setRepconfHourofday(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getRepconfMinofhour() const;
    void setRepconfMinofhour(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getRepconfMaxrows() const;
    void setRepconfMaxrows(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getRepconfFakedata() const;
    void setRepconfFakedata(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRepconfSnapshotuser() const;
    void setRepconfSnapshotuser(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getRepconfEnforcesnapshotuser() const;
    void setRepconfEnforcesnapshotuser(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Repconf_timezone;
    std::shared_ptr<ConfigNodePropertyString> m_Repconf_locale;
    std::shared_ptr<ConfigNodePropertyString> m_Repconf_snapshots;
    std::shared_ptr<ConfigNodePropertyString> m_Repconf_repdir;
    std::shared_ptr<ConfigNodePropertyInteger> m_Repconf_hourofday;
    std::shared_ptr<ConfigNodePropertyInteger> m_Repconf_minofhour;
    std::shared_ptr<ConfigNodePropertyInteger> m_Repconf_maxrows;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Repconf_fakedata;
    std::shared_ptr<ConfigNodePropertyString> m_Repconf_snapshotuser;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Repconf_enforcesnapshotuser;
};

}
}
}
}

#endif /* ComDayCqReportingImplConfigServiceImplProperties_H_ */
