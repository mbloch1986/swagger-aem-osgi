/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComAdobeGraniteAuthOauthAccesstokenProviderProperties.h
 *
 * 
 */

#ifndef ComAdobeGraniteAuthOauthAccesstokenProviderProperties_H_
#define ComAdobeGraniteAuthOauthAccesstokenProviderProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteAuthOauthAccesstokenProviderProperties
    : public ModelBase
{
public:
    ComAdobeGraniteAuthOauthAccesstokenProviderProperties();
    virtual ~ComAdobeGraniteAuthOauthAccesstokenProviderProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComAdobeGraniteAuthOauthAccesstokenProviderProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getName() const;
    void setName(ConfigNodePropertyString const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getAuthTokenProviderTitle() const;
    void setAuthTokenProviderTitle(ConfigNodePropertyString const& value);
    bool authTokenProviderTitleIsSet() const;
    void unsetAuth_token_provider_title();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getAuthTokenProviderDefaultClaims() const;
    void setAuthTokenProviderDefaultClaims(ConfigNodePropertyArray const& value);
    bool authTokenProviderDefaultClaimsIsSet() const;
    void unsetAuth_token_provider_default_claims();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getAuthTokenProviderEndpoint() const;
    void setAuthTokenProviderEndpoint(ConfigNodePropertyString const& value);
    bool authTokenProviderEndpointIsSet() const;
    void unsetAuth_token_provider_endpoint();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getAuthAccessTokenRequest() const;
    void setAuthAccessTokenRequest(ConfigNodePropertyString const& value);
    bool authAccessTokenRequestIsSet() const;
    void unsetAuth_access_token_request();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getAuthTokenProviderKeypairAlias() const;
    void setAuthTokenProviderKeypairAlias(ConfigNodePropertyString const& value);
    bool authTokenProviderKeypairAliasIsSet() const;
    void unsetAuth_token_provider_keypair_alias();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getAuthTokenProviderConnTimeout() const;
    void setAuthTokenProviderConnTimeout(ConfigNodePropertyInteger const& value);
    bool authTokenProviderConnTimeoutIsSet() const;
    void unsetAuth_token_provider_conn_timeout();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getAuthTokenProviderSoTimeout() const;
    void setAuthTokenProviderSoTimeout(ConfigNodePropertyInteger const& value);
    bool authTokenProviderSoTimeoutIsSet() const;
    void unsetAuth_token_provider_so_timeout();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getAuthTokenProviderClientId() const;
    void setAuthTokenProviderClientId(ConfigNodePropertyString const& value);
    bool authTokenProviderClientIdIsSet() const;
    void unsetAuth_token_provider_client_id();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getAuthTokenProviderScope() const;
    void setAuthTokenProviderScope(ConfigNodePropertyString const& value);
    bool authTokenProviderScopeIsSet() const;
    void unsetAuth_token_provider_scope();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getAuthTokenProviderReuseAccessToken() const;
    void setAuthTokenProviderReuseAccessToken(ConfigNodePropertyBoolean const& value);
    bool authTokenProviderReuseAccessTokenIsSet() const;
    void unsetAuth_token_provider_reuse_access_token();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getAuthTokenProviderRelaxedSsl() const;
    void setAuthTokenProviderRelaxedSsl(ConfigNodePropertyBoolean const& value);
    bool authTokenProviderRelaxedSslIsSet() const;
    void unsetAuth_token_provider_relaxed_ssl();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getTokenRequestCustomizerType() const;
    void setTokenRequestCustomizerType(ConfigNodePropertyString const& value);
    bool tokenRequestCustomizerTypeIsSet() const;
    void unsetToken_request_customizer_type();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getAuthTokenValidatorType() const;
    void setAuthTokenValidatorType(ConfigNodePropertyString const& value);
    bool authTokenValidatorTypeIsSet() const;
    void unsetAuth_token_validator_type();

protected:
    ConfigNodePropertyString m_Name;
    bool m_NameIsSet;
    ConfigNodePropertyString m_Auth_token_provider_title;
    bool m_Auth_token_provider_titleIsSet;
    ConfigNodePropertyArray m_Auth_token_provider_default_claims;
    bool m_Auth_token_provider_default_claimsIsSet;
    ConfigNodePropertyString m_Auth_token_provider_endpoint;
    bool m_Auth_token_provider_endpointIsSet;
    ConfigNodePropertyString m_Auth_access_token_request;
    bool m_Auth_access_token_requestIsSet;
    ConfigNodePropertyString m_Auth_token_provider_keypair_alias;
    bool m_Auth_token_provider_keypair_aliasIsSet;
    ConfigNodePropertyInteger m_Auth_token_provider_conn_timeout;
    bool m_Auth_token_provider_conn_timeoutIsSet;
    ConfigNodePropertyInteger m_Auth_token_provider_so_timeout;
    bool m_Auth_token_provider_so_timeoutIsSet;
    ConfigNodePropertyString m_Auth_token_provider_client_id;
    bool m_Auth_token_provider_client_idIsSet;
    ConfigNodePropertyString m_Auth_token_provider_scope;
    bool m_Auth_token_provider_scopeIsSet;
    ConfigNodePropertyBoolean m_Auth_token_provider_reuse_access_token;
    bool m_Auth_token_provider_reuse_access_tokenIsSet;
    ConfigNodePropertyBoolean m_Auth_token_provider_relaxed_ssl;
    bool m_Auth_token_provider_relaxed_sslIsSet;
    ConfigNodePropertyString m_Token_request_customizer_type;
    bool m_Token_request_customizer_typeIsSet;
    ConfigNodePropertyString m_Auth_token_validator_type;
    bool m_Auth_token_validator_typeIsSet;
};

}
}
}
}

#endif /* ComAdobeGraniteAuthOauthAccesstokenProviderProperties_H_ */
