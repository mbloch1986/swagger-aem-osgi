/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties::ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties()
{
    m_Pseudo_patternsIsSet = false;
}

ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties::~ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties()
{
}

void ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Pseudo_patternsIsSet)
    {
        val[utility::conversions::to_string_t("pseudo.patterns")] = ModelBase::toJson(m_Pseudo_patterns);
    }

    return val;
}

void ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("pseudo.patterns")))
    {
        if(!val[utility::conversions::to_string_t("pseudo.patterns")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("pseudo.patterns")]);
            setPseudoPatterns( newItem );
        }
    }
}

void ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Pseudo_patternsIsSet)
    {
        if (m_Pseudo_patterns.get())
        {
            m_Pseudo_patterns->toMultipart(multipart, utility::conversions::to_string_t("pseudo.patterns."));
        }
    }
}

void ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("pseudo.patterns")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("pseudo.patterns")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("pseudo.patterns."));
            setPseudoPatterns( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties::getPseudoPatterns() const
{
    return m_Pseudo_patterns;
}


void ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties::setPseudoPatterns(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Pseudo_patterns = value;
    m_Pseudo_patternsIsSet = true;
}
bool ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties::pseudoPatternsIsSet() const
{
    return m_Pseudo_patternsIsSet;
}

void ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties::unsetPseudo_patterns()
{
    m_Pseudo_patternsIsSet = false;
}

}
}
}
}

