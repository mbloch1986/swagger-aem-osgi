/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties : IEquatable<ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties>
    { 
        /// <summary>
        /// Gets or Sets CdnConfigDistributionDomain
        /// </summary>
        [DataMember(Name="cdn.config.distribution.domain")]
        public ConfigNodePropertyString CdnConfigDistributionDomain { get; set; }

        /// <summary>
        /// Gets or Sets CdnConfigEnableRewriting
        /// </summary>
        [DataMember(Name="cdn.config.enable.rewriting")]
        public ConfigNodePropertyBoolean CdnConfigEnableRewriting { get; set; }

        /// <summary>
        /// Gets or Sets CdnConfigPathPrefixes
        /// </summary>
        [DataMember(Name="cdn.config.path.prefixes")]
        public ConfigNodePropertyArray CdnConfigPathPrefixes { get; set; }

        /// <summary>
        /// Gets or Sets CdnConfigCdnttl
        /// </summary>
        [DataMember(Name="cdn.config.cdnttl")]
        public ConfigNodePropertyInteger CdnConfigCdnttl { get; set; }

        /// <summary>
        /// Gets or Sets CdnConfigApplicationProtocol
        /// </summary>
        [DataMember(Name="cdn.config.application.protocol")]
        public ConfigNodePropertyString CdnConfigApplicationProtocol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties {\n");
            sb.Append("  CdnConfigDistributionDomain: ").Append(CdnConfigDistributionDomain).Append("\n");
            sb.Append("  CdnConfigEnableRewriting: ").Append(CdnConfigEnableRewriting).Append("\n");
            sb.Append("  CdnConfigPathPrefixes: ").Append(CdnConfigPathPrefixes).Append("\n");
            sb.Append("  CdnConfigCdnttl: ").Append(CdnConfigCdnttl).Append("\n");
            sb.Append("  CdnConfigApplicationProtocol: ").Append(CdnConfigApplicationProtocol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CdnConfigDistributionDomain == other.CdnConfigDistributionDomain ||
                    CdnConfigDistributionDomain != null &&
                    CdnConfigDistributionDomain.Equals(other.CdnConfigDistributionDomain)
                ) && 
                (
                    CdnConfigEnableRewriting == other.CdnConfigEnableRewriting ||
                    CdnConfigEnableRewriting != null &&
                    CdnConfigEnableRewriting.Equals(other.CdnConfigEnableRewriting)
                ) && 
                (
                    CdnConfigPathPrefixes == other.CdnConfigPathPrefixes ||
                    CdnConfigPathPrefixes != null &&
                    CdnConfigPathPrefixes.Equals(other.CdnConfigPathPrefixes)
                ) && 
                (
                    CdnConfigCdnttl == other.CdnConfigCdnttl ||
                    CdnConfigCdnttl != null &&
                    CdnConfigCdnttl.Equals(other.CdnConfigCdnttl)
                ) && 
                (
                    CdnConfigApplicationProtocol == other.CdnConfigApplicationProtocol ||
                    CdnConfigApplicationProtocol != null &&
                    CdnConfigApplicationProtocol.Equals(other.CdnConfigApplicationProtocol)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CdnConfigDistributionDomain != null)
                    hashCode = hashCode * 59 + CdnConfigDistributionDomain.GetHashCode();
                    if (CdnConfigEnableRewriting != null)
                    hashCode = hashCode * 59 + CdnConfigEnableRewriting.GetHashCode();
                    if (CdnConfigPathPrefixes != null)
                    hashCode = hashCode * 59 + CdnConfigPathPrefixes.GetHashCode();
                    if (CdnConfigCdnttl != null)
                    hashCode = hashCode * 59 + CdnConfigCdnttl.GetHashCode();
                    if (CdnConfigApplicationProtocol != null)
                    hashCode = hashCode * 59 + CdnConfigApplicationProtocol.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties left, ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties left, ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
