/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqReplicationImplReplicationReceiverImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqReplicationImplReplicationReceiverImplProperties::ComDayCqReplicationImplReplicationReceiverImplProperties()
{
    m_Receiver_tmpfile_thresholdIsSet = false;
    m_Receiver_packages_use_installIsSet = false;
    
}

ComDayCqReplicationImplReplicationReceiverImplProperties::~ComDayCqReplicationImplReplicationReceiverImplProperties()
{
}

void ComDayCqReplicationImplReplicationReceiverImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqReplicationImplReplicationReceiverImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Receiver_tmpfile_thresholdIsSet)
    {
        val["receiver.tmpfile.threshold"] = ModelBase::toJson(m_Receiver_tmpfile_threshold);
    }
    if(m_Receiver_packages_use_installIsSet)
    {
        val["receiver.packages.use.install"] = ModelBase::toJson(m_Receiver_packages_use_install);
    }
    

    return val;
}

void ComDayCqReplicationImplReplicationReceiverImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("receiver.tmpfile.threshold") != val.end())
    {
        if(!val["receiver.tmpfile.threshold"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["receiver.tmpfile.threshold"]);
            setReceiverTmpfileThreshold( newItem );
        }
        
    }
    if(val.find("receiver.packages.use.install") != val.end())
    {
        if(!val["receiver.packages.use.install"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["receiver.packages.use.install"]);
            setReceiverPackagesUseInstall( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComDayCqReplicationImplReplicationReceiverImplProperties::getReceiverTmpfileThreshold() const
{
    return m_Receiver_tmpfile_threshold;
}
void ComDayCqReplicationImplReplicationReceiverImplProperties::setReceiverTmpfileThreshold(ConfigNodePropertyInteger const& value)
{
    m_Receiver_tmpfile_threshold = value;
    m_Receiver_tmpfile_thresholdIsSet = true;
}
bool ComDayCqReplicationImplReplicationReceiverImplProperties::receiverTmpfileThresholdIsSet() const
{
    return m_Receiver_tmpfile_thresholdIsSet;
}
void ComDayCqReplicationImplReplicationReceiverImplProperties::unsetReceiver_tmpfile_threshold()
{
    m_Receiver_tmpfile_thresholdIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqReplicationImplReplicationReceiverImplProperties::getReceiverPackagesUseInstall() const
{
    return m_Receiver_packages_use_install;
}
void ComDayCqReplicationImplReplicationReceiverImplProperties::setReceiverPackagesUseInstall(ConfigNodePropertyBoolean const& value)
{
    m_Receiver_packages_use_install = value;
    m_Receiver_packages_use_installIsSet = true;
}
bool ComDayCqReplicationImplReplicationReceiverImplProperties::receiverPackagesUseInstallIsSet() const
{
    return m_Receiver_packages_use_installIsSet;
}
void ComDayCqReplicationImplReplicationReceiverImplProperties::unsetReceiver_packages_use_install()
{
    m_Receiver_packages_use_installIsSet = false;
}

}
}
}
}

