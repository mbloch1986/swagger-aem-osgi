/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqImageInternalFontFontHelperProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqImageInternalFontFontHelperProperties::OAIComDayCqImageInternalFontFontHelperProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqImageInternalFontFontHelperProperties::OAIComDayCqImageInternalFontFontHelperProperties() {
    init();
}

OAIComDayCqImageInternalFontFontHelperProperties::~OAIComDayCqImageInternalFontFontHelperProperties() {
    this->cleanup();
}

void
OAIComDayCqImageInternalFontFontHelperProperties::init() {
    fontpath = new OAIConfigNodePropertyArray();
    m_fontpath_isSet = false;
    oversampling_factor = new OAIConfigNodePropertyInteger();
    m_oversampling_factor_isSet = false;
}

void
OAIComDayCqImageInternalFontFontHelperProperties::cleanup() {
    if(fontpath != nullptr) { 
        delete fontpath;
    }
    if(oversampling_factor != nullptr) { 
        delete oversampling_factor;
    }
}

OAIComDayCqImageInternalFontFontHelperProperties*
OAIComDayCqImageInternalFontFontHelperProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqImageInternalFontFontHelperProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&fontpath, pJson["fontpath"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&oversampling_factor, pJson["oversamplingFactor"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComDayCqImageInternalFontFontHelperProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqImageInternalFontFontHelperProperties::asJsonObject() {
    QJsonObject obj;
    if((fontpath != nullptr) && (fontpath->isSet())){
        toJsonValue(QString("fontpath"), fontpath, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((oversampling_factor != nullptr) && (oversampling_factor->isSet())){
        toJsonValue(QString("oversamplingFactor"), oversampling_factor, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComDayCqImageInternalFontFontHelperProperties::getFontpath() {
    return fontpath;
}
void
OAIComDayCqImageInternalFontFontHelperProperties::setFontpath(OAIConfigNodePropertyArray* fontpath) {
    this->fontpath = fontpath;
    this->m_fontpath_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqImageInternalFontFontHelperProperties::getOversamplingFactor() {
    return oversampling_factor;
}
void
OAIComDayCqImageInternalFontFontHelperProperties::setOversamplingFactor(OAIConfigNodePropertyInteger* oversampling_factor) {
    this->oversampling_factor = oversampling_factor;
    this->m_oversampling_factor_isSet = true;
}


bool
OAIComDayCqImageInternalFontFontHelperProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(fontpath != nullptr && fontpath->isSet()){ isObjectUpdated = true; break;}
        if(oversampling_factor != nullptr && oversampling_factor->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

