/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqWcmMsmImplRolloutManagerImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqWcmMsmImplRolloutManagerImplProperties::ComDayCqWcmMsmImplRolloutManagerImplProperties()
{
    m_Event_filterIsSet = false;
    m_Rolloutmgr_excludedprops_defaultIsSet = false;
    m_Rolloutmgr_excludedparagraphprops_defaultIsSet = false;
    m_Rolloutmgr_excludednodetypes_defaultIsSet = false;
    m_Rolloutmgr_threadpool_maxsizeIsSet = false;
    m_Rolloutmgr_threadpool_maxshutdowntimeIsSet = false;
    m_Rolloutmgr_threadpool_priorityIsSet = false;
    m_Rolloutmgr_commit_sizeIsSet = false;
    m_Rolloutmgr_conflicthandling_enabledIsSet = false;
    
}

ComDayCqWcmMsmImplRolloutManagerImplProperties::~ComDayCqWcmMsmImplRolloutManagerImplProperties()
{
}

void ComDayCqWcmMsmImplRolloutManagerImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqWcmMsmImplRolloutManagerImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Event_filterIsSet)
    {
        val["event.filter"] = ModelBase::toJson(m_Event_filter);
    }
    if(m_Rolloutmgr_excludedprops_defaultIsSet)
    {
        val["rolloutmgr.excludedprops.default"] = ModelBase::toJson(m_Rolloutmgr_excludedprops_default);
    }
    if(m_Rolloutmgr_excludedparagraphprops_defaultIsSet)
    {
        val["rolloutmgr.excludedparagraphprops.default"] = ModelBase::toJson(m_Rolloutmgr_excludedparagraphprops_default);
    }
    if(m_Rolloutmgr_excludednodetypes_defaultIsSet)
    {
        val["rolloutmgr.excludednodetypes.default"] = ModelBase::toJson(m_Rolloutmgr_excludednodetypes_default);
    }
    if(m_Rolloutmgr_threadpool_maxsizeIsSet)
    {
        val["rolloutmgr.threadpool.maxsize"] = ModelBase::toJson(m_Rolloutmgr_threadpool_maxsize);
    }
    if(m_Rolloutmgr_threadpool_maxshutdowntimeIsSet)
    {
        val["rolloutmgr.threadpool.maxshutdowntime"] = ModelBase::toJson(m_Rolloutmgr_threadpool_maxshutdowntime);
    }
    if(m_Rolloutmgr_threadpool_priorityIsSet)
    {
        val["rolloutmgr.threadpool.priority"] = ModelBase::toJson(m_Rolloutmgr_threadpool_priority);
    }
    if(m_Rolloutmgr_commit_sizeIsSet)
    {
        val["rolloutmgr.commit.size"] = ModelBase::toJson(m_Rolloutmgr_commit_size);
    }
    if(m_Rolloutmgr_conflicthandling_enabledIsSet)
    {
        val["rolloutmgr.conflicthandling.enabled"] = ModelBase::toJson(m_Rolloutmgr_conflicthandling_enabled);
    }
    

    return val;
}

void ComDayCqWcmMsmImplRolloutManagerImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("event.filter") != val.end())
    {
        if(!val["event.filter"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["event.filter"]);
            setEventFilter( newItem );
        }
        
    }
    if(val.find("rolloutmgr.excludedprops.default") != val.end())
    {
        if(!val["rolloutmgr.excludedprops.default"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["rolloutmgr.excludedprops.default"]);
            setRolloutmgrExcludedpropsDefault( newItem );
        }
        
    }
    if(val.find("rolloutmgr.excludedparagraphprops.default") != val.end())
    {
        if(!val["rolloutmgr.excludedparagraphprops.default"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["rolloutmgr.excludedparagraphprops.default"]);
            setRolloutmgrExcludedparagraphpropsDefault( newItem );
        }
        
    }
    if(val.find("rolloutmgr.excludednodetypes.default") != val.end())
    {
        if(!val["rolloutmgr.excludednodetypes.default"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["rolloutmgr.excludednodetypes.default"]);
            setRolloutmgrExcludednodetypesDefault( newItem );
        }
        
    }
    if(val.find("rolloutmgr.threadpool.maxsize") != val.end())
    {
        if(!val["rolloutmgr.threadpool.maxsize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["rolloutmgr.threadpool.maxsize"]);
            setRolloutmgrThreadpoolMaxsize( newItem );
        }
        
    }
    if(val.find("rolloutmgr.threadpool.maxshutdowntime") != val.end())
    {
        if(!val["rolloutmgr.threadpool.maxshutdowntime"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["rolloutmgr.threadpool.maxshutdowntime"]);
            setRolloutmgrThreadpoolMaxshutdowntime( newItem );
        }
        
    }
    if(val.find("rolloutmgr.threadpool.priority") != val.end())
    {
        if(!val["rolloutmgr.threadpool.priority"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["rolloutmgr.threadpool.priority"]);
            setRolloutmgrThreadpoolPriority( newItem );
        }
        
    }
    if(val.find("rolloutmgr.commit.size") != val.end())
    {
        if(!val["rolloutmgr.commit.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["rolloutmgr.commit.size"]);
            setRolloutmgrCommitSize( newItem );
        }
        
    }
    if(val.find("rolloutmgr.conflicthandling.enabled") != val.end())
    {
        if(!val["rolloutmgr.conflicthandling.enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["rolloutmgr.conflicthandling.enabled"]);
            setRolloutmgrConflicthandlingEnabled( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqWcmMsmImplRolloutManagerImplProperties::getEventFilter() const
{
    return m_Event_filter;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::setEventFilter(ConfigNodePropertyString const& value)
{
    m_Event_filter = value;
    m_Event_filterIsSet = true;
}
bool ComDayCqWcmMsmImplRolloutManagerImplProperties::eventFilterIsSet() const
{
    return m_Event_filterIsSet;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::unsetEvent_filter()
{
    m_Event_filterIsSet = false;
}
ConfigNodePropertyArray ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrExcludedpropsDefault() const
{
    return m_Rolloutmgr_excludedprops_default;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrExcludedpropsDefault(ConfigNodePropertyArray const& value)
{
    m_Rolloutmgr_excludedprops_default = value;
    m_Rolloutmgr_excludedprops_defaultIsSet = true;
}
bool ComDayCqWcmMsmImplRolloutManagerImplProperties::rolloutmgrExcludedpropsDefaultIsSet() const
{
    return m_Rolloutmgr_excludedprops_defaultIsSet;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::unsetRolloutmgr_excludedprops_default()
{
    m_Rolloutmgr_excludedprops_defaultIsSet = false;
}
ConfigNodePropertyArray ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrExcludedparagraphpropsDefault() const
{
    return m_Rolloutmgr_excludedparagraphprops_default;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrExcludedparagraphpropsDefault(ConfigNodePropertyArray const& value)
{
    m_Rolloutmgr_excludedparagraphprops_default = value;
    m_Rolloutmgr_excludedparagraphprops_defaultIsSet = true;
}
bool ComDayCqWcmMsmImplRolloutManagerImplProperties::rolloutmgrExcludedparagraphpropsDefaultIsSet() const
{
    return m_Rolloutmgr_excludedparagraphprops_defaultIsSet;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::unsetRolloutmgr_excludedparagraphprops_default()
{
    m_Rolloutmgr_excludedparagraphprops_defaultIsSet = false;
}
ConfigNodePropertyArray ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrExcludednodetypesDefault() const
{
    return m_Rolloutmgr_excludednodetypes_default;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrExcludednodetypesDefault(ConfigNodePropertyArray const& value)
{
    m_Rolloutmgr_excludednodetypes_default = value;
    m_Rolloutmgr_excludednodetypes_defaultIsSet = true;
}
bool ComDayCqWcmMsmImplRolloutManagerImplProperties::rolloutmgrExcludednodetypesDefaultIsSet() const
{
    return m_Rolloutmgr_excludednodetypes_defaultIsSet;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::unsetRolloutmgr_excludednodetypes_default()
{
    m_Rolloutmgr_excludednodetypes_defaultIsSet = false;
}
ConfigNodePropertyInteger ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrThreadpoolMaxsize() const
{
    return m_Rolloutmgr_threadpool_maxsize;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrThreadpoolMaxsize(ConfigNodePropertyInteger const& value)
{
    m_Rolloutmgr_threadpool_maxsize = value;
    m_Rolloutmgr_threadpool_maxsizeIsSet = true;
}
bool ComDayCqWcmMsmImplRolloutManagerImplProperties::rolloutmgrThreadpoolMaxsizeIsSet() const
{
    return m_Rolloutmgr_threadpool_maxsizeIsSet;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::unsetRolloutmgr_threadpool_maxsize()
{
    m_Rolloutmgr_threadpool_maxsizeIsSet = false;
}
ConfigNodePropertyInteger ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrThreadpoolMaxshutdowntime() const
{
    return m_Rolloutmgr_threadpool_maxshutdowntime;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrThreadpoolMaxshutdowntime(ConfigNodePropertyInteger const& value)
{
    m_Rolloutmgr_threadpool_maxshutdowntime = value;
    m_Rolloutmgr_threadpool_maxshutdowntimeIsSet = true;
}
bool ComDayCqWcmMsmImplRolloutManagerImplProperties::rolloutmgrThreadpoolMaxshutdowntimeIsSet() const
{
    return m_Rolloutmgr_threadpool_maxshutdowntimeIsSet;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::unsetRolloutmgr_threadpool_maxshutdowntime()
{
    m_Rolloutmgr_threadpool_maxshutdowntimeIsSet = false;
}
ConfigNodePropertyDropDown ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrThreadpoolPriority() const
{
    return m_Rolloutmgr_threadpool_priority;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrThreadpoolPriority(ConfigNodePropertyDropDown const& value)
{
    m_Rolloutmgr_threadpool_priority = value;
    m_Rolloutmgr_threadpool_priorityIsSet = true;
}
bool ComDayCqWcmMsmImplRolloutManagerImplProperties::rolloutmgrThreadpoolPriorityIsSet() const
{
    return m_Rolloutmgr_threadpool_priorityIsSet;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::unsetRolloutmgr_threadpool_priority()
{
    m_Rolloutmgr_threadpool_priorityIsSet = false;
}
ConfigNodePropertyInteger ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrCommitSize() const
{
    return m_Rolloutmgr_commit_size;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrCommitSize(ConfigNodePropertyInteger const& value)
{
    m_Rolloutmgr_commit_size = value;
    m_Rolloutmgr_commit_sizeIsSet = true;
}
bool ComDayCqWcmMsmImplRolloutManagerImplProperties::rolloutmgrCommitSizeIsSet() const
{
    return m_Rolloutmgr_commit_sizeIsSet;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::unsetRolloutmgr_commit_size()
{
    m_Rolloutmgr_commit_sizeIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrConflicthandlingEnabled() const
{
    return m_Rolloutmgr_conflicthandling_enabled;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrConflicthandlingEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Rolloutmgr_conflicthandling_enabled = value;
    m_Rolloutmgr_conflicthandling_enabledIsSet = true;
}
bool ComDayCqWcmMsmImplRolloutManagerImplProperties::rolloutmgrConflicthandlingEnabledIsSet() const
{
    return m_Rolloutmgr_conflicthandling_enabledIsSet;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::unsetRolloutmgr_conflicthandling_enabled()
{
    m_Rolloutmgr_conflicthandling_enabledIsSet = false;
}

}
}
}
}

