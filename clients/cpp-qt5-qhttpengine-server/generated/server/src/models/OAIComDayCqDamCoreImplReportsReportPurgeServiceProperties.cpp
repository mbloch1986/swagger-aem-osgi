/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties() {
    this->init();
}

OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::~OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties() {
    
}

void
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::init() {
    m_scheduler_expression_isSet = false;
    m_max_saved_reports_isSet = false;
    m_time_duration_isSet = false;
    m_enable_report_purge_isSet = false;
}

void
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(scheduler_expression, json[QString("scheduler.expression")]);
    
    ::OpenAPI::fromJsonValue(max_saved_reports, json[QString("maxSavedReports")]);
    
    ::OpenAPI::fromJsonValue(time_duration, json[QString("timeDuration")]);
    
    ::OpenAPI::fromJsonValue(enable_report_purge, json[QString("enableReportPurge")]);
    
}

QString
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::asJsonObject() const {
    QJsonObject obj;
	if(scheduler_expression.isSet()){
        obj.insert(QString("scheduler.expression"), ::OpenAPI::toJsonValue(scheduler_expression));
    }
	if(max_saved_reports.isSet()){
        obj.insert(QString("maxSavedReports"), ::OpenAPI::toJsonValue(max_saved_reports));
    }
	if(time_duration.isSet()){
        obj.insert(QString("timeDuration"), ::OpenAPI::toJsonValue(time_duration));
    }
	if(enable_report_purge.isSet()){
        obj.insert(QString("enableReportPurge"), ::OpenAPI::toJsonValue(enable_report_purge));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::getSchedulerExpression() const {
    return scheduler_expression;
}
void
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::setSchedulerExpression(const OAIConfigNodePropertyString &scheduler_expression) {
    this->scheduler_expression = scheduler_expression;
    this->m_scheduler_expression_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::getMaxSavedReports() const {
    return max_saved_reports;
}
void
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::setMaxSavedReports(const OAIConfigNodePropertyInteger &max_saved_reports) {
    this->max_saved_reports = max_saved_reports;
    this->m_max_saved_reports_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::getTimeDuration() const {
    return time_duration;
}
void
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::setTimeDuration(const OAIConfigNodePropertyInteger &time_duration) {
    this->time_duration = time_duration;
    this->m_time_duration_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::getEnableReportPurge() const {
    return enable_report_purge;
}
void
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::setEnableReportPurge(const OAIConfigNodePropertyBoolean &enable_report_purge) {
    this->enable_report_purge = enable_report_purge;
    this->m_enable_report_purge_isSet = true;
}


bool
OAIComDayCqDamCoreImplReportsReportPurgeServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(scheduler_expression.isSet()){ isObjectUpdated = true; break;}
    
        if(max_saved_reports.isSet()){ isObjectUpdated = true; break;}
    
        if(time_duration.isSet()){ isObjectUpdated = true; break;}
    
        if(enable_report_purge.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

