/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {
  #[serde(rename = "osgi.http.whiteboard.context.select")]
  osgi_http_whiteboard_context_select: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "osgi.http.whiteboard.listener")]
  osgi_http_whiteboard_listener: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "auth.sudo.cookie")]
  auth_sudo_cookie: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "auth.sudo.parameter")]
  auth_sudo_parameter: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "auth.annonymous")]
  auth_annonymous: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "sling.auth.requirements")]
  sling_auth_requirements: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "sling.auth.anonymous.user")]
  sling_auth_anonymous_user: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "sling.auth.anonymous.password")]
  sling_auth_anonymous_password: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "auth.http")]
  auth_http: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "auth.http.realm")]
  auth_http_realm: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "auth.uri.suffix")]
  auth_uri_suffix: Option<::models::ConfigNodePropertyArray>
}

impl OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {
  pub fn new() -> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {
    OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {
      osgi_http_whiteboard_context_select: None,
      osgi_http_whiteboard_listener: None,
      auth_sudo_cookie: None,
      auth_sudo_parameter: None,
      auth_annonymous: None,
      sling_auth_requirements: None,
      sling_auth_anonymous_user: None,
      sling_auth_anonymous_password: None,
      auth_http: None,
      auth_http_realm: None,
      auth_uri_suffix: None
    }
  }

  pub fn set_osgi_http_whiteboard_context_select(&mut self, osgi_http_whiteboard_context_select: ::models::ConfigNodePropertyString) {
    self.osgi_http_whiteboard_context_select = Some(osgi_http_whiteboard_context_select);
  }

  pub fn with_osgi_http_whiteboard_context_select(mut self, osgi_http_whiteboard_context_select: ::models::ConfigNodePropertyString) -> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {
    self.osgi_http_whiteboard_context_select = Some(osgi_http_whiteboard_context_select);
    self
  }

  pub fn osgi_http_whiteboard_context_select(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.osgi_http_whiteboard_context_select.as_ref()
  }

  pub fn reset_osgi_http_whiteboard_context_select(&mut self) {
    self.osgi_http_whiteboard_context_select = None;
  }

  pub fn set_osgi_http_whiteboard_listener(&mut self, osgi_http_whiteboard_listener: ::models::ConfigNodePropertyString) {
    self.osgi_http_whiteboard_listener = Some(osgi_http_whiteboard_listener);
  }

  pub fn with_osgi_http_whiteboard_listener(mut self, osgi_http_whiteboard_listener: ::models::ConfigNodePropertyString) -> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {
    self.osgi_http_whiteboard_listener = Some(osgi_http_whiteboard_listener);
    self
  }

  pub fn osgi_http_whiteboard_listener(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.osgi_http_whiteboard_listener.as_ref()
  }

  pub fn reset_osgi_http_whiteboard_listener(&mut self) {
    self.osgi_http_whiteboard_listener = None;
  }

  pub fn set_auth_sudo_cookie(&mut self, auth_sudo_cookie: ::models::ConfigNodePropertyString) {
    self.auth_sudo_cookie = Some(auth_sudo_cookie);
  }

  pub fn with_auth_sudo_cookie(mut self, auth_sudo_cookie: ::models::ConfigNodePropertyString) -> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {
    self.auth_sudo_cookie = Some(auth_sudo_cookie);
    self
  }

  pub fn auth_sudo_cookie(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.auth_sudo_cookie.as_ref()
  }

  pub fn reset_auth_sudo_cookie(&mut self) {
    self.auth_sudo_cookie = None;
  }

  pub fn set_auth_sudo_parameter(&mut self, auth_sudo_parameter: ::models::ConfigNodePropertyString) {
    self.auth_sudo_parameter = Some(auth_sudo_parameter);
  }

  pub fn with_auth_sudo_parameter(mut self, auth_sudo_parameter: ::models::ConfigNodePropertyString) -> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {
    self.auth_sudo_parameter = Some(auth_sudo_parameter);
    self
  }

  pub fn auth_sudo_parameter(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.auth_sudo_parameter.as_ref()
  }

  pub fn reset_auth_sudo_parameter(&mut self) {
    self.auth_sudo_parameter = None;
  }

  pub fn set_auth_annonymous(&mut self, auth_annonymous: ::models::ConfigNodePropertyBoolean) {
    self.auth_annonymous = Some(auth_annonymous);
  }

  pub fn with_auth_annonymous(mut self, auth_annonymous: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {
    self.auth_annonymous = Some(auth_annonymous);
    self
  }

  pub fn auth_annonymous(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.auth_annonymous.as_ref()
  }

  pub fn reset_auth_annonymous(&mut self) {
    self.auth_annonymous = None;
  }

  pub fn set_sling_auth_requirements(&mut self, sling_auth_requirements: ::models::ConfigNodePropertyArray) {
    self.sling_auth_requirements = Some(sling_auth_requirements);
  }

  pub fn with_sling_auth_requirements(mut self, sling_auth_requirements: ::models::ConfigNodePropertyArray) -> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {
    self.sling_auth_requirements = Some(sling_auth_requirements);
    self
  }

  pub fn sling_auth_requirements(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.sling_auth_requirements.as_ref()
  }

  pub fn reset_sling_auth_requirements(&mut self) {
    self.sling_auth_requirements = None;
  }

  pub fn set_sling_auth_anonymous_user(&mut self, sling_auth_anonymous_user: ::models::ConfigNodePropertyString) {
    self.sling_auth_anonymous_user = Some(sling_auth_anonymous_user);
  }

  pub fn with_sling_auth_anonymous_user(mut self, sling_auth_anonymous_user: ::models::ConfigNodePropertyString) -> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {
    self.sling_auth_anonymous_user = Some(sling_auth_anonymous_user);
    self
  }

  pub fn sling_auth_anonymous_user(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sling_auth_anonymous_user.as_ref()
  }

  pub fn reset_sling_auth_anonymous_user(&mut self) {
    self.sling_auth_anonymous_user = None;
  }

  pub fn set_sling_auth_anonymous_password(&mut self, sling_auth_anonymous_password: ::models::ConfigNodePropertyString) {
    self.sling_auth_anonymous_password = Some(sling_auth_anonymous_password);
  }

  pub fn with_sling_auth_anonymous_password(mut self, sling_auth_anonymous_password: ::models::ConfigNodePropertyString) -> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {
    self.sling_auth_anonymous_password = Some(sling_auth_anonymous_password);
    self
  }

  pub fn sling_auth_anonymous_password(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sling_auth_anonymous_password.as_ref()
  }

  pub fn reset_sling_auth_anonymous_password(&mut self) {
    self.sling_auth_anonymous_password = None;
  }

  pub fn set_auth_http(&mut self, auth_http: ::models::ConfigNodePropertyDropDown) {
    self.auth_http = Some(auth_http);
  }

  pub fn with_auth_http(mut self, auth_http: ::models::ConfigNodePropertyDropDown) -> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {
    self.auth_http = Some(auth_http);
    self
  }

  pub fn auth_http(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.auth_http.as_ref()
  }

  pub fn reset_auth_http(&mut self) {
    self.auth_http = None;
  }

  pub fn set_auth_http_realm(&mut self, auth_http_realm: ::models::ConfigNodePropertyString) {
    self.auth_http_realm = Some(auth_http_realm);
  }

  pub fn with_auth_http_realm(mut self, auth_http_realm: ::models::ConfigNodePropertyString) -> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {
    self.auth_http_realm = Some(auth_http_realm);
    self
  }

  pub fn auth_http_realm(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.auth_http_realm.as_ref()
  }

  pub fn reset_auth_http_realm(&mut self) {
    self.auth_http_realm = None;
  }

  pub fn set_auth_uri_suffix(&mut self, auth_uri_suffix: ::models::ConfigNodePropertyArray) {
    self.auth_uri_suffix = Some(auth_uri_suffix);
  }

  pub fn with_auth_uri_suffix(mut self, auth_uri_suffix: ::models::ConfigNodePropertyArray) -> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {
    self.auth_uri_suffix = Some(auth_uri_suffix);
    self
  }

  pub fn auth_uri_suffix(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.auth_uri_suffix.as_ref()
  }

  pub fn reset_auth_uri_suffix(&mut self) {
    self.auth_uri_suffix = None;
  }

}



