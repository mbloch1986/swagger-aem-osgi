/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingEventJobsQueueConfigurationProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingEventJobsQueueConfigurationProperties :  IEquatable<OrgApacheSlingEventJobsQueueConfigurationProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingEventJobsQueueConfigurationProperties" /> class.
        /// </summary>
        /// <param name="queueName">queueName.</param>
        /// <param name="queueTopics">queueTopics.</param>
        /// <param name="queueType">queueType.</param>
        /// <param name="queuePriority">queuePriority.</param>
        /// <param name="queueRetries">queueRetries.</param>
        /// <param name="queueRetrydelay">queueRetrydelay.</param>
        /// <param name="queueMaxparallel">queueMaxparallel.</param>
        /// <param name="queueKeepJobs">queueKeepJobs.</param>
        /// <param name="queuePreferRunOnCreationInstance">queuePreferRunOnCreationInstance.</param>
        /// <param name="queueThreadPoolSize">queueThreadPoolSize.</param>
        /// <param name="serviceRanking">serviceRanking.</param>
        public OrgApacheSlingEventJobsQueueConfigurationProperties(ConfigNodePropertyString queueName = default(ConfigNodePropertyString), ConfigNodePropertyArray queueTopics = default(ConfigNodePropertyArray), ConfigNodePropertyDropDown queueType = default(ConfigNodePropertyDropDown), ConfigNodePropertyDropDown queuePriority = default(ConfigNodePropertyDropDown), ConfigNodePropertyInteger queueRetries = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger queueRetrydelay = default(ConfigNodePropertyInteger), ConfigNodePropertyFloat queueMaxparallel = default(ConfigNodePropertyFloat), ConfigNodePropertyBoolean queueKeepJobs = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean queuePreferRunOnCreationInstance = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger queueThreadPoolSize = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger serviceRanking = default(ConfigNodePropertyInteger))
        {
            this.QueueName = queueName;
            this.QueueTopics = queueTopics;
            this.QueueType = queueType;
            this.QueuePriority = queuePriority;
            this.QueueRetries = queueRetries;
            this.QueueRetrydelay = queueRetrydelay;
            this.QueueMaxparallel = queueMaxparallel;
            this.QueueKeepJobs = queueKeepJobs;
            this.QueuePreferRunOnCreationInstance = queuePreferRunOnCreationInstance;
            this.QueueThreadPoolSize = queueThreadPoolSize;
            this.ServiceRanking = serviceRanking;
        }
        
        /// <summary>
        /// Gets or Sets QueueName
        /// </summary>
        [DataMember(Name="queue.name", EmitDefaultValue=false)]
        public ConfigNodePropertyString QueueName { get; set; }

        /// <summary>
        /// Gets or Sets QueueTopics
        /// </summary>
        [DataMember(Name="queue.topics", EmitDefaultValue=false)]
        public ConfigNodePropertyArray QueueTopics { get; set; }

        /// <summary>
        /// Gets or Sets QueueType
        /// </summary>
        [DataMember(Name="queue.type", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown QueueType { get; set; }

        /// <summary>
        /// Gets or Sets QueuePriority
        /// </summary>
        [DataMember(Name="queue.priority", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown QueuePriority { get; set; }

        /// <summary>
        /// Gets or Sets QueueRetries
        /// </summary>
        [DataMember(Name="queue.retries", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger QueueRetries { get; set; }

        /// <summary>
        /// Gets or Sets QueueRetrydelay
        /// </summary>
        [DataMember(Name="queue.retrydelay", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger QueueRetrydelay { get; set; }

        /// <summary>
        /// Gets or Sets QueueMaxparallel
        /// </summary>
        [DataMember(Name="queue.maxparallel", EmitDefaultValue=false)]
        public ConfigNodePropertyFloat QueueMaxparallel { get; set; }

        /// <summary>
        /// Gets or Sets QueueKeepJobs
        /// </summary>
        [DataMember(Name="queue.keepJobs", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean QueueKeepJobs { get; set; }

        /// <summary>
        /// Gets or Sets QueuePreferRunOnCreationInstance
        /// </summary>
        [DataMember(Name="queue.preferRunOnCreationInstance", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean QueuePreferRunOnCreationInstance { get; set; }

        /// <summary>
        /// Gets or Sets QueueThreadPoolSize
        /// </summary>
        [DataMember(Name="queue.threadPoolSize", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger QueueThreadPoolSize { get; set; }

        /// <summary>
        /// Gets or Sets ServiceRanking
        /// </summary>
        [DataMember(Name="service.ranking", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ServiceRanking { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingEventJobsQueueConfigurationProperties {\n");
            sb.Append("  QueueName: ").Append(QueueName).Append("\n");
            sb.Append("  QueueTopics: ").Append(QueueTopics).Append("\n");
            sb.Append("  QueueType: ").Append(QueueType).Append("\n");
            sb.Append("  QueuePriority: ").Append(QueuePriority).Append("\n");
            sb.Append("  QueueRetries: ").Append(QueueRetries).Append("\n");
            sb.Append("  QueueRetrydelay: ").Append(QueueRetrydelay).Append("\n");
            sb.Append("  QueueMaxparallel: ").Append(QueueMaxparallel).Append("\n");
            sb.Append("  QueueKeepJobs: ").Append(QueueKeepJobs).Append("\n");
            sb.Append("  QueuePreferRunOnCreationInstance: ").Append(QueuePreferRunOnCreationInstance).Append("\n");
            sb.Append("  QueueThreadPoolSize: ").Append(QueueThreadPoolSize).Append("\n");
            sb.Append("  ServiceRanking: ").Append(ServiceRanking).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingEventJobsQueueConfigurationProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingEventJobsQueueConfigurationProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingEventJobsQueueConfigurationProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingEventJobsQueueConfigurationProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QueueName == input.QueueName ||
                    (this.QueueName != null &&
                    this.QueueName.Equals(input.QueueName))
                ) && 
                (
                    this.QueueTopics == input.QueueTopics ||
                    (this.QueueTopics != null &&
                    this.QueueTopics.Equals(input.QueueTopics))
                ) && 
                (
                    this.QueueType == input.QueueType ||
                    (this.QueueType != null &&
                    this.QueueType.Equals(input.QueueType))
                ) && 
                (
                    this.QueuePriority == input.QueuePriority ||
                    (this.QueuePriority != null &&
                    this.QueuePriority.Equals(input.QueuePriority))
                ) && 
                (
                    this.QueueRetries == input.QueueRetries ||
                    (this.QueueRetries != null &&
                    this.QueueRetries.Equals(input.QueueRetries))
                ) && 
                (
                    this.QueueRetrydelay == input.QueueRetrydelay ||
                    (this.QueueRetrydelay != null &&
                    this.QueueRetrydelay.Equals(input.QueueRetrydelay))
                ) && 
                (
                    this.QueueMaxparallel == input.QueueMaxparallel ||
                    (this.QueueMaxparallel != null &&
                    this.QueueMaxparallel.Equals(input.QueueMaxparallel))
                ) && 
                (
                    this.QueueKeepJobs == input.QueueKeepJobs ||
                    (this.QueueKeepJobs != null &&
                    this.QueueKeepJobs.Equals(input.QueueKeepJobs))
                ) && 
                (
                    this.QueuePreferRunOnCreationInstance == input.QueuePreferRunOnCreationInstance ||
                    (this.QueuePreferRunOnCreationInstance != null &&
                    this.QueuePreferRunOnCreationInstance.Equals(input.QueuePreferRunOnCreationInstance))
                ) && 
                (
                    this.QueueThreadPoolSize == input.QueueThreadPoolSize ||
                    (this.QueueThreadPoolSize != null &&
                    this.QueueThreadPoolSize.Equals(input.QueueThreadPoolSize))
                ) && 
                (
                    this.ServiceRanking == input.ServiceRanking ||
                    (this.ServiceRanking != null &&
                    this.ServiceRanking.Equals(input.ServiceRanking))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueueName != null)
                    hashCode = hashCode * 59 + this.QueueName.GetHashCode();
                if (this.QueueTopics != null)
                    hashCode = hashCode * 59 + this.QueueTopics.GetHashCode();
                if (this.QueueType != null)
                    hashCode = hashCode * 59 + this.QueueType.GetHashCode();
                if (this.QueuePriority != null)
                    hashCode = hashCode * 59 + this.QueuePriority.GetHashCode();
                if (this.QueueRetries != null)
                    hashCode = hashCode * 59 + this.QueueRetries.GetHashCode();
                if (this.QueueRetrydelay != null)
                    hashCode = hashCode * 59 + this.QueueRetrydelay.GetHashCode();
                if (this.QueueMaxparallel != null)
                    hashCode = hashCode * 59 + this.QueueMaxparallel.GetHashCode();
                if (this.QueueKeepJobs != null)
                    hashCode = hashCode * 59 + this.QueueKeepJobs.GetHashCode();
                if (this.QueuePreferRunOnCreationInstance != null)
                    hashCode = hashCode * 59 + this.QueuePreferRunOnCreationInstance.GetHashCode();
                if (this.QueueThreadPoolSize != null)
                    hashCode = hashCode * 59 + this.QueueThreadPoolSize.GetHashCode();
                if (this.ServiceRanking != null)
                    hashCode = hashCode * 59 + this.ServiceRanking.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
