/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties() {
    init();
}

OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::~OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::init() {
    group_listing_pagination_enable = new OAIConfigNodePropertyBoolean();
    m_group_listing_pagination_enable_isSet = false;
    group_listing_lazyloading_enable = new OAIConfigNodePropertyBoolean();
    m_group_listing_lazyloading_enable_isSet = false;
    page_size = new OAIConfigNodePropertyInteger();
    m_page_size_isSet = false;
    priority = new OAIConfigNodePropertyInteger();
    m_priority_isSet = false;
}

void
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::cleanup() {
    if(group_listing_pagination_enable != nullptr) { 
        delete group_listing_pagination_enable;
    }
    if(group_listing_lazyloading_enable != nullptr) { 
        delete group_listing_lazyloading_enable;
    }
    if(page_size != nullptr) { 
        delete page_size;
    }
    if(priority != nullptr) { 
        delete priority;
    }
}

OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties*
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&group_listing_pagination_enable, pJson["group.listing.pagination.enable"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&group_listing_lazyloading_enable, pJson["group.listing.lazyloading.enable"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&page_size, pJson["page.size"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&priority, pJson["priority"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::asJsonObject() {
    QJsonObject obj;
    if((group_listing_pagination_enable != nullptr) && (group_listing_pagination_enable->isSet())){
        toJsonValue(QString("group.listing.pagination.enable"), group_listing_pagination_enable, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((group_listing_lazyloading_enable != nullptr) && (group_listing_lazyloading_enable->isSet())){
        toJsonValue(QString("group.listing.lazyloading.enable"), group_listing_lazyloading_enable, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((page_size != nullptr) && (page_size->isSet())){
        toJsonValue(QString("page.size"), page_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((priority != nullptr) && (priority->isSet())){
        toJsonValue(QString("priority"), priority, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::getGroupListingPaginationEnable() {
    return group_listing_pagination_enable;
}
void
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::setGroupListingPaginationEnable(OAIConfigNodePropertyBoolean* group_listing_pagination_enable) {
    this->group_listing_pagination_enable = group_listing_pagination_enable;
    this->m_group_listing_pagination_enable_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::getGroupListingLazyloadingEnable() {
    return group_listing_lazyloading_enable;
}
void
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::setGroupListingLazyloadingEnable(OAIConfigNodePropertyBoolean* group_listing_lazyloading_enable) {
    this->group_listing_lazyloading_enable = group_listing_lazyloading_enable;
    this->m_group_listing_lazyloading_enable_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::getPageSize() {
    return page_size;
}
void
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::setPageSize(OAIConfigNodePropertyInteger* page_size) {
    this->page_size = page_size;
    this->m_page_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::getPriority() {
    return priority;
}
void
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::setPriority(OAIConfigNodePropertyInteger* priority) {
    this->priority = priority;
    this->m_priority_isSet = true;
}


bool
OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(group_listing_pagination_enable != nullptr && group_listing_pagination_enable->isSet()){ isObjectUpdated = true; break;}
        if(group_listing_lazyloading_enable != nullptr && group_listing_lazyloading_enable->isSet()){ isObjectUpdated = true; break;}
        if(page_size != nullptr && page_size->isSet()){ isObjectUpdated = true; break;}
        if(priority != nullptr && priority->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

