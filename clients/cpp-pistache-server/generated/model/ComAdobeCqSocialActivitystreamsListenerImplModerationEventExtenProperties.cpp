/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties()
{
    m_AcceptedIsSet = false;
    m_RankedIsSet = false;
    
}

ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::~ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties()
{
}

void ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_AcceptedIsSet)
    {
        val["accepted"] = ModelBase::toJson(m_Accepted);
    }
    if(m_RankedIsSet)
    {
        val["ranked"] = ModelBase::toJson(m_Ranked);
    }
    

    return val;
}

void ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::fromJson(nlohmann::json& val)
{
    if(val.find("accepted") != val.end())
    {
        if(!val["accepted"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["accepted"]);
            setAccepted( newItem );
        }
        
    }
    if(val.find("ranked") != val.end())
    {
        if(!val["ranked"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["ranked"]);
            setRanked( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::getAccepted() const
{
    return m_Accepted;
}
void ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::setAccepted(ConfigNodePropertyBoolean const& value)
{
    m_Accepted = value;
    m_AcceptedIsSet = true;
}
bool ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::acceptedIsSet() const
{
    return m_AcceptedIsSet;
}
void ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::unsetAccepted()
{
    m_AcceptedIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::getRanked() const
{
    return m_Ranked;
}
void ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::setRanked(ConfigNodePropertyInteger const& value)
{
    m_Ranked = value;
    m_RankedIsSet = true;
}
bool ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::rankedIsSet() const
{
    return m_RankedIsSet;
}
void ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::unsetRanked()
{
    m_RankedIsSet = false;
}

}
}
}
}

