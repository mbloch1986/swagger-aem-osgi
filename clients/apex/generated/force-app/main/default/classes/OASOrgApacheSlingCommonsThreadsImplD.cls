/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASOrgApacheSlingCommonsThreadsImplD
 */
public class OASOrgApacheSlingCommonsThreadsImplD {
    /**
     * Get name
     * @return name
     */
    public OASConfigNodePropertyString name { get; set; }

    /**
     * Get minPoolSize
     * @return minPoolSize
     */
    public OASConfigNodePropertyInteger minPoolSize { get; set; }

    /**
     * Get maxPoolSize
     * @return maxPoolSize
     */
    public OASConfigNodePropertyInteger maxPoolSize { get; set; }

    /**
     * Get queueSize
     * @return queueSize
     */
    public OASConfigNodePropertyInteger queueSize { get; set; }

    /**
     * Get maxThreadAge
     * @return maxThreadAge
     */
    public OASConfigNodePropertyInteger maxThreadAge { get; set; }

    /**
     * Get keepAliveTime
     * @return keepAliveTime
     */
    public OASConfigNodePropertyInteger keepAliveTime { get; set; }

    /**
     * Get blockPolicy
     * @return blockPolicy
     */
    public OASConfigNodePropertyDropDown blockPolicy { get; set; }

    /**
     * Get shutdownGraceful
     * @return shutdownGraceful
     */
    public OASConfigNodePropertyBoolean shutdownGraceful { get; set; }

    /**
     * Get daemon
     * @return daemon
     */
    public OASConfigNodePropertyBoolean daemon { get; set; }

    /**
     * Get shutdownWaitTime
     * @return shutdownWaitTime
     */
    public OASConfigNodePropertyInteger shutdownWaitTime { get; set; }

    /**
     * Get priority
     * @return priority
     */
    public OASConfigNodePropertyDropDown priority { get; set; }

    public static OASOrgApacheSlingCommonsThreadsImplD getExample() {
        OASOrgApacheSlingCommonsThreadsImplD orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties = new OASOrgApacheSlingCommonsThreadsImplD();
          orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.name = OASConfigNodePropertyString.getExample();
          orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.minPoolSize = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.maxPoolSize = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.queueSize = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.maxThreadAge = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.keepAliveTime = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.blockPolicy = OASConfigNodePropertyDropDown.getExample();
          orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.shutdownGraceful = OASConfigNodePropertyBoolean.getExample();
          orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.daemon = OASConfigNodePropertyBoolean.getExample();
          orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.shutdownWaitTime = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.priority = OASConfigNodePropertyDropDown.getExample();
        return orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOrgApacheSlingCommonsThreadsImplD) {           
            OASOrgApacheSlingCommonsThreadsImplD orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties = (OASOrgApacheSlingCommonsThreadsImplD) obj;
            return this.name == orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.name
                && this.minPoolSize == orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.minPoolSize
                && this.maxPoolSize == orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.maxPoolSize
                && this.queueSize == orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.queueSize
                && this.maxThreadAge == orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.maxThreadAge
                && this.keepAliveTime == orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.keepAliveTime
                && this.blockPolicy == orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.blockPolicy
                && this.shutdownGraceful == orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.shutdownGraceful
                && this.daemon == orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.daemon
                && this.shutdownWaitTime == orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.shutdownWaitTime
                && this.priority == orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.priority;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (name == null ? 0 : System.hashCode(name));
        hashCode = (17 * hashCode) + (minPoolSize == null ? 0 : System.hashCode(minPoolSize));
        hashCode = (17 * hashCode) + (maxPoolSize == null ? 0 : System.hashCode(maxPoolSize));
        hashCode = (17 * hashCode) + (queueSize == null ? 0 : System.hashCode(queueSize));
        hashCode = (17 * hashCode) + (maxThreadAge == null ? 0 : System.hashCode(maxThreadAge));
        hashCode = (17 * hashCode) + (keepAliveTime == null ? 0 : System.hashCode(keepAliveTime));
        hashCode = (17 * hashCode) + (blockPolicy == null ? 0 : System.hashCode(blockPolicy));
        hashCode = (17 * hashCode) + (shutdownGraceful == null ? 0 : System.hashCode(shutdownGraceful));
        hashCode = (17 * hashCode) + (daemon == null ? 0 : System.hashCode(daemon));
        hashCode = (17 * hashCode) + (shutdownWaitTime == null ? 0 : System.hashCode(shutdownWaitTime));
        hashCode = (17 * hashCode) + (priority == null ? 0 : System.hashCode(priority));
        return hashCode;
    }
}

