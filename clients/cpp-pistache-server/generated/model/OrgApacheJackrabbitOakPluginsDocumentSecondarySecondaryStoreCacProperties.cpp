/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties()
{
    m_IncludedPathsIsSet = false;
    m_EnableAsyncObserverIsSet = false;
    m_ObserverQueueSizeIsSet = false;
    
}

OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::~OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties()
{
}

void OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_IncludedPathsIsSet)
    {
        val["includedPaths"] = ModelBase::toJson(m_IncludedPaths);
    }
    if(m_EnableAsyncObserverIsSet)
    {
        val["enableAsyncObserver"] = ModelBase::toJson(m_EnableAsyncObserver);
    }
    if(m_ObserverQueueSizeIsSet)
    {
        val["observerQueueSize"] = ModelBase::toJson(m_ObserverQueueSize);
    }
    

    return val;
}

void OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::fromJson(nlohmann::json& val)
{
    if(val.find("includedPaths") != val.end())
    {
        if(!val["includedPaths"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["includedPaths"]);
            setIncludedPaths( newItem );
        }
        
    }
    if(val.find("enableAsyncObserver") != val.end())
    {
        if(!val["enableAsyncObserver"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enableAsyncObserver"]);
            setEnableAsyncObserver( newItem );
        }
        
    }
    if(val.find("observerQueueSize") != val.end())
    {
        if(!val["observerQueueSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["observerQueueSize"]);
            setObserverQueueSize( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::getIncludedPaths() const
{
    return m_IncludedPaths;
}
void OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::setIncludedPaths(ConfigNodePropertyArray const& value)
{
    m_IncludedPaths = value;
    m_IncludedPathsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::includedPathsIsSet() const
{
    return m_IncludedPathsIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::unsetIncludedPaths()
{
    m_IncludedPathsIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::getEnableAsyncObserver() const
{
    return m_EnableAsyncObserver;
}
void OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::setEnableAsyncObserver(ConfigNodePropertyBoolean const& value)
{
    m_EnableAsyncObserver = value;
    m_EnableAsyncObserverIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::enableAsyncObserverIsSet() const
{
    return m_EnableAsyncObserverIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::unsetEnableAsyncObserver()
{
    m_EnableAsyncObserverIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::getObserverQueueSize() const
{
    return m_ObserverQueueSize;
}
void OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::setObserverQueueSize(ConfigNodePropertyInteger const& value)
{
    m_ObserverQueueSize = value;
    m_ObserverQueueSizeIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::observerQueueSizeIsSet() const
{
    return m_ObserverQueueSizeIsSet;
}
void OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::unsetObserverQueueSize()
{
    m_ObserverQueueSizeIsSet = false;
}

}
}
}
}

