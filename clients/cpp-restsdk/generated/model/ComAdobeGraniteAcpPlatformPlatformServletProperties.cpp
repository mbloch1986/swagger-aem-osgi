/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteAcpPlatformPlatformServletProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteAcpPlatformPlatformServletProperties::ComAdobeGraniteAcpPlatformPlatformServletProperties()
{
    m_Query_limitIsSet = false;
    m_File_type_extension_mapIsSet = false;
}

ComAdobeGraniteAcpPlatformPlatformServletProperties::~ComAdobeGraniteAcpPlatformPlatformServletProperties()
{
}

void ComAdobeGraniteAcpPlatformPlatformServletProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteAcpPlatformPlatformServletProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Query_limitIsSet)
    {
        val[utility::conversions::to_string_t("query.limit")] = ModelBase::toJson(m_Query_limit);
    }
    if(m_File_type_extension_mapIsSet)
    {
        val[utility::conversions::to_string_t("file.type.extension.map")] = ModelBase::toJson(m_File_type_extension_map);
    }

    return val;
}

void ComAdobeGraniteAcpPlatformPlatformServletProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("query.limit")))
    {
        if(!val[utility::conversions::to_string_t("query.limit")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("query.limit")]);
            setQueryLimit( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("file.type.extension.map")))
    {
        if(!val[utility::conversions::to_string_t("file.type.extension.map")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("file.type.extension.map")]);
            setFileTypeExtensionMap( newItem );
        }
    }
}

void ComAdobeGraniteAcpPlatformPlatformServletProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Query_limitIsSet)
    {
        if (m_Query_limit.get())
        {
            m_Query_limit->toMultipart(multipart, utility::conversions::to_string_t("query.limit."));
        }
    }
    if(m_File_type_extension_mapIsSet)
    {
        if (m_File_type_extension_map.get())
        {
            m_File_type_extension_map->toMultipart(multipart, utility::conversions::to_string_t("file.type.extension.map."));
        }
    }
}

void ComAdobeGraniteAcpPlatformPlatformServletProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("query.limit")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("query.limit")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("query.limit."));
            setQueryLimit( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("file.type.extension.map")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("file.type.extension.map")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("file.type.extension.map."));
            setFileTypeExtensionMap( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteAcpPlatformPlatformServletProperties::getQueryLimit() const
{
    return m_Query_limit;
}


void ComAdobeGraniteAcpPlatformPlatformServletProperties::setQueryLimit(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Query_limit = value;
    m_Query_limitIsSet = true;
}
bool ComAdobeGraniteAcpPlatformPlatformServletProperties::queryLimitIsSet() const
{
    return m_Query_limitIsSet;
}

void ComAdobeGraniteAcpPlatformPlatformServletProperties::unsetQuery_limit()
{
    m_Query_limitIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteAcpPlatformPlatformServletProperties::getFileTypeExtensionMap() const
{
    return m_File_type_extension_map;
}


void ComAdobeGraniteAcpPlatformPlatformServletProperties::setFileTypeExtensionMap(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_File_type_extension_map = value;
    m_File_type_extension_mapIsSet = true;
}
bool ComAdobeGraniteAcpPlatformPlatformServletProperties::fileTypeExtensionMapIsSet() const
{
    return m_File_type_extension_mapIsSet;
}

void ComAdobeGraniteAcpPlatformPlatformServletProperties::unsetFile_type_extension_map()
{
    m_File_type_extension_mapIsSet = false;
}

}
}
}
}

