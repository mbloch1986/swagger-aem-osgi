/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.h
 *
 * 
 */

#ifndef ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties_H_
#define ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties
    : public ModelBase
{
public:
    ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties();
    virtual ~ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getVersionId() const;
    void setVersionId(ConfigNodePropertyString const& value);
    bool versionIdIsSet() const;
    void unsetVersion_id();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getCacheOn() const;
    void setCacheOn(ConfigNodePropertyBoolean const& value);
    bool cacheOnIsSet() const;
    void unsetCache_on();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getConcurrencyLevel() const;
    void setConcurrencyLevel(ConfigNodePropertyInteger const& value);
    bool concurrencyLevelIsSet() const;
    void unsetConcurrency_level();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getCacheStartSize() const;
    void setCacheStartSize(ConfigNodePropertyInteger const& value);
    bool cacheStartSizeIsSet() const;
    void unsetCache_start_size();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getCacheTtl() const;
    void setCacheTtl(ConfigNodePropertyInteger const& value);
    bool cacheTtlIsSet() const;
    void unsetCache_ttl();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getCacheSize() const;
    void setCacheSize(ConfigNodePropertyInteger const& value);
    bool cacheSizeIsSet() const;
    void unsetCache_size();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getTimeLimit() const;
    void setTimeLimit(ConfigNodePropertyInteger const& value);
    bool timeLimitIsSet() const;
    void unsetTime_limit();

protected:
    ConfigNodePropertyString m_Version_id;
    bool m_Version_idIsSet;
    ConfigNodePropertyBoolean m_Cache_on;
    bool m_Cache_onIsSet;
    ConfigNodePropertyInteger m_Concurrency_level;
    bool m_Concurrency_levelIsSet;
    ConfigNodePropertyInteger m_Cache_start_size;
    bool m_Cache_start_sizeIsSet;
    ConfigNodePropertyInteger m_Cache_ttl;
    bool m_Cache_ttlIsSet;
    ConfigNodePropertyInteger m_Cache_size;
    bool m_Cache_sizeIsSet;
    ConfigNodePropertyInteger m_Time_limit;
    bool m_Time_limitIsSet;
};

}
}
}
}

#endif /* ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties_H_ */
