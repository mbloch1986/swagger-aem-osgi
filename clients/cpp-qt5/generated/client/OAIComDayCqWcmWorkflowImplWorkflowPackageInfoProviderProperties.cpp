/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties() {
    init();
}

OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::~OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties() {
    this->cleanup();
}

void
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::init() {
    workflowpackageinfoprovider_filter = new OAIConfigNodePropertyArray();
    m_workflowpackageinfoprovider_filter_isSet = false;
    workflowpackageinfoprovider_filter_rootpath = new OAIConfigNodePropertyString();
    m_workflowpackageinfoprovider_filter_rootpath_isSet = false;
}

void
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::cleanup() {
    if(workflowpackageinfoprovider_filter != nullptr) { 
        delete workflowpackageinfoprovider_filter;
    }
    if(workflowpackageinfoprovider_filter_rootpath != nullptr) { 
        delete workflowpackageinfoprovider_filter_rootpath;
    }
}

OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties*
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&workflowpackageinfoprovider_filter, pJson["workflowpackageinfoprovider.filter"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&workflowpackageinfoprovider_filter_rootpath, pJson["workflowpackageinfoprovider.filter.rootpath"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::asJsonObject() {
    QJsonObject obj;
    if((workflowpackageinfoprovider_filter != nullptr) && (workflowpackageinfoprovider_filter->isSet())){
        toJsonValue(QString("workflowpackageinfoprovider.filter"), workflowpackageinfoprovider_filter, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((workflowpackageinfoprovider_filter_rootpath != nullptr) && (workflowpackageinfoprovider_filter_rootpath->isSet())){
        toJsonValue(QString("workflowpackageinfoprovider.filter.rootpath"), workflowpackageinfoprovider_filter_rootpath, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::getWorkflowpackageinfoproviderFilter() {
    return workflowpackageinfoprovider_filter;
}
void
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::setWorkflowpackageinfoproviderFilter(OAIConfigNodePropertyArray* workflowpackageinfoprovider_filter) {
    this->workflowpackageinfoprovider_filter = workflowpackageinfoprovider_filter;
    this->m_workflowpackageinfoprovider_filter_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::getWorkflowpackageinfoproviderFilterRootpath() {
    return workflowpackageinfoprovider_filter_rootpath;
}
void
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::setWorkflowpackageinfoproviderFilterRootpath(OAIConfigNodePropertyString* workflowpackageinfoprovider_filter_rootpath) {
    this->workflowpackageinfoprovider_filter_rootpath = workflowpackageinfoprovider_filter_rootpath;
    this->m_workflowpackageinfoprovider_filter_rootpath_isSet = true;
}


bool
OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(workflowpackageinfoprovider_filter != nullptr && workflowpackageinfoprovider_filter->isSet()){ isObjectUpdated = true; break;}
        if(workflowpackageinfoprovider_filter_rootpath != nullptr && workflowpackageinfoprovider_filter_rootpath->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

