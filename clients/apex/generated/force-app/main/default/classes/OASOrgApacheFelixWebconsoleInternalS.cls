/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASOrgApacheFelixWebconsoleInternalS
 */
public class OASOrgApacheFelixWebconsoleInternalS implements OAS.MappedProperties {
    /**
     * Get managerRoot
     * @return managerRoot
     */
    public OASConfigNodePropertyString managerRoot { get; set; }

    /**
     * Get httpServiceFilter
     * @return httpServiceFilter
     */
    public OASConfigNodePropertyString httpServiceFilter { get; set; }

    /**
     * Get defaultRender
     * @return defaultRender
     */
    public OASConfigNodePropertyString defaultRender { get; set; }

    /**
     * Get realm
     * @return realm
     */
    public OASConfigNodePropertyString realm { get; set; }

    /**
     * Get username
     * @return username
     */
    public OASConfigNodePropertyString username { get; set; }

    /**
     * Get password
     * @return password
     */
    public OASConfigNodePropertyString password { get; set; }

    /**
     * Get category
     * @return category
     */
    public OASConfigNodePropertyString category { get; set; }

    /**
     * Get locale
     * @return locale
     */
    public OASConfigNodePropertyString locale { get; set; }

    /**
     * Get loglevel
     * @return loglevel
     */
    public OASConfigNodePropertyDropDown loglevel { get; set; }

    /**
     * Get plugins
     * @return plugins
     */
    public OASConfigNodePropertyDropDown plugins { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'manager.root' => 'managerRoot',
        'http.service.filter' => 'httpServiceFilter',
        'default.render' => 'defaultRender'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASOrgApacheFelixWebconsoleInternalS getExample() {
        OASOrgApacheFelixWebconsoleInternalS orgApacheFelixWebconsoleInternalServletOsgiManagerProperties = new OASOrgApacheFelixWebconsoleInternalS();
          orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.managerRoot = OASConfigNodePropertyString.getExample();
          orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.httpServiceFilter = OASConfigNodePropertyString.getExample();
          orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.defaultRender = OASConfigNodePropertyString.getExample();
          orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.realm = OASConfigNodePropertyString.getExample();
          orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.username = OASConfigNodePropertyString.getExample();
          orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.password = OASConfigNodePropertyString.getExample();
          orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.category = OASConfigNodePropertyString.getExample();
          orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.locale = OASConfigNodePropertyString.getExample();
          orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.loglevel = OASConfigNodePropertyDropDown.getExample();
          orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.plugins = OASConfigNodePropertyDropDown.getExample();
        return orgApacheFelixWebconsoleInternalServletOsgiManagerProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOrgApacheFelixWebconsoleInternalS) {           
            OASOrgApacheFelixWebconsoleInternalS orgApacheFelixWebconsoleInternalServletOsgiManagerProperties = (OASOrgApacheFelixWebconsoleInternalS) obj;
            return this.managerRoot == orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.managerRoot
                && this.httpServiceFilter == orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.httpServiceFilter
                && this.defaultRender == orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.defaultRender
                && this.realm == orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.realm
                && this.username == orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.username
                && this.password == orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.password
                && this.category == orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.category
                && this.locale == orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.locale
                && this.loglevel == orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.loglevel
                && this.plugins == orgApacheFelixWebconsoleInternalServletOsgiManagerProperties.plugins;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (managerRoot == null ? 0 : System.hashCode(managerRoot));
        hashCode = (17 * hashCode) + (httpServiceFilter == null ? 0 : System.hashCode(httpServiceFilter));
        hashCode = (17 * hashCode) + (defaultRender == null ? 0 : System.hashCode(defaultRender));
        hashCode = (17 * hashCode) + (realm == null ? 0 : System.hashCode(realm));
        hashCode = (17 * hashCode) + (username == null ? 0 : System.hashCode(username));
        hashCode = (17 * hashCode) + (password == null ? 0 : System.hashCode(password));
        hashCode = (17 * hashCode) + (category == null ? 0 : System.hashCode(category));
        hashCode = (17 * hashCode) + (locale == null ? 0 : System.hashCode(locale));
        hashCode = (17 * hashCode) + (loglevel == null ? 0 : System.hashCode(loglevel));
        hashCode = (17 * hashCode) + (plugins == null ? 0 : System.hashCode(plugins));
        return hashCode;
    }
}

