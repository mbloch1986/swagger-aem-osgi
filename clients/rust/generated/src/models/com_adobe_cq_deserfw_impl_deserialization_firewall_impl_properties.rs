/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqDeserfwImplDeserializationFirewallImplProperties {
  #[serde(rename = "firewall.deserialization.whitelist")]
  firewall_deserialization_whitelist: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "firewall.deserialization.blacklist")]
  firewall_deserialization_blacklist: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "firewall.deserialization.diagnostics")]
  firewall_deserialization_diagnostics: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeCqDeserfwImplDeserializationFirewallImplProperties {
  pub fn new() -> ComAdobeCqDeserfwImplDeserializationFirewallImplProperties {
    ComAdobeCqDeserfwImplDeserializationFirewallImplProperties {
      firewall_deserialization_whitelist: None,
      firewall_deserialization_blacklist: None,
      firewall_deserialization_diagnostics: None
    }
  }

  pub fn set_firewall_deserialization_whitelist(&mut self, firewall_deserialization_whitelist: ::models::ConfigNodePropertyArray) {
    self.firewall_deserialization_whitelist = Some(firewall_deserialization_whitelist);
  }

  pub fn with_firewall_deserialization_whitelist(mut self, firewall_deserialization_whitelist: ::models::ConfigNodePropertyArray) -> ComAdobeCqDeserfwImplDeserializationFirewallImplProperties {
    self.firewall_deserialization_whitelist = Some(firewall_deserialization_whitelist);
    self
  }

  pub fn firewall_deserialization_whitelist(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.firewall_deserialization_whitelist.as_ref()
  }

  pub fn reset_firewall_deserialization_whitelist(&mut self) {
    self.firewall_deserialization_whitelist = None;
  }

  pub fn set_firewall_deserialization_blacklist(&mut self, firewall_deserialization_blacklist: ::models::ConfigNodePropertyArray) {
    self.firewall_deserialization_blacklist = Some(firewall_deserialization_blacklist);
  }

  pub fn with_firewall_deserialization_blacklist(mut self, firewall_deserialization_blacklist: ::models::ConfigNodePropertyArray) -> ComAdobeCqDeserfwImplDeserializationFirewallImplProperties {
    self.firewall_deserialization_blacklist = Some(firewall_deserialization_blacklist);
    self
  }

  pub fn firewall_deserialization_blacklist(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.firewall_deserialization_blacklist.as_ref()
  }

  pub fn reset_firewall_deserialization_blacklist(&mut self) {
    self.firewall_deserialization_blacklist = None;
  }

  pub fn set_firewall_deserialization_diagnostics(&mut self, firewall_deserialization_diagnostics: ::models::ConfigNodePropertyString) {
    self.firewall_deserialization_diagnostics = Some(firewall_deserialization_diagnostics);
  }

  pub fn with_firewall_deserialization_diagnostics(mut self, firewall_deserialization_diagnostics: ::models::ConfigNodePropertyString) -> ComAdobeCqDeserfwImplDeserializationFirewallImplProperties {
    self.firewall_deserialization_diagnostics = Some(firewall_deserialization_diagnostics);
    self
  }

  pub fn firewall_deserialization_diagnostics(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.firewall_deserialization_diagnostics.as_ref()
  }

  pub fn reset_firewall_deserialization_diagnostics(&mut self) {
    self.firewall_deserialization_diagnostics = None;
  }

}



