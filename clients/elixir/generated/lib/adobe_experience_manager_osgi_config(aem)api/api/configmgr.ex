# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule AdobeExperienceManagerOSGIConfig(AEM)API.Api.Configmgr do
  @moduledoc """
  API calls for all endpoints tagged `Configmgr`.
  """

  alias AdobeExperienceManagerOSGIConfig(AEM)API.Connection
  import AdobeExperienceManagerOSGIConfig(AEM)API.RequestBuilder


  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :show_placeholder (boolean()): 
    - :maximum_cache_entries (integer()): 
    - :af_periodscripting_periodcompatversion (String.t): 
    - :make_file_name_unique (boolean()): 
    - :generating_compliant_data (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo{}} on success
  {:error, info} on failure
  """
  @spec adaptive_form_and_interactive_communication_web_channel_configuration(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo.t} | {:error, Tesla.Env.t}
  def adaptive_form_and_interactive_communication_web_channel_configuration(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"showPlaceholder" => :query,
      :"maximumCacheEntries" => :query,
      :"af.scripting.compatversion" => :query,
      :"makeFileNameUnique" => :query,
      :"generatingCompliantData" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :font_list ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo{}} on success
  {:error, info} on failure
  """
  @spec adaptive_form_and_interactive_communication_web_channel_theme_configur(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo.t} | {:error, Tesla.Env.t}
  def adaptive_form_and_interactive_communication_web_channel_theme_configur(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"fontList" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodanalytics_periodcomponent_periodquery_periodcache_periodsize (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.AnalyticsComponentQueryCacheServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec analytics_component_query_cache_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.AnalyticsComponentQueryCacheServiceInfo.t} | {:error, Tesla.Env.t}
  def analytics_component_query_cache_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.analytics.component.query.cache.size" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/Analytics Component Query Cache Service")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.AnalyticsComponentQueryCacheServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :style_string (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ApacheSlingHealthCheckResultHtmlSerializerInfo{}} on success
  {:error, info} on failure
  """
  @spec apache_sling_health_check_result_html_serializer(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ApacheSlingHealthCheckResultHtmlSerializerInfo.t} | {:error, Tesla.Env.t}
  def apache_sling_health_check_result_html_serializer(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"styleString" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/Apache Sling Health Check Result HTML Serializer")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ApacheSlingHealthCheckResultHtmlSerializerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :forms_manager_config_periodinclude_ootb_templates (boolean()): 
    - :forms_manager_config_periodinclude_deprecated_templates (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeAemFormsndocumentsConfigAemFormsManagerConfigurationInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeAemFormsndocumentsConfigAemFormsManagerConfigurationInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"formsManagerConfig.includeOOTBTemplates" => :query,
      :"formsManagerConfig.includeDeprecatedTemplates" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeAemFormsndocumentsConfigAemFormsManagerConfigurationInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :is_transaction_recording_enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeAemTransactionCoreImplTransactionRecorderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_aem_transaction_core_impl_transaction_recorder(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeAemTransactionCoreImplTransactionRecorderInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_aem_transaction_core_impl_transaction_recorder(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"isTransactionRecordingEnabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeAemTransactionCoreImplTransactionRecorderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodname (String.t): 
    - :hc_periodtags ([String.t]): 
    - :hc_periodmbean_periodname (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHcInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHcInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.name" => :query,
      :"hc.tags" => :query,
      :"hc.mbean.name" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHcInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodname (String.t): 
    - :hc_periodtags ([String.t]): 
    - :hc_periodmbean_periodname (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHcInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHcInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.name" => :query,
      :"hc.tags" => :query,
      :"hc.mbean.name" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHcInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :pre_upgrade_periodmaintenance_periodtasks ([String.t]): 
    - :pre_upgrade_periodhc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"pre-upgrade.maintenance.tasks" => :query,
      :"pre-upgrade.hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :root_periodpath (String.t): 
    - :fix_periodinconsistencies (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"root.path" => :query,
      :"fix.inconsistencies" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodaccountmanager_periodtoken_periodvalidity_periodperiod (integer()): 
    - :cq_periodaccountmanager_periodconfig_periodrequestnewaccount_periodmail (String.t): 
    - :cq_periodaccountmanager_periodconfig_periodrequestnewpwd_periodmail (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqAccountApiAccountManagementServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_account_api_account_management_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqAccountApiAccountManagementServiceInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_account_api_account_management_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.accountmanager.token.validity.period" => :query,
      :"cq.accountmanager.config.requestnewaccount.mail" => :query,
      :"cq.accountmanager.config.requestnewpwd.mail" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqAccountApiAccountManagementServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodaccountmanager_periodconfig_periodinformnewaccount_periodmail (String.t): 
    - :cq_periodaccountmanager_periodconfig_periodinformnewpwd_periodmail (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqAccountImplAccountManagementServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_account_impl_account_management_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqAccountImplAccountManagementServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_account_impl_account_management_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.accountmanager.config.informnewaccount.mail" => :query,
      :"cq.accountmanager.config.informnewpwd.mail" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqAccountImplAccountManagementServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodaddress_periodlocation_perioddefault_periodmax_results (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqAddressImplLocationLocationListServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_address_impl_location_location_list_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqAddressImplLocationLocationListServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_address_impl_location_location_list_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.address.location.default.maxResults" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqAddressImplLocationLocationListServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :auditlog_periodrule_periodname (String.t): 
    - :auditlog_periodrule_periodcontentpath (String.t): 
    - :auditlog_periodrule_periodminimumage (integer()): 
    - :auditlog_periodrule_periodtypes (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqAuditPurgeDamInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_audit_purge_dam(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqAuditPurgeDamInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_audit_purge_dam(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"auditlog.rule.name" => :query,
      :"auditlog.rule.contentpath" => :query,
      :"auditlog.rule.minimumage" => :query,
      :"auditlog.rule.types" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.audit.purge.Dam")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqAuditPurgeDamInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :auditlog_periodrule_periodname (String.t): 
    - :auditlog_periodrule_periodcontentpath (String.t): 
    - :auditlog_periodrule_periodminimumage (integer()): 
    - :auditlog_periodrule_periodtypes (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqAuditPurgePagesInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_audit_purge_pages(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqAuditPurgePagesInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_audit_purge_pages(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"auditlog.rule.name" => :query,
      :"auditlog.rule.contentpath" => :query,
      :"auditlog.rule.minimumage" => :query,
      :"auditlog.rule.types" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.audit.purge.Pages")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqAuditPurgePagesInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :auditlog_periodrule_periodname (String.t): 
    - :auditlog_periodrule_periodcontentpath (String.t): 
    - :auditlog_periodrule_periodminimumage (integer()): 
    - :auditlog_periodrule_periodtypes (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqAuditPurgeReplicationInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_audit_purge_replication(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqAuditPurgeReplicationInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_audit_purge_replication(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"auditlog.rule.name" => :query,
      :"auditlog.rule.contentpath" => :query,
      :"auditlog.rule.minimumage" => :query,
      :"auditlog.rule.types" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.audit.purge.Replication")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqAuditPurgeReplicationInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :keypair_periodid (String.t): 
    - :keypair_periodalias (String.t): 
    - :cdnrewriter_periodattributes ([String.t]): 
    - :cdn_periodrewriter_perioddistribution_perioddomain (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"keypair.id" => :query,
      :"keypair.alias" => :query,
      :"cdnrewriter.attributes" => :query,
      :"cdn.rewriter.distribution.domain" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cdn_periodconfig_perioddistribution_perioddomain (String.t): 
    - :cdn_periodconfig_periodenable_periodrewriting (boolean()): 
    - :cdn_periodconfig_periodpath_periodprefixes ([String.t]): 
    - :cdn_periodconfig_periodcdnttl (integer()): 
    - :cdn_periodconfig_periodapplication_periodprotocol (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCdnRewriterImplCdnConfigServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCdnRewriterImplCdnConfigServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cdn.config.distribution.domain" => :query,
      :"cdn.config.enable.rewriting" => :query,
      :"cdn.config.path.prefixes" => :query,
      :"cdn.config.cdnttl" => :query,
      :"cdn.config.application.protocol" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCdnRewriterImplCdnConfigServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :cdnrewriter_periodattributes ([String.t]): 
    - :cdn_periodrewriter_perioddistribution_perioddomain (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCdnRewriterImplCdnRewriterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_cdn_rewriter_impl_cdn_rewriter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCdnRewriterImplCdnRewriterInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_cdn_rewriter_impl_cdn_rewriter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"cdnrewriter.attributes" => :query,
      :"cdn.rewriter.distribution.domain" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCdnRewriterImplCdnRewriterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :flush_periodagents ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"flush.agents" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodcommerce_periodasset_periodhandler_periodactive (boolean()): 
    - :cq_periodcommerce_periodasset_periodhandler_periodname (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_commerce_impl_asset_dynamic_image_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_commerce_impl_asset_dynamic_image_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.commerce.asset.handler.active" => :query,
      :"cq.commerce.asset.handler.name" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodcommerce_periodasset_periodhandler_periodfallback (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.commerce.asset.handler.fallback" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodcommerce_periodasset_periodhandler_periodactive (boolean()): 
    - :cq_periodcommerce_periodasset_periodhandler_periodname (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommerceImplAssetStaticImageHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_commerce_impl_asset_static_image_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommerceImplAssetStaticImageHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_commerce_impl_asset_static_image_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.commerce.asset.handler.active" => :query,
      :"cq.commerce.asset.handler.name" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommerceImplAssetStaticImageHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodcommerce_periodasset_periodhandler_periodactive (boolean()): 
    - :cq_periodcommerce_periodasset_periodhandler_periodname (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommerceImplAssetVideoHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_commerce_impl_asset_video_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommerceImplAssetVideoHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_commerce_impl_asset_video_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.commerce.asset.handler.active" => :query,
      :"cq.commerce.asset.handler.name" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommerceImplAssetVideoHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodcommerce_periodpromotion_periodroot (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_commerce_impl_promotion_promotion_manager_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_commerce_impl_promotion_promotion_manager_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.commerce.promotion.root" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodcommerce_periodcataloggenerator_periodbucketsize (integer()): 
    - :cq_periodcommerce_periodcataloggenerator_periodbucketname (String.t): 
    - :cq_periodcommerce_periodcataloggenerator_periodexcludedtemplateproperties ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.commerce.cataloggenerator.bucketsize" => :query,
      :"cq.commerce.cataloggenerator.bucketname" => :query,
      :"cq.commerce.cataloggenerator.excludedtemplateproperties" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodcommerce_periodpageeventlistener_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommercePimImplPageEventListenerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_commerce_pim_impl_page_event_listener(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommercePimImplPageEventListenerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_commerce_pim_impl_page_event_listener(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.commerce.pageeventlistener.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommercePimImplPageEventListenerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :feed_generator_algorithm (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"Feed generator algorithm" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :reportingservices_periodurl (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_contentinsight_impl_reporting_services_settings_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_contentinsight_impl_reporting_services_settings_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"reportingservices.url" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :brightedge_periodurl (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"brightedge.url" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :reportingservices_periodproxy_periodwhitelist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"reportingservices.proxy.whitelist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :dam_periodcfm_periodcomponent_periodresource_type (String.t): 
    - :dam_periodcfm_periodcomponent_periodfile_reference_prop (String.t): 
    - :dam_periodcfm_periodcomponent_periodelements_prop (String.t): 
    - :dam_periodcfm_periodcomponent_periodvariation_prop (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamCfmImplComponentComponentConfigImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_dam_cfm_impl_component_component_config_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamCfmImplComponentComponentConfigImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_dam_cfm_impl_component_component_config_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"dam.cfm.component.resourceType" => :query,
      :"dam.cfm.component.fileReferenceProp" => :query,
      :"dam.cfm.component.elementsProp" => :query,
      :"dam.cfm.component.variationProp" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamCfmImplComponentComponentConfigImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :dam_periodcfm_periodresource_types ([String.t]): 
    - :dam_periodcfm_periodreference_properties ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamCfmImplConfFeatureConfigImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_dam_cfm_impl_conf_feature_config_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamCfmImplConfFeatureConfigImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_dam_cfm_impl_conf_feature_config_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"dam.cfm.resourceTypes" => :query,
      :"dam.cfm.referenceProperties" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamCfmImplConfFeatureConfigImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :pipeline_periodtype (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"pipeline.type" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :pipeline_periodtype (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"pipeline.type" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :pipeline_periodtype (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"pipeline.type" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :max_memory (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamDmProcessImagePTiffManagerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamDmProcessImagePTiffManagerImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"maxMemory" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamDmProcessImagePTiffManagerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :dmreplicateonmodify_periodenabled (boolean()): 
    - :dmreplicateonmodify_periodforcesyncdeletes (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"dmreplicateonmodify.enabled" => :query,
      :"dmreplicateonmodify.forcesyncdeletes" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :com_periodadobe_perioddam_periodmac_periodsync_periodclient_periodso_periodtimeout (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamMacSyncHelperImplMacSyncClientImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamMacSyncHelperImplMacSyncClientImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"com.adobe.dam.mac.sync.client.so.timeout" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamMacSyncHelperImplMacSyncClientImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :com_periodadobe_periodcq_perioddam_periodmac_periodsync_perioddamsyncservice_periodregistered_paths ([String.t]): 
    - :com_periodadobe_periodcq_perioddam_periodmac_periodsync_perioddamsyncservice_periodsync_periodrenditions (boolean()): 
    - :com_periodadobe_periodcq_perioddam_periodmac_periodsync_perioddamsyncservice_periodreplicate_periodthread_periodwait_periodms (integer()): 
    - :com_periodadobe_periodcq_perioddam_periodmac_periodsync_perioddamsyncservice_periodplatform (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamMacSyncImplDamSyncServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamMacSyncImplDamSyncServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths" => :query,
      :"com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions" => :query,
      :"com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms" => :query,
      :"com.adobe.cq.dam.mac.sync.damsyncservice.platform" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamMacSyncImplDamSyncServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :nui_enabled (boolean()): 
    - :nui_service_url (String.t): 
    - :nui_api_key (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_dam_processor_nui_impl_nui_asset_processor(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_dam_processor_nui_impl_nui_asset_processor(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"nuiEnabled" => :query,
      :"nuiServiceUrl" => :query,
      :"nuiApiKey" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :tcp_port (String.t): 
    - :allow_remote_access (boolean()): 
    - :max_render_rgn_pixels (String.t): 
    - :max_message_size (String.t): 
    - :random_access_url_timeout (integer()): 
    - :worker_threads (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamS7imagingImplIsImageServerComponentInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_dam_s7imaging_impl_is_image_server_component(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamS7imagingImplIsImageServerComponentInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_dam_s7imaging_impl_is_image_server_component(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"TcpPort" => :query,
      :"AllowRemoteAccess" => :query,
      :"MaxRenderRgnPixels" => :query,
      :"MaxMessageSize" => :query,
      :"RandomAccessUrlTimeout" => :query,
      :"WorkerThreads" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamS7imagingImplIsImageServerComponentInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cache_periodenable (boolean()): 
    - :cache_periodroot_paths ([String.t]): 
    - :cache_periodmax_size (integer()): 
    - :cache_periodmax_entries (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cache.enable" => :query,
      :"cache.rootPaths" => :query,
      :"cache.maxSize" => :query,
      :"cache.maxEntries" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :path_prefix (String.t): 
    - :create_version (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamWebdavImplIoAssetIoHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_dam_webdav_impl_io_asset_io_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamWebdavImplIoAssetIoHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_dam_webdav_impl_io_asset_io_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"pathPrefix" => :query,
      :"createVersion" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamWebdavImplIoAssetIoHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodwebdav_periodversion_periodlinking_periodenable (boolean()): 
    - :cq_perioddam_periodwebdav_periodversion_periodlinking_periodscheduler_periodperiod (integer()): 
    - :cq_perioddam_periodwebdav_periodversion_periodlinking_periodstaging_periodtimeout (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.webdav.version.linking.enable" => :query,
      :"cq.dam.webdav.version.linking.scheduler.period" => :query,
      :"cq.dam.webdav.version.linking.staging.timeout" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :com_periodday_periodcq_perioddam_periodcore_periodimpl_periodio_period_special_files_handler_periodfilepatters ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_dam_webdav_impl_io_special_files_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_dam_webdav_impl_io_special_files_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :firewall_perioddeserialization_periodwhitelist ([String.t]): 
    - :firewall_perioddeserialization_periodblacklist ([String.t]): 
    - :firewall_perioddeserialization_perioddiagnostics (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDeserfwImplDeserializationFirewallImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_deserfw_impl_deserialization_firewall_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDeserfwImplDeserializationFirewallImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_deserfw_impl_deserialization_firewall_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"firewall.deserialization.whitelist" => :query,
      :"firewall.deserialization.blacklist" => :query,
      :"firewall.deserialization.diagnostics" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDeserfwImplDeserializationFirewallImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :connection_periodtimeout (integer()): 
    - :socket_periodtimeout (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDtmImplServiceDtmWebServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_dtm_impl_service_dtm_web_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDtmImplServiceDtmWebServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_dtm_impl_service_dtm_web_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"connection.timeout" => :query,
      :"socket.timeout" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDtmImplServiceDtmWebServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :dtm_periodstaging_periodip_periodwhitelist ([String.t]): 
    - :dtm_periodproduction_periodip_periodwhitelist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDtmImplServletsDtmDeployHookServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDtmImplServletsDtmDeployHookServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"dtm.staging.ip.whitelist" => :query,
      :"dtm.production.ip.whitelist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDtmImplServletsDtmDeployHookServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :endpoint_uri (String.t): 
    - :connection_timeout (integer()): 
    - :socket_timeout (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDtmReactorImplServiceWebServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_dtm_reactor_impl_service_web_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDtmReactorImplServiceWebServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_dtm_reactor_impl_service_web_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"endpointUri" => :query,
      :"connectionTimeout" => :query,
      :"socketTimeout" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqDtmReactorImplServiceWebServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enabled (boolean()): 
    - :disabled_for_groups ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_experiencelog_impl_experience_log_config_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_experiencelog_impl_experience_log_config_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enabled" => :query,
      :"disabledForGroups" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodname (String.t): 
    - :hc_periodtags ([String.t]): 
    - :hc_periodmbean_periodname (String.t): 
    - :package_periodnames ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqHcContentPackagesHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_hc_content_packages_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqHcContentPackagesHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_hc_content_packages_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.name" => :query,
      :"hc.tags" => :query,
      :"hc.mbean.name" => :query,
      :"package.names" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqHcContentPackagesHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :history_periodrequest_filter_periodexcluded_selectors ([String.t]): 
    - :history_periodrequest_filter_periodexcluded_extensions ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqHistoryImplHistoryRequestFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_history_impl_history_request_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqHistoryImplHistoryRequestFilterInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_history_impl_history_request_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"history.requestFilter.excludedSelectors" => :query,
      :"history.requestFilter.excludedExtensions" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqHistoryImplHistoryRequestFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :history_periodservice_periodresource_types ([String.t]): 
    - :history_periodservice_periodpath_filter ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqHistoryImplHistoryServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_history_impl_history_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqHistoryImplHistoryServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_history_impl_history_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"history.service.resourceTypes" => :query,
      :"history.service.pathFilter" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqHistoryImplHistoryServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :inbox_periodimpl_periodtypeprovider_periodregistrypaths ([String.t]): 
    - :inbox_periodimpl_periodtypeprovider_periodlegacypaths ([String.t]): 
    - :inbox_periodimpl_periodtypeprovider_perioddefaulturl_periodfailureitem (String.t): 
    - :inbox_periodimpl_periodtypeprovider_perioddefaulturl_periodworkitem (String.t): 
    - :inbox_periodimpl_periodtypeprovider_perioddefaulturl_periodtask (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_inbox_impl_typeprovider_item_type_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_inbox_impl_typeprovider_item_type_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"inbox.impl.typeprovider.registrypaths" => :query,
      :"inbox.impl.typeprovider.legacypaths" => :query,
      :"inbox.impl.typeprovider.defaulturl.failureitem" => :query,
      :"inbox.impl.typeprovider.defaulturl.workitem" => :query,
      :"inbox.impl.typeprovider.defaulturl.task" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :image_periodquality (String.t): 
    - :image_periodsupported_periodresolutions (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqProjectsImplServletProjectImageServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_projects_impl_servlet_project_image_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqProjectsImplServletProjectImageServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_projects_impl_servlet_project_image_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"image.quality" => :query,
      :"image.supported.resolutions" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqProjectsImplServletProjectImageServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scheduledpurge_periodname (String.t): 
    - :scheduledpurge_periodpurge_active (boolean()): 
    - :scheduledpurge_periodtemplates ([String.t]): 
    - :scheduledpurge_periodpurge_groups (boolean()): 
    - :scheduledpurge_periodpurge_assets (boolean()): 
    - :scheduledpurge_periodterminate_running_workflows (boolean()): 
    - :scheduledpurge_perioddaysold (integer()): 
    - :scheduledpurge_periodsave_threshold (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqProjectsPurgeSchedulerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_projects_purge_scheduler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqProjectsPurgeSchedulerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_projects_purge_scheduler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scheduledpurge.name" => :query,
      :"scheduledpurge.purgeActive" => :query,
      :"scheduledpurge.templates" => :query,
      :"scheduledpurge.purgeGroups" => :query,
      :"scheduledpurge.purgeAssets" => :query,
      :"scheduledpurge.terminateRunningWorkflows" => :query,
      :"scheduledpurge.daysold" => :query,
      :"scheduledpurge.saveThreshold" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqProjectsPurgeSchedulerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :include_periodpaths ([String.t]): 
    - :exporter_perioduser (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScheduledExporterImplScheduledExporterImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScheduledExporterImplScheduledExporterImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"include.paths" => :query,
      :"exporter.user" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScheduledExporterImplScheduledExporterImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :com_periodadobe_periodcq_periodscreens_periodanalytics_periodimpl_periodurl (String.t): 
    - :com_periodadobe_periodcq_periodscreens_periodanalytics_periodimpl_periodapikey (String.t): 
    - :com_periodadobe_periodcq_periodscreens_periodanalytics_periodimpl_periodproject (String.t): 
    - :com_periodadobe_periodcq_periodscreens_periodanalytics_periodimpl_periodenvironment (String.t): 
    - :com_periodadobe_periodcq_periodscreens_periodanalytics_periodimpl_periodsend_frequency (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"com.adobe.cq.screens.analytics.impl.url" => :query,
      :"com.adobe.cq.screens.analytics.impl.apikey" => :query,
      :"com.adobe.cq.screens.analytics.impl.project" => :query,
      :"com.adobe.cq.screens.analytics.impl.environment" => :query,
      :"com.adobe.cq.screens.analytics.impl.sendFrequency" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :com_periodadobe_periodaem_periodscreens_periodplayer_periodpingfrequency (integer()): 
    - :com_periodadobe_periodaem_periodscreens_perioddevice_periodpasword_periodspecialchars (String.t): 
    - :com_periodadobe_periodaem_periodscreens_perioddevice_periodpasword_periodminlowercasechars (integer()): 
    - :com_periodadobe_periodaem_periodscreens_perioddevice_periodpasword_periodminuppercasechars (integer()): 
    - :com_periodadobe_periodaem_periodscreens_perioddevice_periodpasword_periodminnumberchars (integer()): 
    - :com_periodadobe_periodaem_periodscreens_perioddevice_periodpasword_periodminspecialchars (integer()): 
    - :com_periodadobe_periodaem_periodscreens_perioddevice_periodpasword_periodminlength (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensDeviceImplDeviceServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_screens_device_impl_device_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensDeviceImplDeviceServiceInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_screens_device_impl_device_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"com.adobe.aem.screens.player.pingfrequency" => :query,
      :"com.adobe.aem.screens.device.pasword.specialchars" => :query,
      :"com.adobe.aem.screens.device.pasword.minlowercasechars" => :query,
      :"com.adobe.aem.screens.device.pasword.minuppercasechars" => :query,
      :"com.adobe.aem.screens.device.pasword.minnumberchars" => :query,
      :"com.adobe.aem.screens.device.pasword.minspecialchars" => :query,
      :"com.adobe.aem.screens.device.pasword.minlength" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensDeviceImplDeviceServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :device_registration_timeout (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_screens_device_registration_impl_registration_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_screens_device_registration_impl_registration_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"deviceRegistrationTimeout" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodpagesupdatehandler_periodimageresourcetypes ([String.t]): 
    - :cq_periodpagesupdatehandler_periodproductresourcetypes ([String.t]): 
    - :cq_periodpagesupdatehandler_periodvideoresourcetypes ([String.t]): 
    - :cq_periodpagesupdatehandler_perioddynamicsequenceresourcetypes ([String.t]): 
    - :cq_periodpagesupdatehandler_periodpreviewmodepaths ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_screens_impl_handler_channels_update_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_screens_impl_handler_channels_update_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.pagesupdatehandler.imageresourcetypes" => :query,
      :"cq.pagesupdatehandler.productresourcetypes" => :query,
      :"cq.pagesupdatehandler.videoresourcetypes" => :query,
      :"cq.pagesupdatehandler.dynamicsequenceresourcetypes" => :query,
      :"cq.pagesupdatehandler.previewmodepaths" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scheduler_periodexpression (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scheduler.expression" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :com_periodadobe_periodaem_periodscreens_periodimpl_periodremote_periodrequest_timeout (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"com.adobe.aem.screens.impl.remote.request_timeout" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :screens_periodchannels_periodproperties_periodto_periodremove ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensImplScreensChannelPostProcessorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_screens_impl_screens_channel_post_processor(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensImplScreensChannelPostProcessorInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_screens_impl_screens_channel_post_processor(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"screens.channels.properties.to.remove" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensImplScreensChannelPostProcessorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :com_periodadobe_periodcq_periodscreens_periodmonitoring_periodimpl_period_screens_monitoring_service_impl_periodproject_path ([String.t]): 
    - :com_periodadobe_periodcq_periodscreens_periodmonitoring_periodimpl_period_screens_monitoring_service_impl_periodschedule_frequency (String.t): 
    - :com_periodadobe_periodcq_periodscreens_periodmonitoring_periodimpl_period_screens_monitoring_service_impl_periodping_timeout (integer()): 
    - :com_periodadobe_periodcq_periodscreens_periodmonitoring_periodimpl_period_screens_monitoring_service_impl_periodrecipients (String.t): 
    - :com_periodadobe_periodcq_periodscreens_periodmonitoring_periodimpl_period_screens_monitoring_service_impl_periodsmtpserver (String.t): 
    - :com_periodadobe_periodcq_periodscreens_periodmonitoring_periodimpl_period_screens_monitoring_service_impl_periodsmtpport (integer()): 
    - :com_periodadobe_periodcq_periodscreens_periodmonitoring_periodimpl_period_screens_monitoring_service_impl_periodusetls (boolean()): 
    - :com_periodadobe_periodcq_periodscreens_periodmonitoring_periodimpl_period_screens_monitoring_service_impl_periodusername (String.t): 
    - :com_periodadobe_periodcq_periodscreens_periodmonitoring_periodimpl_period_screens_monitoring_service_impl_periodpassword (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath" => :query,
      :"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency" => :query,
      :"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout" => :query,
      :"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients" => :query,
      :"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver" => :query,
      :"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport" => :query,
      :"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls" => :query,
      :"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username" => :query,
      :"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :global_periodsize (integer()): 
    - :max_perioddisk_periodusage (integer()): 
    - :persistence_periodenabled (boolean()): 
    - :thread_periodpool_periodmax_periodsize (integer()): 
    - :scheduled_periodthread_periodpool_periodmax_periodsize (integer()): 
    - :graceful_periodshutdown_periodtimeout (integer()): 
    - :queues ([String.t]): 
    - :topics ([String.t]): 
    - :addresses_periodmax_perioddelivery_periodattempts (integer()): 
    - :addresses_periodexpiry_perioddelay (integer()): 
    - :addresses_periodaddress_periodfull_periodmessage_periodpolicy (String.t): 
    - :addresses_periodmax_periodsize_periodbytes (integer()): 
    - :addresses_periodpage_periodsize_periodbytes (integer()): 
    - :addresses_periodpage_periodcache_periodmax_periodsize (integer()): 
    - :cluster_perioduser (String.t): 
    - :cluster_periodpassword (String.t): 
    - :cluster_periodcall_periodtimeout (integer()): 
    - :cluster_periodcall_periodfailover_periodtimeout (integer()): 
    - :cluster_periodclient_periodfailure_periodcheck_periodperiod (integer()): 
    - :cluster_periodnotification_periodattempts (integer()): 
    - :cluster_periodnotification_periodinterval (integer()): 
    - :id_periodcache_periodsize (integer()): 
    - :cluster_periodconfirmation_periodwindow_periodsize (integer()): 
    - :cluster_periodconnection_periodttl (integer()): 
    - :cluster_periodduplicate_perioddetection (boolean()): 
    - :cluster_periodinitial_periodconnect_periodattempts (integer()): 
    - :cluster_periodmax_periodretry_periodinterval (integer()): 
    - :cluster_periodmin_periodlarge_periodmessage_periodsize (integer()): 
    - :cluster_periodproducer_periodwindow_periodsize (integer()): 
    - :cluster_periodreconnect_periodattempts (integer()): 
    - :cluster_periodretry_periodinterval (integer()): 
    - :cluster_periodretry_periodinterval_periodmultiplier (float()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensMqActivemqImplArtemisJmsProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensMqActivemqImplArtemisJmsProviderInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"global.size" => :query,
      :"max.disk.usage" => :query,
      :"persistence.enabled" => :query,
      :"thread.pool.max.size" => :query,
      :"scheduled.thread.pool.max.size" => :query,
      :"graceful.shutdown.timeout" => :query,
      :"queues" => :query,
      :"topics" => :query,
      :"addresses.max.delivery.attempts" => :query,
      :"addresses.expiry.delay" => :query,
      :"addresses.address.full.message.policy" => :query,
      :"addresses.max.size.bytes" => :query,
      :"addresses.page.size.bytes" => :query,
      :"addresses.page.cache.max.size" => :query,
      :"cluster.user" => :query,
      :"cluster.password" => :query,
      :"cluster.call.timeout" => :query,
      :"cluster.call.failover.timeout" => :query,
      :"cluster.client.failure.check.period" => :query,
      :"cluster.notification.attempts" => :query,
      :"cluster.notification.interval" => :query,
      :"id.cache.size" => :query,
      :"cluster.confirmation.window.size" => :query,
      :"cluster.connection.ttl" => :query,
      :"cluster.duplicate.detection" => :query,
      :"cluster.initial.connect.attempts" => :query,
      :"cluster.max.retry.interval" => :query,
      :"cluster.min.large.message.size" => :query,
      :"cluster.producer.window.size" => :query,
      :"cluster.reconnect.attempts" => :query,
      :"cluster.retry.interval" => :query,
      :"cluster.retry.interval.multiplier" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensMqActivemqImplArtemisJmsProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :com_periodadobe_periodcq_periodscreens_periodofflinecontent_periodimpl_period_bulk_offline_update_service_impl_periodproject_path ([String.t]): 
    - :com_periodadobe_periodcq_periodscreens_periodofflinecontent_periodimpl_period_bulk_offline_update_service_impl_periodschedule_frequency (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath" => :query,
      :"com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :disable_smart_sync (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"disableSmartSync" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enable_data_triggered_content (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enableDataTriggeredContent" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
    - :dispatcher_periodaddress (String.t): 
    - :dispatcher_periodfilter_periodallowed ([String.t]): 
    - :dispatcher_periodfilter_periodblocked ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query,
      :"dispatcher.address" => :query,
      :"dispatcher.filter.allowed" => :query,
      :"dispatcher.filter.blocked" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_security_hc_packages_impl_example_content_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_security_hc_packages_impl_example_content_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
    - :webserver_periodaddress (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query,
      :"webserver.address" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enable (boolean()): 
    - :ttl1 (integer()): 
    - :ttl2 (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_accountverification_impl_account_management_config_im(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_accountverification_impl_account_management_config_im(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enable" => :query,
      :"ttl1" => :query,
      :"ttl2" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :priority (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_activitystreams_client_impl_social_activity_componen(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_activitystreams_client_impl_social_activity_componen(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"priority" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :priority (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"priority" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :event_periodtopics (String.t): 
    - :event_periodfilter (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"event.topics" => :query,
      :"event.filter" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :accepted (boolean()): 
    - :ranked (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"accepted" => :query,
      :"ranked" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :ranking (integer()): 
    - :enable (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"ranking" => :query,
      :"enable" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :stream_path (String.t): 
    - :stream_name (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"streamPath" => :query,
      :"streamName" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :max_retry (integer()): 
    - :field_whitelist ([String.t]): 
    - :attachment_type_blacklist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"MaxRetry" => :query,
      :"fieldWhitelist" => :query,
      :"attachmentTypeBlacklist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :attachment_type_blacklist (String.t): 
    - :extension_periodorder (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_calendar_client_operationextensions_event_attachmen(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_calendar_client_operationextensions_event_attachmen(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"attachmentTypeBlacklist" => :query,
      :"extension.order" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :timezones_periodexpirytime (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCalendarServletsTimeZoneServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_calendar_servlets_time_zone_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCalendarServletsTimeZoneServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_calendar_servlets_time_zone_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"timezones.expirytime" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCalendarServletsTimeZoneServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :ranking (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"ranking" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :field_whitelist ([String.t]): 
    - :attachment_type_blacklist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"fieldWhitelist" => :query,
      :"attachmentTypeBlacklist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :field_whitelist ([String.t]): 
    - :attachment_type_blacklist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"fieldWhitelist" => :query,
      :"attachmentTypeBlacklist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :num_user_limit (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"numUserLimit" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enable_scheduled_posts_search (boolean()): 
    - :number_of_minutes (integer()): 
    - :max_search_limit (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enableScheduledPostsSearch" => :query,
      :"numberOfMinutes" => :query,
      :"maxSearchLimit" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cors_periodenabling (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsCorsCorsAuthenticationFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_cors_cors_authentication_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsCorsCorsAuthenticationFilterInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_cors_cors_authentication_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cors.enabling" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsCorsCorsAuthenticationFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :priority_order (integer()): 
    - :reply_email_patterns ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"priorityOrder" => :query,
      :"replyEmailPatterns" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :context_periodpath (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"context.path" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :event_periodtopics (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"event.topics" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :priority_order (integer()): 
    - :reply_email_patterns ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"priorityOrder" => :query,
      :"replyEmailPatterns" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :pattern_periodtime (String.t): 
    - :pattern_periodnewline (String.t): 
    - :pattern_periodday_of_month (String.t): 
    - :pattern_periodmonth (String.t): 
    - :pattern_periodyear (String.t): 
    - :pattern_perioddate (String.t): 
    - :pattern_perioddate_time (String.t): 
    - :pattern_periodemail (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"pattern.time" => :query,
      :"pattern.newline" => :query,
      :"pattern.dayOfMonth" => :query,
      :"pattern.month" => :query,
      :"pattern.year" => :query,
      :"pattern.date" => :query,
      :"pattern.dateTime" => :query,
      :"pattern.email" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :email_periodname (String.t): 
    - :email_periodcreate_post_from_reply (boolean()): 
    - :email_periodadd_comment_id_to (String.t): 
    - :email_periodsubject_maximum_length (integer()): 
    - :email_periodreply_to_address (String.t): 
    - :email_periodreply_to_delimiter (String.t): 
    - :email_periodtracker_id_prefix_in_subject (String.t): 
    - :email_periodtracker_id_prefix_in_body (String.t): 
    - :email_periodas_html (boolean()): 
    - :email_perioddefault_user_name (String.t): 
    - :email_periodtemplates_periodroot_path (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"email.name" => :query,
      :"email.createPostFromReply" => :query,
      :"email.addCommentIdTo" => :query,
      :"email.subjectMaximumLength" => :query,
      :"email.replyToAddress" => :query,
      :"email.replyToDelimiter" => :query,
      :"email.trackerIdPrefixInSubject" => :query,
      :"email.trackerIdPrefixInBody" => :query,
      :"email.asHTML" => :query,
      :"email.defaultUserName" => :query,
      :"email.templates.rootPath" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :connect_protocol (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_emailreply_impl_email_reply_importer(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_emailreply_impl_email_reply_importer(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"connectProtocol" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :priority_order (integer()): 
    - :reply_email_patterns ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"priorityOrder" => :query,
      :"replyEmailPatterns" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :priority_order (integer()): 
    - :reply_email_patterns ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplIosEmailClientProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplIosEmailClientProviderInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"priorityOrder" => :query,
      :"replyEmailPatterns" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplIosEmailClientProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :priority_order (integer()): 
    - :reply_email_patterns ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"priorityOrder" => :query,
      :"replyEmailPatterns" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :priority_order (integer()): 
    - :reply_email_patterns ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"priorityOrder" => :query,
      :"replyEmailPatterns" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :reply_email_patterns ([String.t]): 
    - :priority_order (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"replyEmailPatterns" => :query,
      :"priorityOrder" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :priority_order (integer()): 
    - :reply_email_patterns ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"priorityOrder" => :query,
      :"replyEmailPatterns" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :number_of_days (integer()): 
    - :age_of_file (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUgcImageUploadInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUgcImageUploadInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"numberOfDays" => :query,
      :"ageOfFile" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUgcImageUploadInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :event_periodtopics (String.t): 
    - :event_periodfilter (String.t): 
    - :verbs ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsUgclimiterImplUgcLimiterServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsUgclimiterImplUgcLimiterServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"event.topics" => :query,
      :"event.filter" => :query,
      :"verbs" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsUgclimiterImplUgcLimiterServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enable (boolean()): 
    - :u_gc_limit (integer()): 
    - :ugc_limit_duration (integer()): 
    - :domains ([String.t]): 
    - :to_list ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enable" => :query,
      :"UGCLimit" => :query,
      :"ugcLimitDuration" => :query,
      :"domains" => :query,
      :"toList" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :oauth_periodprovider_periodid (String.t): 
    - :oauth_periodcloud_periodconfig_periodroot (String.t): 
    - :provider_periodconfig_periodroot (String.t): 
    - :provider_periodconfig_periodcreate_periodtags_periodenabled (boolean()): 
    - :provider_periodconfig_perioduser_periodfolder (String.t): 
    - :provider_periodconfig_periodfacebook_periodfetch_periodfields (boolean()): 
    - :provider_periodconfig_periodfacebook_periodfields ([String.t]): 
    - :provider_periodconfig_periodrefresh_perioduserdata_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"oauth.provider.id" => :query,
      :"oauth.cloud.config.root" => :query,
      :"provider.config.root" => :query,
      :"provider.config.create.tags.enabled" => :query,
      :"provider.config.user.folder" => :query,
      :"provider.config.facebook.fetch.fields" => :query,
      :"provider.config.facebook.fields" => :query,
      :"provider.config.refresh.userdata.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :path ([String.t]): 
    - :service_periodranking (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"path" => :query,
      :"service.ranking" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :facebook ([String.t]): 
    - :twitter ([String.t]): 
    - :provider_periodconfig_perioduser_periodfolder (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"facebook" => :query,
      :"twitter" => :query,
      :"provider.config.user.folder" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :oauth_periodprovider_periodid (String.t): 
    - :oauth_periodcloud_periodconfig_periodroot (String.t): 
    - :provider_periodconfig_periodroot (String.t): 
    - :provider_periodconfig_perioduser_periodfolder (String.t): 
    - :provider_periodconfig_periodtwitter_periodenable_periodparams (boolean()): 
    - :provider_periodconfig_periodtwitter_periodparams ([String.t]): 
    - :provider_periodconfig_periodrefresh_perioduserdata_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"oauth.provider.id" => :query,
      :"oauth.cloud.config.root" => :query,
      :"provider.config.root" => :query,
      :"provider.config.user.folder" => :query,
      :"provider.config.twitter.enable.params" => :query,
      :"provider.config.twitter.params" => :query,
      :"provider.config.refresh.userdata.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodsocial_periodcontent_periodfragments_periodservices_periodenabled (boolean()): 
    - :cq_periodsocial_periodcontent_periodfragments_periodservices_periodwait_time_seconds (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_content_fragments_services_impl_communities_fragmen(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_content_fragments_services_impl_communities_fragmen(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.social.content.fragments.services.enabled" => :query,
      :"cq.social.content.fragments.services.waitTimeSeconds" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :version_periodid (String.t): 
    - :cache_periodon (boolean()): 
    - :concurrency_periodlevel (integer()): 
    - :cache_periodstart_periodsize (integer()): 
    - :cache_periodttl (integer()): 
    - :cache_periodsize (integer()): 
    - :time_periodlimit (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"version.id" => :query,
      :"cache.on" => :query,
      :"concurrency.level" => :query,
      :"cache.start.size" => :query,
      :"cache.ttl" => :query,
      :"cache.size" => :query,
      :"time.limit" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :solr_periodzk_periodtimeout (String.t): 
    - :solr_periodcommit (String.t): 
    - :cache_periodon (boolean()): 
    - :concurrency_periodlevel (integer()): 
    - :cache_periodstart_periodsize (integer()): 
    - :cache_periodttl (integer()): 
    - :cache_periodsize (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialDatastoreOpImplSocialMsResourceProviderFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialDatastoreOpImplSocialMsResourceProviderFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"solr.zk.timeout" => :query,
      :"solr.commit" => :query,
      :"cache.on" => :query,
      :"concurrency.level" => :query,
      :"cache.start.size" => :query,
      :"cache.ttl" => :query,
      :"cache.size" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialDatastoreOpImplSocialMsResourceProviderFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :solr_periodzk_periodtimeout (String.t): 
    - :solr_periodcommit (String.t): 
    - :cache_periodon (boolean()): 
    - :concurrency_periodlevel (integer()): 
    - :cache_periodstart_periodsize (integer()): 
    - :cache_periodttl (integer()): 
    - :cache_periodsize (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialDatastoreRdbImplSocialRdbResourceProviderFactorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialDatastoreRdbImplSocialRdbResourceProviderFactorInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"solr.zk.timeout" => :query,
      :"solr.commit" => :query,
      :"cache.on" => :query,
      :"concurrency.level" => :query,
      :"cache.start.size" => :query,
      :"cache.ttl" => :query,
      :"cache.size" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialDatastoreRdbImplSocialRdbResourceProviderFactorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :is_member_check (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"isMemberCheck" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :is_member_check (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"isMemberCheck" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :field_whitelist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"fieldWhitelist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :field_whitelist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"fieldWhitelist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_enablement_services_impl_author_marker_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_enablement_services_impl_author_marker_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_periodservlet_periodselectors (String.t): 
    - :sling_periodservlet_periodextensions (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.servlet.selectors" => :query,
      :"sling.servlet.extensions" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :field_whitelist ([String.t]): 
    - :attachment_type_blacklist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"fieldWhitelist" => :query,
      :"attachmentTypeBlacklist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :field_whitelist ([String.t]): 
    - :attachment_type_blacklist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"fieldWhitelist" => :query,
      :"attachmentTypeBlacklist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :extension_periodorder (integer()): 
    - :flush_periodforumontopic (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_forum_dispatcher_impl_flush_operations(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_forum_dispatcher_impl_flush_operations(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"extension.order" => :query,
      :"flush.forumontopic" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :group_periodlisting_periodpagination_periodenable (boolean()): 
    - :group_periodlisting_periodlazyloading_periodenable (boolean()): 
    - :page_periodsize (integer()): 
    - :priority (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_group_client_impl_community_group_collection_componen(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_group_client_impl_community_group_collection_componen(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"group.listing.pagination.enable" => :query,
      :"group.listing.lazyloading.enable" => :query,
      :"page.size" => :query,
      :"priority" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :max_wait_time (integer()): 
    - :min_wait_between_retries (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialGroupImplGroupServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_group_impl_group_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialGroupImplGroupServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_group_impl_group_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"maxWaitTime" => :query,
      :"minWaitBetweenRetries" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialGroupImplGroupServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :parameter_periodguava_periodcache_periodenabled (boolean()): 
    - :parameter_periodguava_periodcache_periodparams (String.t): 
    - :parameter_periodguava_periodcache_periodreload (boolean()): 
    - :service_periodranking (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_handlebars_guava_template_cache_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_handlebars_guava_template_cache_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"parameter.guava.cache.enabled" => :query,
      :"parameter.guava.cache.params" => :query,
      :"parameter.guava.cache.reload" => :query,
      :"service.ranking" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :field_whitelist ([String.t]): 
    - :attachment_type_blacklist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"fieldWhitelist" => :query,
      :"attachmentTypeBlacklist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :field_whitelist ([String.t]): 
    - :attachment_type_blacklist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"fieldWhitelist" => :query,
      :"attachmentTypeBlacklist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :field_whitelist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_members_endpoints_impl_community_member_group_profile(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_members_endpoints_impl_community_member_group_profile(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"fieldWhitelist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :field_whitelist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"fieldWhitelist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :everyone_limit (integer()): 
    - :priority (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_members_impl_community_member_group_profile_component_f(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_members_impl_community_member_group_profile_component_f(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"everyoneLimit" => :query,
      :"priority" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :message_periodproperties ([String.t]): 
    - :message_box_size_limit (integer()): 
    - :message_count_limit (integer()): 
    - :notify_failure (boolean()): 
    - :failure_message_from (String.t): 
    - :failure_template_path (String.t): 
    - :max_retries (integer()): 
    - :min_wait_between_retries (integer()): 
    - :count_update_pool_size (integer()): 
    - :inbox_periodpath (String.t): 
    - :sentitems_periodpath (String.t): 
    - :support_attachments (boolean()): 
    - :support_group_messaging (boolean()): 
    - :max_total_recipients (integer()): 
    - :batch_size (integer()): 
    - :max_total_attachment_size (integer()): 
    - :attachment_type_blacklist ([String.t]): 
    - :allowed_attachment_types ([String.t]): 
    - :service_selector (String.t): 
    - :field_whitelist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"message.properties" => :query,
      :"messageBoxSizeLimit" => :query,
      :"messageCountLimit" => :query,
      :"notifyFailure" => :query,
      :"failureMessageFrom" => :query,
      :"failureTemplatePath" => :query,
      :"maxRetries" => :query,
      :"minWaitBetweenRetries" => :query,
      :"countUpdatePoolSize" => :query,
      :"inbox.path" => :query,
      :"sentitems.path" => :query,
      :"supportAttachments" => :query,
      :"supportGroupMessaging" => :query,
      :"maxTotalRecipients" => :query,
      :"batchSize" => :query,
      :"maxTotalAttachmentSize" => :query,
      :"attachmentTypeBlacklist" => :query,
      :"allowedAttachmentTypes" => :query,
      :"serviceSelector" => :query,
      :"fieldWhitelist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :resource_type_periodfilters ([String.t]): 
    - :priority (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"resourceType.filters" => :query,
      :"priority" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :priority (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"priority" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :priority (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"priority" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :resource_type_periodfilters ([String.t]): 
    - :priority (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"resourceType.filters" => :query,
      :"priority" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :event_periodtopics (String.t): 
    - :event_periodfilter (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialNotificationsImplMentionsRouterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_notifications_impl_mentions_router(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialNotificationsImplMentionsRouterInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_notifications_impl_mentions_router(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"event.topics" => :query,
      :"event.filter" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialNotificationsImplMentionsRouterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :max_periodunread_periodnotification_periodcount (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_notifications_impl_notification_manager_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_notifications_impl_notification_manager_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"max.unread.notification.count" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :event_periodtopics (String.t): 
    - :event_periodfilter (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialNotificationsImplNotificationsRouterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_notifications_impl_notifications_router(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialNotificationsImplNotificationsRouterInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_notifications_impl_notifications_router(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"event.topics" => :query,
      :"event.filter" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialNotificationsImplNotificationsRouterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :field_whitelist ([String.t]): 
    - :attachment_type_blacklist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"fieldWhitelist" => :query,
      :"attachmentTypeBlacklist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodsocial_periodreporting_periodanalytics_periodpolling_periodimporter_periodinterval (integer()): 
    - :cq_periodsocial_periodreporting_periodanalytics_periodpolling_periodimporter_periodpage_size (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.social.reporting.analytics.polling.importer.interval" => :query,
      :"cq.social.reporting.analytics.polling.importer.pageSize" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :report_periodfetch_perioddelay (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"report.fetch.delay" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodsocial_periodconsole_periodanalytics_periodsites_periodmapping ([String.t]): 
    - :priority (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.social.console.analytics.sites.mapping" => :query,
      :"priority" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :field_whitelist ([String.t]): 
    - :attachment_type_blacklist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"fieldWhitelist" => :query,
      :"attachmentTypeBlacklist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_periodservlet_periodselectors (String.t): 
    - :sling_periodservlet_periodextensions (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.servlet.selectors" => :query,
      :"sling.servlet.extensions" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_periodservlet_periodselectors ([String.t]): 
    - :sling_periodservlet_periodextensions (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.servlet.selectors" => :query,
      :"sling.servlet.extensions" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :event_periodtopics (String.t): 
    - :event_periodfilter (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialScoringImplScoringEventListenerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_scoring_impl_scoring_event_listener(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialScoringImplScoringEventListenerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_scoring_impl_scoring_event_listener(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"event.topics" => :query,
      :"event.filter" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialScoringImplScoringEventListenerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enable_fallback (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enableFallback" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :field_whitelist ([String.t]): 
    - :site_path_filters ([String.t]): 
    - :site_package_group (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_site_endpoints_impl_site_operation_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_site_endpoints_impl_site_operation_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"fieldWhitelist" => :query,
      :"sitePathFilters" => :query,
      :"sitePackageGroup" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodsocial_periodconsole_periodanalytics_periodcomponents ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_site_impl_analytics_component_configuration_service_im(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_site_impl_analytics_component_configuration_service_im(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.social.console.analytics.components" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :components_using_tags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_site_impl_site_configurator_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_site_impl_site_configurator_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"componentsUsingTags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :srp_periodtype (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSrpImplSocialSolrConnectorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_srp_impl_social_solr_connector(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSrpImplSocialSolrConnectorInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_srp_impl_social_solr_connector(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"srp.type" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSrpImplSocialSolrConnectorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enabled (boolean()): 
    - :agent_name (String.t): 
    - :diff_path (String.t): 
    - :property_names (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSyncImplDiffChangesObserverInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_sync_impl_diff_changes_observer(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSyncImplDiffChangesObserverInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_sync_impl_diff_changes_observer(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enabled" => :query,
      :"agentName" => :query,
      :"diffPath" => :query,
      :"propertyNames" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSyncImplDiffChangesObserverInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :nodetypes ([String.t]): 
    - :ignorableprops ([String.t]): 
    - :ignorablenodes (String.t): 
    - :enabled (boolean()): 
    - :distfolders (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_sync_impl_group_sync_listener_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_sync_impl_group_sync_listener_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"nodetypes" => :query,
      :"ignorableprops" => :query,
      :"ignorablenodes" => :query,
      :"enabled" => :query,
      :"distfolders" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :active_run_modes ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_sync_impl_publisher_sync_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_sync_impl_publisher_sync_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"activeRunModes" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :nodetypes ([String.t]): 
    - :ignorableprops ([String.t]): 
    - :ignorablenodes ([String.t]): 
    - :enabled (boolean()): 
    - :distfolders ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSyncImplUserSyncListenerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_sync_impl_user_sync_listener_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSyncImplUserSyncListenerImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_sync_impl_user_sync_listener_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"nodetypes" => :query,
      :"ignorableprops" => :query,
      :"ignorablenodes" => :query,
      :"enabled" => :query,
      :"distfolders" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialSyncImplUserSyncListenerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :translate_periodlanguage (String.t): 
    - :translate_perioddisplay (String.t): 
    - :translate_periodattribution (boolean()): 
    - :translate_periodcaching (String.t): 
    - :translate_periodsmart_periodrendering (String.t): 
    - :translate_periodcaching_periodduration (String.t): 
    - :translate_periodsession_periodsave_periodinterval (String.t): 
    - :translate_periodsession_periodsave_periodbatch_limit (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_translation_impl_translation_service_config_manager(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_translation_impl_translation_service_config_manager(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"translate.language" => :query,
      :"translate.display" => :query,
      :"translate.attribution" => :query,
      :"translate.caching" => :query,
      :"translate.smart.rendering" => :query,
      :"translate.caching.duration" => :query,
      :"translate.session.save.interval" => :query,
      :"translate.session.save.batchLimit" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :event_periodtopics (String.t): 
    - :event_periodfilter (String.t): 
    - :translate_periodlistener_periodtype ([String.t]): 
    - :translate_periodproperty_periodlist ([String.t]): 
    - :pool_size (integer()): 
    - :max_pool_size (integer()): 
    - :queue_size (integer()): 
    - :keep_alive_time (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialTranslationImplUgcLanguageDetectorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_translation_impl_ugc_language_detector(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialTranslationImplUgcLanguageDetectorInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_translation_impl_ugc_language_detector(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"event.topics" => :query,
      :"event.filter" => :query,
      :"translate.listener.type" => :query,
      :"translate.property.list" => :query,
      :"poolSize" => :query,
      :"maxPoolSize" => :query,
      :"queueSize" => :query,
      :"keepAliveTime" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialTranslationImplUgcLanguageDetectorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :thread_pool_size (integer()): 
    - :delay_time (integer()): 
    - :worker_sleep_time (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"threadPoolSize" => :query,
      :"delayTime" => :query,
      :"workerSleepTime" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :pool_size (integer()): 
    - :max_pool_size (integer()): 
    - :queue_size (integer()): 
    - :keep_alive_time (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"poolSize" => :query,
      :"maxPoolSize" => :query,
      :"queueSize" => :query,
      :"keepAliveTime" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :is_primary_publisher (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"isPrimaryPublisher" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :legacy_cloud_ugc_path_mapping (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_ugcbase_impl_social_utils_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_ugcbase_impl_social_utils_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"legacyCloudUGCPathMapping" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :automoderation_periodsequence ([String.t]): 
    - :automoderation_periodonfailurestop (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"automoderation.sequence" => :query,
      :"automoderation.onfailurestop" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :watchwords_periodpositive ([String.t]): 
    - :watchwords_periodnegative ([String.t]): 
    - :watchwords_periodpath (String.t): 
    - :sentiment_periodpath (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"watchwords.positive" => :query,
      :"watchwords.negative" => :query,
      :"watchwords.path" => :query,
      :"sentiment.path" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :default_periodattachment_periodtype_periodblacklist ([String.t]): 
    - :baseline_periodattachment_periodtype_periodblacklist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"default.attachment.type.blacklist" => :query,
      :"baseline.attachment.type.blacklist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :parameter_periodwhitelist ([String.t]): 
    - :parameter_periodwhitelist_periodprefixes ([String.t]): 
    - :binary_periodparameter_periodwhitelist ([String.t]): 
    - :modifier_periodwhitelist ([String.t]): 
    - :operation_periodwhitelist ([String.t]): 
    - :operation_periodwhitelist_periodprefixes ([String.t]): 
    - :typehint_periodwhitelist ([String.t]): 
    - :resourcetype_periodwhitelist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"parameter.whitelist" => :query,
      :"parameter.whitelist.prefixes" => :query,
      :"binary.parameter.whitelist" => :query,
      :"modifier.whitelist" => :query,
      :"operation.whitelist" => :query,
      :"operation.whitelist.prefixes" => :query,
      :"typehint.whitelist" => :query,
      :"resourcetype.whitelist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_periodservlet_periodextensions (String.t): 
    - :sling_periodservlet_periodpaths (String.t): 
    - :sling_periodservlet_periodmethods (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.servlet.extensions" => :query,
      :"sling.servlet.paths" => :query,
      :"sling.servlet.methods" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enable (boolean()): 
    - :agent_periodconfiguration ([String.t]): 
    - :context_periodpath (String.t): 
    - :disabled_periodcipher_periodsuites ([String.t]): 
    - :enabled_periodcipher_periodsuites ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUserImplTransportHttpToPublisherInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_social_user_impl_transport_http_to_publisher(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUserImplTransportHttpToPublisherInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_social_user_impl_transport_http_to_publisher(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enable" => :query,
      :"agent.configuration" => :query,
      :"context.path" => :query,
      :"disabled.cipher.suites" => :query,
      :"enabled.cipher.suites" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqSocialUserImplTransportHttpToPublisherInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :resource_periodtypes ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqUiWcmCommonsInternalServletsRteRteFilterServletFactInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqUiWcmCommonsInternalServletsRteRteFilterServletFactInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"resource.types" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqUiWcmCommonsInternalServletsRteRteFilterServletFactInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :delete_periodpath_periodregexps ([String.t]): 
    - :delete_periodsql2_periodquery (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"delete.path.regexps" => :query,
      :"delete.sql2.query" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :delete_periodname_periodregexps ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"delete.name.regexps" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :threshold (integer()): 
    - :job_topic_name (String.t): 
    - :email_enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"threshold" => :query,
      :"jobTopicName" => :query,
      :"emailEnabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scheduler_periodexpression (String.t): 
    - :job_periodpurge_periodthreshold (integer()): 
    - :job_periodpurge_periodmax_periodjobs (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scheduler.expression" => :query,
      :"job.purge.threshold" => :query,
      :"job.purge.max.jobs" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :threshold (integer()): 
    - :job_topic_name (String.t): 
    - :email_enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"threshold" => :query,
      :"jobTopicName" => :query,
      :"emailEnabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :threshold (integer()): 
    - :job_topic_name (String.t): 
    - :email_enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"threshold" => :query,
      :"jobTopicName" => :query,
      :"emailEnabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :event_periodfilter (String.t): 
    - :launches_periodeventhandler_periodthreadpool_periodmaxsize (integer()): 
    - :launches_periodeventhandler_periodthreadpool_periodpriority (String.t): 
    - :launches_periodeventhandler_periodupdatelastmodification (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_wcm_launches_impl_launches_event_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_wcm_launches_impl_launches_event_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"event.filter" => :query,
      :"launches.eventhandler.threadpool.maxsize" => :query,
      :"launches.eventhandler.threadpool.priority" => :query,
      :"launches.eventhandler.updatelastmodification" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodwcm_periodqrcode_periodservlet_periodwhitelist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmMobileQrcodeServletQrCodeImageGeneratorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmMobileQrcodeServletQrCodeImageGeneratorInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.wcm.qrcode.servlet.whitelist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmMobileQrcodeServletQrCodeImageGeneratorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :size (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_wcm_style_internal_component_style_info_cache_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_wcm_style_internal_component_style_info_cache_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"size" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sync_translation_state_periodscheduling_format (String.t): 
    - :scheduling_repeat_translation_periodscheduling_format (String.t): 
    - :sync_translation_state_periodlock_timeout_in_minutes (String.t): 
    - :export_periodformat (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"syncTranslationState.schedulingFormat" => :query,
      :"schedulingRepeatTranslation.schedulingFormat" => :query,
      :"syncTranslationState.lockTimeoutInMinutes" => :query,
      :"export.format" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :portal_periodoutboxes ([String.t]): 
    - :draft_perioddata_periodservice (String.t): 
    - :draft_periodmetadata_periodservice (String.t): 
    - :submit_perioddata_periodservice (String.t): 
    - :submit_periodmetadata_periodservice (String.t): 
    - :pending_sign_perioddata_periodservice (String.t): 
    - :pending_sign_periodmetadata_periodservice (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"portal.outboxes" => :query,
      :"draft.data.service" => :query,
      :"draft.metadata.service" => :query,
      :"submit.data.service" => :query,
      :"submit.metadata.service" => :query,
      :"pendingSign.data.service" => :query,
      :"pendingSign.metadata.service" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :formportal_periodinterval (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_fd_fp_config_forms_portal_scheduler_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_fd_fp_config_forms_portal_scheduler_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"formportal.interval" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :alloweddata_file_locations ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeFormsCommonServiceImplDefaultDataProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_forms_common_service_impl_default_data_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeFormsCommonServiceImplDefaultDataProviderInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_forms_common_service_impl_default_data_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"alloweddataFileLocations" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeFormsCommonServiceImplDefaultDataProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :temp_storage_config (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_forms_common_service_impl_forms_common_configuration_service_imp(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_forms_common_service_impl_forms_common_configuration_service_imp(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"tempStorageConfig" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scheduler_periodexpression (String.t): 
    - :duration_for_temporary_storage (String.t): 
    - :duration_for_anonymous_storage (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeFormsCommonServletTempCleanUpTaskInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_forms_common_servlet_temp_clean_up_task(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeFormsCommonServletTempCleanUpTaskInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_forms_common_servlet_temp_clean_up_task(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scheduler.expression" => :query,
      :"Duration for Temporary Storage" => :query,
      :"Duration for Anonymous Storage" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeFormsCommonServletTempCleanUpTaskInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :query_periodlimit (integer()): 
    - :file_periodtype_periodextension_periodmap ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAcpPlatformPlatformServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_acp_platform_platform_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAcpPlatformPlatformServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_acp_platform_platform_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"query.limit" => :query,
      :"file.type.extension.map" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAcpPlatformPlatformServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :aggregate_periodrelationships ([String.t]): 
    - :aggregate_perioddescend_periodvirtual (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_activitystreams_impl_activity_manager_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_activitystreams_impl_activity_manager_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"aggregate.relationships" => :query,
      :"aggregate.descend.virtual" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :disabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_analyzer_base_system_status_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_analyzer_base_system_status_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"disabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :disabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"disabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :com_periodadobe_periodcq_periodcdn_periodcdn_rewriter (String.t): 
    - :com_periodadobe_periodcq_periodcloud_config_periodcomponents (String.t): 
    - :com_periodadobe_periodcq_periodcloud_config_periodcore (String.t): 
    - :com_periodadobe_periodcq_periodcloud_config_periodui (String.t): 
    - :com_periodadobe_periodcq_periodcom_periodadobe_periodcq_periodeditor (String.t): 
    - :com_periodadobe_periodcq_periodcom_periodadobe_periodcq_periodprojects_periodcore (String.t): 
    - :com_periodadobe_periodcq_periodcom_periodadobe_periodcq_periodprojects_periodwcm_periodcore (String.t): 
    - :com_periodadobe_periodcq_periodcom_periodadobe_periodcq_periodui_periodcommons (String.t): 
    - :com_periodadobe_periodcq_periodcom_periodadobe_periodcq_periodwcm_periodstyle (String.t): 
    - :com_periodadobe_periodcq_periodcq_activitymap_integration (String.t): 
    - :com_periodadobe_periodcq_periodcq_contexthub_commons (String.t): 
    - :com_periodadobe_periodcq_periodcq_dtm (String.t): 
    - :com_periodadobe_periodcq_periodcq_healthcheck (String.t): 
    - :com_periodadobe_periodcq_periodcq_multisite_targeting (String.t): 
    - :com_periodadobe_periodcq_periodcq_pre_upgrade_cleanup (String.t): 
    - :com_periodadobe_periodcq_periodcq_product_info_provider (String.t): 
    - :com_periodadobe_periodcq_periodcq_rest_sites (String.t): 
    - :com_periodadobe_periodcq_periodcq_security_hc (String.t): 
    - :com_periodadobe_periodcq_perioddam_periodcq_dam_svg_handler (String.t): 
    - :com_periodadobe_periodcq_perioddam_periodcq_scene7_imaging (String.t): 
    - :com_periodadobe_periodcq_perioddtm_reactor_periodcore (String.t): 
    - :com_periodadobe_periodcq_perioddtm_reactor_periodui (String.t): 
    - :com_periodadobe_periodcq_periodexp_jspel_resolver (String.t): 
    - :com_periodadobe_periodcq_periodinbox_periodcq_inbox (String.t): 
    - :com_periodadobe_periodcq_periodjson_schema_parser (String.t): 
    - :com_periodadobe_periodcq_periodmedia_periodcq_media_publishing_dps_fp_core (String.t): 
    - :com_periodadobe_periodcq_periodmobile_periodcq_mobile_caas (String.t): 
    - :com_periodadobe_periodcq_periodmobile_periodcq_mobile_index_builder (String.t): 
    - :com_periodadobe_periodcq_periodmobile_periodcq_mobile_phonegap_build (String.t): 
    - :com_periodadobe_periodcq_periodmyspell (String.t): 
    - :com_periodadobe_periodcq_periodsample_periodwe_periodretail_periodcore (String.t): 
    - :com_periodadobe_periodcq_periodscreens_periodcom_periodadobe_periodcq_periodscreens_perioddcc (String.t): 
    - :com_periodadobe_periodcq_periodscreens_periodcom_periodadobe_periodcq_periodscreens_periodmq_periodcore (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_as_provider (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_badging_basic_impl (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_badging_impl (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_calendar_impl (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_content_fragments_impl (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_enablement_impl (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_graph_impl (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_ideation_impl (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_jcr_provider (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_members_impl (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_ms_provider (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_notifications_channels_web (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_notifications_impl (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_rdb_provider (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_scf_impl (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_scoring_basic_impl (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_scoring_impl (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_serviceusers_impl (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_srp_impl (String.t): 
    - :com_periodadobe_periodcq_periodsocial_periodcq_social_ugcbase_impl (String.t): 
    - :com_periodadobe_perioddam_periodcq_dam_cfm_impl (String.t): 
    - :com_periodadobe_periodforms_periodfoundation_forms_foundation_base (String.t): 
    - :com_periodadobe_periodgranite_periodapicontroller (String.t): 
    - :com_periodadobe_periodgranite_periodasset_periodcore (String.t): 
    - :com_periodadobe_periodgranite_periodauth_periodsso (String.t): 
    - :com_periodadobe_periodgranite_periodbundles_periodhc_periodimpl (String.t): 
    - :com_periodadobe_periodgranite_periodcompat_router (String.t): 
    - :com_periodadobe_periodgranite_periodconf (String.t): 
    - :com_periodadobe_periodgranite_periodconf_periodui_periodcore (String.t): 
    - :com_periodadobe_periodgranite_periodcors (String.t): 
    - :com_periodadobe_periodgranite_periodcrx_explorer (String.t): 
    - :com_periodadobe_periodgranite_periodcrxde_lite (String.t): 
    - :com_periodadobe_periodgranite_periodcrypto_periodconfig (String.t): 
    - :com_periodadobe_periodgranite_periodcrypto_periodextension (String.t): 
    - :com_periodadobe_periodgranite_periodcrypto_periodfile (String.t): 
    - :com_periodadobe_periodgranite_periodcrypto_periodjcr (String.t): 
    - :com_periodadobe_periodgranite_periodcsrf (String.t): 
    - :com_periodadobe_periodgranite_perioddistribution_periodcore (String.t): 
    - :com_periodadobe_periodgranite_perioddropwizard_periodmetrics (String.t): 
    - :com_periodadobe_periodgranite_periodfrags_periodimpl (String.t): 
    - :com_periodadobe_periodgranite_periodgibson (String.t): 
    - :com_periodadobe_periodgranite_periodinfocollector (String.t): 
    - :com_periodadobe_periodgranite_periodinstaller_periodfactory_periodpackages (String.t): 
    - :com_periodadobe_periodgranite_periodjetty_periodssl (String.t): 
    - :com_periodadobe_periodgranite_periodjobs_periodasync (String.t): 
    - :com_periodadobe_periodgranite_periodmaintenance_periodoak (String.t): 
    - :com_periodadobe_periodgranite_periodmonitoring_periodcore (String.t): 
    - :com_periodadobe_periodgranite_periodqueries (String.t): 
    - :com_periodadobe_periodgranite_periodreplication_periodhc_periodimpl (String.t): 
    - :com_periodadobe_periodgranite_periodrepository_periodchecker (String.t): 
    - :com_periodadobe_periodgranite_periodrepository_periodhc_periodimpl (String.t): 
    - :com_periodadobe_periodgranite_periodrest_periodassets (String.t): 
    - :com_periodadobe_periodgranite_periodsecurity_periodui (String.t): 
    - :com_periodadobe_periodgranite_periodstartup (String.t): 
    - :com_periodadobe_periodgranite_periodtagsoup (String.t): 
    - :com_periodadobe_periodgranite_periodtaskmanagement_periodcore (String.t): 
    - :com_periodadobe_periodgranite_periodtaskmanagement_periodworkflow (String.t): 
    - :com_periodadobe_periodgranite_periodui_periodclientlibs_periodcompiler_periodless (String.t): 
    - :com_periodadobe_periodgranite_periodui_periodclientlibs_periodprocessor_periodgcc (String.t): 
    - :com_periodadobe_periodgranite_periodwebconsole_periodplugins (String.t): 
    - :com_periodadobe_periodgranite_periodworkflow_periodconsole (String.t): 
    - :com_periodadobe_periodxmp_periodworker_periodfiles_periodnative_periodfragment_periodlinux (String.t): 
    - :com_periodadobe_periodxmp_periodworker_periodfiles_periodnative_periodfragment_periodmacosx (String.t): 
    - :com_periodadobe_periodxmp_periodworker_periodfiles_periodnative_periodfragment_periodwin (String.t): 
    - :com_periodday_periodcommons_periodosgi_periodwrapper_periodsimple_jndi (String.t): 
    - :com_periodday_periodcq_periodcq_authhandler (String.t): 
    - :com_periodday_periodcq_periodcq_compat_configupdate (String.t): 
    - :com_periodday_periodcq_periodcq_licensebranding (String.t): 
    - :com_periodday_periodcq_periodcq_notifcation_impl (String.t): 
    - :com_periodday_periodcq_periodcq_replication_audit (String.t): 
    - :com_periodday_periodcq_periodcq_search_ext (String.t): 
    - :com_periodday_periodcq_perioddam_periodcq_dam_annotation_print (String.t): 
    - :com_periodday_periodcq_perioddam_periodcq_dam_asset_usage (String.t): 
    - :com_periodday_periodcq_perioddam_periodcq_dam_s7dam (String.t): 
    - :com_periodday_periodcq_perioddam_periodcq_dam_similaritysearch (String.t): 
    - :com_periodday_periodcq_perioddam_perioddam_webdav_support (String.t): 
    - :com_periodday_periodcq_periodpre_upgrade_tasks (String.t): 
    - :com_periodday_periodcq_periodreplication_periodextensions (String.t): 
    - :com_periodday_periodcq_periodwcm_periodcq_msm_core (String.t): 
    - :com_periodday_periodcq_periodwcm_periodcq_wcm_translation (String.t): 
    - :day_commons_jrawio (String.t): 
    - :org_periodapache_periodaries_periodjmx_periodwhiteboard (String.t): 
    - :org_periodapache_periodfelix_periodhttp_periodsslfilter (String.t): 
    - :org_periodapache_periodfelix_periodorg_periodapache_periodfelix_periodthreaddump (String.t): 
    - :org_periodapache_periodfelix_periodwebconsole_periodplugins_periodds (String.t): 
    - :org_periodapache_periodfelix_periodwebconsole_periodplugins_periodevent (String.t): 
    - :org_periodapache_periodfelix_periodwebconsole_periodplugins_periodmemoryusage (String.t): 
    - :org_periodapache_periodfelix_periodwebconsole_periodplugins_periodpackageadmin (String.t): 
    - :org_periodapache_periodjackrabbit_periodoak_auth_ldap (String.t): 
    - :org_periodapache_periodjackrabbit_periodoak_segment_tar (String.t): 
    - :org_periodapache_periodjackrabbit_periodoak_solr_osgi (String.t): 
    - :org_periodapache_periodsling_periodbundleresource_periodimpl (String.t): 
    - :org_periodapache_periodsling_periodcommons_periodfsclassloader (String.t): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodwebconsole (String.t): 
    - :org_periodapache_periodsling_perioddatasource (String.t): 
    - :org_periodapache_periodsling_perioddiscovery_periodbase (String.t): 
    - :org_periodapache_periodsling_perioddiscovery_periodoak (String.t): 
    - :org_periodapache_periodsling_perioddiscovery_periodsupport (String.t): 
    - :org_periodapache_periodsling_perioddistribution_periodapi (String.t): 
    - :org_periodapache_periodsling_perioddistribution_periodcore (String.t): 
    - :org_periodapache_periodsling_periodextensions_periodwebconsolesecurityprovider (String.t): 
    - :org_periodapache_periodsling_periodhc_periodwebconsole (String.t): 
    - :org_periodapache_periodsling_periodinstaller_periodconsole (String.t): 
    - :org_periodapache_periodsling_periodinstaller_periodprovider_periodfile (String.t): 
    - :org_periodapache_periodsling_periodinstaller_periodprovider_periodjcr (String.t): 
    - :org_periodapache_periodsling_periodjcr_perioddavex (String.t): 
    - :org_periodapache_periodsling_periodjcr_periodresourcesecurity (String.t): 
    - :org_periodapache_periodsling_periodjmx_periodprovider (String.t): 
    - :org_periodapache_periodsling_periodlaunchpad_periodinstaller (String.t): 
    - :org_periodapache_periodsling_periodmodels_periodimpl (String.t): 
    - :org_periodapache_periodsling_periodrepoinit_periodparser (String.t): 
    - :org_periodapache_periodsling_periodresource_periodinventory (String.t): 
    - :org_periodapache_periodsling_periodresourceresolver (String.t): 
    - :org_periodapache_periodsling_periodscripting_periodjavascript (String.t): 
    - :org_periodapache_periodsling_periodscripting_periodjst (String.t): 
    - :org_periodapache_periodsling_periodscripting_periodsightly_periodjs_periodprovider (String.t): 
    - :org_periodapache_periodsling_periodscripting_periodsightly_periodmodels_periodprovider (String.t): 
    - :org_periodapache_periodsling_periodsecurity (String.t): 
    - :org_periodapache_periodsling_periodservlets_periodcompat (String.t): 
    - :org_periodapache_periodsling_periodservlets_periodget (String.t): 
    - :org_periodapache_periodsling_periodstartupfilter_perioddisabler (String.t): 
    - :org_periodapache_periodsling_periodtracer (String.t): 
    - :we_periodretail_periodclient_periodapp_periodcore (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_apicontroller_filter_resolver_hook_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_apicontroller_filter_resolver_hook_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"com.adobe.cq.cdn.cdn-rewriter" => :query,
      :"com.adobe.cq.cloud-config.components" => :query,
      :"com.adobe.cq.cloud-config.core" => :query,
      :"com.adobe.cq.cloud-config.ui" => :query,
      :"com.adobe.cq.com.adobe.cq.editor" => :query,
      :"com.adobe.cq.com.adobe.cq.projects.core" => :query,
      :"com.adobe.cq.com.adobe.cq.projects.wcm.core" => :query,
      :"com.adobe.cq.com.adobe.cq.ui.commons" => :query,
      :"com.adobe.cq.com.adobe.cq.wcm.style" => :query,
      :"com.adobe.cq.cq-activitymap-integration" => :query,
      :"com.adobe.cq.cq-contexthub-commons" => :query,
      :"com.adobe.cq.cq-dtm" => :query,
      :"com.adobe.cq.cq-healthcheck" => :query,
      :"com.adobe.cq.cq-multisite-targeting" => :query,
      :"com.adobe.cq.cq-pre-upgrade-cleanup" => :query,
      :"com.adobe.cq.cq-product-info-provider" => :query,
      :"com.adobe.cq.cq-rest-sites" => :query,
      :"com.adobe.cq.cq-security-hc" => :query,
      :"com.adobe.cq.dam.cq-dam-svg-handler" => :query,
      :"com.adobe.cq.dam.cq-scene7-imaging" => :query,
      :"com.adobe.cq.dtm-reactor.core" => :query,
      :"com.adobe.cq.dtm-reactor.ui" => :query,
      :"com.adobe.cq.exp-jspel-resolver" => :query,
      :"com.adobe.cq.inbox.cq-inbox" => :query,
      :"com.adobe.cq.json-schema-parser" => :query,
      :"com.adobe.cq.media.cq-media-publishing-dps-fp-core" => :query,
      :"com.adobe.cq.mobile.cq-mobile-caas" => :query,
      :"com.adobe.cq.mobile.cq-mobile-index-builder" => :query,
      :"com.adobe.cq.mobile.cq-mobile-phonegap-build" => :query,
      :"com.adobe.cq.myspell" => :query,
      :"com.adobe.cq.sample.we.retail.core" => :query,
      :"com.adobe.cq.screens.com.adobe.cq.screens.dcc" => :query,
      :"com.adobe.cq.screens.com.adobe.cq.screens.mq.core" => :query,
      :"com.adobe.cq.social.cq-social-as-provider" => :query,
      :"com.adobe.cq.social.cq-social-badging-basic-impl" => :query,
      :"com.adobe.cq.social.cq-social-badging-impl" => :query,
      :"com.adobe.cq.social.cq-social-calendar-impl" => :query,
      :"com.adobe.cq.social.cq-social-content-fragments-impl" => :query,
      :"com.adobe.cq.social.cq-social-enablement-impl" => :query,
      :"com.adobe.cq.social.cq-social-graph-impl" => :query,
      :"com.adobe.cq.social.cq-social-ideation-impl" => :query,
      :"com.adobe.cq.social.cq-social-jcr-provider" => :query,
      :"com.adobe.cq.social.cq-social-members-impl" => :query,
      :"com.adobe.cq.social.cq-social-ms-provider" => :query,
      :"com.adobe.cq.social.cq-social-notifications-channels-web" => :query,
      :"com.adobe.cq.social.cq-social-notifications-impl" => :query,
      :"com.adobe.cq.social.cq-social-rdb-provider" => :query,
      :"com.adobe.cq.social.cq-social-scf-impl" => :query,
      :"com.adobe.cq.social.cq-social-scoring-basic-impl" => :query,
      :"com.adobe.cq.social.cq-social-scoring-impl" => :query,
      :"com.adobe.cq.social.cq-social-serviceusers-impl" => :query,
      :"com.adobe.cq.social.cq-social-srp-impl" => :query,
      :"com.adobe.cq.social.cq-social-ugcbase-impl" => :query,
      :"com.adobe.dam.cq-dam-cfm-impl" => :query,
      :"com.adobe.forms.foundation-forms-foundation-base" => :query,
      :"com.adobe.granite.apicontroller" => :query,
      :"com.adobe.granite.asset.core" => :query,
      :"com.adobe.granite.auth.sso" => :query,
      :"com.adobe.granite.bundles.hc.impl" => :query,
      :"com.adobe.granite.compat-router" => :query,
      :"com.adobe.granite.conf" => :query,
      :"com.adobe.granite.conf.ui.core" => :query,
      :"com.adobe.granite.cors" => :query,
      :"com.adobe.granite.crx-explorer" => :query,
      :"com.adobe.granite.crxde-lite" => :query,
      :"com.adobe.granite.crypto.config" => :query,
      :"com.adobe.granite.crypto.extension" => :query,
      :"com.adobe.granite.crypto.file" => :query,
      :"com.adobe.granite.crypto.jcr" => :query,
      :"com.adobe.granite.csrf" => :query,
      :"com.adobe.granite.distribution.core" => :query,
      :"com.adobe.granite.dropwizard.metrics" => :query,
      :"com.adobe.granite.frags.impl" => :query,
      :"com.adobe.granite.gibson" => :query,
      :"com.adobe.granite.infocollector" => :query,
      :"com.adobe.granite.installer.factory.packages" => :query,
      :"com.adobe.granite.jetty.ssl" => :query,
      :"com.adobe.granite.jobs.async" => :query,
      :"com.adobe.granite.maintenance.oak" => :query,
      :"com.adobe.granite.monitoring.core" => :query,
      :"com.adobe.granite.queries" => :query,
      :"com.adobe.granite.replication.hc.impl" => :query,
      :"com.adobe.granite.repository.checker" => :query,
      :"com.adobe.granite.repository.hc.impl" => :query,
      :"com.adobe.granite.rest.assets" => :query,
      :"com.adobe.granite.security.ui" => :query,
      :"com.adobe.granite.startup" => :query,
      :"com.adobe.granite.tagsoup" => :query,
      :"com.adobe.granite.taskmanagement.core" => :query,
      :"com.adobe.granite.taskmanagement.workflow" => :query,
      :"com.adobe.granite.ui.clientlibs.compiler.less" => :query,
      :"com.adobe.granite.ui.clientlibs.processor.gcc" => :query,
      :"com.adobe.granite.webconsole.plugins" => :query,
      :"com.adobe.granite.workflow.console" => :query,
      :"com.adobe.xmp.worker.files.native.fragment.linux" => :query,
      :"com.adobe.xmp.worker.files.native.fragment.macosx" => :query,
      :"com.adobe.xmp.worker.files.native.fragment.win" => :query,
      :"com.day.commons.osgi.wrapper.simple-jndi" => :query,
      :"com.day.cq.cq-authhandler" => :query,
      :"com.day.cq.cq-compat-configupdate" => :query,
      :"com.day.cq.cq-licensebranding" => :query,
      :"com.day.cq.cq-notifcation-impl" => :query,
      :"com.day.cq.cq-replication-audit" => :query,
      :"com.day.cq.cq-search-ext" => :query,
      :"com.day.cq.dam.cq-dam-annotation-print" => :query,
      :"com.day.cq.dam.cq-dam-asset-usage" => :query,
      :"com.day.cq.dam.cq-dam-s7dam" => :query,
      :"com.day.cq.dam.cq-dam-similaritysearch" => :query,
      :"com.day.cq.dam.dam-webdav-support" => :query,
      :"com.day.cq.pre-upgrade-tasks" => :query,
      :"com.day.cq.replication.extensions" => :query,
      :"com.day.cq.wcm.cq-msm-core" => :query,
      :"com.day.cq.wcm.cq-wcm-translation" => :query,
      :"day-commons-jrawio" => :query,
      :"org.apache.aries.jmx.whiteboard" => :query,
      :"org.apache.felix.http.sslfilter" => :query,
      :"org.apache.felix.org.apache.felix.threaddump" => :query,
      :"org.apache.felix.webconsole.plugins.ds" => :query,
      :"org.apache.felix.webconsole.plugins.event" => :query,
      :"org.apache.felix.webconsole.plugins.memoryusage" => :query,
      :"org.apache.felix.webconsole.plugins.packageadmin" => :query,
      :"org.apache.jackrabbit.oak-auth-ldap" => :query,
      :"org.apache.jackrabbit.oak-segment-tar" => :query,
      :"org.apache.jackrabbit.oak-solr-osgi" => :query,
      :"org.apache.sling.bundleresource.impl" => :query,
      :"org.apache.sling.commons.fsclassloader" => :query,
      :"org.apache.sling.commons.log.webconsole" => :query,
      :"org.apache.sling.datasource" => :query,
      :"org.apache.sling.discovery.base" => :query,
      :"org.apache.sling.discovery.oak" => :query,
      :"org.apache.sling.discovery.support" => :query,
      :"org.apache.sling.distribution.api" => :query,
      :"org.apache.sling.distribution.core" => :query,
      :"org.apache.sling.extensions.webconsolesecurityprovider" => :query,
      :"org.apache.sling.hc.webconsole" => :query,
      :"org.apache.sling.installer.console" => :query,
      :"org.apache.sling.installer.provider.file" => :query,
      :"org.apache.sling.installer.provider.jcr" => :query,
      :"org.apache.sling.jcr.davex" => :query,
      :"org.apache.sling.jcr.resourcesecurity" => :query,
      :"org.apache.sling.jmx.provider" => :query,
      :"org.apache.sling.launchpad.installer" => :query,
      :"org.apache.sling.models.impl" => :query,
      :"org.apache.sling.repoinit.parser" => :query,
      :"org.apache.sling.resource.inventory" => :query,
      :"org.apache.sling.resourceresolver" => :query,
      :"org.apache.sling.scripting.javascript" => :query,
      :"org.apache.sling.scripting.jst" => :query,
      :"org.apache.sling.scripting.sightly.js.provider" => :query,
      :"org.apache.sling.scripting.sightly.models.provider" => :query,
      :"org.apache.sling.security" => :query,
      :"org.apache.sling.servlets.compat" => :query,
      :"org.apache.sling.servlets.get" => :query,
      :"org.apache.sling.startupfilter.disabler" => :query,
      :"org.apache.sling.tracer" => :query,
      :"we.retail.client.app.core" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :path (String.t): 
    - :service_periodranking (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_cert_impl_client_cert_auth_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_cert_impl_client_cert_auth_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"path" => :query,
      :"service.ranking" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :configid (String.t): 
    - :scope (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthImsInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_ims(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthImsInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_ims(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"configid" => :query,
      :"scope" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.ims")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthImsInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :oauth_periodprovider_periodid (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"oauth.provider.id" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :auth_periodims_periodclient_periodsecret (String.t): 
    - :customizer_periodtype (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"auth.ims.client.secret" => :query,
      :"customizer.type" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :oauth_periodprovider_periodid (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthImsImplImsInstanceCredentialsValidatorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthImsImplImsInstanceCredentialsValidatorInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"oauth.provider.id" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthImsImplImsInstanceCredentialsValidatorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :oauth_periodprovider_periodid (String.t): 
    - :oauth_periodprovider_periodims_periodauthorization_periodurl (String.t): 
    - :oauth_periodprovider_periodims_periodtoken_periodurl (String.t): 
    - :oauth_periodprovider_periodims_periodprofile_periodurl (String.t): 
    - :oauth_periodprovider_periodims_periodextended_perioddetails_periodurls ([String.t]): 
    - :oauth_periodprovider_periodims_periodvalidate_periodtoken_periodurl (String.t): 
    - :oauth_periodprovider_periodims_periodsession_periodproperty (String.t): 
    - :oauth_periodprovider_periodims_periodservice_periodtoken_periodclient_periodid (String.t): 
    - :oauth_periodprovider_periodims_periodservice_periodtoken_periodclient_periodsecret (String.t): 
    - :oauth_periodprovider_periodims_periodservice_periodtoken (String.t): 
    - :ims_periodorg_periodref (String.t): 
    - :ims_periodgroup_periodmapping ([String.t]): 
    - :oauth_periodprovider_periodims_periodonly_periodlicense_periodgroup (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthImsImplImsProviderImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_ims_impl_ims_provider_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthImsImplImsProviderImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_ims_impl_ims_provider_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"oauth.provider.id" => :query,
      :"oauth.provider.ims.authorization.url" => :query,
      :"oauth.provider.ims.token.url" => :query,
      :"oauth.provider.ims.profile.url" => :query,
      :"oauth.provider.ims.extended.details.urls" => :query,
      :"oauth.provider.ims.validate.token.url" => :query,
      :"oauth.provider.ims.session.property" => :query,
      :"oauth.provider.ims.service.token.client.id" => :query,
      :"oauth.provider.ims.service.token.client.secret" => :query,
      :"oauth.provider.ims.service.token" => :query,
      :"ims.org.ref" => :query,
      :"ims.group.mapping" => :query,
      :"oauth.provider.ims.only.license.group" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthImsImplImsProviderImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :oauth_periodconfigmanager_periodims_periodconfigid (String.t): 
    - :ims_periodowning_entity (String.t): 
    - :aem_periodinstance_id (String.t): 
    - :ims_periodservice_code (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_ims_impl_ims_config_provider_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_ims_impl_ims_config_provider_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"oauth.configmanager.ims.configid" => :query,
      :"ims.owningEntity" => :query,
      :"aem.instanceId" => :query,
      :"ims.serviceCode" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :auth_periodtoken_periodprovider_periodtitle (String.t): 
    - :auth_periodtoken_periodprovider_perioddefault_periodclaims ([String.t]): 
    - :auth_periodtoken_periodprovider_periodendpoint (String.t): 
    - :auth_periodaccess_periodtoken_periodrequest (String.t): 
    - :auth_periodtoken_periodprovider_periodkeypair_periodalias (String.t): 
    - :auth_periodtoken_periodprovider_periodconn_periodtimeout (integer()): 
    - :auth_periodtoken_periodprovider_periodso_periodtimeout (integer()): 
    - :auth_periodtoken_periodprovider_periodclient_periodid (String.t): 
    - :auth_periodtoken_periodprovider_periodscope (String.t): 
    - :auth_periodtoken_periodprovider_periodreuse_periodaccess_periodtoken (boolean()): 
    - :auth_periodtoken_periodprovider_periodrelaxed_periodssl (boolean()): 
    - :token_periodrequest_periodcustomizer_periodtype (String.t): 
    - :auth_periodtoken_periodvalidator_periodtype (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthAccesstokenProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_oauth_accesstoken_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthAccesstokenProviderInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_oauth_accesstoken_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"auth.token.provider.title" => :query,
      :"auth.token.provider.default.claims" => :query,
      :"auth.token.provider.endpoint" => :query,
      :"auth.access.token.request" => :query,
      :"auth.token.provider.keypair.alias" => :query,
      :"auth.token.provider.conn.timeout" => :query,
      :"auth.token.provider.so.timeout" => :query,
      :"auth.token.provider.client.id" => :query,
      :"auth.token.provider.scope" => :query,
      :"auth.token.provider.reuse.access.token" => :query,
      :"auth.token.provider.relaxed.ssl" => :query,
      :"token.request.customizer.type" => :query,
      :"auth.token.validator.type" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthAccesstokenProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :path (String.t): 
    - :oauth_periodclient_ids_periodallowed ([String.t]): 
    - :auth_periodbearer_periodsync_periodims (boolean()): 
    - :auth_periodtoken_request_parameter (String.t): 
    - :oauth_periodbearer_periodconfigid (String.t): 
    - :oauth_periodjwt_periodsupport (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_oauth_impl_bearer_authentication_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_oauth_impl_bearer_authentication_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"path" => :query,
      :"oauth.clientIds.allowed" => :query,
      :"auth.bearer.sync.ims" => :query,
      :"auth.tokenRequestParameter" => :query,
      :"oauth.bearer.configid" => :query,
      :"oauth.jwt.support" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :auth_periodtoken_periodvalidator_periodtype (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_oauth_impl_default_token_validator_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_oauth_impl_default_token_validator_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"auth.token.validator.type" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :oauth_periodprovider_periodid (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_oauth_impl_facebook_provider_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_oauth_impl_facebook_provider_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"oauth.provider.id" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :oauth_periodprovider_periodid (String.t): 
    - :oauth_periodprovider_periodgithub_periodauthorization_periodurl (String.t): 
    - :oauth_periodprovider_periodgithub_periodtoken_periodurl (String.t): 
    - :oauth_periodprovider_periodgithub_periodprofile_periodurl (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplGithubProviderImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_oauth_impl_github_provider_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplGithubProviderImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_oauth_impl_github_provider_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"oauth.provider.id" => :query,
      :"oauth.provider.github.authorization.url" => :query,
      :"oauth.provider.github.token.url" => :query,
      :"oauth.provider.github.profile.url" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplGithubProviderImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :oauth_periodprovider_periodid (String.t): 
    - :oauth_periodprovider_periodgranite_periodauthorization_periodurl (String.t): 
    - :oauth_periodprovider_periodgranite_periodtoken_periodurl (String.t): 
    - :oauth_periodprovider_periodgranite_periodprofile_periodurl (String.t): 
    - :oauth_periodprovider_periodgranite_periodextended_perioddetails_periodurls (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplGraniteProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_oauth_impl_granite_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplGraniteProviderInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_oauth_impl_granite_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"oauth.provider.id" => :query,
      :"oauth.provider.granite.authorization.url" => :query,
      :"oauth.provider.granite.token.url" => :query,
      :"oauth.provider.granite.profile.url" => :query,
      :"oauth.provider.granite.extended.details.urls" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplGraniteProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :oauth_periodcookie_periodlogin_periodtimeout (String.t): 
    - :oauth_periodcookie_periodmax_periodage (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_oauth_impl_helper_provider_config_manager(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_oauth_impl_helper_provider_config_manager(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"oauth.cookie.login.timeout" => :query,
      :"oauth.cookie.max.age" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :oauth_periodcookie_periodlogin_periodtimeout (String.t): 
    - :oauth_periodcookie_periodmax_periodage (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"oauth.cookie.login.timeout" => :query,
      :"oauth.cookie.max.age" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :path (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"path" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :oauth_periodprovider_periodid (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_oauth_impl_twitter_provider_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_oauth_impl_twitter_provider_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"oauth.provider.id" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :oauth_periodconfig_periodid (String.t): 
    - :oauth_periodclient_periodid (String.t): 
    - :oauth_periodclient_periodsecret (String.t): 
    - :oauth_periodscope ([String.t]): 
    - :oauth_periodconfig_periodprovider_periodid (String.t): 
    - :oauth_periodcreate_periodusers (boolean()): 
    - :oauth_perioduserid_periodproperty (String.t): 
    - :force_periodstrict_periodusername_periodmatching (boolean()): 
    - :oauth_periodencode_perioduserids (boolean()): 
    - :oauth_periodhash_perioduserids (boolean()): 
    - :oauth_periodcall_back_url (String.t): 
    - :oauth_periodaccess_periodtoken_periodpersist (boolean()): 
    - :oauth_periodaccess_periodtoken_periodpersist_periodcookie (boolean()): 
    - :oauth_periodcsrf_periodstate_periodprotection (boolean()): 
    - :oauth_periodredirect_periodrequest_periodparams (boolean()): 
    - :oauth_periodconfig_periodsiblings_periodallow (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_oauth_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthProviderInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_oauth_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"oauth.config.id" => :query,
      :"oauth.client.id" => :query,
      :"oauth.client.secret" => :query,
      :"oauth.scope" => :query,
      :"oauth.config.provider.id" => :query,
      :"oauth.create.users" => :query,
      :"oauth.userid.property" => :query,
      :"force.strict.username.matching" => :query,
      :"oauth.encode.userids" => :query,
      :"oauth.hash.userids" => :query,
      :"oauth.callBackUrl" => :query,
      :"oauth.access.token.persist" => :query,
      :"oauth.access.token.persist.cookie" => :query,
      :"oauth.csrf.state.protection" => :query,
      :"oauth.redirect.request.params" => :query,
      :"oauth.config.siblings.allow" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.oauth.provider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthOauthProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :supported_paths ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_requirement_impl_default_requirement_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_requirement_impl_default_requirement_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"supportedPaths" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :path ([String.t]): 
    - :service_periodranking (integer()): 
    - :idp_url (String.t): 
    - :idp_cert_alias (String.t): 
    - :idp_http_redirect (boolean()): 
    - :service_provider_entity_id (String.t): 
    - :assertion_consumer_service_url (String.t): 
    - :sp_private_key_alias (String.t): 
    - :key_store_password (String.t): 
    - :default_redirect_url (String.t): 
    - :user_id_attribute (String.t): 
    - :use_encryption (boolean()): 
    - :create_user (boolean()): 
    - :user_intermediate_path (String.t): 
    - :add_group_memberships (boolean()): 
    - :group_membership_attribute (String.t): 
    - :default_groups ([String.t]): 
    - :name_id_format (String.t): 
    - :synchronize_attributes ([String.t]): 
    - :handle_logout (boolean()): 
    - :logout_url (String.t): 
    - :clock_tolerance (integer()): 
    - :digest_method (String.t): 
    - :signature_method (String.t): 
    - :identity_sync_type (String.t): 
    - :idp_identifier (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_saml_saml_authentication_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_saml_saml_authentication_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"path" => :query,
      :"service.ranking" => :query,
      :"idpUrl" => :query,
      :"idpCertAlias" => :query,
      :"idpHttpRedirect" => :query,
      :"serviceProviderEntityId" => :query,
      :"assertionConsumerServiceURL" => :query,
      :"spPrivateKeyAlias" => :query,
      :"keyStorePassword" => :query,
      :"defaultRedirectUrl" => :query,
      :"userIDAttribute" => :query,
      :"useEncryption" => :query,
      :"createUser" => :query,
      :"userIntermediatePath" => :query,
      :"addGroupMemberships" => :query,
      :"groupMembershipAttribute" => :query,
      :"defaultGroups" => :query,
      :"nameIdFormat" => :query,
      :"synchronizeAttributes" => :query,
      :"handleLogout" => :query,
      :"logoutUrl" => :query,
      :"clockTolerance" => :query,
      :"digestMethod" => :query,
      :"signatureMethod" => :query,
      :"identitySyncType" => :query,
      :"idpIdentifier" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :path (String.t): 
    - :service_periodranking (integer()): 
    - :jaas_periodcontrol_flag (String.t): 
    - :jaas_periodrealm_name (String.t): 
    - :jaas_periodranking (integer()): 
    - :headers ([String.t]): 
    - :cookies ([String.t]): 
    - :parameters ([String.t]): 
    - :usermap ([String.t]): 
    - :format (String.t): 
    - :trusted_credentials_attribute (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_auth_sso_impl_sso_authentication_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_auth_sso_impl_sso_authentication_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"path" => :query,
      :"service.ranking" => :query,
      :"jaas.controlFlag" => :query,
      :"jaas.realmName" => :query,
      :"jaas.ranking" => :query,
      :"headers" => :query,
      :"cookies" => :query,
      :"parameters" => :query,
      :"usermap" => :query,
      :"format" => :query,
      :"trustedCredentialsAttribute" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
    - :minimum_periodcode_periodcache_periodsize (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_bundles_hc_impl_code_cache_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_bundles_hc_impl_code_cache_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query,
      :"minimum.code.cache.size" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
    - :ignored_periodbundles ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query,
      :"ignored.bundles" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
    - :max_periodqueued_periodjobs (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_bundles_hc_impl_jobs_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_bundles_hc_impl_jobs_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query,
      :"max.queued.jobs" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :replicate_periodcomment_periodresource_types ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_comments_internal_comment_replication_content_filter_fac(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_comments_internal_comment_replication_content_filter_fac(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"replicate.comment.resourceTypes" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :compatgroups ([String.t]): 
    - :enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_compatrouter_impl_compat_switching_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_compatrouter_impl_compat_switching_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"compatgroups" => :query,
      :"enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :id (String.t): 
    - :compat_path (String.t): 
    - :new_path (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCompatrouterImplRoutingConfigInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_compatrouter_impl_routing_config(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCompatrouterImplRoutingConfigInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_compatrouter_impl_routing_config(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"id" => :query,
      :"compatPath" => :query,
      :"newPath" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCompatrouterImplRoutingConfigInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :group (String.t): 
    - :ids ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_compatrouter_impl_switch_mapping_config(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_compatrouter_impl_switch_mapping_config(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"group" => :query,
      :"ids" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enabled (boolean()): 
    - :fallback_paths ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enabled" => :query,
      :"fallbackPaths" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :com_periodadobe_periodgranite_periodcontexthub_periodsilent_mode (boolean()): 
    - :com_periodadobe_periodgranite_periodcontexthub_periodshow_ui (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteContexthubImplContextHubImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_contexthub_impl_context_hub_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteContexthubImplContextHubImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_contexthub_impl_context_hub_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"com.adobe.granite.contexthub.silent_mode" => :query,
      :"com.adobe.granite.contexthub.show_ui" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteContexthubImplContextHubImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :alloworigin ([String.t]): 
    - :alloworiginregexp ([String.t]): 
    - :allowedpaths ([String.t]): 
    - :exposedheaders ([String.t]): 
    - :maxage (integer()): 
    - :supportedheaders ([String.t]): 
    - :supportedmethods ([String.t]): 
    - :supportscredentials (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCorsImplCorsPolicyImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_cors_impl_cors_policy_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCorsImplCorsPolicyImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_cors_impl_cors_policy_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"alloworigin" => :query,
      :"alloworiginregexp" => :query,
      :"allowedpaths" => :query,
      :"exposedheaders" => :query,
      :"maxage" => :query,
      :"supportedheaders" => :query,
      :"supportedmethods" => :query,
      :"supportscredentials" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCorsImplCorsPolicyImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :filter_periodmethods ([String.t]): 
    - :filter_periodenable_periodsafe_perioduser_periodagents (boolean()): 
    - :filter_periodsafe_perioduser_periodagents ([String.t]): 
    - :filter_periodexcluded_periodpaths ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCsrfImplCsrfFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_csrf_impl_csrf_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCsrfImplCsrfFilterInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_csrf_impl_csrf_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"filter.methods" => :query,
      :"filter.enable.safe.user.agents" => :query,
      :"filter.safe.user.agents" => :query,
      :"filter.excluded.paths" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCsrfImplCsrfFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :csrf_periodtoken_periodexpires_periodin (integer()): 
    - :sling_periodauth_periodrequirements (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCsrfImplCsrfServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_csrf_impl_csrf_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCsrfImplCsrfServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_csrf_impl_csrf_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"csrf.token.expires.in" => :query,
      :"sling.auth.requirements" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteCsrfImplCsrfServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :username (String.t): 
    - :encrypted_password (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"username" => :query,
      :"encryptedPassword" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enabled (boolean()): 
    - :agent_name (String.t): 
    - :diff_path (String.t): 
    - :observed_path (String.t): 
    - :service_name (String.t): 
    - :property_names (String.t): 
    - :distribution_delay (integer()): 
    - :service_user_periodtarget (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_distribution_core_impl_diff_diff_changes_observer(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_distribution_core_impl_diff_diff_changes_observer(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enabled" => :query,
      :"agentName" => :query,
      :"diffPath" => :query,
      :"observedPath" => :query,
      :"serviceName" => :query,
      :"propertyNames" => :query,
      :"distributionDelay" => :query,
      :"serviceUser.target" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :diff_path (String.t): 
    - :service_name (String.t): 
    - :service_user_periodtarget (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_distribution_core_impl_diff_diff_event_listener(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_distribution_core_impl_diff_diff_event_listener(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"diffPath" => :query,
      :"serviceName" => :query,
      :"serviceUser.target" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :importer_periodname ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_distribution_core_impl_distribution_to_replication_even(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_distribution_core_impl_distribution_to_replication_even(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"importer.name" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :provider_name (String.t): 
    - :forward_periodrequests (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_distribution_core_impl_replication_adapters_replicat(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_distribution_core_impl_replication_adapters_replicat(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"providerName" => :query,
      :"forward.requests" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :forward_periodrequests (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_distribution_core_impl_replication_distribution_trans(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_distribution_core_impl_replication_distribution_trans(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"forward.requests" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :service_name (String.t): 
    - :user_id (String.t): 
    - :access_token_provider_periodtarget (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_distribution_core_impl_transport_access_token_distribu(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_distribution_core_impl_transport_access_token_distribu(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"serviceName" => :query,
      :"userId" => :query,
      :"accessTokenProvider.target" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :feature_periodname (String.t): 
    - :feature_perioddescription (String.t): 
    - :http_periodheader_periodname (String.t): 
    - :http_periodheader_periodvaluepattern (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_frags_impl_check_http_header_flag(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_frags_impl_check_http_header_flag(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"feature.name" => :query,
      :"feature.description" => :query,
      :"http.header.name" => :query,
      :"http.header.valuepattern" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :feature_periodname (String.t): 
    - :feature_perioddescription (String.t): 
    - :active_periodpercentage (String.t): 
    - :cookie_periodname (String.t): 
    - :cookie_periodmax_age (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteFragsImplRandomFeatureInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_frags_impl_random_feature(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteFragsImplRandomFeatureInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_frags_impl_random_feature(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"feature.name" => :query,
      :"feature.description" => :query,
      :"active.percentage" => :query,
      :"cookie.name" => :query,
      :"cookie.maxAge" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteFragsImplRandomFeatureInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :com_periodadobe_periodgranite_periodhttpcache_periodfile_perioddocument_root (String.t): 
    - :com_periodadobe_periodgranite_periodhttpcache_periodfile_periodinclude_host (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteHttpcacheFileFileCacheStoreInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_httpcache_file_file_cache_store(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteHttpcacheFileFileCacheStoreInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_httpcache_file_file_cache_store(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"com.adobe.granite.httpcache.file.documentRoot" => :query,
      :"com.adobe.granite.httpcache.file.includeHost" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteHttpcacheFileFileCacheStoreInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :com_periodadobe_periodgranite_periodhttpcache_periodurl_periodpaths ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_httpcache_impl_outer_cache_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_httpcache_impl_outer_cache_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"com.adobe.granite.httpcache.url.paths" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :pseudo_periodpatterns ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_i18n_impl_bundle_pseudo_translations(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_i18n_impl_bundle_pseudo_translations(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"pseudo.patterns" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :security_periodpreferences_periodname (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_i18n_impl_preferences_locale_resolver_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_i18n_impl_preferences_locale_resolver_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"security.preferences.name" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :granite_periodinfocollector_periodinclude_thread_dumps (boolean()): 
    - :granite_periodinfocollector_periodinclude_heap_dump (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteInfocollectorInfoCollectorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_infocollector_info_collector(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteInfocollectorInfoCollectorInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_infocollector_info_collector(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"granite.infocollector.includeThreadDumps" => :query,
      :"granite.infocollector.includeHeapDump" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteInfocollectorInfoCollectorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :com_periodadobe_periodgranite_periodjetty_periodssl_periodport (integer()): 
    - :com_periodadobe_periodgranite_periodjetty_periodssl_periodkeystore_perioduser (String.t): 
    - :com_periodadobe_periodgranite_periodjetty_periodssl_periodkeystore_periodpassword (String.t): 
    - :com_periodadobe_periodgranite_periodjetty_periodssl_periodciphersuites_periodexcluded ([String.t]): 
    - :com_periodadobe_periodgranite_periodjetty_periodssl_periodciphersuites_periodincluded ([String.t]): 
    - :com_periodadobe_periodgranite_periodjetty_periodssl_periodclient_periodcertificate (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"com.adobe.granite.jetty.ssl.port" => :query,
      :"com.adobe.granite.jetty.ssl.keystore.user" => :query,
      :"com.adobe.granite.jetty.ssl.keystore.password" => :query,
      :"com.adobe.granite.jetty.ssl.ciphersuites.excluded" => :query,
      :"com.adobe.granite.jetty.ssl.ciphersuites.included" => :query,
      :"com.adobe.granite.jetty.ssl.client.certificate" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :check_internval (integer()): 
    - :exclude_ids ([String.t]): 
    - :encrypt_ping (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteLicenseImplLicenseCheckFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_license_impl_license_check_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteLicenseImplLicenseCheckFilterInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_license_impl_license_check_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"checkInternval" => :query,
      :"excludeIds" => :query,
      :"encryptPing" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteLicenseImplLicenseCheckFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :messages_periodqueue_periodsize (integer()): 
    - :logger_periodconfig ([String.t]): 
    - :messages_periodsize (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteLoggingImplLogAnalyserImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_logging_impl_log_analyser_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteLoggingImplLogAnalyserImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_logging_impl_log_analyser_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"messages.queue.size" => :query,
      :"logger.config" => :query,
      :"messages.size" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteLoggingImplLogAnalyserImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_logging_impl_log_error_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_logging_impl_log_error_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :granite_periodmaintenance_periodmandatory (boolean()): 
    - :job_periodtopics (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"granite.maintenance.mandatory" => :query,
      :"job.topics" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :job_periodtopics (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"job.topics" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :full_periodgc_perioddays ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_maintenance_crx_impl_revision_cleanup_task(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_maintenance_crx_impl_revision_cleanup_task(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"full.gc.days" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :script_periodfilename (String.t): 
    - :script_perioddisplay (String.t): 
    - :script_periodpath (String.t): 
    - :script_periodplatform ([String.t]): 
    - :interval (integer()): 
    - :jmxdomain (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteMonitoringImplScriptConfigImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_monitoring_impl_script_config_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteMonitoringImplScriptConfigImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_monitoring_impl_script_config_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"script.filename" => :query,
      :"script.display" => :query,
      :"script.path" => :query,
      :"script.platform" => :query,
      :"interval" => :query,
      :"jmxdomain" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteMonitoringImplScriptConfigImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :path (String.t): 
    - :jaas_periodcontrol_flag (String.t): 
    - :jaas_periodrealm_name (String.t): 
    - :jaas_periodranking (integer()): 
    - :oauth_periodoffline_periodvalidation (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"path" => :query,
      :"jaas.controlFlag" => :query,
      :"jaas.realmName" => :query,
      :"jaas.ranking" => :query,
      :"oauth.offline.validation" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scheduler_periodexpression (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_oauth_server_impl_access_token_cleanup_task(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_oauth_server_impl_access_token_cleanup_task(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scheduler.expression" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :oauth_periodclient_periodrevocation_periodactive (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"oauth.client.revocation.active" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_periodservlet_periodpaths (String.t): 
    - :oauth_periodrevocation_periodactive (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.servlet.paths" => :query,
      :"oauth.revocation.active" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :oauth_periodissuer (String.t): 
    - :oauth_periodaccess_periodtoken_periodexpires_periodin (String.t): 
    - :osgi_periodhttp_periodwhiteboard_periodservlet_periodpattern (String.t): 
    - :osgi_periodhttp_periodwhiteboard_periodcontext_periodselect (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"oauth.issuer" => :query,
      :"oauth.access.token.expires.in" => :query,
      :"osgi.http.whiteboard.servlet.pattern" => :query,
      :"osgi.http.whiteboard.context.select" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :oauth_periodtoken_periodrevocation_periodactive (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"oauth.token.revocation.active" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :offloading_periodtransporter (String.t): 
    - :offloading_periodcleanup_periodpayload (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_offloading_impl_offloading_configurator(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_offloading_impl_offloading_configurator(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"offloading.transporter" => :query,
      :"offloading.cleanup.payload" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :offloading_periodjobcloner_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_offloading_impl_offloading_job_cloner(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_offloading_impl_offloading_job_cloner(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"offloading.jobcloner.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :offloading_periodoffloader_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_offloading_impl_offloading_job_offloader(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_offloading_impl_offloading_job_offloader(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"offloading.offloader.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :offloading_periodagentmanager_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_offloading_impl_transporter_offloading_agent_manager(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_offloading_impl_transporter_offloading_agent_manager(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"offloading.agentmanager.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :default_periodtransport_periodagent_to_worker_periodprefix (String.t): 
    - :default_periodtransport_periodagent_to_master_periodprefix (String.t): 
    - :default_periodtransport_periodinput_periodpackage (String.t): 
    - :default_periodtransport_periodoutput_periodpackage (String.t): 
    - :default_periodtransport_periodreplication_periodsynchronous (boolean()): 
    - :default_periodtransport_periodcontentpackage (boolean()): 
    - :offloading_periodtransporter_perioddefault_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_offloading_impl_transporter_offloading_default_transpo(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_offloading_impl_transporter_offloading_default_transpo(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"default.transport.agent-to-worker.prefix" => :query,
      :"default.transport.agent-to-master.prefix" => :query,
      :"default.transport.input.package" => :query,
      :"default.transport.output.package" => :query,
      :"default.transport.replication.synchronous" => :query,
      :"default.transport.contentpackage" => :query,
      :"offloading.transporter.default.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :omnisearch_periodsuggestion_periodrequiretext_periodmin (integer()): 
    - :omnisearch_periodsuggestion_periodspellcheck_periodrequire (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_omnisearch_impl_core_omni_search_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_omnisearch_impl_core_omni_search_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"omnisearch.suggestion.requiretext.min" => :query,
      :"omnisearch.suggestion.spellcheck.require" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :optout_periodcookies ([String.t]): 
    - :optout_periodheaders ([String.t]): 
    - :optout_periodwhitelist_periodcookies ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOptoutImplOptOutServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_optout_impl_opt_out_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOptoutImplOptOutServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_optout_impl_opt_out_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"optout.cookies" => :query,
      :"optout.headers" => :query,
      :"optout.whitelist.cookies" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteOptoutImplOptOutServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :indexing_periodcritical_periodthreshold (integer()): 
    - :indexing_periodwarn_periodthreshold (integer()): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_queries_impl_hc_async_index_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_queries_impl_hc_async_index_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"indexing.critical.threshold" => :query,
      :"indexing.warn.threshold" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :large_periodindex_periodcritical_periodthreshold (integer()): 
    - :large_periodindex_periodwarn_periodthreshold (integer()): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_queries_impl_hc_large_index_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_queries_impl_hc_large_index_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"large.index.critical.threshold" => :query,
      :"large.index.warn.threshold" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_queries_impl_hc_queries_status_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_queries_impl_hc_queries_status_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :get_period (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_queries_impl_hc_query_health_check_metrics(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_queries_impl_hc_query_health_check_metrics(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"getPeriod" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_queries_impl_hc_query_limits_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_queries_impl_hc_query_limits_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :number_periodof_periodretries_periodallowed (integer()): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_replication_hc_impl_replication_queue_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_replication_hc_impl_replication_queue_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"number.of.retries.allowed" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_replication_hc_impl_replication_transport_users_health_c(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_replication_hc_impl_replication_transport_users_health_c(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
    - :exclude_periodsearch_periodpath ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query,
      :"exclude.search.path" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplContinuousRgcHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_repository_hc_impl_continuous_rgc_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplContinuousRgcHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_repository_hc_impl_continuous_rgc_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplContinuousRgcHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
    - :account_periodlogins ([String.t]): 
    - :console_periodlogins ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_repository_hc_impl_default_logins_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_repository_hc_impl_default_logins_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query,
      :"account.logins" => :query,
      :"console.logins" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
    - :disk_periodspace_periodwarn_periodthreshold (integer()): 
    - :disk_periodspace_perioderror_periodthreshold (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_repository_hc_impl_disk_space_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_repository_hc_impl_disk_space_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query,
      :"disk.space.warn.threshold" => :query,
      :"disk.space.error.threshold" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_repository_hc_impl_observation_queue_length_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_repository_hc_impl_observation_queue_length_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enabled (boolean()): 
    - :interval_seconds (integer()): 
    - :commits_per_interval_threshold (integer()): 
    - :max_location_length (integer()): 
    - :max_details_shown (integer()): 
    - :min_details_percentage (integer()): 
    - :thread_matchers ([String.t]): 
    - :max_greedy_depth (integer()): 
    - :greedy_stack_matchers (String.t): 
    - :stack_filters ([String.t]): 
    - :stack_matchers ([String.t]): 
    - :stack_categorizers ([String.t]): 
    - :stack_shorteners ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryImplCommitStatsConfigInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_repository_impl_commit_stats_config(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryImplCommitStatsConfigInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_repository_impl_commit_stats_config(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enabled" => :query,
      :"intervalSeconds" => :query,
      :"commitsPerIntervalThreshold" => :query,
      :"maxLocationLength" => :query,
      :"maxDetailsShown" => :query,
      :"minDetailsPercentage" => :query,
      :"threadMatchers" => :query,
      :"maxGreedyDepth" => :query,
      :"greedyStackMatchers" => :query,
      :"stackFilters" => :query,
      :"stackMatchers" => :query,
      :"stackCategorizers" => :query,
      :"stackShorteners" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryImplCommitStatsConfigInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :serviceusers_periodsimple_subject_population (boolean()): 
    - :serviceusers_periodlist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryServiceUserConfigurationInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_repository_service_user_configuration(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryServiceUserConfigurationInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_repository_service_user_configuration(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"serviceusers.simpleSubjectPopulation" => :query,
      :"serviceusers.list" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRepositoryServiceUserConfigurationInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :types ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_resourcestatus_impl_composite_status_type(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_resourcestatus_impl_composite_status_type(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"types" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :provider_periodroot (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_resourcestatus_impl_status_resource_provider_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_resourcestatus_impl_status_resource_provider_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"provider.root" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :mime_periodallow_empty (boolean()): 
    - :mime_periodallowed ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_rest_assets_impl_asset_content_disposition_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_rest_assets_impl_asset_content_disposition_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"mime.allowEmpty" => :query,
      :"mime.allowed" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :provider_periodroots (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"provider.roots" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :default_periodlimit (integer()): 
    - :use_periodabsolute_perioduri (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRestImplServletDefaultGetServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_rest_impl_servlet_default_get_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRestImplServletDefaultGetServletInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_rest_impl_servlet_default_get_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"default.limit" => :query,
      :"use.absolute.uri" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteRestImplServletDefaultGetServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodtags ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteSecurityUserUiInternalServletsSslConfigurationSInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteSecurityUserUiInternalServletsSslConfigurationSInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.tags" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteSecurityUserUiInternalServletsSslConfigurationSInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :adapter_periodcondition (String.t): 
    - :granite_perioduserproperties_periodnodetypes ([String.t]): 
    - :granite_perioduserproperties_periodresourcetypes ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteSecurityUserUserPropertiesServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_security_user_user_properties_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteSecurityUserUserPropertiesServiceInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_security_user_user_properties_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"adapter.condition" => :query,
      :"granite.userproperties.nodetypes" => :query,
      :"granite.userproperties.resourcetypes" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteSecurityUserUserPropertiesServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :group2member_periodrelationship_periodoutgoing (String.t): 
    - :group2member_periodexcluded_periodoutgoing ([String.t]): 
    - :group2member_periodrelationship_periodincoming (String.t): 
    - :group2member_periodexcluded_periodincoming ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_socialgraph_impl_social_graph_factory_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_socialgraph_impl_social_graph_factory_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"group2member.relationship.outgoing" => :query,
      :"group2member.excluded.outgoing" => :query,
      :"group2member.relationship.incoming" => :query,
      :"group2member.excluded.incoming" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scheduler_periodexpression (String.t): 
    - :jmx_periodobjectname (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scheduler.expression" => :query,
      :"jmx.objectname" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :adapter_periodcondition (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"adapter.condition" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :archiving_periodenabled (boolean()): 
    - :scheduler_periodexpression (String.t): 
    - :archive_periodsince_perioddays_periodcompleted (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_taskmanagement_impl_jcr_task_archive_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_taskmanagement_impl_jcr_task_archive_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"archiving.enabled" => :query,
      :"scheduler.expression" => :query,
      :"archive.since.days.completed" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :purge_completed (boolean()): 
    - :completed_age (integer()): 
    - :purge_active (boolean()): 
    - :active_age (integer()): 
    - :save_threshold (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"purgeCompleted" => :query,
      :"completedAge" => :query,
      :"purgeActive" => :query,
      :"activeAge" => :query,
      :"saveThreshold" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :adapter_periodcondition (String.t): 
    - :taskmanager_periodadmingroups ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"adapter.condition" => :query,
      :"taskmanager.admingroups" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scheduler_periodperiod (integer()): 
    - :scheduler_periodrun_on (String.t): 
    - :granite_periodthreaddump_periodenabled (boolean()): 
    - :granite_periodthreaddump_perioddumps_per_file (integer()): 
    - :granite_periodthreaddump_periodenable_gzip_compression (boolean()): 
    - :granite_periodthreaddump_periodenable_directories_compression (boolean()): 
    - :granite_periodthreaddump_periodenable_j_stack (boolean()): 
    - :granite_periodthreaddump_periodmax_backup_days (integer()): 
    - :granite_periodthreaddump_periodbackup_clean_trigger (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteThreaddumpThreadDumpCollectorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_threaddump_thread_dump_collector(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteThreaddumpThreadDumpCollectorInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_threaddump_thread_dump_collector(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scheduler.period" => :query,
      :"scheduler.runOn" => :query,
      :"granite.threaddump.enabled" => :query,
      :"granite.threaddump.dumpsPerFile" => :query,
      :"granite.threaddump.enableGzipCompression" => :query,
      :"granite.threaddump.enableDirectoriesCompression" => :query,
      :"granite.threaddump.enableJStack" => :query,
      :"granite.threaddump.maxBackupDays" => :query,
      :"granite.threaddump.backupCleanTrigger" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteThreaddumpThreadDumpCollectorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :translation_factory (String.t): 
    - :default_connector_label (String.t): 
    - :default_connector_attribution (String.t): 
    - :default_connector_workspace_id (String.t): 
    - :default_connector_subscription_key (String.t): 
    - :language_map_location (String.t): 
    - :category_map_location (String.t): 
    - :retry_attempts (integer()): 
    - :timeout_count (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"translationFactory" => :query,
      :"defaultConnectorLabel" => :query,
      :"defaultConnectorAttribution" => :query,
      :"defaultConnectorWorkspaceId" => :query,
      :"defaultConnectorSubscriptionKey" => :query,
      :"languageMapLocation" => :query,
      :"categoryMapLocation" => :query,
      :"retryAttempts" => :query,
      :"timeoutCount" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :default_connector_name (String.t): 
    - :default_category (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_translation_core_impl_translation_manager_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_translation_core_impl_translation_manager_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"defaultConnectorName" => :query,
      :"defaultCategory" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :htmllibmanager_periodtiming (boolean()): 
    - :htmllibmanager_perioddebug_periodinit_periodjs (String.t): 
    - :htmllibmanager_periodminify (boolean()): 
    - :htmllibmanager_perioddebug (boolean()): 
    - :htmllibmanager_periodgzip (boolean()): 
    - :htmllibmanager_periodmax_data_uri_size (integer()): 
    - :htmllibmanager_periodmaxage (integer()): 
    - :htmllibmanager_periodforce_cq_url_info (boolean()): 
    - :htmllibmanager_perioddefaultthemename (String.t): 
    - :htmllibmanager_perioddefaultuserthemename (String.t): 
    - :htmllibmanager_periodclientmanager (String.t): 
    - :htmllibmanager_periodpath_periodlist ([String.t]): 
    - :htmllibmanager_periodexcluded_periodpath_periodlist ([String.t]): 
    - :htmllibmanager_periodprocessor_periodjs ([String.t]): 
    - :htmllibmanager_periodprocessor_periodcss ([String.t]): 
    - :htmllibmanager_periodlongcache_periodpatterns ([String.t]): 
    - :htmllibmanager_periodlongcache_periodformat (String.t): 
    - :htmllibmanager_perioduse_file_system_output_cache (boolean()): 
    - :htmllibmanager_periodfile_system_output_cache_location (String.t): 
    - :htmllibmanager_perioddisable_periodreplacement ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"htmllibmanager.timing" => :query,
      :"htmllibmanager.debug.init.js" => :query,
      :"htmllibmanager.minify" => :query,
      :"htmllibmanager.debug" => :query,
      :"htmllibmanager.gzip" => :query,
      :"htmllibmanager.maxDataUriSize" => :query,
      :"htmllibmanager.maxage" => :query,
      :"htmllibmanager.forceCQUrlInfo" => :query,
      :"htmllibmanager.defaultthemename" => :query,
      :"htmllibmanager.defaultuserthemename" => :query,
      :"htmllibmanager.clientmanager" => :query,
      :"htmllibmanager.path.list" => :query,
      :"htmllibmanager.excluded.path.list" => :query,
      :"htmllibmanager.processor.js" => :query,
      :"htmllibmanager.processor.css" => :query,
      :"htmllibmanager.longcache.patterns" => :query,
      :"htmllibmanager.longcache.format" => :query,
      :"htmllibmanager.useFileSystemOutputCache" => :query,
      :"htmllibmanager.fileSystemOutputCacheLocation" => :query,
      :"htmllibmanager.disable.replacement" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_workflow_console_frags_workflow_withdraw_feature(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_workflow_console_frags_workflow_withdraw_feature(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :granite_periodworkflow_period_workflow_publish_event_service_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_workflow_console_publish_workflow_publish_event_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_workflow_console_publish_workflow_publish_event_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"granite.workflow.WorkflowPublishEventService.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :bucket_size (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_workflow_core_jcr_workflow_bucket_manager(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_workflow_core_jcr_workflow_bucket_manager(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"bucketSize" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :default_periodtimeout (integer()): 
    - :max_periodtimeout (integer()): 
    - :default_periodperiod (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_workflow_core_job_external_process_job_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_workflow_core_job_external_process_job_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"default.timeout" => :query,
      :"max.timeout" => :query,
      :"default.period" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :job_periodtopics ([String.t]): 
    - :allow_periodself_periodprocess_periodtermination (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCoreJobJobHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_workflow_core_job_job_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCoreJobJobHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_workflow_core_job_job_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"job.topics" => :query,
      :"allow.self.process.termination" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCoreJobJobHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :job_periodtopics (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"job.topics" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :get_system_workflow_models ([String.t]): 
    - :get_package_root_path (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCorePayloadMapCacheInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_workflow_core_payload_map_cache(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCorePayloadMapCacheInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_workflow_core_payload_map_cache(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"getSystemWorkflowModels" => :query,
      :"getPackageRootPath" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCorePayloadMapCacheInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :payload_periodmove_periodwhite_periodlist ([String.t]): 
    - :payload_periodmove_periodhandle_periodfrom_periodworkflow_periodprocess (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_workflow_core_payloadmap_payload_move_listener(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_workflow_core_payloadmap_payload_move_listener(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"payload.move.white.list" => :query,
      :"payload.move.handle.from.workflow.process" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodworkflow_periodconfig_periodworkflow_periodpackages_periodroot_periodpath ([String.t]): 
    - :cq_periodworkflow_periodconfig_periodworkflow_periodprocess_periodlegacy_periodmode (boolean()): 
    - :cq_periodworkflow_periodconfig_periodallow_periodlocking (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCoreWorkflowConfigInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_workflow_core_workflow_config(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCoreWorkflowConfigInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_workflow_core_workflow_config(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.workflow.config.workflow.packages.root.path" => :query,
      :"cq.workflow.config.workflow.process.legacy.mode" => :query,
      :"cq.workflow.config.allow.locking" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCoreWorkflowConfigInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :granite_periodworkflowinbox_periodsort_periodproperty_name (String.t): 
    - :granite_periodworkflowinbox_periodsort_periodorder (String.t): 
    - :cq_periodworkflow_periodjob_periodretry (integer()): 
    - :cq_periodworkflow_periodsuperuser ([String.t]): 
    - :granite_periodworkflow_periodinbox_query_size (integer()): 
    - :granite_periodworkflow_periodadmin_user_group_filter (boolean()): 
    - :granite_periodworkflow_periodenforce_workitem_assignee_permissions (boolean()): 
    - :granite_periodworkflow_periodenforce_workflow_initiator_permissions (boolean()): 
    - :granite_periodworkflow_periodinject_tenant_id_in_job_topics (boolean()): 
    - :granite_periodworkflow_periodmax_purge_save_threshold (integer()): 
    - :granite_periodworkflow_periodmax_purge_query_count (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_workflow_core_workflow_session_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_workflow_core_workflow_session_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"granite.workflowinbox.sort.propertyName" => :query,
      :"granite.workflowinbox.sort.order" => :query,
      :"cq.workflow.job.retry" => :query,
      :"cq.workflow.superuser" => :query,
      :"granite.workflow.inboxQuerySize" => :query,
      :"granite.workflow.adminUserGroupFilter" => :query,
      :"granite.workflow.enforceWorkitemAssigneePermissions" => :query,
      :"granite.workflow.enforceWorkflowInitiatorPermissions" => :query,
      :"granite.workflow.injectTenantIdInJobTopics" => :query,
      :"granite.workflow.maxPurgeSaveThreshold" => :query,
      :"granite.workflow.maxPurgeQueryCount" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scheduledpurge_periodname (String.t): 
    - :scheduledpurge_periodworkflow_status (String.t): 
    - :scheduledpurge_periodmodel_ids ([String.t]): 
    - :scheduledpurge_perioddaysold (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowPurgeSchedulerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_granite_workflow_purge_scheduler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowPurgeSchedulerInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_granite_workflow_purge_scheduler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scheduledpurge.name" => :query,
      :"scheduledpurge.workflowStatus" => :query,
      :"scheduledpurge.modelIds" => :query,
      :"scheduledpurge.daysold" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeGraniteWorkflowPurgeSchedulerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :max_connections (integer()): 
    - :max_requests (integer()): 
    - :request_timeout (integer()): 
    - :request_retries (integer()): 
    - :launch_timeout (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeOctopusNcommBootstrapInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_octopus_ncomm_bootstrap(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeOctopusNcommBootstrapInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_octopus_ncomm_bootstrap(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"maxConnections" => :query,
      :"maxRequests" => :query,
      :"requestTimeout" => :query,
      :"requestRetries" => :query,
      :"launchTimeout" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeOctopusNcommBootstrapInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :communities_periodintegration_periodlivefyre_periodsling_periodevent_periodfilter (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"communities.integration.livefyre.sling.event.filter" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :max_connections (String.t): 
    - :max_requests (String.t): 
    - :request_timeout (String.t): 
    - :log_dir (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeXmpWorkerFilesNcommXmpFilesNCommInfo{}} on success
  {:error, info} on failure
  """
  @spec com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeXmpWorkerFilesNcommXmpFilesNCommInfo.t} | {:error, Tesla.Env.t}
  def com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"maxConnections" => :query,
      :"maxRequests" => :query,
      :"requestTimeout" => :query,
      :"logDir" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComAdobeXmpWorkerFilesNcommXmpFilesNCommInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :jdbc_perioddriver_periodclass (String.t): 
    - :jdbc_periodconnection_perioduri (String.t): 
    - :jdbc_periodusername (String.t): 
    - :jdbc_periodpassword (String.t): 
    - :jdbc_periodvalidation_periodquery (String.t): 
    - :default_periodreadonly (boolean()): 
    - :default_periodautocommit (boolean()): 
    - :pool_periodsize (integer()): 
    - :pool_periodmax_periodwait_periodmsec (integer()): 
    - :datasource_periodname (String.t): 
    - :datasource_periodsvc_periodproperties ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_commons_datasource_jdbcpool_jdbc_pool_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo.t} | {:error, Tesla.Env.t}
  def com_day_commons_datasource_jdbcpool_jdbc_pool_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"jdbc.driver.class" => :query,
      :"jdbc.connection.uri" => :query,
      :"jdbc.username" => :query,
      :"jdbc.password" => :query,
      :"jdbc.validation.query" => :query,
      :"default.readonly" => :query,
      :"default.autocommit" => :query,
      :"pool.size" => :query,
      :"pool.max.wait.msec" => :query,
      :"datasource.name" => :query,
      :"datasource.svc.properties" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :proxy_periodenabled (boolean()): 
    - :proxy_periodhost (String.t): 
    - :proxy_perioduser (String.t): 
    - :proxy_periodpassword (String.t): 
    - :proxy_periodntlm_periodhost (String.t): 
    - :proxy_periodntlm_perioddomain (String.t): 
    - :proxy_periodexceptions ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCommonsHttpclientInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_commons_httpclient(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCommonsHttpclientInfo.t} | {:error, Tesla.Env.t}
  def com_day_commons_httpclient(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"proxy.enabled" => :query,
      :"proxy.host" => :query,
      :"proxy.user" => :query,
      :"proxy.password" => :query,
      :"proxy.ntlm.host" => :query,
      :"proxy.ntlm.domain" => :query,
      :"proxy.exceptions" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.commons.httpclient")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCommonsHttpclientInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodstore_periodlistener_periodadditional_store_paths ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_analytics_impl_store_properties_change_listener(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_analytics_impl_store_properties_change_listener(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.store.listener.additionalStorePaths" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :allowed_periodpaths ([String.t]): 
    - :cq_periodanalytics_periodsaint_periodexporter_periodpagesize (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"allowed.paths" => :query,
      :"cq.analytics.saint.exporter.pagesize" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :report_periodfetch_periodattempts (integer()): 
    - :report_periodfetch_perioddelay (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_analytics_sitecatalyst_impl_importer_report_importer(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_analytics_sitecatalyst_impl_importer_report_importer(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"report.fetch.attempts" => :query,
      :"report.fetch.delay" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodanalytics_periodadapterfactory_periodcontextstores ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.analytics.adapterfactory.contextstores" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodanalytics_periodsitecatalyst_periodservice_perioddatacenter_periodurl ([String.t]): 
    - :devhostnamepatterns ([String.t]): 
    - :connection_periodtimeout (integer()): 
    - :socket_periodtimeout (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.analytics.sitecatalyst.service.datacenter.url" => :query,
      :"devhostnamepatterns" => :query,
      :"connection.timeout" => :query,
      :"socket.timeout" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodanalytics_periodtestandtarget_periodaccountoptionsupdater_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_analytics_testandtarget_impl_account_options_updater(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_analytics_testandtarget_impl_account_options_updater(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.analytics.testandtarget.accountoptionsupdater.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodanalytics_periodtestandtarget_perioddeleteauthoractivitylistener_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.analytics.testandtarget.deleteauthoractivitylistener.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodanalytics_periodtestandtarget_periodpushauthorcampaignpagelistener_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodanalytics_periodtestandtarget_periodsegmentimporter_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_analytics_testandtarget_impl_segment_importer(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_analytics_testandtarget_impl_segment_importer(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.analytics.testandtarget.segmentimporter.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :endpoint_uri (String.t): 
    - :connection_timeout (integer()): 
    - :socket_timeout (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_analytics_testandtarget_impl_service_web_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_analytics_testandtarget_impl_service_web_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"endpointUri" => :query,
      :"connectionTimeout" => :query,
      :"socketTimeout" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :testandtarget_periodendpoint_periodurl (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"testandtarget.endpoint.url" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodanalytics_periodtestandtarget_periodapi_periodurl (String.t): 
    - :cq_periodanalytics_periodtestandtarget_periodtimeout (integer()): 
    - :cq_periodanalytics_periodtestandtarget_periodsockettimeout (integer()): 
    - :cq_periodanalytics_periodtestandtarget_periodrecommendations_periodurl_periodreplace (String.t): 
    - :cq_periodanalytics_periodtestandtarget_periodrecommendations_periodurl_periodreplacewith (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.analytics.testandtarget.api.url" => :query,
      :"cq.analytics.testandtarget.timeout" => :query,
      :"cq.analytics.testandtarget.sockettimeout" => :query,
      :"cq.analytics.testandtarget.recommendations.url.replace" => :query,
      :"cq.analytics.testandtarget.recommendations.url.replacewith" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cug_periodexempted_periodprincipals ([String.t]): 
    - :cug_periodenabled (boolean()): 
    - :cug_periodprincipals_periodregex (String.t): 
    - :cug_periodprincipals_periodreplacement (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAuthImplCugCugSupportImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_auth_impl_cug_cug_support_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAuthImplCugCugSupportImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_auth_impl_cug_cug_support_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cug.exempted.principals" => :query,
      :"cug.enabled" => :query,
      :"cug.principals.regex" => :query,
      :"cug.principals.replacement" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAuthImplCugCugSupportImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :path (String.t): 
    - :service_periodranking (integer()): 
    - :auth_periodloginselector_periodmappings ([String.t]): 
    - :auth_periodloginselector_periodchangepw_periodmappings ([String.t]): 
    - :auth_periodloginselector_perioddefaultloginpage (String.t): 
    - :auth_periodloginselector_perioddefaultchangepwpage (String.t): 
    - :auth_periodloginselector_periodhandle ([String.t]): 
    - :auth_periodloginselector_periodhandle_periodall_periodextensions (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAuthImplLoginSelectorHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_auth_impl_login_selector_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAuthImplLoginSelectorHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_auth_impl_login_selector_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"path" => :query,
      :"service.ranking" => :query,
      :"auth.loginselector.mappings" => :query,
      :"auth.loginselector.changepw.mappings" => :query,
      :"auth.loginselector.defaultloginpage" => :query,
      :"auth.loginselector.defaultchangepwpage" => :query,
      :"auth.loginselector.handle" => :query,
      :"auth.loginselector.handle.all.extensions" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqAuthImplLoginSelectorHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :externalizer_perioddomains ([String.t]): 
    - :externalizer_periodhost (String.t): 
    - :externalizer_periodcontextpath (String.t): 
    - :externalizer_periodencodedpath (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqCommonsImplExternalizerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_commons_impl_externalizer_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqCommonsImplExternalizerImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_commons_impl_externalizer_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"externalizer.domains" => :query,
      :"externalizer.host" => :query,
      :"externalizer.contextpath" => :query,
      :"externalizer.encodedpath" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqCommonsImplExternalizerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :rootmapping_periodtarget (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqCommonsServletsRootMappingServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_commons_servlets_root_mapping_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqCommonsServletsRootMappingServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_commons_servlets_root_mapping_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"rootmapping.target" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqCommonsServletsRootMappingServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :codeupgradetasks ([String.t]): 
    - :codeupgradetaskfilters ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"codeupgradetasks" => :query,
      :"codeupgradetaskfilters" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :upgrade_task_ignore_list ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"upgradeTaskIgnoreList" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :effective_bundle_list_path (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"effectiveBundleListPath" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :contentsync_periodfallback_periodauthorizable (String.t): 
    - :contentsync_periodfallback_periodupdateuser (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqContentsyncImplContentSyncManagerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_contentsync_impl_content_sync_manager_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqContentsyncImplContentSyncManagerImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_contentsync_impl_content_sync_manager_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"contentsync.fallback.authorizable" => :query,
      :"contentsync.fallback.updateuser" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqContentsyncImplContentSyncManagerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :large_file_threshold (integer()): 
    - :large_comment_threshold (integer()): 
    - :cq_perioddam_periodenable_periodext_periodmeta_periodextraction (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCommonsHandlerStandardImageHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_commons_handler_standard_image_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCommonsHandlerStandardImageHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_commons_handler_standard_image_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"large_file_threshold" => :query,
      :"large_comment_threshold" => :query,
      :"cq.dam.enable.ext.meta.extraction" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCommonsHandlerStandardImageHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :xmp_periodfilter_periodapply_whitelist (boolean()): 
    - :xmp_periodfilter_periodwhitelist ([String.t]): 
    - :xmp_periodfilter_periodapply_blacklist (boolean()): 
    - :xmp_periodfilter_periodblacklist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_commons_metadata_xmp_filter_black_white(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_commons_metadata_xmp_filter_black_white(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"xmp.filter.apply_whitelist" => :query,
      :"xmp.filter.whitelist" => :query,
      :"xmp.filter.apply_blacklist" => :query,
      :"xmp.filter.blacklist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :large_periodfile_periodmin (integer()): 
    - :cache_periodapply (boolean()): 
    - :mime_periodtypes ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCommonsUtilImplAssetCacheImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_commons_util_impl_asset_cache_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCommonsUtilImplAssetCacheImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_commons_util_impl_asset_cache_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"large.file.min" => :query,
      :"cache.apply" => :query,
      :"mime.types" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCommonsUtilImplAssetCacheImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodconfig_periodannotation_periodpdf_perioddocument_periodwidth (integer()): 
    - :cq_perioddam_periodconfig_periodannotation_periodpdf_perioddocument_periodheight (integer()): 
    - :cq_perioddam_periodconfig_periodannotation_periodpdf_perioddocument_periodpadding_periodhorizontal (integer()): 
    - :cq_perioddam_periodconfig_periodannotation_periodpdf_perioddocument_periodpadding_periodvertical (integer()): 
    - :cq_perioddam_periodconfig_periodannotation_periodpdf_periodfont_periodsize (integer()): 
    - :cq_perioddam_periodconfig_periodannotation_periodpdf_periodfont_periodcolor (String.t): 
    - :cq_perioddam_periodconfig_periodannotation_periodpdf_periodfont_periodfamily (String.t): 
    - :cq_perioddam_periodconfig_periodannotation_periodpdf_periodfont_periodlight (String.t): 
    - :cq_perioddam_periodconfig_periodannotation_periodpdf_periodmargin_text_image (integer()): 
    - :cq_perioddam_periodconfig_periodannotation_periodpdf_periodmin_image_height (integer()): 
    - :cq_perioddam_periodconfig_periodannotation_periodpdf_periodreview_status_periodwidth (integer()): 
    - :cq_perioddam_periodconfig_periodannotation_periodpdf_periodreview_status_periodcolor_periodapproved (String.t): 
    - :cq_perioddam_periodconfig_periodannotation_periodpdf_periodreview_status_periodcolor_periodrejected (String.t): 
    - :cq_perioddam_periodconfig_periodannotation_periodpdf_periodreview_status_periodcolor_periodchanges_requested (String.t): 
    - :cq_perioddam_periodconfig_periodannotation_periodpdf_periodannotation_marker_periodwidth (integer()): 
    - :cq_perioddam_periodconfig_periodannotation_periodpdf_periodasset_periodminheight (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.config.annotation.pdf.document.width" => :query,
      :"cq.dam.config.annotation.pdf.document.height" => :query,
      :"cq.dam.config.annotation.pdf.document.padding.horizontal" => :query,
      :"cq.dam.config.annotation.pdf.document.padding.vertical" => :query,
      :"cq.dam.config.annotation.pdf.font.size" => :query,
      :"cq.dam.config.annotation.pdf.font.color" => :query,
      :"cq.dam.config.annotation.pdf.font.family" => :query,
      :"cq.dam.config.annotation.pdf.font.light" => :query,
      :"cq.dam.config.annotation.pdf.marginTextImage" => :query,
      :"cq.dam.config.annotation.pdf.minImageHeight" => :query,
      :"cq.dam.config.annotation.pdf.reviewStatus.width" => :query,
      :"cq.dam.config.annotation.pdf.reviewStatus.color.approved" => :query,
      :"cq.dam.config.annotation.pdf.reviewStatus.color.rejected" => :query,
      :"cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested" => :query,
      :"cq.dam.config.annotation.pdf.annotationMarker.width" => :query,
      :"cq.dam.config.annotation.pdf.asset.minheight" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplAssetMoveListenerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_asset_move_listener(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplAssetMoveListenerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_asset_move_listener(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplAssetMoveListenerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :is_enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_assethome_asset_home_page_configuration(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_assethome_asset_home_page_configuration(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"isEnabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodadhoc_periodasset_periodshare_periodprezip_periodmaxcontentsize (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.adhoc.asset.share.prezip.maxcontentsize" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodimage_periodcache_periodmax_periodmemory (integer()): 
    - :cq_perioddam_periodimage_periodcache_periodmax_periodage (integer()): 
    - :cq_perioddam_periodimage_periodcache_periodmax_perioddimension (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplCacheCqBufferedImageCacheInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_cache_cq_buffered_image_cache(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplCacheCqBufferedImageCacheInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_cache_cq_buffered_image_cache(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.image.cache.max.memory" => :query,
      :"cq.dam.image.cache.max.age" => :query,
      :"cq.dam.image.cache.max.dimension" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplCacheCqBufferedImageCacheInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :changeeventlistener_periodobserved_periodpaths ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplDamChangeEventListenerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_dam_change_event_listener(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplDamChangeEventListenerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_dam_change_event_listener(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"changeeventlistener.observed.paths" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplDamChangeEventListenerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scheduler_periodexpression (String.t): 
    - :max_saved_activities (integer()): 
    - :save_interval (integer()): 
    - :enable_activity_purge (boolean()): 
    - :event_types (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplDamEventPurgeServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_dam_event_purge_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplDamEventPurgeServiceInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_dam_event_purge_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scheduler.expression" => :query,
      :"maxSavedActivities" => :query,
      :"saveInterval" => :query,
      :"enableActivityPurge" => :query,
      :"eventTypes" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplDamEventPurgeServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :event_periodfilter (String.t): 
    - :event_periodqueue_periodlength (integer()): 
    - :eventrecorder_periodenabled (boolean()): 
    - :eventrecorder_periodblacklist ([String.t]): 
    - :eventrecorder_periodeventtypes (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplDamEventRecorderImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_dam_event_recorder_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplDamEventRecorderImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_dam_event_recorder_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"event.filter" => :query,
      :"event.queue.length" => :query,
      :"eventrecorder.enabled" => :query,
      :"eventrecorder.blacklist" => :query,
      :"eventrecorder.eventtypes" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplDamEventRecorderImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :event_periodfilter (String.t): 
    - :enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplEventDamEventAuditListenerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_event_dam_event_audit_listener(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplEventDamEventAuditListenerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_event_dam_event_audit_listener(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"event.filter" => :query,
      :"enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplEventDamEventAuditListenerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodexpiry_periodnotification_periodscheduler_periodistimebased (boolean()): 
    - :cq_perioddam_periodexpiry_periodnotification_periodscheduler_periodtimebased_periodrule (String.t): 
    - :cq_perioddam_periodexpiry_periodnotification_periodscheduler_periodperiod_periodrule (integer()): 
    - :send_email (boolean()): 
    - :asset_expired_limit (integer()): 
    - :prior_notification_seconds (integer()): 
    - :cq_perioddam_periodexpiry_periodnotification_periodurl_periodprotocol (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplExpiryNotificationJobImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_expiry_notification_job_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplExpiryNotificationJobImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_expiry_notification_job_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.expiry.notification.scheduler.istimebased" => :query,
      :"cq.dam.expiry.notification.scheduler.timebased.rule" => :query,
      :"cq.dam.expiry.notification.scheduler.period.rule" => :query,
      :"send_email" => :query,
      :"asset_expired_limit" => :query,
      :"prior_notification_seconds" => :query,
      :"cq.dam.expiry.notification.url.protocol" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplExpiryNotificationJobImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :is_enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"isEnabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :skip_periodbufferedcache (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplGfxCommonsGfxRendererInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_gfx_commons_gfx_renderer(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplGfxCommonsGfxRendererInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_gfx_commons_gfx_renderer(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"skip.bufferedcache" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplGfxCommonsGfxRendererInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :mimetype (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplHandlerEpsFormatHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_handler_eps_format_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplHandlerEpsFormatHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_handler_eps_format_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"mimetype" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplHandlerEpsFormatHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :mimetype ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_handler_indesign_format_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_handler_indesign_format_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"mimetype" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodenable_periodext_periodmeta_periodextraction (boolean()): 
    - :large_file_threshold (integer()): 
    - :large_comment_threshold (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplHandlerJpegHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_handler_jpeg_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplHandlerJpegHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_handler_jpeg_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.enable.ext.meta.extraction" => :query,
      :"large_file_threshold" => :query,
      :"large_comment_threshold" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplHandlerJpegHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :xmphandler_periodcq_periodformats ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplHandlerXmpNCommXmpHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplHandlerXmpNCommXmpHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"xmphandler.cq.formats" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplHandlerXmpNCommXmpHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :jmx_periodobjectname (String.t): 
    - :property_periodmeasure_periodenabled (boolean()): 
    - :property_periodname (String.t): 
    - :property_periodmax_periodwait_periodms (integer()): 
    - :property_periodmax_periodrate (float()): 
    - :fulltext_periodmeasure_periodenabled (boolean()): 
    - :fulltext_periodname (String.t): 
    - :fulltext_periodmax_periodwait_periodms (integer()): 
    - :fulltext_periodmax_periodrate (float()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_jmx_asset_index_update_monitor(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_jmx_asset_index_update_monitor(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"jmx.objectname" => :query,
      :"property.measure.enabled" => :query,
      :"property.name" => :query,
      :"property.max.wait.ms" => :query,
      :"property.max.rate" => :query,
      :"fulltext.measure.enabled" => :query,
      :"fulltext.name" => :query,
      :"fulltext.max.wait.ms" => :query,
      :"fulltext.max.rate" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :jmx_periodobjectname (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"jmx.objectname" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :jmx_periodobjectname (String.t): 
    - :active (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"jmx.objectname" => :query,
      :"active" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :operation (String.t): 
    - :email_enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"operation" => :query,
      :"emailEnabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :operation (String.t): 
    - :operation_icon (String.t): 
    - :topic_name (String.t): 
    - :email_enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"operation" => :query,
      :"operationIcon" => :query,
      :"topicName" => :query,
      :"emailEnabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_periodservlet_periodpaths (String.t): 
    - :sling_periodservlet_periodmethods ([String.t]): 
    - :cq_perioddam_periodenable_periodanonymous (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplLightboxLightboxServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_lightbox_lightbox_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplLightboxLightboxServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_lightbox_lightbox_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.servlet.paths" => :query,
      :"sling.servlet.methods" => :query,
      :"cq.dam.enable.anonymous" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplLightboxLightboxServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :granite_data ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_metadata_editor_select_component_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_metadata_editor_select_component_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"granite:data" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodallow_periodall_periodmime (boolean()): 
    - :cq_perioddam_periodallowed_periodasset_periodmimes ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.allow.all.mime" => :query,
      :"cq.dam.allowed.asset.mimes" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_perioddetect_periodasset_periodmime_periodfrom_periodcontent (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.detect.asset.mime.from.content" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodmissingmetadata_periodnotification_periodscheduler_periodistimebased (boolean()): 
    - :cq_perioddam_periodmissingmetadata_periodnotification_periodscheduler_periodtimebased_periodrule (String.t): 
    - :cq_perioddam_periodmissingmetadata_periodnotification_periodscheduler_periodperiod_periodrule (integer()): 
    - :cq_perioddam_periodmissingmetadata_periodnotification_periodrecipient (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplMissingMetadataNotificationJobInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_missing_metadata_notification_job(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplMissingMetadataNotificationJobInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_missing_metadata_notification_job(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.missingmetadata.notification.scheduler.istimebased" => :query,
      :"cq.dam.missingmetadata.notification.scheduler.timebased.rule" => :query,
      :"cq.dam.missingmetadata.notification.scheduler.period.rule" => :query,
      :"cq.dam.missingmetadata.notification.recipient" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplMissingMetadataNotificationJobInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :process_periodlabel (String.t): 
    - :notify_on_complete (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"process.label" => :query,
      :"Notify on Complete" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :mime_types ([String.t]): 
    - :max_extract (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplProcessTextExtractionProcessInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_process_text_extraction_process(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplProcessTextExtractionProcessInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_process_text_extraction_process(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"mimeTypes" => :query,
      :"maxExtract" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplProcessTextExtractionProcessInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :xmp_periodpropagate (boolean()): 
    - :xmp_periodexcludes ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplRenditionMakerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_rendition_maker_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplRenditionMakerImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_rendition_maker_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"xmp.propagate" => :query,
      :"xmp.excludes" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplRenditionMakerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :query_batch_size (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplReportsReportExportServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_reports_report_export_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplReportsReportExportServiceInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_reports_report_export_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"queryBatchSize" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplReportsReportExportServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scheduler_periodexpression (String.t): 
    - :max_saved_reports (integer()): 
    - :time_duration (integer()): 
    - :enable_report_purge (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplReportsReportPurgeServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_reports_report_purge_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplReportsReportPurgeServiceInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_reports_report_purge_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scheduler.expression" => :query,
      :"maxSavedReports" => :query,
      :"timeDuration" => :query,
      :"enableReportPurge" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplReportsReportPurgeServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletAssetDownloadServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_servlet_asset_download_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletAssetDownloadServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_servlet_asset_download_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletAssetDownloadServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodbatch_periodstatus_periodmaxassets (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletAssetStatusServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_servlet_asset_status_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletAssetStatusServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_servlet_asset_status_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.batch.status.maxassets" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletAssetStatusServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodbatch_periodindesign_periodmaxassets (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletAssetXmpSearchServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletAssetXmpSearchServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.batch.indesign.maxassets" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletAssetXmpSearchServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodbatch_periodmetadata_periodasset_perioddefault ([String.t]): 
    - :cq_perioddam_periodbatch_periodmetadata_periodcollection_perioddefault ([String.t]): 
    - :cq_perioddam_periodbatch_periodmetadata_periodmaxresources (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletBatchMetadataServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_servlet_batch_metadata_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletBatchMetadataServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_servlet_batch_metadata_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.batch.metadata.asset.default" => :query,
      :"cq.dam.batch.metadata.collection.default" => :query,
      :"cq.dam.batch.metadata.maxresources" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletBatchMetadataServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_periodservlet_periodresource_types ([String.t]): 
    - :sling_periodservlet_periodmethods ([String.t]): 
    - :cq_perioddam_perioddrm_periodenable (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletBinaryProviderServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_servlet_binary_provider_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletBinaryProviderServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_servlet_binary_provider_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.servlet.resourceTypes" => :query,
      :"sling.servlet.methods" => :query,
      :"cq.dam.drm.enable" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletBinaryProviderServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodbatch_periodcollection_periodproperties ([String.t]): 
    - :cq_perioddam_periodbatch_periodcollection_periodmaxcollections (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletCollectionServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_servlet_collection_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletCollectionServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_servlet_collection_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.batch.collection.properties" => :query,
      :"cq.dam.batch.collection.maxcollections" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletCollectionServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodbatch_periodcollections_periodproperties ([String.t]): 
    - :cq_perioddam_periodbatch_periodcollections_periodlimit (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletCollectionsServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_servlet_collections_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletCollectionsServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_servlet_collections_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.batch.collections.properties" => :query,
      :"cq.dam.batch.collections.limit" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletCollectionsServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :more_info (String.t): 
    - :slashmnt_slashoverlay_slashdam_slashgui_slashcontent_slashassets_slashmoreinfo_periodhtml_slash_dollar_left_curly_bracketpath_right_curly_bracket (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletCompanionServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_servlet_companion_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletCompanionServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_servlet_companion_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"More Info" => :query,
      :"/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletCompanionServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :detect_duplicate (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletCreateAssetServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_servlet_create_asset_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletCreateAssetServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_servlet_create_asset_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"detect_duplicate" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletCreateAssetServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodmime_periodtype_periodblacklist ([String.t]): 
    - :cq_perioddam_periodempty_periodmime (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletDamContentDispositionFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletDamContentDispositionFilterInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.mime.type.blacklist" => :query,
      :"cq.dam.empty.mime" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletDamContentDispositionFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodcore_periodguidlookupfilter_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletGuidLookupFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_servlet_guid_lookup_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletGuidLookupFilterInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_servlet_guid_lookup_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.core.guidlookupfilter.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletGuidLookupFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodsync_periodworkflow_periodid (String.t): 
    - :cq_perioddam_periodsync_periodfolder_periodtypes ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletHealthCheckServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_servlet_health_check_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletHealthCheckServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_servlet_health_check_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.sync.workflow.id" => :query,
      :"cq.dam.sync.folder.types" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletHealthCheckServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_periodservlet_periodresource_types (String.t): 
    - :sling_periodservlet_periodmethods (String.t): 
    - :sling_periodservlet_periodextensions (String.t): 
    - :sling_periodservlet_periodselectors (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletMetadataGetServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_servlet_metadata_get_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletMetadataGetServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_servlet_metadata_get_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.servlet.resourceTypes" => :query,
      :"sling.servlet.methods" => :query,
      :"sling.servlet.extensions" => :query,
      :"sling.servlet.selectors" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletMetadataGetServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_perioddrm_periodenable (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.drm.enable" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_periodservlet_periodresource_types ([String.t]): 
    - :sling_periodservlet_periodmethods (String.t): 
    - :sling_periodservlet_periodselectors (String.t): 
    - :download_periodconfig (String.t): 
    - :view_periodselector (String.t): 
    - :send_email (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletResourceCollectionServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_servlet_resource_collection_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletResourceCollectionServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_servlet_resource_collection_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.servlet.resourceTypes" => :query,
      :"sling.servlet.methods" => :query,
      :"sling.servlet.selectors" => :query,
      :"download.config" => :query,
      :"view.selector" => :query,
      :"send_email" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplServletResourceCollectionServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :create_preview_enabled (boolean()): 
    - :update_preview_enabled (boolean()): 
    - :queue_size (integer()): 
    - :folder_preview_rendition_regex (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"createPreviewEnabled" => :query,
      :"updatePreviewEnabled" => :query,
      :"queueSize" => :query,
      :"folderPreviewRenditionRegex" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodconfig_periodunzip_periodmaxuncompressedsize (integer()): 
    - :cq_perioddam_periodconfig_periodunzip_periodencoding (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplUnzipUnzipConfigInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_impl_unzip_unzip_config(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplUnzipUnzipConfigInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_impl_unzip_unzip_config(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.config.unzip.maxuncompressedsize" => :query,
      :"cq.dam.config.unzip.encoding" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreImplUnzipUnzipConfigInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :process_periodlabel (String.t): 
    - :cq_perioddam_periodenable_periodsha1 (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_process_exif_tool_extract_metadata_process(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_process_exif_tool_extract_metadata_process(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"process.label" => :query,
      :"cq.dam.enable.sha1" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :process_periodlabel (String.t): 
    - :cq_perioddam_periodenable_periodsha1 (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreProcessExtractMetadataProcessInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_process_extract_metadata_process(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreProcessExtractMetadataProcessInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_process_extract_metadata_process(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"process.label" => :query,
      :"cq.dam.enable.sha1" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreProcessExtractMetadataProcessInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :process_periodlabel (String.t): 
    - :cq_perioddam_periodenable_periodsha1 (boolean()): 
    - :cq_perioddam_periodmetadata_periodxssprotected_periodproperties ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreProcessMetadataProcessorProcessInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_core_process_metadata_processor_process(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreProcessMetadataProcessorProcessInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_core_process_metadata_processor_process(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"process.label" => :query,
      :"cq.dam.enable.sha1" => :query,
      :"cq.dam.metadata.xssprotected.properties" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamCoreProcessMetadataProcessorProcessInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :executable_periodsearchpath ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamHandlerFfmpegLocatorImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_handler_ffmpeg_locator_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamHandlerFfmpegLocatorImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_handler_ffmpeg_locator_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"executable.searchpath" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamHandlerFfmpegLocatorImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :event_periodfilter (String.t): 
    - :fontmgr_periodsystem_periodfont_perioddir ([String.t]): 
    - :fontmgr_periodadobe_periodfont_perioddir (String.t): 
    - :fontmgr_periodcustomer_periodfont_perioddir (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"event.filter" => :query,
      :"fontmgr.system.font.dir" => :query,
      :"fontmgr.adobe.font.dir" => :query,
      :"fontmgr.customer.font.dir" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :raster_periodannotation (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamHandlerStandardPdfPdfHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_handler_standard_pdf_pdf_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamHandlerStandardPdfPdfHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_handler_standard_pdf_pdf_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"raster.annotation" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamHandlerStandardPdfPdfHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :raster_periodannotation (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamHandlerStandardPsPostScriptHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_handler_standard_ps_post_script_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamHandlerStandardPsPostScriptHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_handler_standard_ps_post_script_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"raster.annotation" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamHandlerStandardPsPostScriptHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :large_file_threshold (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamHandlerStandardPsdPsdHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_handler_standard_psd_psd_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamHandlerStandardPsdPsdHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_handler_standard_psd_psd_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"large_file_threshold" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamHandlerStandardPsdPsdHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enable_periodmultisession (boolean()): 
    - :ids_periodcc_periodenable (boolean()): 
    - :enable_periodretry (boolean()): 
    - :enable_periodretry_periodscripterror (boolean()): 
    - :externalizer_perioddomain_periodcqhost (String.t): 
    - :externalizer_perioddomain_periodhttp (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamIdsImplIdsJobProcessorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_ids_impl_ids_job_processor(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamIdsImplIdsJobProcessorInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_ids_impl_ids_job_processor(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enable.multisession" => :query,
      :"ids.cc.enable" => :query,
      :"enable.retry" => :query,
      :"enable.retry.scripterror" => :query,
      :"externalizer.domain.cqhost" => :query,
      :"externalizer.domain.http" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamIdsImplIdsJobProcessorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :max_perioderrors_periodto_periodblacklist (integer()): 
    - :retry_periodinterval_periodto_periodwhitelist (integer()): 
    - :connect_periodtimeout (integer()): 
    - :socket_periodtimeout (integer()): 
    - :process_periodlabel (String.t): 
    - :connection_perioduse_periodmax (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamIdsImplIdsPoolManagerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_ids_impl_ids_pool_manager_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamIdsImplIdsPoolManagerImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_ids_impl_ids_pool_manager_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"max.errors.to.blacklist" => :query,
      :"retry.interval.to.whitelist" => :query,
      :"connect.timeout" => :query,
      :"socket.timeout" => :query,
      :"process.label" => :query,
      :"connection.use.max" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamIdsImplIdsPoolManagerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :process_periodlabel (String.t): 
    - :extract_periodpages (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamInddImplHandlerIndesignXmpHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_indd_impl_handler_indesign_xmp_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamInddImplHandlerIndesignXmpHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_indd_impl_handler_indesign_xmp_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"process.label" => :query,
      :"extract.pages" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamInddImplHandlerIndesignXmpHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :snippetcreation_periodmaxcollections (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamInddImplServletSnippetCreationServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamInddImplServletSnippetCreationServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"snippetcreation.maxcollections" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamInddImplServletSnippetCreationServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :process_periodlabel (String.t): 
    - :cq_perioddam_periodindd_periodpages_periodregex (String.t): 
    - :ids_periodjob_perioddecoupled (boolean()): 
    - :ids_periodjob_periodworkflow_periodmodel (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamInddProcessInddMediaExtractProcessInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_indd_process_indd_media_extract_process(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamInddProcessInddMediaExtractProcessInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_indd_process_indd_media_extract_process(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"process.label" => :query,
      :"cq.dam.indd.pages.regex" => :query,
      :"ids.job.decoupled" => :query,
      :"ids.job.workflow.model" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamInddProcessInddMediaExtractProcessInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :batch_periodcommit_periodsize (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_performance_internal_asset_performance_data_handler_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_performance_internal_asset_performance_data_handler_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"batch.commit.size" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scheduler_periodexpression (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_performance_internal_asset_performance_report_sync_job(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_performance_internal_asset_performance_report_sync_job(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scheduler.expression" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :delete_periodzip_periodfile (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"delete.zip.file" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periods7dam_perioddynamicmediaconfigeventlistener_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scheduler_periodexpression (String.t): 
    - :scheduler_periodconcurrent (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scheduler.expression" => :query,
      :"scheduler.concurrent" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_periodpost_periodoperation (String.t): 
    - :sling_periodservlet_periodmethods (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_s7dam_common_post_servlets_set_create_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_s7dam_common_post_servlets_set_create_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.post.operation" => :query,
      :"sling.servlet.methods" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_periodpost_periodoperation (String.t): 
    - :sling_periodservlet_periodmethods (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.post.operation" => :query,
      :"sling.servlet.methods" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :process_periodlabel (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"process.label" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periods7dam_perioddamchangeeventlistener_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.s7dam.damchangeeventlistener.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_periodservlet_periodpaths (String.t): 
    - :sling_periodservlet_periodmethods (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.servlet.paths" => :query,
      :"sling.servlet.methods" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periods7dam_periodvideoproxyclientservice_periodmultipartupload_periodminsize_periodname (integer()): 
    - :cq_perioddam_periods7dam_periodvideoproxyclientservice_periodmultipartupload_periodpartsize_periodname (integer()): 
    - :cq_perioddam_periods7dam_periodvideoproxyclientservice_periodmultipartupload_periodnumthread_periodname (integer()): 
    - :cq_perioddam_periods7dam_periodvideoproxyclientservice_periodhttp_periodreadtimeout_periodname (integer()): 
    - :cq_perioddam_periods7dam_periodvideoproxyclientservice_periodhttp_periodconnectiontimeout_periodname (integer()): 
    - :cq_perioddam_periods7dam_periodvideoproxyclientservice_periodhttp_periodmaxretrycount_periodname (integer()): 
    - :cq_perioddam_periods7dam_periodvideoproxyclientservice_perioduploadprogress_periodinterval_periodname (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name" => :query,
      :"cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name" => :query,
      :"cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name" => :query,
      :"cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name" => :query,
      :"cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name" => :query,
      :"cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name" => :query,
      :"cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodscene7_periodapiclient_periodrecordsperpage_periodnofilter_periodname (integer()): 
    - :cq_perioddam_periodscene7_periodapiclient_periodrecordsperpage_periodwithfilter_periodname (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamScene7ImplScene7ApiClientImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_scene7_impl_scene7_api_client_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamScene7ImplScene7ApiClientImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_scene7_impl_scene7_api_client_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.scene7.apiclient.recordsperpage.nofilter.name" => :query,
      :"cq.dam.scene7.apiclient.recordsperpage.withfilter.name" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamScene7ImplScene7ApiClientImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodscene7_periodassetmimetypeservice_periodmapping ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.scene7.assetmimetypeservice.mapping" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodscene7_periodconfigurationeventlistener_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_scene7_impl_scene7_configuration_event_listener(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_scene7_impl_scene7_configuration_event_listener(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.scene7.configurationeventlistener.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodscene7_perioddamchangeeventlistener_periodenabled (boolean()): 
    - :cq_perioddam_periodscene7_perioddamchangeeventlistener_periodobserved_periodpaths ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.scene7.damchangeeventlistener.enabled" => :query,
      :"cq.dam.scene7.damchangeeventlistener.observed.paths" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scene7_flash_templates_periodrti (String.t): 
    - :scene7_flash_templates_periodrsi (String.t): 
    - :scene7_flash_templates_periodrb (String.t): 
    - :scene7_flash_templates_periodrurl (String.t): 
    - :scene7_flash_template_periodurl_format_parameter (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scene7FlashTemplates.rti" => :query,
      :"scene7FlashTemplates.rsi" => :query,
      :"scene7FlashTemplates.rb" => :query,
      :"scene7FlashTemplates.rurl" => :query,
      :"scene7FlashTemplate.urlFormatParameter" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_perioddam_periodscene7_perioduploadservice_periodactivejobtimeout_periodlabel (integer()): 
    - :cq_perioddam_periodscene7_perioduploadservice_periodconnectionmaxperroute_periodlabel (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamScene7ImplScene7UploadServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_scene7_impl_scene7_upload_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamScene7ImplScene7UploadServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_scene7_impl_scene7_upload_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.dam.scene7.uploadservice.activejobtimeout.label" => :query,
      :"cq.dam.scene7.uploadservice.connectionmaxperroute.label" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamScene7ImplScene7UploadServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :get_cache_expiration_unit (String.t): 
    - :get_cache_expiration_value (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"getCacheExpirationUnit" => :query,
      :"getCacheExpirationValue" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :locale (String.t): 
    - :ims_config (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_stock_integration_impl_configuration_stock_configuration(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_stock_integration_impl_configuration_stock_configuration(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"locale" => :query,
      :"imsConfig" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamVideoImplServletVideoTestServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_dam_video_impl_servlet_video_test_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamVideoImplServletVideoTestServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_dam_video_impl_servlet_video_test_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqDamVideoImplServletVideoTestServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :max_width (integer()): 
    - :max_height (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqExtwidgetServletsImageSpriteServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_extwidget_servlets_image_sprite_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqExtwidgetServletsImageSpriteServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_extwidget_servlets_image_sprite_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"maxWidth" => :query,
      :"maxHeight" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqExtwidgetServletsImageSpriteServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :fontpath ([String.t]): 
    - :oversampling_factor (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqImageInternalFontFontHelperInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_image_internal_font_font_helper(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqImageInternalFontFontHelperInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_image_internal_font_font_helper(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"fontpath" => :query,
      :"oversamplingFactor" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.image.internal.font.FontHelper")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqImageInternalFontFontHelperInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cluster_periodlevel_periodenable (boolean()): 
    - :cluster_periodmaster_periodlevel (integer()): 
    - :cluster_periodslave_periodlevel (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqJcrclustersupportClusterStartLevelControllerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_jcrclustersupport_cluster_start_level_controller(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqJcrclustersupportClusterStartLevelControllerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_jcrclustersupport_cluster_start_level_controller(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cluster.level.enable" => :query,
      :"cluster.master.level" => :query,
      :"cluster.slave.level" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqJcrclustersupportClusterStartLevelControllerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :smtp_periodhost (String.t): 
    - :smtp_periodport (integer()): 
    - :smtp_perioduser (String.t): 
    - :smtp_periodpassword (String.t): 
    - :from_periodaddress (String.t): 
    - :smtp_periodssl (boolean()): 
    - :smtp_periodstarttls (boolean()): 
    - :debug_periodemail (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMailerDefaultMailServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_mailer_default_mail_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMailerDefaultMailServiceInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_mailer_default_mail_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"smtp.host" => :query,
      :"smtp.port" => :query,
      :"smtp.user" => :query,
      :"smtp.password" => :query,
      :"from.address" => :query,
      :"smtp.ssl" => :query,
      :"smtp.starttls" => :query,
      :"debug.email" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.mailer.DefaultMailService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMailerDefaultMailServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :max_periodrecipient_periodcount (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMailerImplCqMailingServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_mailer_impl_cq_mailing_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMailerImplCqMailingServiceInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_mailer_impl_cq_mailing_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"max.recipient.count" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMailerImplCqMailingServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :mailer_periodemail_periodcharset (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_mailer_impl_email_cq_email_template_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_mailer_impl_email_cq_email_template_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"mailer.email.charset" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :mailer_periodemail_periodembed (boolean()): 
    - :mailer_periodemail_periodcharset (String.t): 
    - :mailer_periodemail_periodretriever_user_id (String.t): 
    - :mailer_periodemail_periodretriever_user_pwd (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_mailer_impl_email_cq_retriever_template_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_mailer_impl_email_cq_retriever_template_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"mailer.email.embed" => :query,
      :"mailer.email.charset" => :query,
      :"mailer.email.retrieverUserID" => :query,
      :"mailer.email.retrieverUserPWD" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :aem_periodmcm_periodcampaign_periodform_constraints ([String.t]): 
    - :aem_periodmcm_periodcampaign_periodpublic_url (String.t): 
    - :aem_periodmcm_periodcampaign_periodrelaxed_ssl (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmCampaignImplIntegrationConfigImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_mcm_campaign_impl_integration_config_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmCampaignImplIntegrationConfigImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_mcm_campaign_impl_integration_config_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"aem.mcm.campaign.formConstraints" => :query,
      :"aem.mcm.campaign.publicUrl" => :query,
      :"aem.mcm.campaign.relaxedSSL" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmCampaignImplIntegrationConfigImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_mcm_campaign_importer_personalized_text_handler_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_mcm_campaign_importer_personalized_text_handler_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :from_periodaddress (String.t): 
    - :sender_periodhost (String.t): 
    - :max_periodbounce_periodcount (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_mcm_core_newsletter_newsletter_email_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_mcm_core_newsletter_newsletter_email_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"from.address" => :query,
      :"sender.host" => :query,
      :"max.bounce.count" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :experience_periodindirection ([String.t]): 
    - :touchpoint_periodindirection ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmImplMcmConfigurationInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_mcm_impl_mcm_configuration(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmImplMcmConfigurationInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_mcm_impl_mcm_configuration(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"experience.indirection" => :query,
      :"touchpoint.indirection" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmImplMcmConfigurationInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
    - :component_periodresource_type (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query,
      :"component.resourceType" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
    - :component_periodresource_type (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query,
      :"component.resourceType" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCtaComponentInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCtaComponentInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCtaComponentInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
    - :component_periodresource_type (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query,
      :"component.resourceType" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :event_periodfilter (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqNotificationImplNotificationServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_notification_impl_notification_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqNotificationImplNotificationServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_notification_impl_notification_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"event.filter" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqNotificationImplNotificationServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :forcelocation (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_personalization_impl_servlets_targeting_configuration_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_personalization_impl_servlets_targeting_configuration_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"forcelocation" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :id (String.t): 
    - :enabled (boolean()): 
    - :reference (boolean()): 
    - :interval (integer()): 
    - :expression (String.t): 
    - :source (String.t): 
    - :target (String.t): 
    - :login (String.t): 
    - :password (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqPollingImporterImplManagedPollConfigImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_polling_importer_impl_managed_poll_config_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqPollingImporterImplManagedPollConfigImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_polling_importer_impl_managed_poll_config_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"id" => :query,
      :"enabled" => :query,
      :"reference" => :query,
      :"interval" => :query,
      :"expression" => :query,
      :"source" => :query,
      :"target" => :query,
      :"login" => :query,
      :"password" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqPollingImporterImplManagedPollConfigImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :importer_perioduser (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqPollingImporterImplManagedPollingImporterImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_polling_importer_impl_managed_polling_importer_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqPollingImporterImplManagedPollingImporterImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_polling_importer_impl_managed_polling_importer_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"importer.user" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqPollingImporterImplManagedPollingImporterImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :importer_periodmin_periodinterval (integer()): 
    - :importer_perioduser (String.t): 
    - :exclude_periodpaths ([String.t]): 
    - :include_periodpaths ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqPollingImporterImplPollingImporterImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_polling_importer_impl_polling_importer_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqPollingImporterImplPollingImporterImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_polling_importer_impl_polling_importer_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"importer.min.interval" => :query,
      :"importer.user" => :query,
      :"exclude.paths" => :query,
      :"include.paths" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqPollingImporterImplPollingImporterImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationAuditReplicationEventListenerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_replication_audit_replication_event_listener(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationAuditReplicationEventListenerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_replication_audit_replication_event_listener(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationAuditReplicationEventListenerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :host (String.t): 
    - :port (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationContentStaticContentBuilderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_replication_content_static_content_builder(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationContentStaticContentBuilderInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_replication_content_static_content_builder(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"host" => :query,
      :"port" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationContentStaticContentBuilderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :job_periodtopics (String.t): 
    - :service_user_periodtarget (String.t): 
    - :agent_provider_periodtarget (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplAgentManagerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_replication_impl_agent_manager_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplAgentManagerImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_replication_impl_agent_manager_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"job.topics" => :query,
      :"serviceUser.target" => :query,
      :"agentProvider.target" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplAgentManagerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :binary_periodthreshold (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_replication_impl_content_durbo_binary_less_content_builder(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_replication_impl_content_durbo_binary_less_content_builder(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"binary.threshold" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :preserve_periodhierarchy_periodnodes (boolean()): 
    - :ignore_periodversioning (boolean()): 
    - :import_periodacl (boolean()): 
    - :save_periodthreshold (integer()): 
    - :preserve_perioduser_periodpaths (boolean()): 
    - :preserve_perioduuid (boolean()): 
    - :preserve_perioduuid_periodnodetypes ([String.t]): 
    - :preserve_perioduuid_periodsubtrees ([String.t]): 
    - :auto_periodcommit (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"preserve.hierarchy.nodes" => :query,
      :"ignore.versioning" => :query,
      :"import.acl" => :query,
      :"save.threshold" => :query,
      :"preserve.user.paths" => :query,
      :"preserve.uuid" => :query,
      :"preserve.uuid.nodetypes" => :query,
      :"preserve.uuid.subtrees" => :query,
      :"auto.commit" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :replication_periodcontent_perioduse_file_storage (boolean()): 
    - :replication_periodcontent_periodmax_commit_attempts (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_replication_impl_replication_content_factory_provider_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_replication_impl_replication_content_factory_provider_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"replication.content.useFileStorage" => :query,
      :"replication.content.maxCommitAttempts" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :receiver_periodtmpfile_periodthreshold (integer()): 
    - :receiver_periodpackages_perioduse_periodinstall (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplReplicationReceiverImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_replication_impl_replication_receiver_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplReplicationReceiverImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_replication_impl_replication_receiver_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"receiver.tmpfile.threshold" => :query,
      :"receiver.packages.use.install" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplReplicationReceiverImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :distribute_events (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplReplicatorImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_replication_impl_replicator_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplReplicatorImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_replication_impl_replicator_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"distribute_events" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplReplicatorImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scheduler_periodperiod (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplReverseReplicatorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_replication_impl_reverse_replicator(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplReverseReplicatorInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_replication_impl_reverse_replicator(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scheduler.period" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplReverseReplicatorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :disabled_periodcipher_periodsuites ([String.t]): 
    - :enabled_periodcipher_periodsuites ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_replication_impl_transport_binary_less_transport_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_replication_impl_transport_binary_less_transport_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"disabled.cipher.suites" => :query,
      :"enabled.cipher.suites" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :disabled_periodcipher_periodsuites ([String.t]): 
    - :enabled_periodcipher_periodsuites ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplTransportHttpInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_replication_impl_transport_http(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplTransportHttpInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_replication_impl_transport_http(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"disabled.cipher.suites" => :query,
      :"enabled.cipher.suites" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.replication.impl.transport.Http")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReplicationImplTransportHttpInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :repcache_periodenable (boolean()): 
    - :repcache_periodttl (integer()): 
    - :repcache_periodmax (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReportingImplCacheCacheImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_reporting_impl_cache_cache_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReportingImplCacheCacheImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_reporting_impl_cache_cache_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"repcache.enable" => :query,
      :"repcache.ttl" => :query,
      :"repcache.max" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReportingImplCacheCacheImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :repconf_periodtimezone (String.t): 
    - :repconf_periodlocale (String.t): 
    - :repconf_periodsnapshots (String.t): 
    - :repconf_periodrepdir (String.t): 
    - :repconf_periodhourofday (integer()): 
    - :repconf_periodminofhour (integer()): 
    - :repconf_periodmaxrows (integer()): 
    - :repconf_periodfakedata (boolean()): 
    - :repconf_periodsnapshotuser (String.t): 
    - :repconf_periodenforcesnapshotuser (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReportingImplConfigServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_reporting_impl_config_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReportingImplConfigServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_reporting_impl_config_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"repconf.timezone" => :query,
      :"repconf.locale" => :query,
      :"repconf.snapshots" => :query,
      :"repconf.repdir" => :query,
      :"repconf.hourofday" => :query,
      :"repconf.minofhour" => :query,
      :"repconf.maxrows" => :query,
      :"repconf.fakedata" => :query,
      :"repconf.snapshotuser" => :query,
      :"repconf.enforcesnapshotuser" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReportingImplConfigServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :request_periodlog_periodoutput (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReportingImplRLogAnalyzerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_reporting_impl_r_log_analyzer(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReportingImplRLogAnalyzerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_reporting_impl_r_log_analyzer(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"request.log.output" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqReportingImplRLogAnalyzerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scheduler_periodperiod (integer()): 
    - :scheduler_periodconcurrent (boolean()): 
    - :service_periodbad_link_tolerance_interval (integer()): 
    - :service_periodcheck_override_patterns ([String.t]): 
    - :service_periodcache_broken_internal_links (boolean()): 
    - :service_periodspecial_link_prefix ([String.t]): 
    - :service_periodspecial_link_patterns ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_rewriter_linkchecker_impl_link_checker_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_rewriter_linkchecker_impl_link_checker_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scheduler.period" => :query,
      :"scheduler.concurrent" => :query,
      :"service.bad_link_tolerance_interval" => :query,
      :"service.check_override_patterns" => :query,
      :"service.cache_broken_internal_links" => :query,
      :"service.special_link_prefix" => :query,
      :"service.special_link_patterns" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scheduler_periodperiod (integer()): 
    - :scheduler_periodconcurrent (boolean()): 
    - :good_link_test_interval (integer()): 
    - :bad_link_test_interval (integer()): 
    - :link_unused_interval (integer()): 
    - :connection_periodtimeout (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_rewriter_linkchecker_impl_link_checker_task(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_rewriter_linkchecker_impl_link_checker_task(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scheduler.period" => :query,
      :"scheduler.concurrent" => :query,
      :"good_link_test_interval" => :query,
      :"bad_link_test_interval" => :query,
      :"link_unused_interval" => :query,
      :"connection.timeout" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :linkcheckertransformer_perioddisable_rewriting (boolean()): 
    - :linkcheckertransformer_perioddisable_checking (boolean()): 
    - :linkcheckertransformer_periodmap_cache_size (integer()): 
    - :linkcheckertransformer_periodstrict_extension_check (boolean()): 
    - :linkcheckertransformer_periodstrip_htmlt_extension (boolean()): 
    - :linkcheckertransformer_periodrewrite_elements ([String.t]): 
    - :linkcheckertransformer_periodstrip_extension_path_blacklist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"linkcheckertransformer.disableRewriting" => :query,
      :"linkcheckertransformer.disableChecking" => :query,
      :"linkcheckertransformer.mapCacheSize" => :query,
      :"linkcheckertransformer.strictExtensionCheck" => :query,
      :"linkcheckertransformer.stripHtmltExtension" => :query,
      :"linkcheckertransformer.rewriteElements" => :query,
      :"linkcheckertransformer.stripExtensionPathBlacklist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodmax_links_per_host (integer()): 
    - :service_periodsave_external_link_references (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.max_links_per_host" => :query,
      :"service.save_external_link_references" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :htmlparser_periodprocess_tags ([String.t]): 
    - :htmlparser_periodpreserve_camel_case (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqRewriterProcessorImplHtmlParserFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_rewriter_processor_impl_html_parser_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqRewriterProcessorImplHtmlParserFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_rewriter_processor_impl_html_parser_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"htmlparser.processTags" => :query,
      :"htmlparser.preserveCamelCase" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqRewriterProcessorImplHtmlParserFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :excerpt_periodproperties ([String.t]): 
    - :cache_periodmax_periodentries (integer()): 
    - :cache_periodentry_periodlifetime (integer()): 
    - :xpath_periodunion (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqSearchImplBuilderQueryBuilderImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_search_impl_builder_query_builder_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqSearchImplBuilderQueryBuilderImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_search_impl_builder_query_builder_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"excerpt.properties" => :query,
      :"cache.max.entries" => :query,
      :"cache.entry.lifetime" => :query,
      :"xpath.union" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqSearchImplBuilderQueryBuilderImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :path_builder_periodtarget (String.t): 
    - :suggest_periodbasepath (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_search_suggest_impl_suggestion_index_manager_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_search_suggest_impl_suggestion_index_manager_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"pathBuilder.target" => :query,
      :"suggest.basepath" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodsearchpromote_periodconfighandler_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_searchpromote_impl_publish_search_promote_config_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_searchpromote_impl_publish_search_promote_config_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.searchpromote.confighandler.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodsearchpromote_periodconfiguration_periodserver_perioduri (String.t): 
    - :cq_periodsearchpromote_periodconfiguration_periodenvironment (String.t): 
    - :connection_periodtimeout (integer()): 
    - :socket_periodtimeout (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_searchpromote_impl_search_promote_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_searchpromote_impl_search_promote_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.searchpromote.configuration.server.uri" => :query,
      :"cq.searchpromote.configuration.environment" => :query,
      :"connection.timeout" => :query,
      :"socket.timeout" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodaclsetup_periodrules ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqSecurityAclSetupInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_security_acl_setup(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqSecurityAclSetupInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_security_acl_setup(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.aclsetup.rules" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.security.ACLSetup")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqSecurityAclSetupInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scheduler_periodperiod (integer()): 
    - :scheduler_periodconcurrent (boolean()): 
    - :path (String.t): 
    - :workspace (String.t): 
    - :keywords_path (String.t): 
    - :async_entries (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqStatisticsImplStatisticsServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_statistics_impl_statistics_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqStatisticsImplStatisticsServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_statistics_impl_statistics_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scheduler.period" => :query,
      :"scheduler.concurrent" => :query,
      :"path" => :query,
      :"workspace" => :query,
      :"keywordsPath" => :query,
      :"asyncEntries" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqStatisticsImplStatisticsServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :validation_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqTaggingImplJcrTagManagerFactoryImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_tagging_impl_jcr_tag_manager_factory_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqTaggingImplJcrTagManagerFactoryImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_tagging_impl_jcr_tag_manager_factory_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"validation.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqTaggingImplJcrTagManagerFactoryImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :ignore_path (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_tagging_impl_search_tag_predicate_evaluator(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_tagging_impl_search_tag_predicate_evaluator(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"ignore_path" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scheduler_periodexpression (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqTaggingImplTagGarbageCollectorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_tagging_impl_tag_garbage_collector(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqTaggingImplTagGarbageCollectorInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_tagging_impl_tag_garbage_collector(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scheduler.expression" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqTaggingImplTagGarbageCollectorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodpagesupdatehandler_periodimageresourcetypes ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_contentsync_impl_handler_pages_update_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_contentsync_impl_handler_pages_update_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.pagesupdatehandler.imageresourcetypes" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodcontentsync_periodpathrewritertransformer_periodmapping_periodlinks ([String.t]): 
    - :cq_periodcontentsync_periodpathrewritertransformer_periodmapping_periodclientlibs ([String.t]): 
    - :cq_periodcontentsync_periodpathrewritertransformer_periodmapping_periodimages ([String.t]): 
    - :cq_periodcontentsync_periodpathrewritertransformer_periodattribute_periodpattern (String.t): 
    - :cq_periodcontentsync_periodpathrewritertransformer_periodclientlibrary_periodpattern (String.t): 
    - :cq_periodcontentsync_periodpathrewritertransformer_periodclientlibrary_periodreplace (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.contentsync.pathrewritertransformer.mapping.links" => :query,
      :"cq.contentsync.pathrewritertransformer.mapping.clientlibs" => :query,
      :"cq.contentsync.pathrewritertransformer.mapping.images" => :query,
      :"cq.contentsync.pathrewritertransformer.attribute.pattern" => :query,
      :"cq.contentsync.pathrewritertransformer.clientlibrary.pattern" => :query,
      :"cq.contentsync.pathrewritertransformer.clientlibrary.replace" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :authoring_ui_mode_service_perioddefault (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplAuthoringUiModeServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplAuthoringUiModeServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"authoringUIModeService.default" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplAuthoringUiModeServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :wcmcommandservlet_perioddelete_whitelist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplCommandsWcmCommandServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_commands_wcm_command_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplCommandsWcmCommandServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_commands_wcm_command_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"wcmcommandservlet.delete_whitelist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplCommandsWcmCommandServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :dim_perioddefault_periodmode (String.t): 
    - :dim_periodappcache_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"dim.default.mode" => :query,
      :"dim.appcache.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :configured (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplEventPageEventAuditListenerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_event_page_event_audit_listener(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplEventPageEventAuditListenerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_event_page_event_audit_listener(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"configured" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplEventPageEventAuditListenerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :paths ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplEventPagePostProcessorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_event_page_post_processor(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplEventPagePostProcessorInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_event_page_post_processor(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"paths" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplEventPagePostProcessorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :paths ([String.t]): 
    - :excluded_paths ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_event_repository_change_event_listener(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_event_repository_change_event_listener(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"paths" => :query,
      :"excludedPaths" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :paths (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplEventTemplatePostProcessorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_event_template_post_processor(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplEventTemplatePostProcessorInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_event_template_post_processor(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"paths" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplEventTemplatePostProcessorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :langmgr_periodlist_periodpath (String.t): 
    - :langmgr_periodcountry_perioddefault ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplLanguageManagerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_language_manager_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplLanguageManagerImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_language_manager_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"langmgr.list.path" => :query,
      :"langmgr.country.default" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplLanguageManagerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :link_periodexpired_periodprefix (String.t): 
    - :link_periodexpired_periodremove (boolean()): 
    - :link_periodexpired_periodsuffix (String.t): 
    - :link_periodinvalid_periodprefix (String.t): 
    - :link_periodinvalid_periodremove (boolean()): 
    - :link_periodinvalid_periodsuffix (String.t): 
    - :link_periodpredated_periodprefix (String.t): 
    - :link_periodpredated_periodremove (boolean()): 
    - :link_periodpredated_periodsuffix (String.t): 
    - :link_periodwcmmodes ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"link.expired.prefix" => :query,
      :"link.expired.remove" => :query,
      :"link.expired.suffix" => :query,
      :"link.invalid.prefix" => :query,
      :"link.invalid.remove" => :query,
      :"link.invalid.suffix" => :query,
      :"link.predated.prefix" => :query,
      :"link.predated.remove" => :query,
      :"link.predated.suffix" => :query,
      :"link.wcmmodes" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :page_periodinfo_periodprovider_periodproperty_periodregex_perioddefault (String.t): 
    - :page_periodinfo_periodprovider_periodproperty_periodname (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_page_page_info_aggregator_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_page_page_info_aggregator_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"page.info.provider.property.regex.default" => :query,
      :"page.info.provider.property.name" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :illegal_char_mapping (String.t): 
    - :page_sub_tree_activation_check (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_page_page_manager_factory_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_page_page_manager_factory_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"illegalCharMapping" => :query,
      :"pageSubTreeActivationCheck" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :content_reference_config_periodresource_types ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_references_content_content_reference_config(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_references_content_content_reference_config(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"contentReferenceConfig.resourceTypes" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :dam_periodshowexpired (boolean()): 
    - :dam_periodshowhidden (boolean()): 
    - :tag_title_search (boolean()): 
    - :guess_total (String.t): 
    - :dam_periodexpiry_property (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"dam.showexpired" => :query,
      :"dam.showhidden" => :query,
      :"tagTitleSearch" => :query,
      :"guessTotal" => :query,
      :"dam.expiryProperty" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :item_periodresource_periodtypes ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"item.resource.types" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :guess_total (String.t): 
    - :tag_title_search (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"guessTotal" => :query,
      :"tagTitleSearch" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scope ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplServletsFindReplaceServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_servlets_find_replace_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplServletsFindReplaceServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_servlets_find_replace_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scope" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplServletsFindReplaceServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :referencesearchservlet_periodmax_references_per_page (integer()): 
    - :referencesearchservlet_periodmax_pages (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplServletsReferenceSearchServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_servlets_reference_search_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplServletsReferenceSearchServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_servlets_reference_search_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"referencesearchservlet.maxReferencesPerPage" => :query,
      :"referencesearchservlet.maxPages" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplServletsReferenceSearchServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :workspace (String.t): 
    - :dimensions ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplServletsThumbnailServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_servlets_thumbnail_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplServletsThumbnailServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_servlets_thumbnail_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"workspace" => :query,
      :"dimensions" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplServletsThumbnailServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :non_valid_chars (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_utils_default_page_name_validator(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_utils_default_page_name_validator(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"nonValidChars" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :default_periodexternalizer_perioddomain (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_variants_page_variants_provider_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_variants_page_variants_provider_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"default.externalizer.domain" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :versionmanager_periodcreate_version_on_activation (boolean()): 
    - :versionmanager_periodpurging_enabled (boolean()): 
    - :versionmanager_periodpurge_paths ([String.t]): 
    - :versionmanager_periodiv_paths ([String.t]): 
    - :versionmanager_periodmax_age_days (integer()): 
    - :versionmanager_periodmax_number_versions (integer()): 
    - :versionmanager_periodmin_number_versions (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplVersionManagerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_version_manager_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplVersionManagerImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_version_manager_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"versionmanager.createVersionOnActivation" => :query,
      :"versionmanager.purgingEnabled" => :query,
      :"versionmanager.purgePaths" => :query,
      :"versionmanager.ivPaths" => :query,
      :"versionmanager.maxAgeDays" => :query,
      :"versionmanager.maxNumberVersions" => :query,
      :"versionmanager.minNumberVersions" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplVersionManagerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :versionpurge_periodpaths ([String.t]): 
    - :versionpurge_periodrecursive (boolean()): 
    - :versionpurge_periodmax_versions (integer()): 
    - :versionpurge_periodmin_versions (integer()): 
    - :versionpurge_periodmax_age_days (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplVersionPurgeTaskInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_version_purge_task(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplVersionPurgeTaskInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_version_purge_task(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"versionpurge.paths" => :query,
      :"versionpurge.recursive" => :query,
      :"versionpurge.maxVersions" => :query,
      :"versionpurge.minVersions" => :query,
      :"versionpurge.maxAgeDays" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplVersionPurgeTaskInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :wcmdbgfilter_periodenabled (boolean()): 
    - :wcmdbgfilter_periodjsp_debug (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplWcmDebugFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_wcm_debug_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplWcmDebugFilterInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_wcm_debug_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"wcmdbgfilter.enabled" => :query,
      :"wcmdbgfilter.jspDebug" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplWcmDebugFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :wcmdevmodefilter_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplWcmDeveloperModeFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_wcm_developer_mode_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplWcmDeveloperModeFilterInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_wcm_developer_mode_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"wcmdevmodefilter.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplWcmDeveloperModeFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :filter_periodorder (String.t): 
    - :filter_periodscope (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplWarpTimeWarpFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_impl_warp_time_warp_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplWarpTimeWarpFilterInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_impl_warp_time_warp_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"filter.order" => :query,
      :"filter.scope" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreImplWarpTimeWarpFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :mvtstatistics_periodtrackingurl (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreMvtMvtStatisticsImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_mvt_mvt_statistics_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreMvtMvtStatisticsImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_mvt_mvt_statistics_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"mvtstatistics.trackingurl" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreMvtMvtStatisticsImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :pageviewstatistics_periodtrackingurl (String.t): 
    - :pageviewstatistics_periodtrackingscript_periodenabled (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreStatsPageViewStatisticsImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_stats_page_view_statistics_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreStatsPageViewStatisticsImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_stats_page_view_statistics_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"pageviewstatistics.trackingurl" => :query,
      :"pageviewstatistics.trackingscript.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreStatsPageViewStatisticsImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :wcmfilter_periodmode (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreWcmRequestFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_core_wcm_request_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreWcmRequestFilterInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_core_wcm_request_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"wcmfilter.mode" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmCoreWcmRequestFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :extract_periodfilter ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterDesignPackageImporterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_design_package_importer(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterDesignPackageImporterInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_design_package_importer(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"extract.filter" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterDesignPackageImporterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :filepattern (String.t): 
    - :build_periodpage_periodnodes (boolean()): 
    - :build_periodclient_periodlibs (boolean()): 
    - :build_periodcanvas_periodcomponent (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_impl_canvas_builder_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_impl_canvas_builder_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"filepattern" => :query,
      :"build.page.nodes" => :query,
      :"build.client.libs" => :query,
      :"build.canvas.component" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :min_thread_pool_size (integer()): 
    - :max_thread_pool_size (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"minThreadPoolSize" => :query,
      :"maxThreadPoolSize" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :search_periodpattern (String.t): 
    - :replace_periodpattern (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"search.pattern" => :query,
      :"replace.pattern" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :filepattern (String.t): 
    - :device_periodgroups ([String.t]): 
    - :build_periodpage_periodnodes (boolean()): 
    - :build_periodclient_periodlibs (boolean()): 
    - :build_periodcanvas_periodcomponent (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"filepattern" => :query,
      :"device.groups" => :query,
      :"build.page.nodes" => :query,
      :"build.client.libs" => :query,
      :"build.canvas.component" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
    - :component_periodresource_type (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query,
      :"component.resourceType" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
    - :component_periodresource_type (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query,
      :"component.resourceType" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
    - :component_periodresource_type (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query,
      :"component.resourceType" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
    - :component_periodresource_type (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query,
      :"component.resourceType" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :tagpattern (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"tagpattern" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodname (String.t): 
    - :sling_periodservlet_periodresource_types (String.t): 
    - :sling_periodservlet_periodselectors (String.t): 
    - :sling_periodservlet_periodmethods ([String.t]): 
    - :forms_periodformchooserservlet_periodadvansesearch_periodrequire (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationFormsImplFormChooserServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationFormsImplFormChooserServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.name" => :query,
      :"sling.servlet.resourceTypes" => :query,
      :"sling.servlet.selectors" => :query,
      :"sling.servlet.methods" => :query,
      :"forms.formchooserservlet.advansesearch.require" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationFormsImplFormChooserServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :forms_periodformparagraphpostprocessor_periodenabled (boolean()): 
    - :forms_periodformparagraphpostprocessor_periodformresourcetypes ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"forms.formparagraphpostprocessor.enabled" => :query,
      :"forms.formparagraphpostprocessor.formresourcetypes" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name_periodwhitelist (String.t): 
    - :allow_periodexpressions (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name.whitelist" => :query,
      :"allow.expressions" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_periodservlet_periodresource_types (String.t): 
    - :sling_periodservlet_periodselectors (String.t): 
    - :resource_periodwhitelist ([String.t]): 
    - :resource_periodblacklist (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationFormsImplMailServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_foundation_forms_impl_mail_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationFormsImplMailServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_foundation_forms_impl_mail_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.servlet.resourceTypes" => :query,
      :"sling.servlet.selectors" => :query,
      :"resource.whitelist" => :query,
      :"resource.blacklist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationFormsImplMailServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :adapt_periodsupported_periodwidths ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"adapt.supported.widths" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :path (String.t): 
    - :auth_periodhttp_periodnologin (boolean()): 
    - :auth_periodhttp_periodrealm (String.t): 
    - :auth_perioddefault_periodloginpage (String.t): 
    - :auth_periodcred_periodform ([String.t]): 
    - :auth_periodcred_periodutf8 ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationImplHttpAuthHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_foundation_impl_http_auth_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationImplHttpAuthHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_foundation_impl_http_auth_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"path" => :query,
      :"auth.http.nologin" => :query,
      :"auth.http.realm" => :query,
      :"auth.default.loginpage" => :query,
      :"auth.cred.form" => :query,
      :"auth.cred.utf8" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationImplHttpAuthHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_periodauth_periodrequirements (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationImplPageImpressionsTrackerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_foundation_impl_page_impressions_tracker(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationImplPageImpressionsTrackerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_foundation_impl_page_impressions_tracker(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.auth.requirements" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationImplPageImpressionsTrackerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :excluded_periodresource_periodtypes ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationImplPageRedirectServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_foundation_impl_page_redirect_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationImplPageRedirectServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_foundation_impl_page_redirect_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"excluded.resource.types" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationImplPageRedirectServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :default_periodattachment_periodtype_periodblacklist ([String.t]): 
    - :baseline_periodattachment_periodtype_periodblacklist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"default.attachment.type.blacklist" => :query,
      :"baseline.attachment.type.blacklist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :parameter_periodwhitelist ([String.t]): 
    - :parameter_periodwhitelist_periodprefixes ([String.t]): 
    - :binary_periodparameter_periodwhitelist ([String.t]): 
    - :modifier_periodwhitelist ([String.t]): 
    - :operation_periodwhitelist ([String.t]): 
    - :operation_periodwhitelist_periodprefixes ([String.t]): 
    - :typehint_periodwhitelist ([String.t]): 
    - :resourcetype_periodwhitelist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"parameter.whitelist" => :query,
      :"parameter.whitelist.prefixes" => :query,
      :"binary.parameter.whitelist" => :query,
      :"modifier.whitelist" => :query,
      :"operation.whitelist" => :query,
      :"operation.whitelist.prefixes" => :query,
      :"typehint.whitelist" => :query,
      :"resourcetype.whitelist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :device_periodinfo_periodtransformer_periodenabled (boolean()): 
    - :device_periodinfo_periodtransformer_periodcss_periodstyle (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"device.info.transformer.enabled" => :query,
      :"device.info.transformer.css.style" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :redirect_periodenabled (boolean()): 
    - :redirect_periodstats_periodenabled (boolean()): 
    - :redirect_periodextensions ([String.t]): 
    - :redirect_periodpaths ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"redirect.enabled" => :query,
      :"redirect.stats.enabled" => :query,
      :"redirect.extensions" => :query,
      :"redirect.paths" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludednodetypes ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludedparagraphitems ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludedprops ([String.t]): 
    - :contentcopyaction_periodorder_periodstyle (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_msm_impl_actions_content_copy_action_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_msm_impl_actions_content_copy_action_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.wcm.msm.action.excludednodetypes" => :query,
      :"cq.wcm.msm.action.excludedparagraphitems" => :query,
      :"cq.wcm.msm.action.excludedprops" => :query,
      :"contentcopyaction.order.style" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludednodetypes ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludedparagraphitems ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludedprops ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_msm_impl_actions_content_delete_action_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_msm_impl_actions_content_delete_action_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.wcm.msm.action.excludednodetypes" => :query,
      :"cq.wcm.msm.action.excludedparagraphitems" => :query,
      :"cq.wcm.msm.action.excludedprops" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludednodetypes ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludedparagraphitems ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludedprops ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodignored_mixin ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_msm_impl_actions_content_update_action_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_msm_impl_actions_content_update_action_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.wcm.msm.action.excludednodetypes" => :query,
      :"cq.wcm.msm.action.excludedparagraphitems" => :query,
      :"cq.wcm.msm.action.excludedprops" => :query,
      :"cq.wcm.msm.action.ignoredMixin" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludednodetypes ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludedparagraphitems ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludedprops ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_msm_impl_actions_order_children_action_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_msm_impl_actions_order_children_action_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.wcm.msm.action.excludednodetypes" => :query,
      :"cq.wcm.msm.action.excludedparagraphitems" => :query,
      :"cq.wcm.msm.action.excludedprops" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludednodetypes ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludedparagraphitems ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludedprops ([String.t]): 
    - :cq_periodwcm_periodmsm_periodimpl_periodactions_periodpagemove_periodprop_reference_update (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_msm_impl_actions_page_move_action_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_msm_impl_actions_page_move_action_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.wcm.msm.action.excludednodetypes" => :query,
      :"cq.wcm.msm.action.excludedparagraphitems" => :query,
      :"cq.wcm.msm.action.excludedprops" => :query,
      :"cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludednodetypes ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludedparagraphitems ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludedprops ([String.t]): 
    - :cq_periodwcm_periodmsm_periodimpl_periodaction_periodreferencesupdate_periodprop_update_nested (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_msm_impl_actions_references_update_action_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_msm_impl_actions_references_update_action_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.wcm.msm.action.excludednodetypes" => :query,
      :"cq.wcm.msm.action.excludedparagraphitems" => :query,
      :"cq.wcm.msm.action.excludedprops" => :query,
      :"cq.wcm.msm.impl.action.referencesupdate.prop_updateNested" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludednodetypes ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludedparagraphitems ([String.t]): 
    - :cq_periodwcm_periodmsm_periodaction_periodexcludedprops ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_msm_impl_actions_version_copy_action_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_msm_impl_actions_version_copy_action_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.wcm.msm.action.excludednodetypes" => :query,
      :"cq.wcm.msm.action.excludedparagraphitems" => :query,
      :"cq.wcm.msm.action.excludedprops" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :liverelationshipmgr_periodrelationsconfig_perioddefault (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_msm_impl_live_relationship_manager_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_msm_impl_live_relationship_manager_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"liverelationshipmgr.relationsconfig.default" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :event_periodfilter (String.t): 
    - :rolloutmgr_periodexcludedprops_perioddefault ([String.t]): 
    - :rolloutmgr_periodexcludedparagraphprops_perioddefault ([String.t]): 
    - :rolloutmgr_periodexcludednodetypes_perioddefault ([String.t]): 
    - :rolloutmgr_periodthreadpool_periodmaxsize (integer()): 
    - :rolloutmgr_periodthreadpool_periodmaxshutdowntime (integer()): 
    - :rolloutmgr_periodthreadpool_periodpriority (String.t): 
    - :rolloutmgr_periodcommit_periodsize (integer()): 
    - :rolloutmgr_periodconflicthandling_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplRolloutManagerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_msm_impl_rollout_manager_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplRolloutManagerImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_msm_impl_rollout_manager_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"event.filter" => :query,
      :"rolloutmgr.excludedprops.default" => :query,
      :"rolloutmgr.excludedparagraphprops.default" => :query,
      :"rolloutmgr.excludednodetypes.default" => :query,
      :"rolloutmgr.threadpool.maxsize" => :query,
      :"rolloutmgr.threadpool.maxshutdowntime" => :query,
      :"rolloutmgr.threadpool.priority" => :query,
      :"rolloutmgr.commit.size" => :query,
      :"rolloutmgr.conflicthandling.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplRolloutManagerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :auditlogservlet_perioddefault_periodevents_periodcount (integer()): 
    - :auditlogservlet_perioddefault_periodpath (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplServletsAuditLogServletInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_msm_impl_servlets_audit_log_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplServletsAuditLogServletInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_msm_impl_servlets_audit_log_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"auditlogservlet.default.events.count" => :query,
      :"auditlogservlet.default.path" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmMsmImplServletsAuditLogServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :email_periodfrom (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmNotificationEmailImplEmailChannelInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_notification_email_impl_email_channel(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmNotificationEmailImplEmailChannelInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_notification_email_impl_email_channel(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"email.from" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmNotificationEmailImplEmailChannelInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :event_periodtopics ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmNotificationImplNotificationManagerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_notification_impl_notification_manager_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmNotificationImplNotificationManagerImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_notification_impl_notification_manager_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"event.topics" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmNotificationImplNotificationManagerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :com_periodday_periodcq_periodwcm_periodscripting_periodbvp_periodscript_periodengines ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmScriptingImplBvpManagerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_scripting_impl_bvp_manager(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmScriptingImplBvpManagerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_scripting_impl_bvp_manager(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"com.day.cq.wcm.scripting.bvp.script.engines" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmScriptingImplBvpManagerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cq_periodwcm_periodundo_periodenabled (boolean()): 
    - :cq_periodwcm_periodundo_periodpath (String.t): 
    - :cq_periodwcm_periodundo_periodvalidity (integer()): 
    - :cq_periodwcm_periodundo_periodsteps (integer()): 
    - :cq_periodwcm_periodundo_periodpersistence (String.t): 
    - :cq_periodwcm_periodundo_periodpersistence_periodmode (boolean()): 
    - :cq_periodwcm_periodundo_periodmarkermode (String.t): 
    - :cq_periodwcm_periodundo_periodwhitelist ([String.t]): 
    - :cq_periodwcm_periodundo_periodblacklist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmUndoUndoConfigInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_undo_undo_config(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmUndoUndoConfigInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_undo_undo_config(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cq.wcm.undo.enabled" => :query,
      :"cq.wcm.undo.path" => :query,
      :"cq.wcm.undo.validity" => :query,
      :"cq.wcm.undo.steps" => :query,
      :"cq.wcm.undo.persistence" => :query,
      :"cq.wcm.undo.persistence.mode" => :query,
      :"cq.wcm.undo.markermode" => :query,
      :"cq.wcm.undo.whitelist" => :query,
      :"cq.wcm.undo.blacklist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmUndoUndoConfigInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :flush_agents ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_webservicesupport_impl_replication_event_listener(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_webservicesupport_impl_replication_event_listener(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"Flush agents" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :event_periodfilter (String.t): 
    - :min_thread_pool_size (integer()): 
    - :max_thread_pool_size (integer()): 
    - :cq_periodwcm_periodworkflow_periodterminate_periodon_periodactivate (boolean()): 
    - :cq_periodwcm_periodworklfow_periodterminate_periodexclusion_periodlist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"event.filter" => :query,
      :"minThreadPoolSize" => :query,
      :"maxThreadPoolSize" => :query,
      :"cq.wcm.workflow.terminate.on.activate" => :query,
      :"cq.wcm.worklfow.terminate.exclusion.list" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :workflowpackageinfoprovider_periodfilter ([String.t]): 
    - :workflowpackageinfoprovider_periodfilter_periodrootpath (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_wcm_workflow_impl_workflow_package_info_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_wcm_workflow_impl_workflow_package_info_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"workflowpackageinfoprovider.filter" => :query,
      :"workflowpackageinfoprovider.filter.rootpath" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :htmllibmanager_periodclientmanager (String.t): 
    - :htmllibmanager_perioddebug (boolean()): 
    - :htmllibmanager_perioddebug_periodconsole (boolean()): 
    - :htmllibmanager_perioddebug_periodinit_periodjs (String.t): 
    - :htmllibmanager_perioddefaultthemename (String.t): 
    - :htmllibmanager_perioddefaultuserthemename (String.t): 
    - :htmllibmanager_periodfirebuglite_periodpath (String.t): 
    - :htmllibmanager_periodforce_cq_url_info (boolean()): 
    - :htmllibmanager_periodgzip (boolean()): 
    - :htmllibmanager_periodmaxage (integer()): 
    - :htmllibmanager_periodmax_data_uri_size (integer()): 
    - :htmllibmanager_periodminify (boolean()): 
    - :htmllibmanager_periodpath_periodlist ([String.t]): 
    - :htmllibmanager_periodtiming (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWidgetImplHtmlLibraryManagerImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_widget_impl_html_library_manager_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWidgetImplHtmlLibraryManagerImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_widget_impl_html_library_manager_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"htmllibmanager.clientmanager" => :query,
      :"htmllibmanager.debug" => :query,
      :"htmllibmanager.debug.console" => :query,
      :"htmllibmanager.debug.init.js" => :query,
      :"htmllibmanager.defaultthemename" => :query,
      :"htmllibmanager.defaultuserthemename" => :query,
      :"htmllibmanager.firebuglite.path" => :query,
      :"htmllibmanager.forceCQUrlInfo" => :query,
      :"htmllibmanager.gzip" => :query,
      :"htmllibmanager.maxage" => :query,
      :"htmllibmanager.maxDataUriSize" => :query,
      :"htmllibmanager.minify" => :query,
      :"htmllibmanager.path.list" => :query,
      :"htmllibmanager.timing" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWidgetImplHtmlLibraryManagerImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :extendable_periodwidgets ([String.t]): 
    - :widgetextensionprovider_perioddebug (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWidgetImplWidgetExtensionProviderImplInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_widget_impl_widget_extension_provider_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWidgetImplWidgetExtensionProviderImplInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_widget_impl_widget_extension_provider_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"extendable.widgets" => :query,
      :"widgetextensionprovider.debug" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWidgetImplWidgetExtensionProviderImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :from_periodaddress (String.t): 
    - :host_periodprefix (String.t): 
    - :notify_periodonabort (boolean()): 
    - :notify_periodoncomplete (boolean()): 
    - :notify_periodoncontainercomplete (boolean()): 
    - :notify_perioduseronly (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWorkflowImplEmailEMailNotificationServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_workflow_impl_email_e_mail_notification_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWorkflowImplEmailEMailNotificationServiceInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_workflow_impl_email_e_mail_notification_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"from.address" => :query,
      :"host.prefix" => :query,
      :"notify.onabort" => :query,
      :"notify.oncomplete" => :query,
      :"notify.oncontainercomplete" => :query,
      :"notify.useronly" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWorkflowImplEmailEMailNotificationServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :notify_periodonupdate (boolean()): 
    - :notify_periodoncomplete (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_cq_workflow_impl_email_task_e_mail_notification_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo.t} | {:error, Tesla.Env.t}
  def com_day_cq_workflow_impl_email_task_e_mail_notification_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"notify.onupdate" => :query,
      :"notify.oncomplete" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :path (String.t): 
    - :token_periodrequired_periodattr (String.t): 
    - :token_periodalternate_periodurl (String.t): 
    - :token_periodencapsulated (boolean()): 
    - :skip_periodtoken_periodrefresh ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_crx_security_token_impl_impl_token_authentication_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo.t} | {:error, Tesla.Env.t}
  def com_day_crx_security_token_impl_impl_token_authentication_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"path" => :query,
      :"token.required.attr" => :query,
      :"token.alternate.url" => :query,
      :"token.encapsulated" => :query,
      :"skip.token.refresh" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enable_periodtoken_periodcleanup_periodtask (boolean()): 
    - :scheduler_periodexpression (String.t): 
    - :batch_periodsize (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCrxSecurityTokenImplTokenCleanupTaskInfo{}} on success
  {:error, info} on failure
  """
  @spec com_day_crx_security_token_impl_token_cleanup_task(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCrxSecurityTokenImplTokenCleanupTaskInfo.t} | {:error, Tesla.Env.t}
  def com_day_crx_security_token_impl_token_cleanup_task(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enable.token.cleanup.task" => :query,
      :"scheduler.expression" => :query,
      :"batch.size" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.ComDayCrxSecurityTokenImplTokenCleanupTaskInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :supported_locales ([String.t]): 
    - :localizable_properties ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.GuideLocalizationServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec guide_localization_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.GuideLocalizationServiceInfo.t} | {:error, Tesla.Env.t}
  def guide_localization_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"supportedLocales" => :query,
      :"Localizable Properties" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/Guide Localization Service")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.GuideLocalizationServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :priority (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.MessagingUserComponentFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec messaging_user_component_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.MessagingUserComponentFactoryInfo.t} | {:error, Tesla.Env.t}
  def messaging_user_component_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"priority" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/MessagingUserComponentFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.MessagingUserComponentFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :attribute_change_notification_enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheAriesJmxFrameworkStateConfigInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_aries_jmx_framework_state_config(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheAriesJmxFrameworkStateConfigInfo.t} | {:error, Tesla.Env.t}
  def org_apache_aries_jmx_framework_state_config(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"attributeChangeNotificationEnabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheAriesJmxFrameworkStateConfigInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :org_periodapache_periodfelix_periodeventadmin_period_thread_pool_size (integer()): 
    - :org_periodapache_periodfelix_periodeventadmin_period_async_to_sync_thread_ratio (float()): 
    - :org_periodapache_periodfelix_periodeventadmin_period_timeout (integer()): 
    - :org_periodapache_periodfelix_periodeventadmin_period_require_topic (boolean()): 
    - :org_periodapache_periodfelix_periodeventadmin_period_ignore_timeout ([String.t]): 
    - :org_periodapache_periodfelix_periodeventadmin_period_ignore_topic ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixEventadminImplEventAdminInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_felix_eventadmin_impl_event_admin(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixEventadminImplEventAdminInfo.t} | {:error, Tesla.Env.t}
  def org_apache_felix_eventadmin_impl_event_admin(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"org.apache.felix.eventadmin.ThreadPoolSize" => :query,
      :"org.apache.felix.eventadmin.AsyncToSyncThreadRatio" => :query,
      :"org.apache.felix.eventadmin.Timeout" => :query,
      :"org.apache.felix.eventadmin.RequireTopic" => :query,
      :"org.apache.felix.eventadmin.IgnoreTimeout" => :query,
      :"org.apache.felix.eventadmin.IgnoreTopic" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixEventadminImplEventAdminInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :org_periodapache_periodfelix_periodhttp_periodhost (String.t): 
    - :org_periodapache_periodfelix_periodhttp_periodenable (boolean()): 
    - :org_periodosgi_periodservice_periodhttp_periodport (integer()): 
    - :org_periodapache_periodfelix_periodhttp_periodtimeout (integer()): 
    - :org_periodapache_periodfelix_periodhttps_periodenable (boolean()): 
    - :org_periodosgi_periodservice_periodhttp_periodport_periodsecure (integer()): 
    - :org_periodapache_periodfelix_periodhttps_periodkeystore (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodkeystore_periodpassword (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodkeystore_periodkey_periodpassword (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodtruststore (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodtruststore_periodpassword (String.t): 
    - :org_periodapache_periodfelix_periodhttps_periodclientcertificate (String.t): 
    - :org_periodapache_periodfelix_periodhttp_periodcontext_path (String.t): 
    - :org_periodapache_periodfelix_periodhttp_periodmbeans (boolean()): 
    - :org_periodapache_periodfelix_periodhttp_periodsession_periodtimeout (integer()): 
    - :org_periodapache_periodfelix_periodhttp_periodjetty_periodthreadpool_periodmax (integer()): 
    - :org_periodapache_periodfelix_periodhttp_periodjetty_periodacceptors (integer()): 
    - :org_periodapache_periodfelix_periodhttp_periodjetty_periodselectors (integer()): 
    - :org_periodapache_periodfelix_periodhttp_periodjetty_periodheader_buffer_size (integer()): 
    - :org_periodapache_periodfelix_periodhttp_periodjetty_periodrequest_buffer_size (integer()): 
    - :org_periodapache_periodfelix_periodhttp_periodjetty_periodresponse_buffer_size (integer()): 
    - :org_periodapache_periodfelix_periodhttp_periodjetty_periodmax_form_size (integer()): 
    - :org_periodapache_periodfelix_periodhttp_periodpath_exclusions ([String.t]): 
    - :org_periodapache_periodfelix_periodhttps_periodjetty_periodciphersuites_periodexcluded ([String.t]): 
    - :org_periodapache_periodfelix_periodhttps_periodjetty_periodciphersuites_periodincluded ([String.t]): 
    - :org_periodapache_periodfelix_periodhttp_periodjetty_periodsend_server_header (boolean()): 
    - :org_periodapache_periodfelix_periodhttps_periodjetty_periodprotocols_periodincluded ([String.t]): 
    - :org_periodapache_periodfelix_periodhttps_periodjetty_periodprotocols_periodexcluded ([String.t]): 
    - :org_periodapache_periodfelix_periodproxy_periodload_periodbalancer_periodconnection_periodenable (boolean()): 
    - :org_periodapache_periodfelix_periodhttps_periodjetty_periodrenegotiate_allowed (boolean()): 
    - :org_periodapache_periodfelix_periodhttps_periodjetty_periodsession_periodcookie_periodhttp_only (boolean()): 
    - :org_periodapache_periodfelix_periodhttps_periodjetty_periodsession_periodcookie_periodsecure (boolean()): 
    - :org_periodeclipse_periodjetty_periodservlet_period_session_id_path_parameter_name (String.t): 
    - :org_periodeclipse_periodjetty_periodservlet_period_checking_remote_session_id_encoding (boolean()): 
    - :org_periodeclipse_periodjetty_periodservlet_period_session_cookie (String.t): 
    - :org_periodeclipse_periodjetty_periodservlet_period_session_domain (String.t): 
    - :org_periodeclipse_periodjetty_periodservlet_period_session_path (String.t): 
    - :org_periodeclipse_periodjetty_periodservlet_period_max_age (integer()): 
    - :org_periodapache_periodfelix_periodhttp_periodname (String.t): 
    - :org_periodapache_periodfelix_periodjetty_periodgziphandler_periodenable (boolean()): 
    - :org_periodapache_periodfelix_periodjetty_periodgzip_periodmin_gzip_size (integer()): 
    - :org_periodapache_periodfelix_periodjetty_periodgzip_periodcompression_level (integer()): 
    - :org_periodapache_periodfelix_periodjetty_periodgzip_periodinflate_buffer_size (integer()): 
    - :org_periodapache_periodfelix_periodjetty_periodgzip_periodsync_flush (boolean()): 
    - :org_periodapache_periodfelix_periodjetty_periodgzip_periodexcluded_user_agents ([String.t]): 
    - :org_periodapache_periodfelix_periodjetty_periodgzip_periodincluded_methods ([String.t]): 
    - :org_periodapache_periodfelix_periodjetty_periodgzip_periodexcluded_methods ([String.t]): 
    - :org_periodapache_periodfelix_periodjetty_periodgzip_periodincluded_paths ([String.t]): 
    - :org_periodapache_periodfelix_periodjetty_periodgzip_periodexcluded_paths ([String.t]): 
    - :org_periodapache_periodfelix_periodjetty_periodgzip_periodincluded_mime_types ([String.t]): 
    - :org_periodapache_periodfelix_periodjetty_periodgzip_periodexcluded_mime_types ([String.t]): 
    - :org_periodapache_periodfelix_periodhttp_periodsession_periodinvalidate (boolean()): 
    - :org_periodapache_periodfelix_periodhttp_periodsession_perioduniqueid (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixHttpInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_felix_http(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixHttpInfo.t} | {:error, Tesla.Env.t}
  def org_apache_felix_http(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"org.apache.felix.http.host" => :query,
      :"org.apache.felix.http.enable" => :query,
      :"org.osgi.service.http.port" => :query,
      :"org.apache.felix.http.timeout" => :query,
      :"org.apache.felix.https.enable" => :query,
      :"org.osgi.service.http.port.secure" => :query,
      :"org.apache.felix.https.keystore" => :query,
      :"org.apache.felix.https.keystore.password" => :query,
      :"org.apache.felix.https.keystore.key.password" => :query,
      :"org.apache.felix.https.truststore" => :query,
      :"org.apache.felix.https.truststore.password" => :query,
      :"org.apache.felix.https.clientcertificate" => :query,
      :"org.apache.felix.http.context_path" => :query,
      :"org.apache.felix.http.mbeans" => :query,
      :"org.apache.felix.http.session.timeout" => :query,
      :"org.apache.felix.http.jetty.threadpool.max" => :query,
      :"org.apache.felix.http.jetty.acceptors" => :query,
      :"org.apache.felix.http.jetty.selectors" => :query,
      :"org.apache.felix.http.jetty.headerBufferSize" => :query,
      :"org.apache.felix.http.jetty.requestBufferSize" => :query,
      :"org.apache.felix.http.jetty.responseBufferSize" => :query,
      :"org.apache.felix.http.jetty.maxFormSize" => :query,
      :"org.apache.felix.http.path_exclusions" => :query,
      :"org.apache.felix.https.jetty.ciphersuites.excluded" => :query,
      :"org.apache.felix.https.jetty.ciphersuites.included" => :query,
      :"org.apache.felix.http.jetty.sendServerHeader" => :query,
      :"org.apache.felix.https.jetty.protocols.included" => :query,
      :"org.apache.felix.https.jetty.protocols.excluded" => :query,
      :"org.apache.felix.proxy.load.balancer.connection.enable" => :query,
      :"org.apache.felix.https.jetty.renegotiateAllowed" => :query,
      :"org.apache.felix.https.jetty.session.cookie.httpOnly" => :query,
      :"org.apache.felix.https.jetty.session.cookie.secure" => :query,
      :"org.eclipse.jetty.servlet.SessionIdPathParameterName" => :query,
      :"org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding" => :query,
      :"org.eclipse.jetty.servlet.SessionCookie" => :query,
      :"org.eclipse.jetty.servlet.SessionDomain" => :query,
      :"org.eclipse.jetty.servlet.SessionPath" => :query,
      :"org.eclipse.jetty.servlet.MaxAge" => :query,
      :"org.apache.felix.http.name" => :query,
      :"org.apache.felix.jetty.gziphandler.enable" => :query,
      :"org.apache.felix.jetty.gzip.minGzipSize" => :query,
      :"org.apache.felix.jetty.gzip.compressionLevel" => :query,
      :"org.apache.felix.jetty.gzip.inflateBufferSize" => :query,
      :"org.apache.felix.jetty.gzip.syncFlush" => :query,
      :"org.apache.felix.jetty.gzip.excludedUserAgents" => :query,
      :"org.apache.felix.jetty.gzip.includedMethods" => :query,
      :"org.apache.felix.jetty.gzip.excludedMethods" => :query,
      :"org.apache.felix.jetty.gzip.includedPaths" => :query,
      :"org.apache.felix.jetty.gzip.excludedPaths" => :query,
      :"org.apache.felix.jetty.gzip.includedMimeTypes" => :query,
      :"org.apache.felix.jetty.gzip.excludedMimeTypes" => :query,
      :"org.apache.felix.http.session.invalidate" => :query,
      :"org.apache.felix.http.session.uniqueid" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.felix.http")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixHttpInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :ssl_forward_periodheader (String.t): 
    - :ssl_forward_periodvalue (String.t): 
    - :ssl_forward_cert_periodheader (String.t): 
    - :rewrite_periodabsolute_periodurls (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixHttpSslfilterSslFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_felix_http_sslfilter_ssl_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixHttpSslfilterSslFilterInfo.t} | {:error, Tesla.Env.t}
  def org_apache_felix_http_sslfilter_ssl_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"ssl-forward.header" => :query,
      :"ssl-forward.value" => :query,
      :"ssl-forward-cert.header" => :query,
      :"rewrite.absolute.urls" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixHttpSslfilterSslFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :jaas_periodcontrol_flag (String.t): 
    - :jaas_periodranking (integer()): 
    - :jaas_periodrealm_name (String.t): 
    - :jaas_periodclassname (String.t): 
    - :jaas_periodoptions ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixJaasConfigurationFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_felix_jaas_configuration_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixJaasConfigurationFactoryInfo.t} | {:error, Tesla.Env.t}
  def org_apache_felix_jaas_configuration_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"jaas.controlFlag" => :query,
      :"jaas.ranking" => :query,
      :"jaas.realmName" => :query,
      :"jaas.classname" => :query,
      :"jaas.options" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.felix.jaas.Configuration.factory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixJaasConfigurationFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :jaas_perioddefault_realm_name (String.t): 
    - :jaas_periodconfig_provider_name (String.t): 
    - :jaas_periodglobal_config_policy (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixJaasConfigurationSpiInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_felix_jaas_configuration_spi(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixJaasConfigurationSpiInfo.t} | {:error, Tesla.Env.t}
  def org_apache_felix_jaas_configuration_spi(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"jaas.defaultRealmName" => :query,
      :"jaas.configProviderName" => :query,
      :"jaas.globalConfigPolicy" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixJaasConfigurationSpiInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :ds_periodloglevel (integer()): 
    - :ds_periodfactory_periodenabled (boolean()): 
    - :ds_perioddelayed_periodkeep_instances (boolean()): 
    - :ds_periodlock_periodtimeout_periodmilliseconds (integer()): 
    - :ds_periodstop_periodtimeout_periodmilliseconds (integer()): 
    - :ds_periodglobal_periodextender (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixScrScrServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_felix_scr_scr_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixScrScrServiceInfo.t} | {:error, Tesla.Env.t}
  def org_apache_felix_scr_scr_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"ds.loglevel" => :query,
      :"ds.factory.enabled" => :query,
      :"ds.delayed.keepInstances" => :query,
      :"ds.lock.timeout.milliseconds" => :query,
      :"ds.stop.timeout.milliseconds" => :query,
      :"ds.global.extender" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.felix.scr.ScrService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixScrScrServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :components_periodlist ([String.t]): 
    - :type (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixSystemreadyImplComponentsCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_felix_systemready_impl_components_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixSystemreadyImplComponentsCheckInfo.t} | {:error, Tesla.Env.t}
  def org_apache_felix_systemready_impl_components_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"components.list" => :query,
      :"type" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixSystemreadyImplComponentsCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :timeout (integer()): 
    - :target_periodstart_periodlevel (integer()): 
    - :target_periodstart_periodlevel_periodprop_periodname (String.t): 
    - :type (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_felix_systemready_impl_framework_start_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo.t} | {:error, Tesla.Env.t}
  def org_apache_felix_systemready_impl_framework_start_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"timeout" => :query,
      :"target.start.level" => :query,
      :"target.start.level.prop.name" => :query,
      :"type" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :services_periodlist ([String.t]): 
    - :type (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixSystemreadyImplServicesCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_felix_systemready_impl_services_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixSystemreadyImplServicesCheckInfo.t} | {:error, Tesla.Env.t}
  def org_apache_felix_systemready_impl_services_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"services.list" => :query,
      :"type" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixSystemreadyImplServicesCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :osgi_periodhttp_periodwhiteboard_periodservlet_periodpattern (String.t): 
    - :osgi_periodhttp_periodwhiteboard_periodcontext_periodselect (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_felix_systemready_impl_servlet_system_alive_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo.t} | {:error, Tesla.Env.t}
  def org_apache_felix_systemready_impl_servlet_system_alive_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"osgi.http.whiteboard.servlet.pattern" => :query,
      :"osgi.http.whiteboard.context.select" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :osgi_periodhttp_periodwhiteboard_periodservlet_periodpattern (String.t): 
    - :osgi_periodhttp_periodwhiteboard_periodcontext_periodselect (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_felix_systemready_impl_servlet_system_ready_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo.t} | {:error, Tesla.Env.t}
  def org_apache_felix_systemready_impl_servlet_system_ready_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"osgi.http.whiteboard.servlet.pattern" => :query,
      :"osgi.http.whiteboard.context.select" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :poll_periodinterval (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixSystemreadySystemReadyMonitorInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_felix_systemready_system_ready_monitor(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixSystemreadySystemReadyMonitorInfo.t} | {:error, Tesla.Env.t}
  def org_apache_felix_systemready_system_ready_monitor(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"poll.interval" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixSystemreadySystemReadyMonitorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :manager_periodroot (String.t): 
    - :http_periodservice_periodfilter (String.t): 
    - :default_periodrender (String.t): 
    - :realm (String.t): 
    - :username (String.t): 
    - :password (String.t): 
    - :category (String.t): 
    - :locale (String.t): 
    - :loglevel (integer()): 
    - :plugins (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_felix_webconsole_internal_servlet_osgi_manager(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo.t} | {:error, Tesla.Env.t}
  def org_apache_felix_webconsole_internal_servlet_osgi_manager(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"manager.root" => :query,
      :"http.service.filter" => :query,
      :"default.render" => :query,
      :"realm" => :query,
      :"username" => :query,
      :"password" => :query,
      :"category" => :query,
      :"locale" => :query,
      :"loglevel" => :query,
      :"plugins" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :max_periodsize (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_felix_webconsole_plugins_event_internal_plugin_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo.t} | {:error, Tesla.Env.t}
  def org_apache_felix_webconsole_plugins_event_internal_plugin_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"max.size" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :felix_periodmemoryusage_perioddump_periodthreshold (integer()): 
    - :felix_periodmemoryusage_perioddump_periodinterval (integer()): 
    - :felix_periodmemoryusage_perioddump_periodlocation (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo.t} | {:error, Tesla.Env.t}
  def org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"felix.memoryusage.dump.threshold" => :query,
      :"felix.memoryusage.dump.interval" => :query,
      :"felix.memoryusage.dump.location" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :proxy_periodenabled (boolean()): 
    - :proxy_periodhost (String.t): 
    - :proxy_periodport (integer()): 
    - :proxy_perioduser (String.t): 
    - :proxy_periodpassword (String.t): 
    - :proxy_periodexceptions ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheHttpProxyconfiguratorInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_http_proxyconfigurator(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheHttpProxyconfiguratorInfo.t} | {:error, Tesla.Env.t}
  def org_apache_http_proxyconfigurator(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"proxy.enabled" => :query,
      :"proxy.host" => :query,
      :"proxy.port" => :query,
      :"proxy.user" => :query,
      :"proxy.password" => :query,
      :"proxy.exceptions" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.http.proxyconfigurator")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheHttpProxyconfiguratorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :dir (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"dir" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :path (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"path" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :mongouri (String.t): 
    - :db (String.t): 
    - :socket_keep_alive (boolean()): 
    - :cache (integer()): 
    - :node_cache_percentage (integer()): 
    - :prev_doc_cache_percentage (integer()): 
    - :children_cache_percentage (integer()): 
    - :diff_cache_percentage (integer()): 
    - :cache_segment_count (integer()): 
    - :cache_stack_move_distance (integer()): 
    - :blob_cache_size (integer()): 
    - :persistent_cache (String.t): 
    - :journal_cache (String.t): 
    - :custom_blob_store (boolean()): 
    - :journal_gc_interval (integer()): 
    - :journal_gc_max_age (integer()): 
    - :prefetch_external_changes (boolean()): 
    - :role (String.t): 
    - :version_gc_max_age_in_secs (integer()): 
    - :version_gc_expression (String.t): 
    - :version_gc_time_limit_in_secs (integer()): 
    - :blob_gc_max_age_in_secs (integer()): 
    - :blob_track_snapshot_interval_in_secs (integer()): 
    - :repository_periodhome (String.t): 
    - :max_replication_lag_in_secs (integer()): 
    - :document_store_type (String.t): 
    - :bundling_disabled (boolean()): 
    - :update_limit (integer()): 
    - :persistent_cache_includes ([String.t]): 
    - :lease_check_mode (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_plugins_document_document_node_store_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_plugins_document_document_node_store_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"mongouri" => :query,
      :"db" => :query,
      :"socketKeepAlive" => :query,
      :"cache" => :query,
      :"nodeCachePercentage" => :query,
      :"prevDocCachePercentage" => :query,
      :"childrenCachePercentage" => :query,
      :"diffCachePercentage" => :query,
      :"cacheSegmentCount" => :query,
      :"cacheStackMoveDistance" => :query,
      :"blobCacheSize" => :query,
      :"persistentCache" => :query,
      :"journalCache" => :query,
      :"customBlobStore" => :query,
      :"journalGCInterval" => :query,
      :"journalGCMaxAge" => :query,
      :"prefetchExternalChanges" => :query,
      :"role" => :query,
      :"versionGcMaxAgeInSecs" => :query,
      :"versionGCExpression" => :query,
      :"versionGCTimeLimitInSecs" => :query,
      :"blobGcMaxAgeInSecs" => :query,
      :"blobTrackSnapshotIntervalInSecs" => :query,
      :"repository.home" => :query,
      :"maxReplicationLagInSecs" => :query,
      :"documentStoreType" => :query,
      :"bundlingDisabled" => :query,
      :"updateLimit" => :query,
      :"persistentCacheIncludes" => :query,
      :"leaseCheckMode" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :persistent_cache_includes ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"persistentCacheIncludes" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :included_paths ([String.t]): 
    - :enable_async_observer (boolean()): 
    - :observer_queue_size (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"includedPaths" => :query,
      :"enableAsyncObserver" => :query,
      :"observerQueueSize" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :async_configs ([String.t]): 
    - :lease_time_out_minutes (integer()): 
    - :failing_index_timeout_seconds (integer()): 
    - :error_warn_interval_seconds (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_plugins_index_async_indexer_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_plugins_index_async_indexer_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"asyncConfigs" => :query,
      :"leaseTimeOutMinutes" => :query,
      :"failingIndexTimeoutSeconds" => :query,
      :"errorWarnIntervalSeconds" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :disabled (boolean()): 
    - :debug (boolean()): 
    - :local_index_dir (String.t): 
    - :enable_open_index_async (boolean()): 
    - :thread_pool_size (integer()): 
    - :prefetch_index_files (boolean()): 
    - :extracted_text_cache_size_in_mb (integer()): 
    - :extracted_text_cache_expiry_in_secs (integer()): 
    - :always_use_pre_extracted_cache (boolean()): 
    - :boolean_clause_limit (integer()): 
    - :enable_hybrid_indexing (boolean()): 
    - :hybrid_queue_size (integer()): 
    - :disable_stored_index_definition (boolean()): 
    - :deleted_blobs_collection_enabled (boolean()): 
    - :prop_index_cleaner_interval_in_secs (integer()): 
    - :enable_single_blob_index_files (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"disabled" => :query,
      :"debug" => :query,
      :"localIndexDir" => :query,
      :"enableOpenIndexAsync" => :query,
      :"threadPoolSize" => :query,
      :"prefetchIndexFiles" => :query,
      :"extractedTextCacheSizeInMB" => :query,
      :"extractedTextCacheExpiryInSecs" => :query,
      :"alwaysUsePreExtractedCache" => :query,
      :"booleanClauseLimit" => :query,
      :"enableHybridIndexing" => :query,
      :"hybridQueueSize" => :query,
      :"disableStoredIndexDefinition" => :query,
      :"deletedBlobsCollectionEnabled" => :query,
      :"propIndexCleanerIntervalInSecs" => :query,
      :"enableSingleBlobIndexFiles" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :solr_periodhome_periodpath (String.t): 
    - :solr_periodcore_periodname (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"solr.home.path" => :query,
      :"solr.core.name" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :path_perioddesc_periodfield (String.t): 
    - :path_periodchild_periodfield (String.t): 
    - :path_periodparent_periodfield (String.t): 
    - :path_periodexact_periodfield (String.t): 
    - :catch_periodall_periodfield (String.t): 
    - :collapsed_periodpath_periodfield (String.t): 
    - :path_perioddepth_periodfield (String.t): 
    - :commit_periodpolicy (String.t): 
    - :rows (integer()): 
    - :path_periodrestrictions (boolean()): 
    - :property_periodrestrictions (boolean()): 
    - :primarytypes_periodrestrictions (boolean()): 
    - :ignored_periodproperties ([String.t]): 
    - :used_periodproperties ([String.t]): 
    - :type_periodmappings ([String.t]): 
    - :property_periodmappings ([String.t]): 
    - :collapse_periodjcrcontent_periodnodes (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"path.desc.field" => :query,
      :"path.child.field" => :query,
      :"path.parent.field" => :query,
      :"path.exact.field" => :query,
      :"catch.all.field" => :query,
      :"collapsed.path.field" => :query,
      :"path.depth.field" => :query,
      :"commit.policy" => :query,
      :"rows" => :query,
      :"path.restrictions" => :query,
      :"property.restrictions" => :query,
      :"primarytypes.restrictions" => :query,
      :"ignored.properties" => :query,
      :"used.properties" => :query,
      :"type.mappings" => :query,
      :"property.mappings" => :query,
      :"collapse.jcrcontent.nodes" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :solr_periodhttp_periodurl (String.t): 
    - :solr_periodzk_periodhost (String.t): 
    - :solr_periodcollection (String.t): 
    - :solr_periodsocket_periodtimeout (integer()): 
    - :solr_periodconnection_periodtimeout (integer()): 
    - :solr_periodshards_periodno (integer()): 
    - :solr_periodreplication_periodfactor (integer()): 
    - :solr_periodconf_perioddir (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"solr.http.url" => :query,
      :"solr.zk.host" => :query,
      :"solr.collection" => :query,
      :"solr.socket.timeout" => :query,
      :"solr.connection.timeout" => :query,
      :"solr.shards.no" => :query,
      :"solr.replication.factor" => :query,
      :"solr.conf.dir" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :query_periodaggregation (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"query.aggregation" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :server_periodtype (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"server.type" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :provider_type (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"providerType" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :max_items (integer()): 
    - :max_path_depth (integer()): 
    - :enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_plugins_observation_change_collector_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_plugins_observation_change_collector_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"maxItems" => :query,
      :"maxPathDepth" => :query,
      :"enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :query_limit_in_memory (integer()): 
    - :query_limit_reads (integer()): 
    - :query_fail_traversal (boolean()): 
    - :fast_query_size (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_query_query_engine_settings_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_query_query_engine_settings_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"queryLimitInMemory" => :query,
      :"queryLimitReads" => :query,
      :"queryFailTraversal" => :query,
      :"fastQuerySize" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :org_periodapache_periodjackrabbit_periodoak_periodauthentication_periodapp_name (String.t): 
    - :org_periodapache_periodjackrabbit_periodoak_periodauthentication_periodconfig_spi_name (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_security_authentication_authentication_config(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_security_authentication_authentication_config(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"org.apache.jackrabbit.oak.authentication.appName" => :query,
      :"org.apache.jackrabbit.oak.authentication.configSpiName" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :provider_periodname (String.t): 
    - :host_periodname (String.t): 
    - :host_periodport (integer()): 
    - :host_periodssl (boolean()): 
    - :host_periodtls (boolean()): 
    - :host_periodno_cert_check (boolean()): 
    - :bind_perioddn (String.t): 
    - :bind_periodpassword (String.t): 
    - :search_timeout (String.t): 
    - :admin_pool_periodmax_active (integer()): 
    - :admin_pool_periodlookup_on_validate (boolean()): 
    - :user_pool_periodmax_active (integer()): 
    - :user_pool_periodlookup_on_validate (boolean()): 
    - :user_periodbase_dn (String.t): 
    - :user_periodobjectclass ([String.t]): 
    - :user_periodid_attribute (String.t): 
    - :user_periodextra_filter (String.t): 
    - :user_periodmake_dn_path (boolean()): 
    - :group_periodbase_dn (String.t): 
    - :group_periodobjectclass ([String.t]): 
    - :group_periodname_attribute (String.t): 
    - :group_periodextra_filter (String.t): 
    - :group_periodmake_dn_path (boolean()): 
    - :group_periodmember_attribute (String.t): 
    - :use_uid_for_ext_id (boolean()): 
    - :customattributes ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"provider.name" => :query,
      :"host.name" => :query,
      :"host.port" => :query,
      :"host.ssl" => :query,
      :"host.tls" => :query,
      :"host.noCertCheck" => :query,
      :"bind.dn" => :query,
      :"bind.password" => :query,
      :"searchTimeout" => :query,
      :"adminPool.maxActive" => :query,
      :"adminPool.lookupOnValidate" => :query,
      :"userPool.maxActive" => :query,
      :"userPool.lookupOnValidate" => :query,
      :"user.baseDN" => :query,
      :"user.objectclass" => :query,
      :"user.idAttribute" => :query,
      :"user.extraFilter" => :query,
      :"user.makeDnPath" => :query,
      :"group.baseDN" => :query,
      :"group.objectclass" => :query,
      :"group.nameAttribute" => :query,
      :"group.extraFilter" => :query,
      :"group.makeDnPath" => :query,
      :"group.memberAttribute" => :query,
      :"useUidForExtId" => :query,
      :"customattributes" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :token_expiration (String.t): 
    - :token_length (String.t): 
    - :token_refresh (boolean()): 
    - :token_cleanup_threshold (integer()): 
    - :password_hash_algorithm (String.t): 
    - :password_hash_iterations (integer()): 
    - :password_salt_size (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_security_authentication_token_token_configura(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_security_authentication_token_token_configura(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"tokenExpiration" => :query,
      :"tokenLength" => :query,
      :"tokenRefresh" => :query,
      :"tokenCleanupThreshold" => :query,
      :"passwordHashAlgorithm" => :query,
      :"passwordHashIterations" => :query,
      :"passwordSaltSize" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :permissions_jr2 (String.t): 
    - :import_behavior (String.t): 
    - :read_paths ([String.t]): 
    - :administrative_principals ([String.t]): 
    - :configuration_ranking (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_security_authorization_authorization_configur(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_security_authorization_authorization_configur(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"permissionsJr2" => :query,
      :"importBehavior" => :query,
      :"readPaths" => :query,
      :"administrativePrincipals" => :query,
      :"configurationRanking" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :required_service_pids ([String.t]): 
    - :authorization_composition_type (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_security_internal_security_provider_registrati(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_security_internal_security_provider_registrati(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"requiredServicePids" => :query,
      :"authorizationCompositionType" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :length (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_security_user_random_authorizable_node_name(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_security_user_random_authorizable_node_name(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"length" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :users_path (String.t): 
    - :groups_path (String.t): 
    - :system_relative_path (String.t): 
    - :default_depth (integer()): 
    - :import_behavior (String.t): 
    - :password_hash_algorithm (String.t): 
    - :password_hash_iterations (integer()): 
    - :password_salt_size (integer()): 
    - :omit_admin_pw (boolean()): 
    - :support_auto_save (boolean()): 
    - :password_max_age (integer()): 
    - :initial_password_change (boolean()): 
    - :password_history_size (integer()): 
    - :password_expiry_for_admin (boolean()): 
    - :cache_expiration (integer()): 
    - :enable_rfc7613_usercase_mapped_profile (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_security_user_user_configuration_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_security_user_user_configuration_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"usersPath" => :query,
      :"groupsPath" => :query,
      :"systemRelativePath" => :query,
      :"defaultDepth" => :query,
      :"importBehavior" => :query,
      :"passwordHashAlgorithm" => :query,
      :"passwordHashIterations" => :query,
      :"passwordSaltSize" => :query,
      :"omitAdminPw" => :query,
      :"supportAutoSave" => :query,
      :"passwordMaxAge" => :query,
      :"initialPasswordChange" => :query,
      :"passwordHistorySize" => :query,
      :"passwordExpiryForAdmin" => :query,
      :"cacheExpiration" => :query,
      :"enableRFC7613UsercaseMappedProfile" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :account_name (String.t): 
    - :container_name (String.t): 
    - :access_key (String.t): 
    - :root_path (String.t): 
    - :connection_url (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"accountName" => :query,
      :"containerName" => :query,
      :"accessKey" => :query,
      :"rootPath" => :query,
      :"connectionURL" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :repository_periodhome (String.t): 
    - :tarmk_periodmode (String.t): 
    - :tarmk_periodsize (integer()): 
    - :segment_cache_periodsize (integer()): 
    - :string_cache_periodsize (integer()): 
    - :template_cache_periodsize (integer()): 
    - :string_deduplication_cache_periodsize (integer()): 
    - :template_deduplication_cache_periodsize (integer()): 
    - :node_deduplication_cache_periodsize (integer()): 
    - :pause_compaction (boolean()): 
    - :compaction_periodretry_count (integer()): 
    - :compaction_periodforce_periodtimeout (integer()): 
    - :compaction_periodsize_delta_estimation (integer()): 
    - :compaction_perioddisable_estimation (boolean()): 
    - :compaction_periodretained_generations (integer()): 
    - :compaction_periodmemory_threshold (integer()): 
    - :compaction_periodprogress_log (integer()): 
    - :standby (boolean()): 
    - :custom_blob_store (boolean()): 
    - :custom_segment_store (boolean()): 
    - :split_persistence (boolean()): 
    - :repository_periodbackup_perioddir (String.t): 
    - :blob_gc_max_age_in_secs (integer()): 
    - :blob_track_snapshot_interval_in_secs (integer()): 
    - :role (String.t): 
    - :register_descriptors (boolean()): 
    - :dispatch_changes (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_segment_segment_node_store_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_segment_segment_node_store_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"repository.home" => :query,
      :"tarmk.mode" => :query,
      :"tarmk.size" => :query,
      :"segmentCache.size" => :query,
      :"stringCache.size" => :query,
      :"templateCache.size" => :query,
      :"stringDeduplicationCache.size" => :query,
      :"templateDeduplicationCache.size" => :query,
      :"nodeDeduplicationCache.size" => :query,
      :"pauseCompaction" => :query,
      :"compaction.retryCount" => :query,
      :"compaction.force.timeout" => :query,
      :"compaction.sizeDeltaEstimation" => :query,
      :"compaction.disableEstimation" => :query,
      :"compaction.retainedGenerations" => :query,
      :"compaction.memoryThreshold" => :query,
      :"compaction.progressLog" => :query,
      :"standby" => :query,
      :"customBlobStore" => :query,
      :"customSegmentStore" => :query,
      :"splitPersistence" => :query,
      :"repository.backup.dir" => :query,
      :"blobGcMaxAgeInSecs" => :query,
      :"blobTrackSnapshotIntervalInSecs" => :query,
      :"role" => :query,
      :"registerDescriptors" => :query,
      :"dispatchChanges" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :commits_tracker_writer_groups ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"commitsTrackerWriterGroups" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :repository_periodhome (String.t): 
    - :tarmk_periodmode (String.t): 
    - :tarmk_periodsize (integer()): 
    - :segment_cache_periodsize (integer()): 
    - :string_cache_periodsize (integer()): 
    - :template_cache_periodsize (integer()): 
    - :string_deduplication_cache_periodsize (integer()): 
    - :template_deduplication_cache_periodsize (integer()): 
    - :node_deduplication_cache_periodsize (integer()): 
    - :pause_compaction (boolean()): 
    - :compaction_periodretry_count (integer()): 
    - :compaction_periodforce_periodtimeout (integer()): 
    - :compaction_periodsize_delta_estimation (integer()): 
    - :compaction_perioddisable_estimation (boolean()): 
    - :compaction_periodretained_generations (integer()): 
    - :compaction_periodmemory_threshold (integer()): 
    - :compaction_periodprogress_log (integer()): 
    - :standby (boolean()): 
    - :custom_blob_store (boolean()): 
    - :custom_segment_store (boolean()): 
    - :split_persistence (boolean()): 
    - :repository_periodbackup_perioddir (String.t): 
    - :blob_gc_max_age_in_secs (integer()): 
    - :blob_track_snapshot_interval_in_secs (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_segment_segment_node_store_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_segment_segment_node_store_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"repository.home" => :query,
      :"tarmk.mode" => :query,
      :"tarmk.size" => :query,
      :"segmentCache.size" => :query,
      :"stringCache.size" => :query,
      :"templateCache.size" => :query,
      :"stringDeduplicationCache.size" => :query,
      :"templateDeduplicationCache.size" => :query,
      :"nodeDeduplicationCache.size" => :query,
      :"pauseCompaction" => :query,
      :"compaction.retryCount" => :query,
      :"compaction.force.timeout" => :query,
      :"compaction.sizeDeltaEstimation" => :query,
      :"compaction.disableEstimation" => :query,
      :"compaction.retainedGenerations" => :query,
      :"compaction.memoryThreshold" => :query,
      :"compaction.progressLog" => :query,
      :"standby" => :query,
      :"customBlobStore" => :query,
      :"customSegmentStore" => :query,
      :"splitPersistence" => :query,
      :"repository.backup.dir" => :query,
      :"blobGcMaxAgeInSecs" => :query,
      :"blobTrackSnapshotIntervalInSecs" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :org_periodapache_periodsling_periodinstaller_periodconfiguration_periodpersist (boolean()): 
    - :mode (String.t): 
    - :port (integer()): 
    - :primary_periodhost (String.t): 
    - :interval (integer()): 
    - :primary_periodallowed_client_ip_ranges ([String.t]): 
    - :secure (boolean()): 
    - :standby_periodreadtimeout (integer()): 
    - :standby_periodautoclean (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_segment_standby_store_standby_store_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_segment_standby_store_standby_store_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"org.apache.sling.installer.configuration.persist" => :query,
      :"mode" => :query,
      :"port" => :query,
      :"primary.host" => :query,
      :"interval" => :query,
      :"primary.allowed-client-ip-ranges" => :query,
      :"secure" => :query,
      :"standby.readtimeout" => :query,
      :"standby.autoclean" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :handler_periodname (String.t): 
    - :user_periodexpiration_time (String.t): 
    - :user_periodauto_membership ([String.t]): 
    - :user_periodproperty_mapping ([String.t]): 
    - :user_periodpath_prefix (String.t): 
    - :user_periodmembership_exp_time (String.t): 
    - :user_periodmembership_nesting_depth (integer()): 
    - :user_perioddynamic_membership (boolean()): 
    - :user_perioddisable_missing (boolean()): 
    - :group_periodexpiration_time (String.t): 
    - :group_periodauto_membership ([String.t]): 
    - :group_periodproperty_mapping ([String.t]): 
    - :group_periodpath_prefix (String.t): 
    - :enable_rfc7613_usercase_mapped_profile (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"handler.name" => :query,
      :"user.expirationTime" => :query,
      :"user.autoMembership" => :query,
      :"user.propertyMapping" => :query,
      :"user.pathPrefix" => :query,
      :"user.membershipExpTime" => :query,
      :"user.membershipNestingDepth" => :query,
      :"user.dynamicMembership" => :query,
      :"user.disableMissing" => :query,
      :"group.expirationTime" => :query,
      :"group.autoMembership" => :query,
      :"group.propertyMapping" => :query,
      :"group.pathPrefix" => :query,
      :"enableRFC7613UsercaseMappedProfile" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :jaas_periodranking (integer()): 
    - :jaas_periodcontrol_flag (String.t): 
    - :jaas_periodrealm_name (String.t): 
    - :idp_periodname (String.t): 
    - :sync_periodhandler_name (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"jaas.ranking" => :query,
      :"jaas.controlFlag" => :query,
      :"jaas.realmName" => :query,
      :"idp.name" => :query,
      :"sync.handlerName" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :protect_external_id (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"protectExternalId" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :cug_supported_paths ([String.t]): 
    - :cug_enabled (boolean()): 
    - :configuration_ranking (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"cugSupportedPaths" => :query,
      :"cugEnabled" => :query,
      :"configurationRanking" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :principal_names ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"principalNames" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enabled_actions (String.t): 
    - :user_privilege_names ([String.t]): 
    - :group_privilege_names ([String.t]): 
    - :constraint (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enabledActions" => :query,
      :"userPrivilegeNames" => :query,
      :"groupPrivilegeNames" => :query,
      :"constraint" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :package_roots ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_vault_packaging_impl_packaging_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_vault_packaging_impl_packaging_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"packageRoots" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :home_path (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitVaultPackagingRegistryImplFsPackageRegistryInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitVaultPackagingRegistryImplFsPackageRegistryInfo.t} | {:error, Tesla.Env.t}
  def org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"homePath" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheJackrabbitVaultPackagingRegistryImplFsPackageRegistryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_periodservlet_periodmethods ([String.t]): 
    - :sling_periodservlet_periodpaths (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingAuthCoreImplLogoutServletInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_auth_core_impl_logout_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingAuthCoreImplLogoutServletInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_auth_core_impl_logout_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.servlet.methods" => :query,
      :"sling.servlet.paths" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingAuthCoreImplLogoutServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_caconfig_impl_configuration_bindings_value_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_caconfig_impl_configuration_bindings_value_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :config_bucket_names ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigImplConfigurationResolverImplInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_caconfig_impl_configuration_resolver_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigImplConfigurationResolverImplInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_caconfig_impl_configuration_resolver_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"configBucketNames" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigImplConfigurationResolverImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enabled (boolean()): 
    - :config_property_inheritance_property_names ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enabled" => :query,
      :"configPropertyInheritancePropertyNames" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :description (String.t): 
    - :overrides ([String.t]): 
    - :enabled (boolean()): 
    - :service_periodranking (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"description" => :query,
      :"overrides" => :query,
      :"enabled" => :query,
      :"service.ranking" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enabled (boolean()): 
    - :service_periodranking (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_caconfig_impl_override_system_property_configuration_ove(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_caconfig_impl_override_system_property_configuration_ove(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enabled" => :query,
      :"service.ranking" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :ignore_property_name_regex ([String.t]): 
    - :config_collection_properties_resource_names ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_caconfig_management_impl_configuration_management_setti(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_caconfig_management_impl_configuration_management_setti(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"ignorePropertyNameRegex" => :query,
      :"configCollectionPropertiesResourceNames" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enabled (boolean()): 
    - :config_path (String.t): 
    - :fallback_paths ([String.t]): 
    - :config_collection_inheritance_property_names ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_caconfig_resource_impl_def_default_configuration_resour(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_caconfig_resource_impl_def_default_configuration_resour(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enabled" => :query,
      :"configPath" => :query,
      :"fallbackPaths" => :query,
      :"configCollectionInheritancePropertyNames" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :enabled (boolean()): 
    - :config_ref_resource_names ([String.t]): 
    - :config_ref_property_names ([String.t]): 
    - :service_periodranking (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"enabled" => :query,
      :"configRefResourceNames" => :query,
      :"configRefPropertyNames" => :query,
      :"service.ranking" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :parser_periodfeatures ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_commons_html_internal_tagsoup_html_parser(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_commons_html_internal_tagsoup_html_parser(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"parser.features" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodlevel (String.t): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodfile (String.t): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodfile_periodnumber (integer()): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodfile_periodsize (String.t): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodpattern (String.t): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodconfiguration_file (String.t): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodpackaging_data_enabled (boolean()): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodmax_caller_data_depth (integer()): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodmax_old_file_count_in_dump (integer()): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodnum_of_lines (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsLogLogManagerInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_commons_log_log_manager(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsLogLogManagerInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_commons_log_log_manager(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"org.apache.sling.commons.log.level" => :query,
      :"org.apache.sling.commons.log.file" => :query,
      :"org.apache.sling.commons.log.file.number" => :query,
      :"org.apache.sling.commons.log.file.size" => :query,
      :"org.apache.sling.commons.log.pattern" => :query,
      :"org.apache.sling.commons.log.configurationFile" => :query,
      :"org.apache.sling.commons.log.packagingDataEnabled" => :query,
      :"org.apache.sling.commons.log.maxCallerDataDepth" => :query,
      :"org.apache.sling.commons.log.maxOldFileCountInDump" => :query,
      :"org.apache.sling.commons.log.numOfLines" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.commons.log.LogManager")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsLogLogManagerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodlevel (String.t): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodfile (String.t): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodpattern (String.t): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodnames ([String.t]): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodadditiv (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_commons_log_log_manager_factory_config(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_commons_log_log_manager_factory_config(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"org.apache.sling.commons.log.level" => :query,
      :"org.apache.sling.commons.log.file" => :query,
      :"org.apache.sling.commons.log.pattern" => :query,
      :"org.apache.sling.commons.log.names" => :query,
      :"org.apache.sling.commons.log.additiv" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodfile (String.t): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodfile_periodnumber (integer()): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodfile_periodsize (String.t): 
    - :org_periodapache_periodsling_periodcommons_periodlog_periodfile_periodbuffered (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_commons_log_log_manager_factory_writer(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_commons_log_log_manager_factory_writer(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"org.apache.sling.commons.log.file" => :query,
      :"org.apache.sling.commons.log.file.number" => :query,
      :"org.apache.sling.commons.log.file.size" => :query,
      :"org.apache.sling.commons.log.file.buffered" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :period (integer()): 
    - :time_unit (String.t): 
    - :level (String.t): 
    - :logger_name (String.t): 
    - :prefix (String.t): 
    - :pattern (String.t): 
    - :registry_name (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsMetricsInternalLogReporterInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_commons_metrics_internal_log_reporter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsMetricsInternalLogReporterInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_commons_metrics_internal_log_reporter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"period" => :query,
      :"timeUnit" => :query,
      :"level" => :query,
      :"loggerName" => :query,
      :"prefix" => :query,
      :"pattern" => :query,
      :"registryName" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsMetricsInternalLogReporterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :datasources ([String.t]): 
    - :step (integer()): 
    - :archives ([String.t]): 
    - :path (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"datasources" => :query,
      :"step" => :query,
      :"archives" => :query,
      :"path" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :mime_periodtypes ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_commons_mime_internal_mime_type_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_commons_mime_internal_mime_type_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"mime.types" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :pool_name (String.t): 
    - :allowed_pool_names ([String.t]): 
    - :scheduler_perioduseleaderforsingle (boolean()): 
    - :metrics_periodfilters ([String.t]): 
    - :slow_threshold_millis (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_commons_scheduler_impl_quartz_scheduler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_commons_scheduler_impl_quartz_scheduler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"poolName" => :query,
      :"allowedPoolNames" => :query,
      :"scheduler.useleaderforsingle" => :query,
      :"metrics.filters" => :query,
      :"slowThresholdMillis" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :max_periodquartz_job_periodduration_periodacceptable (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_commons_scheduler_impl_scheduler_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_commons_scheduler_impl_scheduler_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"max.quartzJob.duration.acceptable" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :min_pool_size (integer()): 
    - :max_pool_size (integer()): 
    - :queue_size (integer()): 
    - :max_thread_age (integer()): 
    - :keep_alive_time (integer()): 
    - :block_policy (String.t): 
    - :shutdown_graceful (boolean()): 
    - :daemon (boolean()): 
    - :shutdown_wait_time (integer()): 
    - :priority (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_commons_threads_impl_default_thread_pool_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_commons_threads_impl_default_thread_pool_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"minPoolSize" => :query,
      :"maxPoolSize" => :query,
      :"queueSize" => :query,
      :"maxThreadAge" => :query,
      :"keepAliveTime" => :query,
      :"blockPolicy" => :query,
      :"shutdownGraceful" => :query,
      :"daemon" => :query,
      :"shutdownWaitTime" => :query,
      :"priority" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :datasource_periodname (String.t): 
    - :datasource_periodsvc_periodprop_periodname (String.t): 
    - :driver_class_name (String.t): 
    - :url (String.t): 
    - :username (String.t): 
    - :password (String.t): 
    - :default_auto_commit (String.t): 
    - :default_read_only (String.t): 
    - :default_transaction_isolation (String.t): 
    - :default_catalog (String.t): 
    - :max_active (integer()): 
    - :max_idle (integer()): 
    - :min_idle (integer()): 
    - :initial_size (integer()): 
    - :max_wait (integer()): 
    - :max_age (integer()): 
    - :test_on_borrow (boolean()): 
    - :test_on_return (boolean()): 
    - :test_while_idle (boolean()): 
    - :validation_query (String.t): 
    - :validation_query_timeout (integer()): 
    - :time_between_eviction_runs_millis (integer()): 
    - :min_evictable_idle_time_millis (integer()): 
    - :connection_properties (String.t): 
    - :init_sql (String.t): 
    - :jdbc_interceptors (String.t): 
    - :validation_interval (integer()): 
    - :log_validation_errors (boolean()): 
    - :datasource_periodsvc_periodproperties ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDatasourceDataSourceFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_datasource_data_source_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDatasourceDataSourceFactoryInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_datasource_data_source_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"datasource.name" => :query,
      :"datasource.svc.prop.name" => :query,
      :"driverClassName" => :query,
      :"url" => :query,
      :"username" => :query,
      :"password" => :query,
      :"defaultAutoCommit" => :query,
      :"defaultReadOnly" => :query,
      :"defaultTransactionIsolation" => :query,
      :"defaultCatalog" => :query,
      :"maxActive" => :query,
      :"maxIdle" => :query,
      :"minIdle" => :query,
      :"initialSize" => :query,
      :"maxWait" => :query,
      :"maxAge" => :query,
      :"testOnBorrow" => :query,
      :"testOnReturn" => :query,
      :"testWhileIdle" => :query,
      :"validationQuery" => :query,
      :"validationQueryTimeout" => :query,
      :"timeBetweenEvictionRunsMillis" => :query,
      :"minEvictableIdleTimeMillis" => :query,
      :"connectionProperties" => :query,
      :"initSQL" => :query,
      :"jdbcInterceptors" => :query,
      :"validationInterval" => :query,
      :"logValidationErrors" => :query,
      :"datasource.svc.properties" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDatasourceDataSourceFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :datasource_periodname (String.t): 
    - :datasource_periodsvc_periodprop_periodname (String.t): 
    - :datasource_periodjndi_periodname (String.t): 
    - :jndi_periodproperties ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDatasourceJndiDataSourceFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_datasource_jndi_data_source_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDatasourceJndiDataSourceFactoryInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_datasource_jndi_data_source_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"datasource.name" => :query,
      :"datasource.svc.prop.name" => :query,
      :"datasource.jndi.name" => :query,
      :"jndi.properties" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDatasourceJndiDataSourceFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :connector_ping_timeout (integer()): 
    - :connector_ping_interval (integer()): 
    - :discovery_lite_check_interval (integer()): 
    - :cluster_sync_service_timeout (integer()): 
    - :cluster_sync_service_interval (integer()): 
    - :enable_sync_token (boolean()): 
    - :min_event_delay (integer()): 
    - :socket_connect_timeout (integer()): 
    - :so_timeout (integer()): 
    - :topology_connector_urls ([String.t]): 
    - :topology_connector_whitelist ([String.t]): 
    - :auto_stop_local_loop_enabled (boolean()): 
    - :gzip_connector_requests_enabled (boolean()): 
    - :hmac_enabled (boolean()): 
    - :enable_encryption (boolean()): 
    - :shared_key (String.t): 
    - :hmac_shared_key_ttl (integer()): 
    - :backoff_standby_factor (String.t): 
    - :backoff_stable_factor (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDiscoveryOakConfigInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_discovery_oak_config(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDiscoveryOakConfigInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_discovery_oak_config(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"connectorPingTimeout" => :query,
      :"connectorPingInterval" => :query,
      :"discoveryLiteCheckInterval" => :query,
      :"clusterSyncServiceTimeout" => :query,
      :"clusterSyncServiceInterval" => :query,
      :"enableSyncToken" => :query,
      :"minEventDelay" => :query,
      :"socketConnectTimeout" => :query,
      :"soTimeout" => :query,
      :"topologyConnectorUrls" => :query,
      :"topologyConnectorWhitelist" => :query,
      :"autoStopLocalLoopEnabled" => :query,
      :"gzipConnectorRequestsEnabled" => :query,
      :"hmacEnabled" => :query,
      :"enableEncryption" => :query,
      :"sharedKey" => :query,
      :"hmacSharedKeyTTL" => :query,
      :"backoffStandbyFactor" => :query,
      :"backoffStableFactor" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.discovery.oak.Config")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDiscoveryOakConfigInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodname (String.t): 
    - :hc_periodtags ([String.t]): 
    - :hc_periodmbean_periodname (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_discovery_oak_synchronized_clocks_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_discovery_oak_synchronized_clocks_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.name" => :query,
      :"hc.tags" => :query,
      :"hc.mbean.name" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :title (String.t): 
    - :details (String.t): 
    - :enabled (boolean()): 
    - :service_name (String.t): 
    - :log_periodlevel (String.t): 
    - :allowed_periodroots ([String.t]): 
    - :queue_periodprocessing_periodenabled (boolean()): 
    - :package_importer_periodendpoints ([String.t]): 
    - :passive_queues ([String.t]): 
    - :priority_queues ([String.t]): 
    - :retry_periodstrategy (String.t): 
    - :retry_periodattempts (integer()): 
    - :request_authorization_strategy_periodtarget (String.t): 
    - :transport_secret_provider_periodtarget (String.t): 
    - :package_builder_periodtarget (String.t): 
    - :triggers_periodtarget (String.t): 
    - :queue_periodprovider (String.t): 
    - :async_perioddelivery (boolean()): 
    - :http_periodconn_periodtimeout (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"title" => :query,
      :"details" => :query,
      :"enabled" => :query,
      :"serviceName" => :query,
      :"log.level" => :query,
      :"allowed.roots" => :query,
      :"queue.processing.enabled" => :query,
      :"packageImporter.endpoints" => :query,
      :"passiveQueues" => :query,
      :"priorityQueues" => :query,
      :"retry.strategy" => :query,
      :"retry.attempts" => :query,
      :"requestAuthorizationStrategy.target" => :query,
      :"transportSecretProvider.target" => :query,
      :"packageBuilder.target" => :query,
      :"triggers.target" => :query,
      :"queue.provider" => :query,
      :"async.delivery" => :query,
      :"http.conn.timeout" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :jcr_privilege (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_agent_impl_privilege_distribution_request_a(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_agent_impl_privilege_distribution_request_a(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"jcrPrivilege" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :title (String.t): 
    - :details (String.t): 
    - :enabled (boolean()): 
    - :service_name (String.t): 
    - :log_periodlevel (String.t): 
    - :allowed_periodroots ([String.t]): 
    - :request_authorization_strategy_periodtarget (String.t): 
    - :queue_provider_factory_periodtarget (String.t): 
    - :package_builder_periodtarget (String.t): 
    - :triggers_periodtarget (String.t): 
    - :priority_queues ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"title" => :query,
      :"details" => :query,
      :"enabled" => :query,
      :"serviceName" => :query,
      :"log.level" => :query,
      :"allowed.roots" => :query,
      :"requestAuthorizationStrategy.target" => :query,
      :"queueProviderFactory.target" => :query,
      :"packageBuilder.target" => :query,
      :"triggers.target" => :query,
      :"priorityQueues" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :title (String.t): 
    - :details (String.t): 
    - :enabled (boolean()): 
    - :service_name (String.t): 
    - :log_periodlevel (String.t): 
    - :queue_periodprocessing_periodenabled (boolean()): 
    - :package_exporter_periodendpoints ([String.t]): 
    - :pull_perioditems (integer()): 
    - :http_periodconn_periodtimeout (integer()): 
    - :request_authorization_strategy_periodtarget (String.t): 
    - :transport_secret_provider_periodtarget (String.t): 
    - :package_builder_periodtarget (String.t): 
    - :triggers_periodtarget (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"title" => :query,
      :"details" => :query,
      :"enabled" => :query,
      :"serviceName" => :query,
      :"log.level" => :query,
      :"queue.processing.enabled" => :query,
      :"packageExporter.endpoints" => :query,
      :"pull.items" => :query,
      :"http.conn.timeout" => :query,
      :"requestAuthorizationStrategy.target" => :query,
      :"transportSecretProvider.target" => :query,
      :"packageBuilder.target" => :query,
      :"triggers.target" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :title (String.t): 
    - :details (String.t): 
    - :enabled (boolean()): 
    - :service_name (String.t): 
    - :log_periodlevel (String.t): 
    - :queue_periodprocessing_periodenabled (boolean()): 
    - :package_exporter_periodtarget (String.t): 
    - :package_importer_periodtarget (String.t): 
    - :request_authorization_strategy_periodtarget (String.t): 
    - :triggers_periodtarget (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"title" => :query,
      :"details" => :query,
      :"enabled" => :query,
      :"serviceName" => :query,
      :"log.level" => :query,
      :"queue.processing.enabled" => :query,
      :"packageExporter.target" => :query,
      :"packageImporter.target" => :query,
      :"requestAuthorizationStrategy.target" => :query,
      :"triggers.target" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :title (String.t): 
    - :details (String.t): 
    - :enabled (boolean()): 
    - :service_name (String.t): 
    - :log_periodlevel (String.t): 
    - :queue_periodprocessing_periodenabled (boolean()): 
    - :passive_queues ([String.t]): 
    - :package_exporter_periodendpoints ([String.t]): 
    - :package_importer_periodendpoints ([String.t]): 
    - :retry_periodstrategy (String.t): 
    - :retry_periodattempts (integer()): 
    - :pull_perioditems (integer()): 
    - :http_periodconn_periodtimeout (integer()): 
    - :request_authorization_strategy_periodtarget (String.t): 
    - :transport_secret_provider_periodtarget (String.t): 
    - :package_builder_periodtarget (String.t): 
    - :triggers_periodtarget (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"title" => :query,
      :"details" => :query,
      :"enabled" => :query,
      :"serviceName" => :query,
      :"log.level" => :query,
      :"queue.processing.enabled" => :query,
      :"passiveQueues" => :query,
      :"packageExporter.endpoints" => :query,
      :"packageImporter.endpoints" => :query,
      :"retry.strategy" => :query,
      :"retry.attempts" => :query,
      :"pull.items" => :query,
      :"http.conn.timeout" => :query,
      :"requestAuthorizationStrategy.target" => :query,
      :"transportSecretProvider.target" => :query,
      :"packageBuilder.target" => :query,
      :"triggers.target" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodname (String.t): 
    - :hc_periodtags ([String.t]): 
    - :hc_periodmbean_periodname (String.t): 
    - :number_of_retries_allowed (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_monitor_distribution_queue_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_monitor_distribution_queue_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.name" => :query,
      :"hc.tags" => :query,
      :"hc.mbean.name" => :query,
      :"numberOfRetriesAllowed" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :queue (String.t): 
    - :drop_periodinvalid_perioditems (boolean()): 
    - :agent_periodtarget (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_packaging_impl_exporter_agent_distributio(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_packaging_impl_exporter_agent_distributio(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"queue" => :query,
      :"drop.invalid.items" => :query,
      :"agent.target" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :package_builder_periodtarget (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_packaging_impl_exporter_local_distributio(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_packaging_impl_exporter_local_distributio(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"packageBuilder.target" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :endpoints ([String.t]): 
    - :pull_perioditems (integer()): 
    - :package_builder_periodtarget (String.t): 
    - :transport_secret_provider_periodtarget (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_packaging_impl_exporter_remote_distributi(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_packaging_impl_exporter_remote_distributi(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"endpoints" => :query,
      :"pull.items" => :query,
      :"packageBuilder.target" => :query,
      :"transportSecretProvider.target" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :package_builder_periodtarget (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_packaging_impl_importer_local_distributio(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_packaging_impl_importer_local_distributio(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"packageBuilder.target" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :endpoints ([String.t]): 
    - :transport_secret_provider_periodtarget (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_packaging_impl_importer_remote_distributi(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_packaging_impl_importer_remote_distributi(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"endpoints" => :query,
      :"transportSecretProvider.target" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :service_periodname (String.t): 
    - :path (String.t): 
    - :privilege_periodname (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_packaging_impl_importer_repository_distri(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_packaging_impl_importer_repository_distri(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"service.name" => :query,
      :"path" => :query,
      :"privilege.name" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :provider_periodroots (String.t): 
    - :kind (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_resources_impl_distribution_configuration(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_resources_impl_distribution_configuration(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"provider.roots" => :query,
      :"kind" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :provider_periodroots (String.t): 
    - :kind (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_resources_impl_distribution_service_resour(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_resources_impl_distribution_service_resour(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"provider.roots" => :query,
      :"kind" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :type (String.t): 
    - :format_periodtarget (String.t): 
    - :temp_fs_folder (String.t): 
    - :file_threshold (integer()): 
    - :memory_unit (String.t): 
    - :use_off_heap_memory (boolean()): 
    - :digest_algorithm (String.t): 
    - :monitoring_queue_size (integer()): 
    - :cleanup_delay (integer()): 
    - :package_periodfilters ([String.t]): 
    - :property_periodfilters ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_serialization_impl_distribution_package_bu(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_serialization_impl_distribution_package_bu(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"type" => :query,
      :"format.target" => :query,
      :"tempFsFolder" => :query,
      :"fileThreshold" => :query,
      :"memoryUnit" => :query,
      :"useOffHeapMemory" => :query,
      :"digestAlgorithm" => :query,
      :"monitoringQueueSize" => :query,
      :"cleanupDelay" => :query,
      :"package.filters" => :query,
      :"property.filters" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :type (String.t): 
    - :import_mode (String.t): 
    - :acl_handling (String.t): 
    - :package_periodroots (String.t): 
    - :package_periodfilters ([String.t]): 
    - :property_periodfilters ([String.t]): 
    - :temp_fs_folder (String.t): 
    - :use_binary_references (boolean()): 
    - :auto_save_threshold (integer()): 
    - :cleanup_delay (integer()): 
    - :file_threshold (integer()): 
    - :m_egabytes (String.t): 
    - :use_off_heap_memory (boolean()): 
    - :digest_algorithm (String.t): 
    - :monitoring_queue_size (integer()): 
    - :paths_mapping ([String.t]): 
    - :strict_import (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_serialization_impl_vlt_vault_distribution(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_serialization_impl_vlt_vault_distribution(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"type" => :query,
      :"importMode" => :query,
      :"aclHandling" => :query,
      :"package.roots" => :query,
      :"package.filters" => :query,
      :"property.filters" => :query,
      :"tempFsFolder" => :query,
      :"useBinaryReferences" => :query,
      :"autoSaveThreshold" => :query,
      :"cleanupDelay" => :query,
      :"fileThreshold" => :query,
      :"MEGA_BYTES" => :query,
      :"useOffHeapMemory" => :query,
      :"digestAlgorithm" => :query,
      :"monitoringQueueSize" => :query,
      :"pathsMapping" => :query,
      :"strictImport" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :username (String.t): 
    - :password (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_transport_impl_user_credentials_distributi(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_transport_impl_user_credentials_distributi(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"username" => :query,
      :"password" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :path (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_trigger_impl_distribution_event_distribute(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_trigger_impl_distribution_event_distribute(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"path" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :path (String.t): 
    - :ignored_paths_patterns ([String.t]): 
    - :service_name (String.t): 
    - :deep (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"path" => :query,
      :"ignoredPathsPatterns" => :query,
      :"serviceName" => :query,
      :"deep" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :path (String.t): 
    - :service_name (String.t): 
    - :nuggets_path (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"path" => :query,
      :"serviceName" => :query,
      :"nuggetsPath" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :endpoint (String.t): 
    - :transport_secret_provider_periodtarget (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"endpoint" => :query,
      :"transportSecretProvider.target" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :path (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"path" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :path (String.t): 
    - :seconds (String.t): 
    - :service_name (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"path" => :query,
      :"seconds" => :query,
      :"serviceName" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :osgi_periodhttp_periodwhiteboard_periodcontext_periodselect (String.t): 
    - :osgi_periodhttp_periodwhiteboard_periodlistener (String.t): 
    - :auth_periodsudo_periodcookie (String.t): 
    - :auth_periodsudo_periodparameter (String.t): 
    - :auth_periodannonymous (boolean()): 
    - :sling_periodauth_periodrequirements ([String.t]): 
    - :sling_periodauth_periodanonymous_perioduser (String.t): 
    - :sling_periodauth_periodanonymous_periodpassword (String.t): 
    - :auth_periodhttp (String.t): 
    - :auth_periodhttp_periodrealm (String.t): 
    - :auth_perioduri_periodsuffix ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_engine_impl_auth_sling_authenticator(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_engine_impl_auth_sling_authenticator(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"osgi.http.whiteboard.context.select" => :query,
      :"osgi.http.whiteboard.listener" => :query,
      :"auth.sudo.cookie" => :query,
      :"auth.sudo.parameter" => :query,
      :"auth.annonymous" => :query,
      :"sling.auth.requirements" => :query,
      :"sling.auth.anonymous.user" => :query,
      :"sling.auth.anonymous.password" => :query,
      :"auth.http" => :query,
      :"auth.http.realm" => :query,
      :"auth.uri.suffix" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :extensions ([String.t]): 
    - :min_duration_ms (integer()): 
    - :max_duration_ms (integer()): 
    - :compact_log_format (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"extensions" => :query,
      :"minDurationMs" => :query,
      :"maxDurationMs" => :query,
      :"compactLogFormat" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :request_periodlog_periodoutput (String.t): 
    - :request_periodlog_periodoutputtype (integer()): 
    - :request_periodlog_periodenabled (boolean()): 
    - :access_periodlog_periodoutput (String.t): 
    - :access_periodlog_periodoutputtype (integer()): 
    - :access_periodlog_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEngineImplLogRequestLoggerInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_engine_impl_log_request_logger(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEngineImplLogRequestLoggerInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_engine_impl_log_request_logger(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"request.log.output" => :query,
      :"request.log.outputtype" => :query,
      :"request.log.enabled" => :query,
      :"access.log.output" => :query,
      :"access.log.outputtype" => :query,
      :"access.log.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEngineImplLogRequestLoggerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :request_periodlog_periodservice_periodformat (String.t): 
    - :request_periodlog_periodservice_periodoutput (String.t): 
    - :request_periodlog_periodservice_periodoutputtype (integer()): 
    - :request_periodlog_periodservice_periodonentry (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEngineImplLogRequestLoggerServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_engine_impl_log_request_logger_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEngineImplLogRequestLoggerServiceInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_engine_impl_log_request_logger_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"request.log.service.format" => :query,
      :"request.log.service.output" => :query,
      :"request.log.service.outputtype" => :query,
      :"request.log.service.onentry" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEngineImplLogRequestLoggerServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_periodmax_periodcalls (integer()): 
    - :sling_periodmax_periodinclusions (integer()): 
    - :sling_periodtrace_periodallow (boolean()): 
    - :sling_periodmax_periodrecord_periodrequests (integer()): 
    - :sling_periodstore_periodpattern_periodrequests ([String.t]): 
    - :sling_periodserverinfo (String.t): 
    - :sling_periodadditional_periodresponse_periodheaders ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEngineImplSlingMainServletInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_engine_impl_sling_main_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEngineImplSlingMainServletInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_engine_impl_sling_main_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.max.calls" => :query,
      :"sling.max.inclusions" => :query,
      :"sling.trace.allow" => :query,
      :"sling.max.record.requests" => :query,
      :"sling.store.pattern.requests" => :query,
      :"sling.serverinfo" => :query,
      :"sling.additional.response.headers" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEngineImplSlingMainServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_perioddefault_periodparameter_periodencoding (String.t): 
    - :sling_perioddefault_periodmax_periodparameters (integer()): 
    - :file_periodlocation (String.t): 
    - :file_periodthreshold (integer()): 
    - :file_periodmax (integer()): 
    - :request_periodmax (integer()): 
    - :sling_perioddefault_periodparameter_periodcheck_for_additional_container_parameters (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEngineParametersInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_engine_parameters(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEngineParametersInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_engine_parameters(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.default.parameter.encoding" => :query,
      :"sling.default.max.parameters" => :query,
      :"file.location" => :query,
      :"file.threshold" => :query,
      :"file.max" => :query,
      :"request.max" => :query,
      :"sling.default.parameter.checkForAdditionalContainerParameters" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.engine.parameters")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEngineParametersInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :min_pool_size (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEventImplEventingThreadPoolInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_event_impl_eventing_thread_pool(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEventImplEventingThreadPoolInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_event_impl_eventing_thread_pool(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"minPoolSize" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEventImplEventingThreadPoolInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :queue_periodpriority (String.t): 
    - :queue_periodretries (integer()): 
    - :queue_periodretrydelay (integer()): 
    - :queue_periodmaxparallel (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEventImplJobsDefaultJobManagerInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_event_impl_jobs_default_job_manager(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEventImplJobsDefaultJobManagerInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_event_impl_jobs_default_job_manager(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"queue.priority" => :query,
      :"queue.retries" => :query,
      :"queue.retrydelay" => :query,
      :"queue.maxparallel" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEventImplJobsDefaultJobManagerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :job_periodconsumermanager_perioddisable_distribution (boolean()): 
    - :startup_perioddelay (integer()): 
    - :cleanup_periodperiod (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_event_impl_jobs_jcr_persistence_handler(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_event_impl_jobs_jcr_persistence_handler(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"job.consumermanager.disableDistribution" => :query,
      :"startup.delay" => :query,
      :"cleanup.period" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :org_periodapache_periodsling_periodinstaller_periodconfiguration_periodpersist (boolean()): 
    - :job_periodconsumermanager_periodwhitelist ([String.t]): 
    - :job_periodconsumermanager_periodblacklist ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEventImplJobsJobConsumerManagerInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_event_impl_jobs_job_consumer_manager(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEventImplJobsJobConsumerManagerInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_event_impl_jobs_job_consumer_manager(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"org.apache.sling.installer.configuration.persist" => :query,
      :"job.consumermanager.whitelist" => :query,
      :"job.consumermanager.blacklist" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEventImplJobsJobConsumerManagerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :queue_periodname (String.t): 
    - :queue_periodtopics ([String.t]): 
    - :queue_periodtype (String.t): 
    - :queue_periodpriority (String.t): 
    - :queue_periodretries (integer()): 
    - :queue_periodretrydelay (integer()): 
    - :queue_periodmaxparallel (float()): 
    - :queue_periodkeep_jobs (boolean()): 
    - :queue_periodprefer_run_on_creation_instance (boolean()): 
    - :queue_periodthread_pool_size (integer()): 
    - :service_periodranking (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEventJobsQueueConfigurationInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_event_jobs_queue_configuration(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEventJobsQueueConfigurationInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_event_jobs_queue_configuration(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"queue.name" => :query,
      :"queue.topics" => :query,
      :"queue.type" => :query,
      :"queue.priority" => :query,
      :"queue.retries" => :query,
      :"queue.retrydelay" => :query,
      :"queue.maxparallel" => :query,
      :"queue.keepJobs" => :query,
      :"queue.preferRunOnCreationInstance" => :query,
      :"queue.threadPoolSize" => :query,
      :"service.ranking" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingEventJobsQueueConfigurationInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :users ([String.t]): 
    - :groups ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"users" => :query,
      :"groups" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :description (String.t): 
    - :enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingFeatureflagsFeatureInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_featureflags_feature(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingFeatureflagsFeatureInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_featureflags_feature(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"description" => :query,
      :"enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.featureflags.Feature")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingFeatureflagsFeatureInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :name (String.t): 
    - :description (String.t): 
    - :enabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_featureflags_impl_configured_feature(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_featureflags_impl_configured_feature(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"name" => :query,
      :"description" => :query,
      :"enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :org_periodapache_periodsling_periodhapi_periodtools_periodresourcetype (String.t): 
    - :org_periodapache_periodsling_periodhapi_periodtools_periodcollectionresourcetype (String.t): 
    - :org_periodapache_periodsling_periodhapi_periodtools_periodsearchpaths ([String.t]): 
    - :org_periodapache_periodsling_periodhapi_periodtools_periodexternalurl (String.t): 
    - :org_periodapache_periodsling_periodhapi_periodtools_periodenabled (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHapiImplHApiUtilImplInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_hapi_impl_h_api_util_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHapiImplHApiUtilImplInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_hapi_impl_h_api_util_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"org.apache.sling.hapi.tools.resourcetype" => :query,
      :"org.apache.sling.hapi.tools.collectionresourcetype" => :query,
      :"org.apache.sling.hapi.tools.searchpaths" => :query,
      :"org.apache.sling.hapi.tools.externalurl" => :query,
      :"org.apache.sling.hapi.tools.enabled" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHapiImplHApiUtilImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodname (String.t): 
    - :hc_periodtags ([String.t]): 
    - :hc_periodmbean_periodname (String.t): 
    - :filter_periodtags ([String.t]): 
    - :filter_periodcombine_tags_with_or (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHcCoreImplCompositeHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_hc_core_impl_composite_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHcCoreImplCompositeHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_hc_core_impl_composite_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.name" => :query,
      :"hc.tags" => :query,
      :"hc.mbean.name" => :query,
      :"filter.tags" => :query,
      :"filter.combineTagsWithOr" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHcCoreImplCompositeHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :timeout_in_ms (integer()): 
    - :long_running_future_threshold_for_critical_ms (integer()): 
    - :result_cache_ttl_in_ms (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_hc_core_impl_executor_health_check_executor_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_hc_core_impl_executor_health_check_executor_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"timeoutInMs" => :query,
      :"longRunningFutureThresholdForCriticalMs" => :query,
      :"resultCacheTtlInMs" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodname (String.t): 
    - :hc_periodtags ([String.t]): 
    - :hc_periodmbean_periodname (String.t): 
    - :mbean_periodname (String.t): 
    - :attribute_periodname (String.t): 
    - :attribute_periodvalue_periodconstraint (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_hc_core_impl_jmx_attribute_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_hc_core_impl_jmx_attribute_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.name" => :query,
      :"hc.tags" => :query,
      :"hc.mbean.name" => :query,
      :"mbean.name" => :query,
      :"attribute.name" => :query,
      :"attribute.value.constraint" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :hc_periodname (String.t): 
    - :hc_periodtags ([String.t]): 
    - :hc_periodmbean_periodname (String.t): 
    - :expression (String.t): 
    - :language_periodextension (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHcCoreImplScriptableHealthCheckInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_hc_core_impl_scriptable_health_check(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHcCoreImplScriptableHealthCheckInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_hc_core_impl_scriptable_health_check(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"hc.name" => :query,
      :"hc.tags" => :query,
      :"hc.mbean.name" => :query,
      :"expression" => :query,
      :"language.extension" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHcCoreImplScriptableHealthCheckInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :servlet_path (String.t): 
    - :disabled (boolean()): 
    - :cors_periodaccess_control_allow_origin (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"servletPath" => :query,
      :"disabled" => :query,
      :"cors.accessControlAllowOrigin" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :total_width (integer()): 
    - :col_width_name (integer()): 
    - :col_width_result (integer()): 
    - :col_width_timing (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"totalWidth" => :query,
      :"colWidthName" => :query,
      :"colWidthResult" => :query,
      :"colWidthTiming" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :sling_periodfilter_periodscope ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingI18nImplI18NFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_i18n_impl_i18_n_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingI18nImplI18NFilterInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_i18n_impl_i18_n_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"sling.filter.scope" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingI18nImplI18NFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :locale_perioddefault (String.t): 
    - :preload_periodbundles (boolean()): 
    - :invalidation_perioddelay (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingI18nImplJcrResourceBundleProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_i18n_impl_jcr_resource_bundle_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingI18nImplJcrResourceBundleProviderInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_i18n_impl_jcr_resource_bundle_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"locale.default" => :query,
      :"preload.bundles" => :query,
      :"invalidation.delay" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingI18nImplJcrResourceBundleProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :handler_periodschemes ([String.t]): 
    - :sling_periodjcrinstall_periodfolder_periodname_periodregexp (String.t): 
    - :sling_periodjcrinstall_periodfolder_periodmax_perioddepth (integer()): 
    - :sling_periodjcrinstall_periodsearch_periodpath ([String.t]): 
    - :sling_periodjcrinstall_periodnew_periodconfig_periodpath (String.t): 
    - :sling_periodjcrinstall_periodsignal_periodpath (String.t): 
    - :sling_periodjcrinstall_periodenable_periodwriteback (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_installer_provider_jcr_impl_jcr_installer(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_installer_provider_jcr_impl_jcr_installer(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"handler.schemes" => :query,
      :"sling.jcrinstall.folder.name.regexp" => :query,
      :"sling.jcrinstall.folder.max.depth" => :query,
      :"sling.jcrinstall.search.path" => :query,
      :"sling.jcrinstall.new.config.path" => :query,
      :"sling.jcrinstall.signal.path" => :query,
      :"sling.jcrinstall.enable.writeback" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :whitelist_periodbypass (boolean()): 
    - :whitelist_periodbundles_periodregexp (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_jcr_base_internal_login_admin_whitelist(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_jcr_base_internal_login_admin_whitelist(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"whitelist.bypass" => :query,
      :"whitelist.bundles.regexp" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :whitelist_periodname (String.t): 
    - :whitelist_periodbundles ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"whitelist.name" => :query,
      :"whitelist.bundles" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :alias (String.t): 
    - :dav_periodcreate_absolute_uri (boolean()): 
    - :dav_periodprotectedhandlers (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"alias" => :query,
      :"dav.create-absolute-uri" => :query,
      :"dav.protectedhandlers" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :java_periodnaming_periodfactory_periodinitial (String.t): 
    - :java_periodnaming_periodprovider_periodurl (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_jcr_jackrabbit_server_jndi_registration_support(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_jcr_jackrabbit_server_jndi_registration_support(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"java.naming.factory.initial" => :query,
      :"java.naming.provider.url" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :port (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_jcr_jackrabbit_server_rmi_registration_support(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_jcr_jackrabbit_server_rmi_registration_support(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"port" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :references ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_jcr_repoinit_impl_repository_initializer(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_jcr_repoinit_impl_repository_initializer(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"references" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :references ([String.t]): 
    - :scripts ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrRepoinitRepositoryInitializerInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_jcr_repoinit_repository_initializer(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrRepoinitRepositoryInitializerInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_jcr_repoinit_repository_initializer(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"references" => :query,
      :"scripts" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrRepoinitRepositoryInitializerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :resource_periodresolver_periodsearchpath ([String.t]): 
    - :resource_periodresolver_periodmanglenamespaces (boolean()): 
    - :resource_periodresolver_periodallow_direct (boolean()): 
    - :resource_periodresolver_periodrequired_periodproviders ([String.t]): 
    - :resource_periodresolver_periodrequired_periodprovidernames ([String.t]): 
    - :resource_periodresolver_periodvirtual ([String.t]): 
    - :resource_periodresolver_periodmapping ([String.t]): 
    - :resource_periodresolver_periodmap_periodlocation (String.t): 
    - :resource_periodresolver_periodmap_periodobservation ([String.t]): 
    - :resource_periodresolver_perioddefault_periodvanity_periodredirect_periodstatus (integer()): 
    - :resource_periodresolver_periodenable_periodvanitypath (boolean()): 
    - :resource_periodresolver_periodvanitypath_periodmax_entries (integer()): 
    - :resource_periodresolver_periodvanitypath_periodmax_entries_periodstartup (boolean()): 
    - :resource_periodresolver_periodvanitypath_periodbloomfilter_periodmax_bytes (integer()): 
    - :resource_periodresolver_periodoptimize_periodalias_periodresolution (boolean()): 
    - :resource_periodresolver_periodvanitypath_periodwhitelist ([String.t]): 
    - :resource_periodresolver_periodvanitypath_periodblacklist ([String.t]): 
    - :resource_periodresolver_periodvanity_periodprecedence (boolean()): 
    - :resource_periodresolver_periodproviderhandling_periodparanoid (boolean()): 
    - :resource_periodresolver_periodlog_periodclosing (boolean()): 
    - :resource_periodresolver_periodlog_periodunclosed (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"resource.resolver.searchpath" => :query,
      :"resource.resolver.manglenamespaces" => :query,
      :"resource.resolver.allowDirect" => :query,
      :"resource.resolver.required.providers" => :query,
      :"resource.resolver.required.providernames" => :query,
      :"resource.resolver.virtual" => :query,
      :"resource.resolver.mapping" => :query,
      :"resource.resolver.map.location" => :query,
      :"resource.resolver.map.observation" => :query,
      :"resource.resolver.default.vanity.redirect.status" => :query,
      :"resource.resolver.enable.vanitypath" => :query,
      :"resource.resolver.vanitypath.maxEntries" => :query,
      :"resource.resolver.vanitypath.maxEntries.startup" => :query,
      :"resource.resolver.vanitypath.bloomfilter.maxBytes" => :query,
      :"resource.resolver.optimize.alias.resolution" => :query,
      :"resource.resolver.vanitypath.whitelist" => :query,
      :"resource.resolver.vanitypath.blacklist" => :query,
      :"resource.resolver.vanity.precedence" => :query,
      :"resource.resolver.providerhandling.paranoid" => :query,
      :"resource.resolver.log.closing" => :query,
      :"resource.resolver.log.unclosed" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :allow_periodonly_periodsystem_perioduser (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_jcr_resource_internal_jcr_system_user_validator(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_jcr_resource_internal_jcr_system_user_validator(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"allow.only.system.user" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :path (String.t): 
    - :checkpath_periodprefix (String.t): 
    - :jcr_path (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"path" => :query,
      :"checkpath.prefix" => :query,
      :"jcrPath" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :type_periodcollections (String.t): 
    - :type_periodnoncollections (String.t): 
    - :type_periodcontent (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_jcr_webdav_impl_handler_default_handler_service(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_jcr_webdav_impl_handler_default_handler_service(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"type.collections" => :query,
      :"type.noncollections" => :query,
      :"type.content" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :dav_periodroot (String.t): 
    - :dav_periodcreate_absolute_uri (boolean()): 
    - :dav_periodrealm (String.t): 
    - :collection_periodtypes ([String.t]): 
    - :filter_periodprefixes ([String.t]): 
    - :filter_periodtypes (String.t): 
    - :filter_perioduris (String.t): 
    - :type_periodcollections (String.t): 
    - :type_periodnoncollections (String.t): 
    - :type_periodcontent (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"dav.root" => :query,
      :"dav.create-absolute-uri" => :query,
      :"dav.realm" => :query,
      :"collection.types" => :query,
      :"filter.prefixes" => :query,
      :"filter.types" => :query,
      :"filter.uris" => :query,
      :"type.collections" => :query,
      :"type.noncollections" => :query,
      :"type.content" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :provider_periodroots (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJmxProviderImplJmxResourceProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_jmx_provider_impl_jmx_resource_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJmxProviderImplJmxResourceProviderInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_jmx_provider_impl_jmx_resource_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"provider.roots" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingJmxProviderImplJmxResourceProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :osgi_periodhttp_periodwhiteboard_periodlistener (String.t): 
    - :osgi_periodhttp_periodwhiteboard_periodcontext_periodselect (String.t): 
    - :max_periodrecursion_perioddepth (integer()): 
    - :cleanup_periodjob_periodperiod (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingModelsImplModelAdapterFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_models_impl_model_adapter_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingModelsImplModelAdapterFactoryInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_models_impl_model_adapter_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"osgi.http.whiteboard.listener" => :query,
      :"osgi.http.whiteboard.context.select" => :query,
      :"max.recursion.depth" => :query,
      :"cleanup.job.period" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingModelsImplModelAdapterFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :max_periodrecursion_periodlevels (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_models_jacksonexporter_impl_resource_module_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_models_jacksonexporter_impl_resource_module_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"max.recursion.levels" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :felix_periodinventory_periodprinter_periodname (String.t): 
    - :felix_periodinventory_periodprinter_periodtitle (String.t): 
    - :path (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"felix.inventory.printer.name" => :query,
      :"felix.inventory.printer.title" => :query,
      :"path" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :merge_periodroot (String.t): 
    - :merge_periodread_only (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_resourcemerger_impl_merged_resource_provider_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_resourcemerger_impl_merged_resource_provider_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"merge.root" => :query,
      :"merge.readOnly" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :merge_periodroot (String.t): 
    - :merge_periodread_only (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingResourcemergerPickerOverridingInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_resourcemerger_picker_overriding(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingResourcemergerPickerOverridingInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_resourcemerger_picker_overriding(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"merge.root" => :query,
      :"merge.readOnly" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingResourcemergerPickerOverridingInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :org_periodapache_periodsling_periodscripting_periodcache_periodsize (integer()): 
    - :org_periodapache_periodsling_periodscripting_periodcache_periodadditional_extensions ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingScriptingCoreImplScriptCacheImplInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_scripting_core_impl_script_cache_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingScriptingCoreImplScriptCacheImplInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_scripting_core_impl_script_cache_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"org.apache.sling.scripting.cache.size" => :query,
      :"org.apache.sling.scripting.cache.additional_extensions" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingScriptingCoreImplScriptCacheImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :log_periodstacktrace_periodonclose (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"log.stacktrace.onclose" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :java_periodclassdebuginfo (boolean()): 
    - :java_periodjava_encoding (String.t): 
    - :java_periodcompiler_source_vm (String.t): 
    - :java_periodcompiler_target_vm (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_scripting_java_impl_java_script_engine_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_scripting_java_impl_java_script_engine_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"java.classdebuginfo" => :query,
      :"java.javaEncoding" => :query,
      :"java.compilerSourceVM" => :query,
      :"java.compilerTargetVM" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :org_periodapache_periodsling_periodscripting_periodjavascript_periodrhino_periodopt_level (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"org.apache.sling.scripting.javascript.rhino.optLevel" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :jasper_periodcompiler_target_vm (String.t): 
    - :jasper_periodcompiler_source_vm (String.t): 
    - :jasper_periodclassdebuginfo (boolean()): 
    - :jasper_periodenable_pooling (boolean()): 
    - :jasper_periodie_class_id (String.t): 
    - :jasper_periodgen_string_as_char_array (boolean()): 
    - :jasper_periodkeepgenerated (boolean()): 
    - :jasper_periodmappedfile (boolean()): 
    - :jasper_periodtrim_spaces (boolean()): 
    - :jasper_perioddisplay_source_fragments (boolean()): 
    - :default_periodis_periodsession (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_scripting_jsp_jsp_script_engine_factory(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_scripting_jsp_jsp_script_engine_factory(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"jasper.compilerTargetVM" => :query,
      :"jasper.compilerSourceVM" => :query,
      :"jasper.classdebuginfo" => :query,
      :"jasper.enablePooling" => :query,
      :"jasper.ieClassId" => :query,
      :"jasper.genStringAsCharArray" => :query,
      :"jasper.keepgenerated" => :query,
      :"jasper.mappedfile" => :query,
      :"jasper.trimSpaces" => :query,
      :"jasper.displaySourceFragments" => :query,
      :"default.is.session" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :org_periodapache_periodsling_periodscripting_periodsightly_periodjs_periodbindings ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"org.apache.sling.scripting.sightly.js.bindings" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_periodcontent_perioddisposition_periodpaths ([String.t]): 
    - :sling_periodcontent_perioddisposition_periodexcluded_periodpaths ([String.t]): 
    - :sling_periodcontent_perioddisposition_periodall_periodpaths (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingSecurityImplContentDispositionFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_security_impl_content_disposition_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingSecurityImplContentDispositionFilterInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_security_impl_content_disposition_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.content.disposition.paths" => :query,
      :"sling.content.disposition.excluded.paths" => :query,
      :"sling.content.disposition.all.paths" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingSecurityImplContentDispositionFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :allow_periodempty (boolean()): 
    - :allow_periodhosts ([String.t]): 
    - :allow_periodhosts_periodregexp ([String.t]): 
    - :filter_periodmethods ([String.t]): 
    - :exclude_periodagents_periodregexp ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingSecurityImplReferrerFilterInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_security_impl_referrer_filter(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingSecurityImplReferrerFilterInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_security_impl_referrer_filter(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"allow.empty" => :query,
      :"allow.hosts" => :query,
      :"allow.hosts.regexp" => :query,
      :"filter.methods" => :query,
      :"exclude.agents.regexp" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingSecurityImplReferrerFilterInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :user_periodmapping ([String.t]): 
    - :user_perioddefault (String.t): 
    - :user_periodenable_perioddefault_periodmapping (boolean()): 
    - :require_periodvalidation (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_serviceusermapping_impl_service_user_mapper_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_serviceusermapping_impl_service_user_mapper_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"user.mapping" => :query,
      :"user.default" => :query,
      :"user.enable.default.mapping" => :query,
      :"require.validation" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :service_periodranking (integer()): 
    - :user_periodmapping ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"service.ranking" => :query,
      :"user.mapping" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :aliases ([String.t]): 
    - :index (boolean()): 
    - :index_periodfiles ([String.t]): 
    - :enable_periodhtml (boolean()): 
    - :enable_periodjson (boolean()): 
    - :enable_periodtxt (boolean()): 
    - :enable_periodxml (boolean()): 
    - :json_periodmaximumresults (integer()): 
    - :ecma_suport (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServletsGetDefaultGetServletInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_servlets_get_default_get_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServletsGetDefaultGetServletInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_servlets_get_default_get_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"aliases" => :query,
      :"index" => :query,
      :"index.files" => :query,
      :"enable.html" => :query,
      :"enable.json" => :query,
      :"enable.txt" => :query,
      :"enable.xml" => :query,
      :"json.maximumresults" => :query,
      :"ecmaSuport" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServletsGetDefaultGetServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_periodservlet_periodselectors ([String.t]): 
    - :ecma_suport (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_servlets_get_impl_version_version_info_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_servlets_get_impl_version_version_info_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.servlet.selectors" => :query,
      :"ecmaSuport" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :scheduler_periodexpression (String.t): 
    - :scheduler_periodconcurrent (boolean()): 
    - :chunk_periodcleanup_periodage (integer()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"scheduler.expression" => :query,
      :"scheduler.concurrent" => :query,
      :"chunk.cleanup.age" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :servlet_periodpost_perioddate_formats ([String.t]): 
    - :servlet_periodpost_periodnode_name_hints ([String.t]): 
    - :servlet_periodpost_periodnode_name_max_length (integer()): 
    - :servlet_periodpost_periodcheckin_new_versionable_nodes (boolean()): 
    - :servlet_periodpost_periodauto_checkout (boolean()): 
    - :servlet_periodpost_periodauto_checkin (boolean()): 
    - :servlet_periodpost_periodignore_pattern (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServletsPostImplSlingPostServletInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_servlets_post_impl_sling_post_servlet(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServletsPostImplSlingPostServletInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_servlets_post_impl_sling_post_servlet(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"servlet.post.dateFormats" => :query,
      :"servlet.post.nodeNameHints" => :query,
      :"servlet.post.nodeNameMaxLength" => :query,
      :"servlet.post.checkinNewVersionableNodes" => :query,
      :"servlet.post.autoCheckout" => :query,
      :"servlet.post.autoCheckin" => :query,
      :"servlet.post.ignorePattern" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServletsPostImplSlingPostServletInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :servletresolver_periodservlet_root (String.t): 
    - :servletresolver_periodcache_size (integer()): 
    - :servletresolver_periodpaths ([String.t]): 
    - :servletresolver_perioddefault_extensions ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServletsResolverSlingServletResolverInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_servlets_resolver_sling_servlet_resolver(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServletsResolverSlingServletResolverInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_servlets_resolver_sling_servlet_resolver(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"servletresolver.servletRoot" => :query,
      :"servletresolver.cacheSize" => :query,
      :"servletresolver.paths" => :query,
      :"servletresolver.defaultExtensions" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingServletsResolverSlingServletResolverInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :sling_periodname (String.t): 
    - :sling_perioddescription (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_settings_impl_sling_settings_service_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_settings_impl_sling_settings_service_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"sling.name" => :query,
      :"sling.description" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :active_periodby_perioddefault (boolean()): 
    - :default_periodmessage (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingStartupfilterImplStartupFilterImplInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_startupfilter_impl_startup_filter_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingStartupfilterImplStartupFilterImplInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_startupfilter_impl_startup_filter_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"active.by.default" => :query,
      :"default.message" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingStartupfilterImplStartupFilterImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :tenant_periodroot (String.t): 
    - :tenant_periodpath_periodmatcher ([String.t]): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingTenantInternalTenantProviderImplInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_tenant_internal_tenant_provider_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingTenantInternalTenantProviderImplInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_tenant_internal_tenant_provider_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"tenant.root" => :query,
      :"tenant.path.matcher" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingTenantInternalTenantProviderImplInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :tracer_sets ([String.t]): 
    - :enabled (boolean()): 
    - :servlet_enabled (boolean()): 
    - :recording_cache_size_in_mb (integer()): 
    - :recording_cache_duration_in_secs (integer()): 
    - :recording_compression_enabled (boolean()): 
    - :gzip_response (boolean()): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingTracerInternalLogTracerInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_tracer_internal_log_tracer(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingTracerInternalLogTracerInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_tracer_internal_log_tracer(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"tracerSets" => :query,
      :"enabled" => :query,
      :"servletEnabled" => :query,
      :"recordingCacheSizeInMB" => :query,
      :"recordingCacheDurationInSecs" => :query,
      :"recordingCompressionEnabled" => :query,
      :"gzipResponse" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingTracerInternalLogTracerInfo{})
  end

  @doc """

  ## Parameters

  - connection (AdobeExperienceManagerOSGIConfig(AEM)API.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :post (boolean()): 
    - :apply (boolean()): 
    - :delete (boolean()): 
    - :action (String.t): 
    - :dollarlocation (String.t): 
    - :propertylist ([String.t]): 
    - :policy_path (String.t): 
  ## Returns

  {:ok, %AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingXssImplXssFilterImplInfo{}} on success
  {:error, info} on failure
  """
  @spec org_apache_sling_xss_impl_xss_filter_impl(Tesla.Env.client, keyword()) :: {:ok, AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingXssImplXssFilterImplInfo.t} | {:error, Tesla.Env.t}
  def org_apache_sling_xss_impl_xss_filter_impl(connection, opts \\ []) do
    optional_params = %{
      :"post" => :query,
      :"apply" => :query,
      :"delete" => :query,
      :"action" => :query,
      :"$location" => :query,
      :"propertylist" => :query,
      :"policyPath" => :query
    }
    %{}
    |> method(:post)
    |> url("/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%AdobeExperienceManagerOSGIConfig(AEM)API.Model.OrgApacheSlingXssImplXssFilterImplInfo{})
  end
end
