/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletMetadataGetServletProperties {
  #[serde(rename = "sling.servlet.resourceTypes")]
  sling_servlet_resource_types: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "sling.servlet.methods")]
  sling_servlet_methods: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "sling.servlet.extensions")]
  sling_servlet_extensions: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "sling.servlet.selectors")]
  sling_servlet_selectors: Option<::models::ConfigNodePropertyString>
}

impl ComDayCqDamCoreImplServletMetadataGetServletProperties {
  pub fn new() -> ComDayCqDamCoreImplServletMetadataGetServletProperties {
    ComDayCqDamCoreImplServletMetadataGetServletProperties {
      sling_servlet_resource_types: None,
      sling_servlet_methods: None,
      sling_servlet_extensions: None,
      sling_servlet_selectors: None
    }
  }

  pub fn set_sling_servlet_resource_types(&mut self, sling_servlet_resource_types: ::models::ConfigNodePropertyString) {
    self.sling_servlet_resource_types = Some(sling_servlet_resource_types);
  }

  pub fn with_sling_servlet_resource_types(mut self, sling_servlet_resource_types: ::models::ConfigNodePropertyString) -> ComDayCqDamCoreImplServletMetadataGetServletProperties {
    self.sling_servlet_resource_types = Some(sling_servlet_resource_types);
    self
  }

  pub fn sling_servlet_resource_types(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sling_servlet_resource_types.as_ref()
  }

  pub fn reset_sling_servlet_resource_types(&mut self) {
    self.sling_servlet_resource_types = None;
  }

  pub fn set_sling_servlet_methods(&mut self, sling_servlet_methods: ::models::ConfigNodePropertyString) {
    self.sling_servlet_methods = Some(sling_servlet_methods);
  }

  pub fn with_sling_servlet_methods(mut self, sling_servlet_methods: ::models::ConfigNodePropertyString) -> ComDayCqDamCoreImplServletMetadataGetServletProperties {
    self.sling_servlet_methods = Some(sling_servlet_methods);
    self
  }

  pub fn sling_servlet_methods(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sling_servlet_methods.as_ref()
  }

  pub fn reset_sling_servlet_methods(&mut self) {
    self.sling_servlet_methods = None;
  }

  pub fn set_sling_servlet_extensions(&mut self, sling_servlet_extensions: ::models::ConfigNodePropertyString) {
    self.sling_servlet_extensions = Some(sling_servlet_extensions);
  }

  pub fn with_sling_servlet_extensions(mut self, sling_servlet_extensions: ::models::ConfigNodePropertyString) -> ComDayCqDamCoreImplServletMetadataGetServletProperties {
    self.sling_servlet_extensions = Some(sling_servlet_extensions);
    self
  }

  pub fn sling_servlet_extensions(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sling_servlet_extensions.as_ref()
  }

  pub fn reset_sling_servlet_extensions(&mut self) {
    self.sling_servlet_extensions = None;
  }

  pub fn set_sling_servlet_selectors(&mut self, sling_servlet_selectors: ::models::ConfigNodePropertyString) {
    self.sling_servlet_selectors = Some(sling_servlet_selectors);
  }

  pub fn with_sling_servlet_selectors(mut self, sling_servlet_selectors: ::models::ConfigNodePropertyString) -> ComDayCqDamCoreImplServletMetadataGetServletProperties {
    self.sling_servlet_selectors = Some(sling_servlet_selectors);
    self
  }

  pub fn sling_servlet_selectors(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sling_servlet_selectors.as_ref()
  }

  pub fn reset_sling_servlet_selectors(&mut self) {
    self.sling_servlet_selectors = None;
  }

}



