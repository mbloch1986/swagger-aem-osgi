/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties() {
    this->init();
}

OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::~OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties() {
    
}

void
OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::init() {
    m_guess_total_isSet = false;
    m_tag_title_search_isSet = false;
}

void
OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(guess_total, json[QString("guessTotal")]);
    
    ::OpenAPI::fromJsonValue(tag_title_search, json[QString("tagTitleSearch")]);
    
}

QString
OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::asJsonObject() const {
    QJsonObject obj;
	if(guess_total.isSet()){
        obj.insert(QString("guessTotal"), ::OpenAPI::toJsonValue(guess_total));
    }
	if(tag_title_search.isSet()){
        obj.insert(QString("tagTitleSearch"), ::OpenAPI::toJsonValue(tag_title_search));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::getGuessTotal() const {
    return guess_total;
}
void
OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::setGuessTotal(const OAIConfigNodePropertyString &guess_total) {
    this->guess_total = guess_total;
    this->m_guess_total_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::getTagTitleSearch() const {
    return tag_title_search;
}
void
OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::setTagTitleSearch(const OAIConfigNodePropertyBoolean &tag_title_search) {
    this->tag_title_search = tag_title_search;
    this->m_tag_title_search_isSet = true;
}


bool
OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(guess_total.isSet()){ isObjectUpdated = true; break;}
    
        if(tag_title_search.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

