/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties()
{
    m_Com_adobe_cq_cdn_cdn_rewriterIsSet = false;
    m_Com_adobe_cq_cloud_config_componentsIsSet = false;
    m_Com_adobe_cq_cloud_config_coreIsSet = false;
    m_Com_adobe_cq_cloud_config_uiIsSet = false;
    m_Com_adobe_cq_com_adobe_cq_editorIsSet = false;
    m_Com_adobe_cq_com_adobe_cq_projects_coreIsSet = false;
    m_Com_adobe_cq_com_adobe_cq_projects_wcm_coreIsSet = false;
    m_Com_adobe_cq_com_adobe_cq_ui_commonsIsSet = false;
    m_Com_adobe_cq_com_adobe_cq_wcm_styleIsSet = false;
    m_Com_adobe_cq_cq_activitymap_integrationIsSet = false;
    m_Com_adobe_cq_cq_contexthub_commonsIsSet = false;
    m_Com_adobe_cq_cq_dtmIsSet = false;
    m_Com_adobe_cq_cq_healthcheckIsSet = false;
    m_Com_adobe_cq_cq_multisite_targetingIsSet = false;
    m_Com_adobe_cq_cq_pre_upgrade_cleanupIsSet = false;
    m_Com_adobe_cq_cq_product_info_providerIsSet = false;
    m_Com_adobe_cq_cq_rest_sitesIsSet = false;
    m_Com_adobe_cq_cq_security_hcIsSet = false;
    m_Com_adobe_cq_dam_cq_dam_svg_handlerIsSet = false;
    m_Com_adobe_cq_dam_cq_scene7_imagingIsSet = false;
    m_Com_adobe_cq_dtm_reactor_coreIsSet = false;
    m_Com_adobe_cq_dtm_reactor_uiIsSet = false;
    m_Com_adobe_cq_exp_jspel_resolverIsSet = false;
    m_Com_adobe_cq_inbox_cq_inboxIsSet = false;
    m_Com_adobe_cq_json_schema_parserIsSet = false;
    m_Com_adobe_cq_media_cq_media_publishing_dps_fp_coreIsSet = false;
    m_Com_adobe_cq_mobile_cq_mobile_caasIsSet = false;
    m_Com_adobe_cq_mobile_cq_mobile_index_builderIsSet = false;
    m_Com_adobe_cq_mobile_cq_mobile_phonegap_buildIsSet = false;
    m_Com_adobe_cq_myspellIsSet = false;
    m_Com_adobe_cq_sample_we_retail_coreIsSet = false;
    m_Com_adobe_cq_screens_com_adobe_cq_screens_dccIsSet = false;
    m_Com_adobe_cq_screens_com_adobe_cq_screens_mq_coreIsSet = false;
    m_Com_adobe_cq_social_cq_social_as_providerIsSet = false;
    m_Com_adobe_cq_social_cq_social_badging_basic_implIsSet = false;
    m_Com_adobe_cq_social_cq_social_badging_implIsSet = false;
    m_Com_adobe_cq_social_cq_social_calendar_implIsSet = false;
    m_Com_adobe_cq_social_cq_social_content_fragments_implIsSet = false;
    m_Com_adobe_cq_social_cq_social_enablement_implIsSet = false;
    m_Com_adobe_cq_social_cq_social_graph_implIsSet = false;
    m_Com_adobe_cq_social_cq_social_ideation_implIsSet = false;
    m_Com_adobe_cq_social_cq_social_jcr_providerIsSet = false;
    m_Com_adobe_cq_social_cq_social_members_implIsSet = false;
    m_Com_adobe_cq_social_cq_social_ms_providerIsSet = false;
    m_Com_adobe_cq_social_cq_social_notifications_channels_webIsSet = false;
    m_Com_adobe_cq_social_cq_social_notifications_implIsSet = false;
    m_Com_adobe_cq_social_cq_social_rdb_providerIsSet = false;
    m_Com_adobe_cq_social_cq_social_scf_implIsSet = false;
    m_Com_adobe_cq_social_cq_social_scoring_basic_implIsSet = false;
    m_Com_adobe_cq_social_cq_social_scoring_implIsSet = false;
    m_Com_adobe_cq_social_cq_social_serviceusers_implIsSet = false;
    m_Com_adobe_cq_social_cq_social_srp_implIsSet = false;
    m_Com_adobe_cq_social_cq_social_ugcbase_implIsSet = false;
    m_Com_adobe_dam_cq_dam_cfm_implIsSet = false;
    m_Com_adobe_forms_foundation_forms_foundation_baseIsSet = false;
    m_Com_adobe_granite_apicontrollerIsSet = false;
    m_Com_adobe_granite_asset_coreIsSet = false;
    m_Com_adobe_granite_auth_ssoIsSet = false;
    m_Com_adobe_granite_bundles_hc_implIsSet = false;
    m_Com_adobe_granite_compat_routerIsSet = false;
    m_Com_adobe_granite_confIsSet = false;
    m_Com_adobe_granite_conf_ui_coreIsSet = false;
    m_Com_adobe_granite_corsIsSet = false;
    m_Com_adobe_granite_crx_explorerIsSet = false;
    m_Com_adobe_granite_crxde_liteIsSet = false;
    m_Com_adobe_granite_crypto_configIsSet = false;
    m_Com_adobe_granite_crypto_extensionIsSet = false;
    m_Com_adobe_granite_crypto_fileIsSet = false;
    m_Com_adobe_granite_crypto_jcrIsSet = false;
    m_Com_adobe_granite_csrfIsSet = false;
    m_Com_adobe_granite_distribution_coreIsSet = false;
    m_Com_adobe_granite_dropwizard_metricsIsSet = false;
    m_Com_adobe_granite_frags_implIsSet = false;
    m_Com_adobe_granite_gibsonIsSet = false;
    m_Com_adobe_granite_infocollectorIsSet = false;
    m_Com_adobe_granite_installer_factory_packagesIsSet = false;
    m_Com_adobe_granite_jetty_sslIsSet = false;
    m_Com_adobe_granite_jobs_asyncIsSet = false;
    m_Com_adobe_granite_maintenance_oakIsSet = false;
    m_Com_adobe_granite_monitoring_coreIsSet = false;
    m_Com_adobe_granite_queriesIsSet = false;
    m_Com_adobe_granite_replication_hc_implIsSet = false;
    m_Com_adobe_granite_repository_checkerIsSet = false;
    m_Com_adobe_granite_repository_hc_implIsSet = false;
    m_Com_adobe_granite_rest_assetsIsSet = false;
    m_Com_adobe_granite_security_uiIsSet = false;
    m_Com_adobe_granite_startupIsSet = false;
    m_Com_adobe_granite_tagsoupIsSet = false;
    m_Com_adobe_granite_taskmanagement_coreIsSet = false;
    m_Com_adobe_granite_taskmanagement_workflowIsSet = false;
    m_Com_adobe_granite_ui_clientlibs_compiler_lessIsSet = false;
    m_Com_adobe_granite_ui_clientlibs_processor_gccIsSet = false;
    m_Com_adobe_granite_webconsole_pluginsIsSet = false;
    m_Com_adobe_granite_workflow_consoleIsSet = false;
    m_Com_adobe_xmp_worker_files_native_fragment_linuxIsSet = false;
    m_Com_adobe_xmp_worker_files_native_fragment_macosxIsSet = false;
    m_Com_adobe_xmp_worker_files_native_fragment_winIsSet = false;
    m_Com_day_commons_osgi_wrapper_simple_jndiIsSet = false;
    m_Com_day_cq_cq_authhandlerIsSet = false;
    m_Com_day_cq_cq_compat_configupdateIsSet = false;
    m_Com_day_cq_cq_licensebrandingIsSet = false;
    m_Com_day_cq_cq_notifcation_implIsSet = false;
    m_Com_day_cq_cq_replication_auditIsSet = false;
    m_Com_day_cq_cq_search_extIsSet = false;
    m_Com_day_cq_dam_cq_dam_annotation_printIsSet = false;
    m_Com_day_cq_dam_cq_dam_asset_usageIsSet = false;
    m_Com_day_cq_dam_cq_dam_s7damIsSet = false;
    m_Com_day_cq_dam_cq_dam_similaritysearchIsSet = false;
    m_Com_day_cq_dam_dam_webdav_supportIsSet = false;
    m_Com_day_cq_pre_upgrade_tasksIsSet = false;
    m_Com_day_cq_replication_extensionsIsSet = false;
    m_Com_day_cq_wcm_cq_msm_coreIsSet = false;
    m_Com_day_cq_wcm_cq_wcm_translationIsSet = false;
    m_Day_commons_jrawioIsSet = false;
    m_Org_apache_aries_jmx_whiteboardIsSet = false;
    m_Org_apache_felix_http_sslfilterIsSet = false;
    m_Org_apache_felix_org_apache_felix_threaddumpIsSet = false;
    m_Org_apache_felix_webconsole_plugins_dsIsSet = false;
    m_Org_apache_felix_webconsole_plugins_eventIsSet = false;
    m_Org_apache_felix_webconsole_plugins_memoryusageIsSet = false;
    m_Org_apache_felix_webconsole_plugins_packageadminIsSet = false;
    m_Org_apache_jackrabbit_oak_auth_ldapIsSet = false;
    m_Org_apache_jackrabbit_oak_segment_tarIsSet = false;
    m_Org_apache_jackrabbit_oak_solr_osgiIsSet = false;
    m_Org_apache_sling_bundleresource_implIsSet = false;
    m_Org_apache_sling_commons_fsclassloaderIsSet = false;
    m_Org_apache_sling_commons_log_webconsoleIsSet = false;
    m_Org_apache_sling_datasourceIsSet = false;
    m_Org_apache_sling_discovery_baseIsSet = false;
    m_Org_apache_sling_discovery_oakIsSet = false;
    m_Org_apache_sling_discovery_supportIsSet = false;
    m_Org_apache_sling_distribution_apiIsSet = false;
    m_Org_apache_sling_distribution_coreIsSet = false;
    m_Org_apache_sling_extensions_webconsolesecurityproviderIsSet = false;
    m_Org_apache_sling_hc_webconsoleIsSet = false;
    m_Org_apache_sling_installer_consoleIsSet = false;
    m_Org_apache_sling_installer_provider_fileIsSet = false;
    m_Org_apache_sling_installer_provider_jcrIsSet = false;
    m_Org_apache_sling_jcr_davexIsSet = false;
    m_Org_apache_sling_jcr_resourcesecurityIsSet = false;
    m_Org_apache_sling_jmx_providerIsSet = false;
    m_Org_apache_sling_launchpad_installerIsSet = false;
    m_Org_apache_sling_models_implIsSet = false;
    m_Org_apache_sling_repoinit_parserIsSet = false;
    m_Org_apache_sling_resource_inventoryIsSet = false;
    m_Org_apache_sling_resourceresolverIsSet = false;
    m_Org_apache_sling_scripting_javascriptIsSet = false;
    m_Org_apache_sling_scripting_jstIsSet = false;
    m_Org_apache_sling_scripting_sightly_js_providerIsSet = false;
    m_Org_apache_sling_scripting_sightly_models_providerIsSet = false;
    m_Org_apache_sling_securityIsSet = false;
    m_Org_apache_sling_servlets_compatIsSet = false;
    m_Org_apache_sling_servlets_getIsSet = false;
    m_Org_apache_sling_startupfilter_disablerIsSet = false;
    m_Org_apache_sling_tracerIsSet = false;
    m_We_retail_client_app_coreIsSet = false;
}

ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::~ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties()
{
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Com_adobe_cq_cdn_cdn_rewriterIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.cdn.cdn-rewriter")] = ModelBase::toJson(m_Com_adobe_cq_cdn_cdn_rewriter);
    }
    if(m_Com_adobe_cq_cloud_config_componentsIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.cloud-config.components")] = ModelBase::toJson(m_Com_adobe_cq_cloud_config_components);
    }
    if(m_Com_adobe_cq_cloud_config_coreIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.cloud-config.core")] = ModelBase::toJson(m_Com_adobe_cq_cloud_config_core);
    }
    if(m_Com_adobe_cq_cloud_config_uiIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.cloud-config.ui")] = ModelBase::toJson(m_Com_adobe_cq_cloud_config_ui);
    }
    if(m_Com_adobe_cq_com_adobe_cq_editorIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.editor")] = ModelBase::toJson(m_Com_adobe_cq_com_adobe_cq_editor);
    }
    if(m_Com_adobe_cq_com_adobe_cq_projects_coreIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.projects.core")] = ModelBase::toJson(m_Com_adobe_cq_com_adobe_cq_projects_core);
    }
    if(m_Com_adobe_cq_com_adobe_cq_projects_wcm_coreIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.projects.wcm.core")] = ModelBase::toJson(m_Com_adobe_cq_com_adobe_cq_projects_wcm_core);
    }
    if(m_Com_adobe_cq_com_adobe_cq_ui_commonsIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.ui.commons")] = ModelBase::toJson(m_Com_adobe_cq_com_adobe_cq_ui_commons);
    }
    if(m_Com_adobe_cq_com_adobe_cq_wcm_styleIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.wcm.style")] = ModelBase::toJson(m_Com_adobe_cq_com_adobe_cq_wcm_style);
    }
    if(m_Com_adobe_cq_cq_activitymap_integrationIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.cq-activitymap-integration")] = ModelBase::toJson(m_Com_adobe_cq_cq_activitymap_integration);
    }
    if(m_Com_adobe_cq_cq_contexthub_commonsIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.cq-contexthub-commons")] = ModelBase::toJson(m_Com_adobe_cq_cq_contexthub_commons);
    }
    if(m_Com_adobe_cq_cq_dtmIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.cq-dtm")] = ModelBase::toJson(m_Com_adobe_cq_cq_dtm);
    }
    if(m_Com_adobe_cq_cq_healthcheckIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.cq-healthcheck")] = ModelBase::toJson(m_Com_adobe_cq_cq_healthcheck);
    }
    if(m_Com_adobe_cq_cq_multisite_targetingIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.cq-multisite-targeting")] = ModelBase::toJson(m_Com_adobe_cq_cq_multisite_targeting);
    }
    if(m_Com_adobe_cq_cq_pre_upgrade_cleanupIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.cq-pre-upgrade-cleanup")] = ModelBase::toJson(m_Com_adobe_cq_cq_pre_upgrade_cleanup);
    }
    if(m_Com_adobe_cq_cq_product_info_providerIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.cq-product-info-provider")] = ModelBase::toJson(m_Com_adobe_cq_cq_product_info_provider);
    }
    if(m_Com_adobe_cq_cq_rest_sitesIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.cq-rest-sites")] = ModelBase::toJson(m_Com_adobe_cq_cq_rest_sites);
    }
    if(m_Com_adobe_cq_cq_security_hcIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.cq-security-hc")] = ModelBase::toJson(m_Com_adobe_cq_cq_security_hc);
    }
    if(m_Com_adobe_cq_dam_cq_dam_svg_handlerIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.dam.cq-dam-svg-handler")] = ModelBase::toJson(m_Com_adobe_cq_dam_cq_dam_svg_handler);
    }
    if(m_Com_adobe_cq_dam_cq_scene7_imagingIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.dam.cq-scene7-imaging")] = ModelBase::toJson(m_Com_adobe_cq_dam_cq_scene7_imaging);
    }
    if(m_Com_adobe_cq_dtm_reactor_coreIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.dtm-reactor.core")] = ModelBase::toJson(m_Com_adobe_cq_dtm_reactor_core);
    }
    if(m_Com_adobe_cq_dtm_reactor_uiIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.dtm-reactor.ui")] = ModelBase::toJson(m_Com_adobe_cq_dtm_reactor_ui);
    }
    if(m_Com_adobe_cq_exp_jspel_resolverIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.exp-jspel-resolver")] = ModelBase::toJson(m_Com_adobe_cq_exp_jspel_resolver);
    }
    if(m_Com_adobe_cq_inbox_cq_inboxIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.inbox.cq-inbox")] = ModelBase::toJson(m_Com_adobe_cq_inbox_cq_inbox);
    }
    if(m_Com_adobe_cq_json_schema_parserIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.json-schema-parser")] = ModelBase::toJson(m_Com_adobe_cq_json_schema_parser);
    }
    if(m_Com_adobe_cq_media_cq_media_publishing_dps_fp_coreIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.media.cq-media-publishing-dps-fp-core")] = ModelBase::toJson(m_Com_adobe_cq_media_cq_media_publishing_dps_fp_core);
    }
    if(m_Com_adobe_cq_mobile_cq_mobile_caasIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-caas")] = ModelBase::toJson(m_Com_adobe_cq_mobile_cq_mobile_caas);
    }
    if(m_Com_adobe_cq_mobile_cq_mobile_index_builderIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-index-builder")] = ModelBase::toJson(m_Com_adobe_cq_mobile_cq_mobile_index_builder);
    }
    if(m_Com_adobe_cq_mobile_cq_mobile_phonegap_buildIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-phonegap-build")] = ModelBase::toJson(m_Com_adobe_cq_mobile_cq_mobile_phonegap_build);
    }
    if(m_Com_adobe_cq_myspellIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.myspell")] = ModelBase::toJson(m_Com_adobe_cq_myspell);
    }
    if(m_Com_adobe_cq_sample_we_retail_coreIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.sample.we.retail.core")] = ModelBase::toJson(m_Com_adobe_cq_sample_we_retail_core);
    }
    if(m_Com_adobe_cq_screens_com_adobe_cq_screens_dccIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.screens.com.adobe.cq.screens.dcc")] = ModelBase::toJson(m_Com_adobe_cq_screens_com_adobe_cq_screens_dcc);
    }
    if(m_Com_adobe_cq_screens_com_adobe_cq_screens_mq_coreIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.screens.com.adobe.cq.screens.mq.core")] = ModelBase::toJson(m_Com_adobe_cq_screens_com_adobe_cq_screens_mq_core);
    }
    if(m_Com_adobe_cq_social_cq_social_as_providerIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-as-provider")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_as_provider);
    }
    if(m_Com_adobe_cq_social_cq_social_badging_basic_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-badging-basic-impl")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_badging_basic_impl);
    }
    if(m_Com_adobe_cq_social_cq_social_badging_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-badging-impl")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_badging_impl);
    }
    if(m_Com_adobe_cq_social_cq_social_calendar_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-calendar-impl")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_calendar_impl);
    }
    if(m_Com_adobe_cq_social_cq_social_content_fragments_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-content-fragments-impl")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_content_fragments_impl);
    }
    if(m_Com_adobe_cq_social_cq_social_enablement_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-enablement-impl")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_enablement_impl);
    }
    if(m_Com_adobe_cq_social_cq_social_graph_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-graph-impl")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_graph_impl);
    }
    if(m_Com_adobe_cq_social_cq_social_ideation_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ideation-impl")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_ideation_impl);
    }
    if(m_Com_adobe_cq_social_cq_social_jcr_providerIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-jcr-provider")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_jcr_provider);
    }
    if(m_Com_adobe_cq_social_cq_social_members_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-members-impl")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_members_impl);
    }
    if(m_Com_adobe_cq_social_cq_social_ms_providerIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ms-provider")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_ms_provider);
    }
    if(m_Com_adobe_cq_social_cq_social_notifications_channels_webIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-notifications-channels-web")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_notifications_channels_web);
    }
    if(m_Com_adobe_cq_social_cq_social_notifications_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-notifications-impl")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_notifications_impl);
    }
    if(m_Com_adobe_cq_social_cq_social_rdb_providerIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-rdb-provider")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_rdb_provider);
    }
    if(m_Com_adobe_cq_social_cq_social_scf_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scf-impl")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_scf_impl);
    }
    if(m_Com_adobe_cq_social_cq_social_scoring_basic_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scoring-basic-impl")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_scoring_basic_impl);
    }
    if(m_Com_adobe_cq_social_cq_social_scoring_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scoring-impl")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_scoring_impl);
    }
    if(m_Com_adobe_cq_social_cq_social_serviceusers_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-serviceusers-impl")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_serviceusers_impl);
    }
    if(m_Com_adobe_cq_social_cq_social_srp_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-srp-impl")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_srp_impl);
    }
    if(m_Com_adobe_cq_social_cq_social_ugcbase_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ugcbase-impl")] = ModelBase::toJson(m_Com_adobe_cq_social_cq_social_ugcbase_impl);
    }
    if(m_Com_adobe_dam_cq_dam_cfm_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.dam.cq-dam-cfm-impl")] = ModelBase::toJson(m_Com_adobe_dam_cq_dam_cfm_impl);
    }
    if(m_Com_adobe_forms_foundation_forms_foundation_baseIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.forms.foundation-forms-foundation-base")] = ModelBase::toJson(m_Com_adobe_forms_foundation_forms_foundation_base);
    }
    if(m_Com_adobe_granite_apicontrollerIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.apicontroller")] = ModelBase::toJson(m_Com_adobe_granite_apicontroller);
    }
    if(m_Com_adobe_granite_asset_coreIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.asset.core")] = ModelBase::toJson(m_Com_adobe_granite_asset_core);
    }
    if(m_Com_adobe_granite_auth_ssoIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.auth.sso")] = ModelBase::toJson(m_Com_adobe_granite_auth_sso);
    }
    if(m_Com_adobe_granite_bundles_hc_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.bundles.hc.impl")] = ModelBase::toJson(m_Com_adobe_granite_bundles_hc_impl);
    }
    if(m_Com_adobe_granite_compat_routerIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.compat-router")] = ModelBase::toJson(m_Com_adobe_granite_compat_router);
    }
    if(m_Com_adobe_granite_confIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.conf")] = ModelBase::toJson(m_Com_adobe_granite_conf);
    }
    if(m_Com_adobe_granite_conf_ui_coreIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.conf.ui.core")] = ModelBase::toJson(m_Com_adobe_granite_conf_ui_core);
    }
    if(m_Com_adobe_granite_corsIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.cors")] = ModelBase::toJson(m_Com_adobe_granite_cors);
    }
    if(m_Com_adobe_granite_crx_explorerIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.crx-explorer")] = ModelBase::toJson(m_Com_adobe_granite_crx_explorer);
    }
    if(m_Com_adobe_granite_crxde_liteIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.crxde-lite")] = ModelBase::toJson(m_Com_adobe_granite_crxde_lite);
    }
    if(m_Com_adobe_granite_crypto_configIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.crypto.config")] = ModelBase::toJson(m_Com_adobe_granite_crypto_config);
    }
    if(m_Com_adobe_granite_crypto_extensionIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.crypto.extension")] = ModelBase::toJson(m_Com_adobe_granite_crypto_extension);
    }
    if(m_Com_adobe_granite_crypto_fileIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.crypto.file")] = ModelBase::toJson(m_Com_adobe_granite_crypto_file);
    }
    if(m_Com_adobe_granite_crypto_jcrIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.crypto.jcr")] = ModelBase::toJson(m_Com_adobe_granite_crypto_jcr);
    }
    if(m_Com_adobe_granite_csrfIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.csrf")] = ModelBase::toJson(m_Com_adobe_granite_csrf);
    }
    if(m_Com_adobe_granite_distribution_coreIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.distribution.core")] = ModelBase::toJson(m_Com_adobe_granite_distribution_core);
    }
    if(m_Com_adobe_granite_dropwizard_metricsIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.dropwizard.metrics")] = ModelBase::toJson(m_Com_adobe_granite_dropwizard_metrics);
    }
    if(m_Com_adobe_granite_frags_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.frags.impl")] = ModelBase::toJson(m_Com_adobe_granite_frags_impl);
    }
    if(m_Com_adobe_granite_gibsonIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.gibson")] = ModelBase::toJson(m_Com_adobe_granite_gibson);
    }
    if(m_Com_adobe_granite_infocollectorIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.infocollector")] = ModelBase::toJson(m_Com_adobe_granite_infocollector);
    }
    if(m_Com_adobe_granite_installer_factory_packagesIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.installer.factory.packages")] = ModelBase::toJson(m_Com_adobe_granite_installer_factory_packages);
    }
    if(m_Com_adobe_granite_jetty_sslIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl")] = ModelBase::toJson(m_Com_adobe_granite_jetty_ssl);
    }
    if(m_Com_adobe_granite_jobs_asyncIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.jobs.async")] = ModelBase::toJson(m_Com_adobe_granite_jobs_async);
    }
    if(m_Com_adobe_granite_maintenance_oakIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.maintenance.oak")] = ModelBase::toJson(m_Com_adobe_granite_maintenance_oak);
    }
    if(m_Com_adobe_granite_monitoring_coreIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.monitoring.core")] = ModelBase::toJson(m_Com_adobe_granite_monitoring_core);
    }
    if(m_Com_adobe_granite_queriesIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.queries")] = ModelBase::toJson(m_Com_adobe_granite_queries);
    }
    if(m_Com_adobe_granite_replication_hc_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.replication.hc.impl")] = ModelBase::toJson(m_Com_adobe_granite_replication_hc_impl);
    }
    if(m_Com_adobe_granite_repository_checkerIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.repository.checker")] = ModelBase::toJson(m_Com_adobe_granite_repository_checker);
    }
    if(m_Com_adobe_granite_repository_hc_implIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.repository.hc.impl")] = ModelBase::toJson(m_Com_adobe_granite_repository_hc_impl);
    }
    if(m_Com_adobe_granite_rest_assetsIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.rest.assets")] = ModelBase::toJson(m_Com_adobe_granite_rest_assets);
    }
    if(m_Com_adobe_granite_security_uiIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.security.ui")] = ModelBase::toJson(m_Com_adobe_granite_security_ui);
    }
    if(m_Com_adobe_granite_startupIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.startup")] = ModelBase::toJson(m_Com_adobe_granite_startup);
    }
    if(m_Com_adobe_granite_tagsoupIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.tagsoup")] = ModelBase::toJson(m_Com_adobe_granite_tagsoup);
    }
    if(m_Com_adobe_granite_taskmanagement_coreIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.taskmanagement.core")] = ModelBase::toJson(m_Com_adobe_granite_taskmanagement_core);
    }
    if(m_Com_adobe_granite_taskmanagement_workflowIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.taskmanagement.workflow")] = ModelBase::toJson(m_Com_adobe_granite_taskmanagement_workflow);
    }
    if(m_Com_adobe_granite_ui_clientlibs_compiler_lessIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.ui.clientlibs.compiler.less")] = ModelBase::toJson(m_Com_adobe_granite_ui_clientlibs_compiler_less);
    }
    if(m_Com_adobe_granite_ui_clientlibs_processor_gccIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.ui.clientlibs.processor.gcc")] = ModelBase::toJson(m_Com_adobe_granite_ui_clientlibs_processor_gcc);
    }
    if(m_Com_adobe_granite_webconsole_pluginsIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.webconsole.plugins")] = ModelBase::toJson(m_Com_adobe_granite_webconsole_plugins);
    }
    if(m_Com_adobe_granite_workflow_consoleIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.workflow.console")] = ModelBase::toJson(m_Com_adobe_granite_workflow_console);
    }
    if(m_Com_adobe_xmp_worker_files_native_fragment_linuxIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.linux")] = ModelBase::toJson(m_Com_adobe_xmp_worker_files_native_fragment_linux);
    }
    if(m_Com_adobe_xmp_worker_files_native_fragment_macosxIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.macosx")] = ModelBase::toJson(m_Com_adobe_xmp_worker_files_native_fragment_macosx);
    }
    if(m_Com_adobe_xmp_worker_files_native_fragment_winIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.win")] = ModelBase::toJson(m_Com_adobe_xmp_worker_files_native_fragment_win);
    }
    if(m_Com_day_commons_osgi_wrapper_simple_jndiIsSet)
    {
        val[utility::conversions::to_string_t("com.day.commons.osgi.wrapper.simple-jndi")] = ModelBase::toJson(m_Com_day_commons_osgi_wrapper_simple_jndi);
    }
    if(m_Com_day_cq_cq_authhandlerIsSet)
    {
        val[utility::conversions::to_string_t("com.day.cq.cq-authhandler")] = ModelBase::toJson(m_Com_day_cq_cq_authhandler);
    }
    if(m_Com_day_cq_cq_compat_configupdateIsSet)
    {
        val[utility::conversions::to_string_t("com.day.cq.cq-compat-configupdate")] = ModelBase::toJson(m_Com_day_cq_cq_compat_configupdate);
    }
    if(m_Com_day_cq_cq_licensebrandingIsSet)
    {
        val[utility::conversions::to_string_t("com.day.cq.cq-licensebranding")] = ModelBase::toJson(m_Com_day_cq_cq_licensebranding);
    }
    if(m_Com_day_cq_cq_notifcation_implIsSet)
    {
        val[utility::conversions::to_string_t("com.day.cq.cq-notifcation-impl")] = ModelBase::toJson(m_Com_day_cq_cq_notifcation_impl);
    }
    if(m_Com_day_cq_cq_replication_auditIsSet)
    {
        val[utility::conversions::to_string_t("com.day.cq.cq-replication-audit")] = ModelBase::toJson(m_Com_day_cq_cq_replication_audit);
    }
    if(m_Com_day_cq_cq_search_extIsSet)
    {
        val[utility::conversions::to_string_t("com.day.cq.cq-search-ext")] = ModelBase::toJson(m_Com_day_cq_cq_search_ext);
    }
    if(m_Com_day_cq_dam_cq_dam_annotation_printIsSet)
    {
        val[utility::conversions::to_string_t("com.day.cq.dam.cq-dam-annotation-print")] = ModelBase::toJson(m_Com_day_cq_dam_cq_dam_annotation_print);
    }
    if(m_Com_day_cq_dam_cq_dam_asset_usageIsSet)
    {
        val[utility::conversions::to_string_t("com.day.cq.dam.cq-dam-asset-usage")] = ModelBase::toJson(m_Com_day_cq_dam_cq_dam_asset_usage);
    }
    if(m_Com_day_cq_dam_cq_dam_s7damIsSet)
    {
        val[utility::conversions::to_string_t("com.day.cq.dam.cq-dam-s7dam")] = ModelBase::toJson(m_Com_day_cq_dam_cq_dam_s7dam);
    }
    if(m_Com_day_cq_dam_cq_dam_similaritysearchIsSet)
    {
        val[utility::conversions::to_string_t("com.day.cq.dam.cq-dam-similaritysearch")] = ModelBase::toJson(m_Com_day_cq_dam_cq_dam_similaritysearch);
    }
    if(m_Com_day_cq_dam_dam_webdav_supportIsSet)
    {
        val[utility::conversions::to_string_t("com.day.cq.dam.dam-webdav-support")] = ModelBase::toJson(m_Com_day_cq_dam_dam_webdav_support);
    }
    if(m_Com_day_cq_pre_upgrade_tasksIsSet)
    {
        val[utility::conversions::to_string_t("com.day.cq.pre-upgrade-tasks")] = ModelBase::toJson(m_Com_day_cq_pre_upgrade_tasks);
    }
    if(m_Com_day_cq_replication_extensionsIsSet)
    {
        val[utility::conversions::to_string_t("com.day.cq.replication.extensions")] = ModelBase::toJson(m_Com_day_cq_replication_extensions);
    }
    if(m_Com_day_cq_wcm_cq_msm_coreIsSet)
    {
        val[utility::conversions::to_string_t("com.day.cq.wcm.cq-msm-core")] = ModelBase::toJson(m_Com_day_cq_wcm_cq_msm_core);
    }
    if(m_Com_day_cq_wcm_cq_wcm_translationIsSet)
    {
        val[utility::conversions::to_string_t("com.day.cq.wcm.cq-wcm-translation")] = ModelBase::toJson(m_Com_day_cq_wcm_cq_wcm_translation);
    }
    if(m_Day_commons_jrawioIsSet)
    {
        val[utility::conversions::to_string_t("day-commons-jrawio")] = ModelBase::toJson(m_Day_commons_jrawio);
    }
    if(m_Org_apache_aries_jmx_whiteboardIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.aries.jmx.whiteboard")] = ModelBase::toJson(m_Org_apache_aries_jmx_whiteboard);
    }
    if(m_Org_apache_felix_http_sslfilterIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.http.sslfilter")] = ModelBase::toJson(m_Org_apache_felix_http_sslfilter);
    }
    if(m_Org_apache_felix_org_apache_felix_threaddumpIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.org.apache.felix.threaddump")] = ModelBase::toJson(m_Org_apache_felix_org_apache_felix_threaddump);
    }
    if(m_Org_apache_felix_webconsole_plugins_dsIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.ds")] = ModelBase::toJson(m_Org_apache_felix_webconsole_plugins_ds);
    }
    if(m_Org_apache_felix_webconsole_plugins_eventIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.event")] = ModelBase::toJson(m_Org_apache_felix_webconsole_plugins_event);
    }
    if(m_Org_apache_felix_webconsole_plugins_memoryusageIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.memoryusage")] = ModelBase::toJson(m_Org_apache_felix_webconsole_plugins_memoryusage);
    }
    if(m_Org_apache_felix_webconsole_plugins_packageadminIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.packageadmin")] = ModelBase::toJson(m_Org_apache_felix_webconsole_plugins_packageadmin);
    }
    if(m_Org_apache_jackrabbit_oak_auth_ldapIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.jackrabbit.oak-auth-ldap")] = ModelBase::toJson(m_Org_apache_jackrabbit_oak_auth_ldap);
    }
    if(m_Org_apache_jackrabbit_oak_segment_tarIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.jackrabbit.oak-segment-tar")] = ModelBase::toJson(m_Org_apache_jackrabbit_oak_segment_tar);
    }
    if(m_Org_apache_jackrabbit_oak_solr_osgiIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.jackrabbit.oak-solr-osgi")] = ModelBase::toJson(m_Org_apache_jackrabbit_oak_solr_osgi);
    }
    if(m_Org_apache_sling_bundleresource_implIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.bundleresource.impl")] = ModelBase::toJson(m_Org_apache_sling_bundleresource_impl);
    }
    if(m_Org_apache_sling_commons_fsclassloaderIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.fsclassloader")] = ModelBase::toJson(m_Org_apache_sling_commons_fsclassloader);
    }
    if(m_Org_apache_sling_commons_log_webconsoleIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.webconsole")] = ModelBase::toJson(m_Org_apache_sling_commons_log_webconsole);
    }
    if(m_Org_apache_sling_datasourceIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.datasource")] = ModelBase::toJson(m_Org_apache_sling_datasource);
    }
    if(m_Org_apache_sling_discovery_baseIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.discovery.base")] = ModelBase::toJson(m_Org_apache_sling_discovery_base);
    }
    if(m_Org_apache_sling_discovery_oakIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.discovery.oak")] = ModelBase::toJson(m_Org_apache_sling_discovery_oak);
    }
    if(m_Org_apache_sling_discovery_supportIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.discovery.support")] = ModelBase::toJson(m_Org_apache_sling_discovery_support);
    }
    if(m_Org_apache_sling_distribution_apiIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.distribution.api")] = ModelBase::toJson(m_Org_apache_sling_distribution_api);
    }
    if(m_Org_apache_sling_distribution_coreIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.distribution.core")] = ModelBase::toJson(m_Org_apache_sling_distribution_core);
    }
    if(m_Org_apache_sling_extensions_webconsolesecurityproviderIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.extensions.webconsolesecurityprovider")] = ModelBase::toJson(m_Org_apache_sling_extensions_webconsolesecurityprovider);
    }
    if(m_Org_apache_sling_hc_webconsoleIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.hc.webconsole")] = ModelBase::toJson(m_Org_apache_sling_hc_webconsole);
    }
    if(m_Org_apache_sling_installer_consoleIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.installer.console")] = ModelBase::toJson(m_Org_apache_sling_installer_console);
    }
    if(m_Org_apache_sling_installer_provider_fileIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.installer.provider.file")] = ModelBase::toJson(m_Org_apache_sling_installer_provider_file);
    }
    if(m_Org_apache_sling_installer_provider_jcrIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.installer.provider.jcr")] = ModelBase::toJson(m_Org_apache_sling_installer_provider_jcr);
    }
    if(m_Org_apache_sling_jcr_davexIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.jcr.davex")] = ModelBase::toJson(m_Org_apache_sling_jcr_davex);
    }
    if(m_Org_apache_sling_jcr_resourcesecurityIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.jcr.resourcesecurity")] = ModelBase::toJson(m_Org_apache_sling_jcr_resourcesecurity);
    }
    if(m_Org_apache_sling_jmx_providerIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.jmx.provider")] = ModelBase::toJson(m_Org_apache_sling_jmx_provider);
    }
    if(m_Org_apache_sling_launchpad_installerIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.launchpad.installer")] = ModelBase::toJson(m_Org_apache_sling_launchpad_installer);
    }
    if(m_Org_apache_sling_models_implIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.models.impl")] = ModelBase::toJson(m_Org_apache_sling_models_impl);
    }
    if(m_Org_apache_sling_repoinit_parserIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.repoinit.parser")] = ModelBase::toJson(m_Org_apache_sling_repoinit_parser);
    }
    if(m_Org_apache_sling_resource_inventoryIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.resource.inventory")] = ModelBase::toJson(m_Org_apache_sling_resource_inventory);
    }
    if(m_Org_apache_sling_resourceresolverIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.resourceresolver")] = ModelBase::toJson(m_Org_apache_sling_resourceresolver);
    }
    if(m_Org_apache_sling_scripting_javascriptIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.scripting.javascript")] = ModelBase::toJson(m_Org_apache_sling_scripting_javascript);
    }
    if(m_Org_apache_sling_scripting_jstIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.scripting.jst")] = ModelBase::toJson(m_Org_apache_sling_scripting_jst);
    }
    if(m_Org_apache_sling_scripting_sightly_js_providerIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.scripting.sightly.js.provider")] = ModelBase::toJson(m_Org_apache_sling_scripting_sightly_js_provider);
    }
    if(m_Org_apache_sling_scripting_sightly_models_providerIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.scripting.sightly.models.provider")] = ModelBase::toJson(m_Org_apache_sling_scripting_sightly_models_provider);
    }
    if(m_Org_apache_sling_securityIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.security")] = ModelBase::toJson(m_Org_apache_sling_security);
    }
    if(m_Org_apache_sling_servlets_compatIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.servlets.compat")] = ModelBase::toJson(m_Org_apache_sling_servlets_compat);
    }
    if(m_Org_apache_sling_servlets_getIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.servlets.get")] = ModelBase::toJson(m_Org_apache_sling_servlets_get);
    }
    if(m_Org_apache_sling_startupfilter_disablerIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.startupfilter.disabler")] = ModelBase::toJson(m_Org_apache_sling_startupfilter_disabler);
    }
    if(m_Org_apache_sling_tracerIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.tracer")] = ModelBase::toJson(m_Org_apache_sling_tracer);
    }
    if(m_We_retail_client_app_coreIsSet)
    {
        val[utility::conversions::to_string_t("we.retail.client.app.core")] = ModelBase::toJson(m_We_retail_client_app_core);
    }

    return val;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.cdn.cdn-rewriter")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.cdn.cdn-rewriter")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.cdn.cdn-rewriter")]);
            setComAdobeCqCdnCdnRewriter( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.cloud-config.components")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.cloud-config.components")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.cloud-config.components")]);
            setComAdobeCqCloudConfigComponents( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.cloud-config.core")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.cloud-config.core")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.cloud-config.core")]);
            setComAdobeCqCloudConfigCore( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.cloud-config.ui")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.cloud-config.ui")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.cloud-config.ui")]);
            setComAdobeCqCloudConfigUi( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.editor")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.editor")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.editor")]);
            setComAdobeCqComAdobeCqEditor( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.projects.core")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.projects.core")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.projects.core")]);
            setComAdobeCqComAdobeCqProjectsCore( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.projects.wcm.core")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.projects.wcm.core")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.projects.wcm.core")]);
            setComAdobeCqComAdobeCqProjectsWcmCore( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.ui.commons")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.ui.commons")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.ui.commons")]);
            setComAdobeCqComAdobeCqUiCommons( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.wcm.style")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.wcm.style")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.wcm.style")]);
            setComAdobeCqComAdobeCqWcmStyle( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.cq-activitymap-integration")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.cq-activitymap-integration")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.cq-activitymap-integration")]);
            setComAdobeCqCqActivitymapIntegration( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.cq-contexthub-commons")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.cq-contexthub-commons")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.cq-contexthub-commons")]);
            setComAdobeCqCqContexthubCommons( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.cq-dtm")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.cq-dtm")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.cq-dtm")]);
            setComAdobeCqCqDtm( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.cq-healthcheck")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.cq-healthcheck")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.cq-healthcheck")]);
            setComAdobeCqCqHealthcheck( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.cq-multisite-targeting")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.cq-multisite-targeting")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.cq-multisite-targeting")]);
            setComAdobeCqCqMultisiteTargeting( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.cq-pre-upgrade-cleanup")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.cq-pre-upgrade-cleanup")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.cq-pre-upgrade-cleanup")]);
            setComAdobeCqCqPreUpgradeCleanup( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.cq-product-info-provider")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.cq-product-info-provider")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.cq-product-info-provider")]);
            setComAdobeCqCqProductInfoProvider( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.cq-rest-sites")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.cq-rest-sites")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.cq-rest-sites")]);
            setComAdobeCqCqRestSites( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.cq-security-hc")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.cq-security-hc")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.cq-security-hc")]);
            setComAdobeCqCqSecurityHc( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.dam.cq-dam-svg-handler")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.dam.cq-dam-svg-handler")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.dam.cq-dam-svg-handler")]);
            setComAdobeCqDamCqDamSvgHandler( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.dam.cq-scene7-imaging")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.dam.cq-scene7-imaging")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.dam.cq-scene7-imaging")]);
            setComAdobeCqDamCqScene7Imaging( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.dtm-reactor.core")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.dtm-reactor.core")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.dtm-reactor.core")]);
            setComAdobeCqDtmReactorCore( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.dtm-reactor.ui")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.dtm-reactor.ui")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.dtm-reactor.ui")]);
            setComAdobeCqDtmReactorUi( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.exp-jspel-resolver")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.exp-jspel-resolver")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.exp-jspel-resolver")]);
            setComAdobeCqExpJspelResolver( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.inbox.cq-inbox")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.inbox.cq-inbox")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.inbox.cq-inbox")]);
            setComAdobeCqInboxCqInbox( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.json-schema-parser")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.json-schema-parser")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.json-schema-parser")]);
            setComAdobeCqJsonSchemaParser( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.media.cq-media-publishing-dps-fp-core")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.media.cq-media-publishing-dps-fp-core")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.media.cq-media-publishing-dps-fp-core")]);
            setComAdobeCqMediaCqMediaPublishingDpsFpCore( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-caas")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-caas")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-caas")]);
            setComAdobeCqMobileCqMobileCaas( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-index-builder")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-index-builder")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-index-builder")]);
            setComAdobeCqMobileCqMobileIndexBuilder( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-phonegap-build")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-phonegap-build")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-phonegap-build")]);
            setComAdobeCqMobileCqMobilePhonegapBuild( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.myspell")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.myspell")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.myspell")]);
            setComAdobeCqMyspell( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.sample.we.retail.core")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.sample.we.retail.core")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.sample.we.retail.core")]);
            setComAdobeCqSampleWeRetailCore( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.screens.com.adobe.cq.screens.dcc")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.screens.com.adobe.cq.screens.dcc")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.screens.com.adobe.cq.screens.dcc")]);
            setComAdobeCqScreensComAdobeCqScreensDcc( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.screens.com.adobe.cq.screens.mq.core")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.screens.com.adobe.cq.screens.mq.core")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.screens.com.adobe.cq.screens.mq.core")]);
            setComAdobeCqScreensComAdobeCqScreensMqCore( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-as-provider")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-as-provider")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-as-provider")]);
            setComAdobeCqSocialCqSocialAsProvider( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-badging-basic-impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-badging-basic-impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-badging-basic-impl")]);
            setComAdobeCqSocialCqSocialBadgingBasicImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-badging-impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-badging-impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-badging-impl")]);
            setComAdobeCqSocialCqSocialBadgingImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-calendar-impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-calendar-impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-calendar-impl")]);
            setComAdobeCqSocialCqSocialCalendarImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-content-fragments-impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-content-fragments-impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-content-fragments-impl")]);
            setComAdobeCqSocialCqSocialContentFragmentsImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-enablement-impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-enablement-impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-enablement-impl")]);
            setComAdobeCqSocialCqSocialEnablementImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-graph-impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-graph-impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-graph-impl")]);
            setComAdobeCqSocialCqSocialGraphImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ideation-impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ideation-impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ideation-impl")]);
            setComAdobeCqSocialCqSocialIdeationImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-jcr-provider")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-jcr-provider")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-jcr-provider")]);
            setComAdobeCqSocialCqSocialJcrProvider( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-members-impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-members-impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-members-impl")]);
            setComAdobeCqSocialCqSocialMembersImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ms-provider")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ms-provider")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ms-provider")]);
            setComAdobeCqSocialCqSocialMsProvider( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-notifications-channels-web")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-notifications-channels-web")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-notifications-channels-web")]);
            setComAdobeCqSocialCqSocialNotificationsChannelsWeb( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-notifications-impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-notifications-impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-notifications-impl")]);
            setComAdobeCqSocialCqSocialNotificationsImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-rdb-provider")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-rdb-provider")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-rdb-provider")]);
            setComAdobeCqSocialCqSocialRdbProvider( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scf-impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scf-impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scf-impl")]);
            setComAdobeCqSocialCqSocialScfImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scoring-basic-impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scoring-basic-impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scoring-basic-impl")]);
            setComAdobeCqSocialCqSocialScoringBasicImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scoring-impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scoring-impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scoring-impl")]);
            setComAdobeCqSocialCqSocialScoringImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-serviceusers-impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-serviceusers-impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-serviceusers-impl")]);
            setComAdobeCqSocialCqSocialServiceusersImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-srp-impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-srp-impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-srp-impl")]);
            setComAdobeCqSocialCqSocialSrpImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ugcbase-impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ugcbase-impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ugcbase-impl")]);
            setComAdobeCqSocialCqSocialUgcbaseImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.dam.cq-dam-cfm-impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.dam.cq-dam-cfm-impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.dam.cq-dam-cfm-impl")]);
            setComAdobeDamCqDamCfmImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.forms.foundation-forms-foundation-base")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.forms.foundation-forms-foundation-base")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.forms.foundation-forms-foundation-base")]);
            setComAdobeFormsFoundationFormsFoundationBase( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.apicontroller")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.apicontroller")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.apicontroller")]);
            setComAdobeGraniteApicontroller( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.asset.core")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.asset.core")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.asset.core")]);
            setComAdobeGraniteAssetCore( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.auth.sso")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.auth.sso")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.auth.sso")]);
            setComAdobeGraniteAuthSso( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.bundles.hc.impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.bundles.hc.impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.bundles.hc.impl")]);
            setComAdobeGraniteBundlesHcImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.compat-router")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.compat-router")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.compat-router")]);
            setComAdobeGraniteCompatRouter( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.conf")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.conf")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.conf")]);
            setComAdobeGraniteConf( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.conf.ui.core")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.conf.ui.core")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.conf.ui.core")]);
            setComAdobeGraniteConfUiCore( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.cors")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.cors")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.cors")]);
            setComAdobeGraniteCors( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.crx-explorer")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.crx-explorer")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.crx-explorer")]);
            setComAdobeGraniteCrxExplorer( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.crxde-lite")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.crxde-lite")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.crxde-lite")]);
            setComAdobeGraniteCrxdeLite( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.crypto.config")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.crypto.config")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.crypto.config")]);
            setComAdobeGraniteCryptoConfig( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.crypto.extension")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.crypto.extension")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.crypto.extension")]);
            setComAdobeGraniteCryptoExtension( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.crypto.file")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.crypto.file")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.crypto.file")]);
            setComAdobeGraniteCryptoFile( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.crypto.jcr")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.crypto.jcr")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.crypto.jcr")]);
            setComAdobeGraniteCryptoJcr( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.csrf")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.csrf")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.csrf")]);
            setComAdobeGraniteCsrf( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.distribution.core")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.distribution.core")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.distribution.core")]);
            setComAdobeGraniteDistributionCore( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.dropwizard.metrics")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.dropwizard.metrics")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.dropwizard.metrics")]);
            setComAdobeGraniteDropwizardMetrics( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.frags.impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.frags.impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.frags.impl")]);
            setComAdobeGraniteFragsImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.gibson")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.gibson")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.gibson")]);
            setComAdobeGraniteGibson( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.infocollector")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.infocollector")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.infocollector")]);
            setComAdobeGraniteInfocollector( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.installer.factory.packages")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.installer.factory.packages")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.installer.factory.packages")]);
            setComAdobeGraniteInstallerFactoryPackages( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl")]);
            setComAdobeGraniteJettySsl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.jobs.async")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.jobs.async")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.jobs.async")]);
            setComAdobeGraniteJobsAsync( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.maintenance.oak")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.maintenance.oak")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.maintenance.oak")]);
            setComAdobeGraniteMaintenanceOak( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.monitoring.core")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.monitoring.core")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.monitoring.core")]);
            setComAdobeGraniteMonitoringCore( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.queries")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.queries")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.queries")]);
            setComAdobeGraniteQueries( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.replication.hc.impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.replication.hc.impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.replication.hc.impl")]);
            setComAdobeGraniteReplicationHcImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.repository.checker")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.repository.checker")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.repository.checker")]);
            setComAdobeGraniteRepositoryChecker( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.repository.hc.impl")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.repository.hc.impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.repository.hc.impl")]);
            setComAdobeGraniteRepositoryHcImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.rest.assets")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.rest.assets")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.rest.assets")]);
            setComAdobeGraniteRestAssets( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.security.ui")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.security.ui")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.security.ui")]);
            setComAdobeGraniteSecurityUi( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.startup")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.startup")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.startup")]);
            setComAdobeGraniteStartup( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.tagsoup")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.tagsoup")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.tagsoup")]);
            setComAdobeGraniteTagsoup( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.taskmanagement.core")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.taskmanagement.core")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.taskmanagement.core")]);
            setComAdobeGraniteTaskmanagementCore( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.taskmanagement.workflow")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.taskmanagement.workflow")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.taskmanagement.workflow")]);
            setComAdobeGraniteTaskmanagementWorkflow( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.ui.clientlibs.compiler.less")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.ui.clientlibs.compiler.less")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.ui.clientlibs.compiler.less")]);
            setComAdobeGraniteUiClientlibsCompilerLess( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.ui.clientlibs.processor.gcc")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.ui.clientlibs.processor.gcc")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.ui.clientlibs.processor.gcc")]);
            setComAdobeGraniteUiClientlibsProcessorGcc( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.webconsole.plugins")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.webconsole.plugins")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.webconsole.plugins")]);
            setComAdobeGraniteWebconsolePlugins( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.workflow.console")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.workflow.console")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.workflow.console")]);
            setComAdobeGraniteWorkflowConsole( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.linux")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.linux")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.linux")]);
            setComAdobeXmpWorkerFilesNativeFragmentLinux( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.macosx")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.macosx")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.macosx")]);
            setComAdobeXmpWorkerFilesNativeFragmentMacosx( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.win")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.win")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.win")]);
            setComAdobeXmpWorkerFilesNativeFragmentWin( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.day.commons.osgi.wrapper.simple-jndi")))
    {
        if(!val[utility::conversions::to_string_t("com.day.commons.osgi.wrapper.simple-jndi")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.day.commons.osgi.wrapper.simple-jndi")]);
            setComDayCommonsOsgiWrapperSimpleJndi( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.day.cq.cq-authhandler")))
    {
        if(!val[utility::conversions::to_string_t("com.day.cq.cq-authhandler")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.day.cq.cq-authhandler")]);
            setComDayCqCqAuthhandler( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.day.cq.cq-compat-configupdate")))
    {
        if(!val[utility::conversions::to_string_t("com.day.cq.cq-compat-configupdate")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.day.cq.cq-compat-configupdate")]);
            setComDayCqCqCompatConfigupdate( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.day.cq.cq-licensebranding")))
    {
        if(!val[utility::conversions::to_string_t("com.day.cq.cq-licensebranding")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.day.cq.cq-licensebranding")]);
            setComDayCqCqLicensebranding( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.day.cq.cq-notifcation-impl")))
    {
        if(!val[utility::conversions::to_string_t("com.day.cq.cq-notifcation-impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.day.cq.cq-notifcation-impl")]);
            setComDayCqCqNotifcationImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.day.cq.cq-replication-audit")))
    {
        if(!val[utility::conversions::to_string_t("com.day.cq.cq-replication-audit")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.day.cq.cq-replication-audit")]);
            setComDayCqCqReplicationAudit( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.day.cq.cq-search-ext")))
    {
        if(!val[utility::conversions::to_string_t("com.day.cq.cq-search-ext")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.day.cq.cq-search-ext")]);
            setComDayCqCqSearchExt( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.day.cq.dam.cq-dam-annotation-print")))
    {
        if(!val[utility::conversions::to_string_t("com.day.cq.dam.cq-dam-annotation-print")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.day.cq.dam.cq-dam-annotation-print")]);
            setComDayCqDamCqDamAnnotationPrint( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.day.cq.dam.cq-dam-asset-usage")))
    {
        if(!val[utility::conversions::to_string_t("com.day.cq.dam.cq-dam-asset-usage")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.day.cq.dam.cq-dam-asset-usage")]);
            setComDayCqDamCqDamAssetUsage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.day.cq.dam.cq-dam-s7dam")))
    {
        if(!val[utility::conversions::to_string_t("com.day.cq.dam.cq-dam-s7dam")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.day.cq.dam.cq-dam-s7dam")]);
            setComDayCqDamCqDamS7dam( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.day.cq.dam.cq-dam-similaritysearch")))
    {
        if(!val[utility::conversions::to_string_t("com.day.cq.dam.cq-dam-similaritysearch")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.day.cq.dam.cq-dam-similaritysearch")]);
            setComDayCqDamCqDamSimilaritysearch( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.day.cq.dam.dam-webdav-support")))
    {
        if(!val[utility::conversions::to_string_t("com.day.cq.dam.dam-webdav-support")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.day.cq.dam.dam-webdav-support")]);
            setComDayCqDamDamWebdavSupport( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.day.cq.pre-upgrade-tasks")))
    {
        if(!val[utility::conversions::to_string_t("com.day.cq.pre-upgrade-tasks")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.day.cq.pre-upgrade-tasks")]);
            setComDayCqPreUpgradeTasks( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.day.cq.replication.extensions")))
    {
        if(!val[utility::conversions::to_string_t("com.day.cq.replication.extensions")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.day.cq.replication.extensions")]);
            setComDayCqReplicationExtensions( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.day.cq.wcm.cq-msm-core")))
    {
        if(!val[utility::conversions::to_string_t("com.day.cq.wcm.cq-msm-core")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.day.cq.wcm.cq-msm-core")]);
            setComDayCqWcmCqMsmCore( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.day.cq.wcm.cq-wcm-translation")))
    {
        if(!val[utility::conversions::to_string_t("com.day.cq.wcm.cq-wcm-translation")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.day.cq.wcm.cq-wcm-translation")]);
            setComDayCqWcmCqWcmTranslation( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("day-commons-jrawio")))
    {
        if(!val[utility::conversions::to_string_t("day-commons-jrawio")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("day-commons-jrawio")]);
            setDayCommonsJrawio( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.aries.jmx.whiteboard")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.aries.jmx.whiteboard")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.aries.jmx.whiteboard")]);
            setOrgApacheAriesJmxWhiteboard( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.http.sslfilter")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.http.sslfilter")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.http.sslfilter")]);
            setOrgApacheFelixHttpSslfilter( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.org.apache.felix.threaddump")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.org.apache.felix.threaddump")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.org.apache.felix.threaddump")]);
            setOrgApacheFelixOrgApacheFelixThreaddump( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.ds")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.ds")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.ds")]);
            setOrgApacheFelixWebconsolePluginsDs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.event")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.event")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.event")]);
            setOrgApacheFelixWebconsolePluginsEvent( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.memoryusage")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.memoryusage")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.memoryusage")]);
            setOrgApacheFelixWebconsolePluginsMemoryusage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.packageadmin")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.packageadmin")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.packageadmin")]);
            setOrgApacheFelixWebconsolePluginsPackageadmin( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.jackrabbit.oak-auth-ldap")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.jackrabbit.oak-auth-ldap")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.jackrabbit.oak-auth-ldap")]);
            setOrgApacheJackrabbitOakAuthLdap( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.jackrabbit.oak-segment-tar")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.jackrabbit.oak-segment-tar")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.jackrabbit.oak-segment-tar")]);
            setOrgApacheJackrabbitOakSegmentTar( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.jackrabbit.oak-solr-osgi")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.jackrabbit.oak-solr-osgi")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.jackrabbit.oak-solr-osgi")]);
            setOrgApacheJackrabbitOakSolrOsgi( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.bundleresource.impl")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.bundleresource.impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.bundleresource.impl")]);
            setOrgApacheSlingBundleresourceImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.fsclassloader")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.fsclassloader")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.fsclassloader")]);
            setOrgApacheSlingCommonsFsclassloader( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.webconsole")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.webconsole")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.webconsole")]);
            setOrgApacheSlingCommonsLogWebconsole( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.datasource")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.datasource")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.datasource")]);
            setOrgApacheSlingDatasource( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.discovery.base")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.discovery.base")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.discovery.base")]);
            setOrgApacheSlingDiscoveryBase( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.discovery.oak")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.discovery.oak")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.discovery.oak")]);
            setOrgApacheSlingDiscoveryOak( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.discovery.support")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.discovery.support")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.discovery.support")]);
            setOrgApacheSlingDiscoverySupport( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.distribution.api")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.distribution.api")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.distribution.api")]);
            setOrgApacheSlingDistributionApi( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.distribution.core")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.distribution.core")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.distribution.core")]);
            setOrgApacheSlingDistributionCore( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.extensions.webconsolesecurityprovider")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.extensions.webconsolesecurityprovider")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.extensions.webconsolesecurityprovider")]);
            setOrgApacheSlingExtensionsWebconsolesecurityprovider( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.hc.webconsole")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.hc.webconsole")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.hc.webconsole")]);
            setOrgApacheSlingHcWebconsole( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.installer.console")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.installer.console")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.installer.console")]);
            setOrgApacheSlingInstallerConsole( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.installer.provider.file")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.installer.provider.file")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.installer.provider.file")]);
            setOrgApacheSlingInstallerProviderFile( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.installer.provider.jcr")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.installer.provider.jcr")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.installer.provider.jcr")]);
            setOrgApacheSlingInstallerProviderJcr( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.jcr.davex")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.jcr.davex")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.jcr.davex")]);
            setOrgApacheSlingJcrDavex( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.jcr.resourcesecurity")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.jcr.resourcesecurity")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.jcr.resourcesecurity")]);
            setOrgApacheSlingJcrResourcesecurity( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.jmx.provider")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.jmx.provider")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.jmx.provider")]);
            setOrgApacheSlingJmxProvider( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.launchpad.installer")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.launchpad.installer")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.launchpad.installer")]);
            setOrgApacheSlingLaunchpadInstaller( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.models.impl")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.models.impl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.models.impl")]);
            setOrgApacheSlingModelsImpl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.repoinit.parser")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.repoinit.parser")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.repoinit.parser")]);
            setOrgApacheSlingRepoinitParser( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.resource.inventory")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.resource.inventory")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.resource.inventory")]);
            setOrgApacheSlingResourceInventory( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.resourceresolver")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.resourceresolver")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.resourceresolver")]);
            setOrgApacheSlingResourceresolver( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.scripting.javascript")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.scripting.javascript")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.scripting.javascript")]);
            setOrgApacheSlingScriptingJavascript( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.scripting.jst")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.scripting.jst")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.scripting.jst")]);
            setOrgApacheSlingScriptingJst( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.scripting.sightly.js.provider")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.scripting.sightly.js.provider")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.scripting.sightly.js.provider")]);
            setOrgApacheSlingScriptingSightlyJsProvider( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.scripting.sightly.models.provider")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.scripting.sightly.models.provider")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.scripting.sightly.models.provider")]);
            setOrgApacheSlingScriptingSightlyModelsProvider( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.security")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.security")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.security")]);
            setOrgApacheSlingSecurity( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.servlets.compat")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.servlets.compat")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.servlets.compat")]);
            setOrgApacheSlingServletsCompat( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.servlets.get")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.servlets.get")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.servlets.get")]);
            setOrgApacheSlingServletsGet( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.startupfilter.disabler")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.startupfilter.disabler")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.startupfilter.disabler")]);
            setOrgApacheSlingStartupfilterDisabler( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.tracer")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.tracer")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.tracer")]);
            setOrgApacheSlingTracer( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("we.retail.client.app.core")))
    {
        if(!val[utility::conversions::to_string_t("we.retail.client.app.core")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("we.retail.client.app.core")]);
            setWeRetailClientAppCore( newItem );
        }
    }
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Com_adobe_cq_cdn_cdn_rewriterIsSet)
    {
        if (m_Com_adobe_cq_cdn_cdn_rewriter.get())
        {
            m_Com_adobe_cq_cdn_cdn_rewriter->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.cdn.cdn-rewriter."));
        }
    }
    if(m_Com_adobe_cq_cloud_config_componentsIsSet)
    {
        if (m_Com_adobe_cq_cloud_config_components.get())
        {
            m_Com_adobe_cq_cloud_config_components->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.cloud-config.components."));
        }
    }
    if(m_Com_adobe_cq_cloud_config_coreIsSet)
    {
        if (m_Com_adobe_cq_cloud_config_core.get())
        {
            m_Com_adobe_cq_cloud_config_core->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.cloud-config.core."));
        }
    }
    if(m_Com_adobe_cq_cloud_config_uiIsSet)
    {
        if (m_Com_adobe_cq_cloud_config_ui.get())
        {
            m_Com_adobe_cq_cloud_config_ui->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.cloud-config.ui."));
        }
    }
    if(m_Com_adobe_cq_com_adobe_cq_editorIsSet)
    {
        if (m_Com_adobe_cq_com_adobe_cq_editor.get())
        {
            m_Com_adobe_cq_com_adobe_cq_editor->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.editor."));
        }
    }
    if(m_Com_adobe_cq_com_adobe_cq_projects_coreIsSet)
    {
        if (m_Com_adobe_cq_com_adobe_cq_projects_core.get())
        {
            m_Com_adobe_cq_com_adobe_cq_projects_core->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.projects.core."));
        }
    }
    if(m_Com_adobe_cq_com_adobe_cq_projects_wcm_coreIsSet)
    {
        if (m_Com_adobe_cq_com_adobe_cq_projects_wcm_core.get())
        {
            m_Com_adobe_cq_com_adobe_cq_projects_wcm_core->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.projects.wcm.core."));
        }
    }
    if(m_Com_adobe_cq_com_adobe_cq_ui_commonsIsSet)
    {
        if (m_Com_adobe_cq_com_adobe_cq_ui_commons.get())
        {
            m_Com_adobe_cq_com_adobe_cq_ui_commons->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.ui.commons."));
        }
    }
    if(m_Com_adobe_cq_com_adobe_cq_wcm_styleIsSet)
    {
        if (m_Com_adobe_cq_com_adobe_cq_wcm_style.get())
        {
            m_Com_adobe_cq_com_adobe_cq_wcm_style->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.wcm.style."));
        }
    }
    if(m_Com_adobe_cq_cq_activitymap_integrationIsSet)
    {
        if (m_Com_adobe_cq_cq_activitymap_integration.get())
        {
            m_Com_adobe_cq_cq_activitymap_integration->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.cq-activitymap-integration."));
        }
    }
    if(m_Com_adobe_cq_cq_contexthub_commonsIsSet)
    {
        if (m_Com_adobe_cq_cq_contexthub_commons.get())
        {
            m_Com_adobe_cq_cq_contexthub_commons->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.cq-contexthub-commons."));
        }
    }
    if(m_Com_adobe_cq_cq_dtmIsSet)
    {
        if (m_Com_adobe_cq_cq_dtm.get())
        {
            m_Com_adobe_cq_cq_dtm->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.cq-dtm."));
        }
    }
    if(m_Com_adobe_cq_cq_healthcheckIsSet)
    {
        if (m_Com_adobe_cq_cq_healthcheck.get())
        {
            m_Com_adobe_cq_cq_healthcheck->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.cq-healthcheck."));
        }
    }
    if(m_Com_adobe_cq_cq_multisite_targetingIsSet)
    {
        if (m_Com_adobe_cq_cq_multisite_targeting.get())
        {
            m_Com_adobe_cq_cq_multisite_targeting->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.cq-multisite-targeting."));
        }
    }
    if(m_Com_adobe_cq_cq_pre_upgrade_cleanupIsSet)
    {
        if (m_Com_adobe_cq_cq_pre_upgrade_cleanup.get())
        {
            m_Com_adobe_cq_cq_pre_upgrade_cleanup->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.cq-pre-upgrade-cleanup."));
        }
    }
    if(m_Com_adobe_cq_cq_product_info_providerIsSet)
    {
        if (m_Com_adobe_cq_cq_product_info_provider.get())
        {
            m_Com_adobe_cq_cq_product_info_provider->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.cq-product-info-provider."));
        }
    }
    if(m_Com_adobe_cq_cq_rest_sitesIsSet)
    {
        if (m_Com_adobe_cq_cq_rest_sites.get())
        {
            m_Com_adobe_cq_cq_rest_sites->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.cq-rest-sites."));
        }
    }
    if(m_Com_adobe_cq_cq_security_hcIsSet)
    {
        if (m_Com_adobe_cq_cq_security_hc.get())
        {
            m_Com_adobe_cq_cq_security_hc->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.cq-security-hc."));
        }
    }
    if(m_Com_adobe_cq_dam_cq_dam_svg_handlerIsSet)
    {
        if (m_Com_adobe_cq_dam_cq_dam_svg_handler.get())
        {
            m_Com_adobe_cq_dam_cq_dam_svg_handler->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.dam.cq-dam-svg-handler."));
        }
    }
    if(m_Com_adobe_cq_dam_cq_scene7_imagingIsSet)
    {
        if (m_Com_adobe_cq_dam_cq_scene7_imaging.get())
        {
            m_Com_adobe_cq_dam_cq_scene7_imaging->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.dam.cq-scene7-imaging."));
        }
    }
    if(m_Com_adobe_cq_dtm_reactor_coreIsSet)
    {
        if (m_Com_adobe_cq_dtm_reactor_core.get())
        {
            m_Com_adobe_cq_dtm_reactor_core->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.dtm-reactor.core."));
        }
    }
    if(m_Com_adobe_cq_dtm_reactor_uiIsSet)
    {
        if (m_Com_adobe_cq_dtm_reactor_ui.get())
        {
            m_Com_adobe_cq_dtm_reactor_ui->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.dtm-reactor.ui."));
        }
    }
    if(m_Com_adobe_cq_exp_jspel_resolverIsSet)
    {
        if (m_Com_adobe_cq_exp_jspel_resolver.get())
        {
            m_Com_adobe_cq_exp_jspel_resolver->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.exp-jspel-resolver."));
        }
    }
    if(m_Com_adobe_cq_inbox_cq_inboxIsSet)
    {
        if (m_Com_adobe_cq_inbox_cq_inbox.get())
        {
            m_Com_adobe_cq_inbox_cq_inbox->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.inbox.cq-inbox."));
        }
    }
    if(m_Com_adobe_cq_json_schema_parserIsSet)
    {
        if (m_Com_adobe_cq_json_schema_parser.get())
        {
            m_Com_adobe_cq_json_schema_parser->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.json-schema-parser."));
        }
    }
    if(m_Com_adobe_cq_media_cq_media_publishing_dps_fp_coreIsSet)
    {
        if (m_Com_adobe_cq_media_cq_media_publishing_dps_fp_core.get())
        {
            m_Com_adobe_cq_media_cq_media_publishing_dps_fp_core->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.media.cq-media-publishing-dps-fp-core."));
        }
    }
    if(m_Com_adobe_cq_mobile_cq_mobile_caasIsSet)
    {
        if (m_Com_adobe_cq_mobile_cq_mobile_caas.get())
        {
            m_Com_adobe_cq_mobile_cq_mobile_caas->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-caas."));
        }
    }
    if(m_Com_adobe_cq_mobile_cq_mobile_index_builderIsSet)
    {
        if (m_Com_adobe_cq_mobile_cq_mobile_index_builder.get())
        {
            m_Com_adobe_cq_mobile_cq_mobile_index_builder->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-index-builder."));
        }
    }
    if(m_Com_adobe_cq_mobile_cq_mobile_phonegap_buildIsSet)
    {
        if (m_Com_adobe_cq_mobile_cq_mobile_phonegap_build.get())
        {
            m_Com_adobe_cq_mobile_cq_mobile_phonegap_build->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-phonegap-build."));
        }
    }
    if(m_Com_adobe_cq_myspellIsSet)
    {
        if (m_Com_adobe_cq_myspell.get())
        {
            m_Com_adobe_cq_myspell->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.myspell."));
        }
    }
    if(m_Com_adobe_cq_sample_we_retail_coreIsSet)
    {
        if (m_Com_adobe_cq_sample_we_retail_core.get())
        {
            m_Com_adobe_cq_sample_we_retail_core->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.sample.we.retail.core."));
        }
    }
    if(m_Com_adobe_cq_screens_com_adobe_cq_screens_dccIsSet)
    {
        if (m_Com_adobe_cq_screens_com_adobe_cq_screens_dcc.get())
        {
            m_Com_adobe_cq_screens_com_adobe_cq_screens_dcc->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.com.adobe.cq.screens.dcc."));
        }
    }
    if(m_Com_adobe_cq_screens_com_adobe_cq_screens_mq_coreIsSet)
    {
        if (m_Com_adobe_cq_screens_com_adobe_cq_screens_mq_core.get())
        {
            m_Com_adobe_cq_screens_com_adobe_cq_screens_mq_core->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.com.adobe.cq.screens.mq.core."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_as_providerIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_as_provider.get())
        {
            m_Com_adobe_cq_social_cq_social_as_provider->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-as-provider."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_badging_basic_implIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_badging_basic_impl.get())
        {
            m_Com_adobe_cq_social_cq_social_badging_basic_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-badging-basic-impl."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_badging_implIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_badging_impl.get())
        {
            m_Com_adobe_cq_social_cq_social_badging_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-badging-impl."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_calendar_implIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_calendar_impl.get())
        {
            m_Com_adobe_cq_social_cq_social_calendar_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-calendar-impl."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_content_fragments_implIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_content_fragments_impl.get())
        {
            m_Com_adobe_cq_social_cq_social_content_fragments_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-content-fragments-impl."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_enablement_implIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_enablement_impl.get())
        {
            m_Com_adobe_cq_social_cq_social_enablement_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-enablement-impl."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_graph_implIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_graph_impl.get())
        {
            m_Com_adobe_cq_social_cq_social_graph_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-graph-impl."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_ideation_implIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_ideation_impl.get())
        {
            m_Com_adobe_cq_social_cq_social_ideation_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ideation-impl."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_jcr_providerIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_jcr_provider.get())
        {
            m_Com_adobe_cq_social_cq_social_jcr_provider->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-jcr-provider."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_members_implIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_members_impl.get())
        {
            m_Com_adobe_cq_social_cq_social_members_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-members-impl."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_ms_providerIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_ms_provider.get())
        {
            m_Com_adobe_cq_social_cq_social_ms_provider->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ms-provider."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_notifications_channels_webIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_notifications_channels_web.get())
        {
            m_Com_adobe_cq_social_cq_social_notifications_channels_web->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-notifications-channels-web."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_notifications_implIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_notifications_impl.get())
        {
            m_Com_adobe_cq_social_cq_social_notifications_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-notifications-impl."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_rdb_providerIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_rdb_provider.get())
        {
            m_Com_adobe_cq_social_cq_social_rdb_provider->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-rdb-provider."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_scf_implIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_scf_impl.get())
        {
            m_Com_adobe_cq_social_cq_social_scf_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scf-impl."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_scoring_basic_implIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_scoring_basic_impl.get())
        {
            m_Com_adobe_cq_social_cq_social_scoring_basic_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scoring-basic-impl."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_scoring_implIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_scoring_impl.get())
        {
            m_Com_adobe_cq_social_cq_social_scoring_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scoring-impl."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_serviceusers_implIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_serviceusers_impl.get())
        {
            m_Com_adobe_cq_social_cq_social_serviceusers_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-serviceusers-impl."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_srp_implIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_srp_impl.get())
        {
            m_Com_adobe_cq_social_cq_social_srp_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-srp-impl."));
        }
    }
    if(m_Com_adobe_cq_social_cq_social_ugcbase_implIsSet)
    {
        if (m_Com_adobe_cq_social_cq_social_ugcbase_impl.get())
        {
            m_Com_adobe_cq_social_cq_social_ugcbase_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ugcbase-impl."));
        }
    }
    if(m_Com_adobe_dam_cq_dam_cfm_implIsSet)
    {
        if (m_Com_adobe_dam_cq_dam_cfm_impl.get())
        {
            m_Com_adobe_dam_cq_dam_cfm_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.dam.cq-dam-cfm-impl."));
        }
    }
    if(m_Com_adobe_forms_foundation_forms_foundation_baseIsSet)
    {
        if (m_Com_adobe_forms_foundation_forms_foundation_base.get())
        {
            m_Com_adobe_forms_foundation_forms_foundation_base->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.forms.foundation-forms-foundation-base."));
        }
    }
    if(m_Com_adobe_granite_apicontrollerIsSet)
    {
        if (m_Com_adobe_granite_apicontroller.get())
        {
            m_Com_adobe_granite_apicontroller->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.apicontroller."));
        }
    }
    if(m_Com_adobe_granite_asset_coreIsSet)
    {
        if (m_Com_adobe_granite_asset_core.get())
        {
            m_Com_adobe_granite_asset_core->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.asset.core."));
        }
    }
    if(m_Com_adobe_granite_auth_ssoIsSet)
    {
        if (m_Com_adobe_granite_auth_sso.get())
        {
            m_Com_adobe_granite_auth_sso->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.auth.sso."));
        }
    }
    if(m_Com_adobe_granite_bundles_hc_implIsSet)
    {
        if (m_Com_adobe_granite_bundles_hc_impl.get())
        {
            m_Com_adobe_granite_bundles_hc_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.bundles.hc.impl."));
        }
    }
    if(m_Com_adobe_granite_compat_routerIsSet)
    {
        if (m_Com_adobe_granite_compat_router.get())
        {
            m_Com_adobe_granite_compat_router->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.compat-router."));
        }
    }
    if(m_Com_adobe_granite_confIsSet)
    {
        if (m_Com_adobe_granite_conf.get())
        {
            m_Com_adobe_granite_conf->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.conf."));
        }
    }
    if(m_Com_adobe_granite_conf_ui_coreIsSet)
    {
        if (m_Com_adobe_granite_conf_ui_core.get())
        {
            m_Com_adobe_granite_conf_ui_core->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.conf.ui.core."));
        }
    }
    if(m_Com_adobe_granite_corsIsSet)
    {
        if (m_Com_adobe_granite_cors.get())
        {
            m_Com_adobe_granite_cors->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.cors."));
        }
    }
    if(m_Com_adobe_granite_crx_explorerIsSet)
    {
        if (m_Com_adobe_granite_crx_explorer.get())
        {
            m_Com_adobe_granite_crx_explorer->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.crx-explorer."));
        }
    }
    if(m_Com_adobe_granite_crxde_liteIsSet)
    {
        if (m_Com_adobe_granite_crxde_lite.get())
        {
            m_Com_adobe_granite_crxde_lite->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.crxde-lite."));
        }
    }
    if(m_Com_adobe_granite_crypto_configIsSet)
    {
        if (m_Com_adobe_granite_crypto_config.get())
        {
            m_Com_adobe_granite_crypto_config->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.crypto.config."));
        }
    }
    if(m_Com_adobe_granite_crypto_extensionIsSet)
    {
        if (m_Com_adobe_granite_crypto_extension.get())
        {
            m_Com_adobe_granite_crypto_extension->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.crypto.extension."));
        }
    }
    if(m_Com_adobe_granite_crypto_fileIsSet)
    {
        if (m_Com_adobe_granite_crypto_file.get())
        {
            m_Com_adobe_granite_crypto_file->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.crypto.file."));
        }
    }
    if(m_Com_adobe_granite_crypto_jcrIsSet)
    {
        if (m_Com_adobe_granite_crypto_jcr.get())
        {
            m_Com_adobe_granite_crypto_jcr->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.crypto.jcr."));
        }
    }
    if(m_Com_adobe_granite_csrfIsSet)
    {
        if (m_Com_adobe_granite_csrf.get())
        {
            m_Com_adobe_granite_csrf->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.csrf."));
        }
    }
    if(m_Com_adobe_granite_distribution_coreIsSet)
    {
        if (m_Com_adobe_granite_distribution_core.get())
        {
            m_Com_adobe_granite_distribution_core->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.distribution.core."));
        }
    }
    if(m_Com_adobe_granite_dropwizard_metricsIsSet)
    {
        if (m_Com_adobe_granite_dropwizard_metrics.get())
        {
            m_Com_adobe_granite_dropwizard_metrics->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.dropwizard.metrics."));
        }
    }
    if(m_Com_adobe_granite_frags_implIsSet)
    {
        if (m_Com_adobe_granite_frags_impl.get())
        {
            m_Com_adobe_granite_frags_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.frags.impl."));
        }
    }
    if(m_Com_adobe_granite_gibsonIsSet)
    {
        if (m_Com_adobe_granite_gibson.get())
        {
            m_Com_adobe_granite_gibson->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.gibson."));
        }
    }
    if(m_Com_adobe_granite_infocollectorIsSet)
    {
        if (m_Com_adobe_granite_infocollector.get())
        {
            m_Com_adobe_granite_infocollector->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.infocollector."));
        }
    }
    if(m_Com_adobe_granite_installer_factory_packagesIsSet)
    {
        if (m_Com_adobe_granite_installer_factory_packages.get())
        {
            m_Com_adobe_granite_installer_factory_packages->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.installer.factory.packages."));
        }
    }
    if(m_Com_adobe_granite_jetty_sslIsSet)
    {
        if (m_Com_adobe_granite_jetty_ssl.get())
        {
            m_Com_adobe_granite_jetty_ssl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.jetty.ssl."));
        }
    }
    if(m_Com_adobe_granite_jobs_asyncIsSet)
    {
        if (m_Com_adobe_granite_jobs_async.get())
        {
            m_Com_adobe_granite_jobs_async->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.jobs.async."));
        }
    }
    if(m_Com_adobe_granite_maintenance_oakIsSet)
    {
        if (m_Com_adobe_granite_maintenance_oak.get())
        {
            m_Com_adobe_granite_maintenance_oak->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.maintenance.oak."));
        }
    }
    if(m_Com_adobe_granite_monitoring_coreIsSet)
    {
        if (m_Com_adobe_granite_monitoring_core.get())
        {
            m_Com_adobe_granite_monitoring_core->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.monitoring.core."));
        }
    }
    if(m_Com_adobe_granite_queriesIsSet)
    {
        if (m_Com_adobe_granite_queries.get())
        {
            m_Com_adobe_granite_queries->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.queries."));
        }
    }
    if(m_Com_adobe_granite_replication_hc_implIsSet)
    {
        if (m_Com_adobe_granite_replication_hc_impl.get())
        {
            m_Com_adobe_granite_replication_hc_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.replication.hc.impl."));
        }
    }
    if(m_Com_adobe_granite_repository_checkerIsSet)
    {
        if (m_Com_adobe_granite_repository_checker.get())
        {
            m_Com_adobe_granite_repository_checker->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.repository.checker."));
        }
    }
    if(m_Com_adobe_granite_repository_hc_implIsSet)
    {
        if (m_Com_adobe_granite_repository_hc_impl.get())
        {
            m_Com_adobe_granite_repository_hc_impl->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.repository.hc.impl."));
        }
    }
    if(m_Com_adobe_granite_rest_assetsIsSet)
    {
        if (m_Com_adobe_granite_rest_assets.get())
        {
            m_Com_adobe_granite_rest_assets->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.rest.assets."));
        }
    }
    if(m_Com_adobe_granite_security_uiIsSet)
    {
        if (m_Com_adobe_granite_security_ui.get())
        {
            m_Com_adobe_granite_security_ui->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.security.ui."));
        }
    }
    if(m_Com_adobe_granite_startupIsSet)
    {
        if (m_Com_adobe_granite_startup.get())
        {
            m_Com_adobe_granite_startup->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.startup."));
        }
    }
    if(m_Com_adobe_granite_tagsoupIsSet)
    {
        if (m_Com_adobe_granite_tagsoup.get())
        {
            m_Com_adobe_granite_tagsoup->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.tagsoup."));
        }
    }
    if(m_Com_adobe_granite_taskmanagement_coreIsSet)
    {
        if (m_Com_adobe_granite_taskmanagement_core.get())
        {
            m_Com_adobe_granite_taskmanagement_core->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.taskmanagement.core."));
        }
    }
    if(m_Com_adobe_granite_taskmanagement_workflowIsSet)
    {
        if (m_Com_adobe_granite_taskmanagement_workflow.get())
        {
            m_Com_adobe_granite_taskmanagement_workflow->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.taskmanagement.workflow."));
        }
    }
    if(m_Com_adobe_granite_ui_clientlibs_compiler_lessIsSet)
    {
        if (m_Com_adobe_granite_ui_clientlibs_compiler_less.get())
        {
            m_Com_adobe_granite_ui_clientlibs_compiler_less->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.ui.clientlibs.compiler.less."));
        }
    }
    if(m_Com_adobe_granite_ui_clientlibs_processor_gccIsSet)
    {
        if (m_Com_adobe_granite_ui_clientlibs_processor_gcc.get())
        {
            m_Com_adobe_granite_ui_clientlibs_processor_gcc->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.ui.clientlibs.processor.gcc."));
        }
    }
    if(m_Com_adobe_granite_webconsole_pluginsIsSet)
    {
        if (m_Com_adobe_granite_webconsole_plugins.get())
        {
            m_Com_adobe_granite_webconsole_plugins->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.webconsole.plugins."));
        }
    }
    if(m_Com_adobe_granite_workflow_consoleIsSet)
    {
        if (m_Com_adobe_granite_workflow_console.get())
        {
            m_Com_adobe_granite_workflow_console->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.workflow.console."));
        }
    }
    if(m_Com_adobe_xmp_worker_files_native_fragment_linuxIsSet)
    {
        if (m_Com_adobe_xmp_worker_files_native_fragment_linux.get())
        {
            m_Com_adobe_xmp_worker_files_native_fragment_linux->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.linux."));
        }
    }
    if(m_Com_adobe_xmp_worker_files_native_fragment_macosxIsSet)
    {
        if (m_Com_adobe_xmp_worker_files_native_fragment_macosx.get())
        {
            m_Com_adobe_xmp_worker_files_native_fragment_macosx->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.macosx."));
        }
    }
    if(m_Com_adobe_xmp_worker_files_native_fragment_winIsSet)
    {
        if (m_Com_adobe_xmp_worker_files_native_fragment_win.get())
        {
            m_Com_adobe_xmp_worker_files_native_fragment_win->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.win."));
        }
    }
    if(m_Com_day_commons_osgi_wrapper_simple_jndiIsSet)
    {
        if (m_Com_day_commons_osgi_wrapper_simple_jndi.get())
        {
            m_Com_day_commons_osgi_wrapper_simple_jndi->toMultipart(multipart, utility::conversions::to_string_t("com.day.commons.osgi.wrapper.simple-jndi."));
        }
    }
    if(m_Com_day_cq_cq_authhandlerIsSet)
    {
        if (m_Com_day_cq_cq_authhandler.get())
        {
            m_Com_day_cq_cq_authhandler->toMultipart(multipart, utility::conversions::to_string_t("com.day.cq.cq-authhandler."));
        }
    }
    if(m_Com_day_cq_cq_compat_configupdateIsSet)
    {
        if (m_Com_day_cq_cq_compat_configupdate.get())
        {
            m_Com_day_cq_cq_compat_configupdate->toMultipart(multipart, utility::conversions::to_string_t("com.day.cq.cq-compat-configupdate."));
        }
    }
    if(m_Com_day_cq_cq_licensebrandingIsSet)
    {
        if (m_Com_day_cq_cq_licensebranding.get())
        {
            m_Com_day_cq_cq_licensebranding->toMultipart(multipart, utility::conversions::to_string_t("com.day.cq.cq-licensebranding."));
        }
    }
    if(m_Com_day_cq_cq_notifcation_implIsSet)
    {
        if (m_Com_day_cq_cq_notifcation_impl.get())
        {
            m_Com_day_cq_cq_notifcation_impl->toMultipart(multipart, utility::conversions::to_string_t("com.day.cq.cq-notifcation-impl."));
        }
    }
    if(m_Com_day_cq_cq_replication_auditIsSet)
    {
        if (m_Com_day_cq_cq_replication_audit.get())
        {
            m_Com_day_cq_cq_replication_audit->toMultipart(multipart, utility::conversions::to_string_t("com.day.cq.cq-replication-audit."));
        }
    }
    if(m_Com_day_cq_cq_search_extIsSet)
    {
        if (m_Com_day_cq_cq_search_ext.get())
        {
            m_Com_day_cq_cq_search_ext->toMultipart(multipart, utility::conversions::to_string_t("com.day.cq.cq-search-ext."));
        }
    }
    if(m_Com_day_cq_dam_cq_dam_annotation_printIsSet)
    {
        if (m_Com_day_cq_dam_cq_dam_annotation_print.get())
        {
            m_Com_day_cq_dam_cq_dam_annotation_print->toMultipart(multipart, utility::conversions::to_string_t("com.day.cq.dam.cq-dam-annotation-print."));
        }
    }
    if(m_Com_day_cq_dam_cq_dam_asset_usageIsSet)
    {
        if (m_Com_day_cq_dam_cq_dam_asset_usage.get())
        {
            m_Com_day_cq_dam_cq_dam_asset_usage->toMultipart(multipart, utility::conversions::to_string_t("com.day.cq.dam.cq-dam-asset-usage."));
        }
    }
    if(m_Com_day_cq_dam_cq_dam_s7damIsSet)
    {
        if (m_Com_day_cq_dam_cq_dam_s7dam.get())
        {
            m_Com_day_cq_dam_cq_dam_s7dam->toMultipart(multipart, utility::conversions::to_string_t("com.day.cq.dam.cq-dam-s7dam."));
        }
    }
    if(m_Com_day_cq_dam_cq_dam_similaritysearchIsSet)
    {
        if (m_Com_day_cq_dam_cq_dam_similaritysearch.get())
        {
            m_Com_day_cq_dam_cq_dam_similaritysearch->toMultipart(multipart, utility::conversions::to_string_t("com.day.cq.dam.cq-dam-similaritysearch."));
        }
    }
    if(m_Com_day_cq_dam_dam_webdav_supportIsSet)
    {
        if (m_Com_day_cq_dam_dam_webdav_support.get())
        {
            m_Com_day_cq_dam_dam_webdav_support->toMultipart(multipart, utility::conversions::to_string_t("com.day.cq.dam.dam-webdav-support."));
        }
    }
    if(m_Com_day_cq_pre_upgrade_tasksIsSet)
    {
        if (m_Com_day_cq_pre_upgrade_tasks.get())
        {
            m_Com_day_cq_pre_upgrade_tasks->toMultipart(multipart, utility::conversions::to_string_t("com.day.cq.pre-upgrade-tasks."));
        }
    }
    if(m_Com_day_cq_replication_extensionsIsSet)
    {
        if (m_Com_day_cq_replication_extensions.get())
        {
            m_Com_day_cq_replication_extensions->toMultipart(multipart, utility::conversions::to_string_t("com.day.cq.replication.extensions."));
        }
    }
    if(m_Com_day_cq_wcm_cq_msm_coreIsSet)
    {
        if (m_Com_day_cq_wcm_cq_msm_core.get())
        {
            m_Com_day_cq_wcm_cq_msm_core->toMultipart(multipart, utility::conversions::to_string_t("com.day.cq.wcm.cq-msm-core."));
        }
    }
    if(m_Com_day_cq_wcm_cq_wcm_translationIsSet)
    {
        if (m_Com_day_cq_wcm_cq_wcm_translation.get())
        {
            m_Com_day_cq_wcm_cq_wcm_translation->toMultipart(multipart, utility::conversions::to_string_t("com.day.cq.wcm.cq-wcm-translation."));
        }
    }
    if(m_Day_commons_jrawioIsSet)
    {
        if (m_Day_commons_jrawio.get())
        {
            m_Day_commons_jrawio->toMultipart(multipart, utility::conversions::to_string_t("day-commons-jrawio."));
        }
    }
    if(m_Org_apache_aries_jmx_whiteboardIsSet)
    {
        if (m_Org_apache_aries_jmx_whiteboard.get())
        {
            m_Org_apache_aries_jmx_whiteboard->toMultipart(multipart, utility::conversions::to_string_t("org.apache.aries.jmx.whiteboard."));
        }
    }
    if(m_Org_apache_felix_http_sslfilterIsSet)
    {
        if (m_Org_apache_felix_http_sslfilter.get())
        {
            m_Org_apache_felix_http_sslfilter->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.http.sslfilter."));
        }
    }
    if(m_Org_apache_felix_org_apache_felix_threaddumpIsSet)
    {
        if (m_Org_apache_felix_org_apache_felix_threaddump.get())
        {
            m_Org_apache_felix_org_apache_felix_threaddump->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.org.apache.felix.threaddump."));
        }
    }
    if(m_Org_apache_felix_webconsole_plugins_dsIsSet)
    {
        if (m_Org_apache_felix_webconsole_plugins_ds.get())
        {
            m_Org_apache_felix_webconsole_plugins_ds->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.ds."));
        }
    }
    if(m_Org_apache_felix_webconsole_plugins_eventIsSet)
    {
        if (m_Org_apache_felix_webconsole_plugins_event.get())
        {
            m_Org_apache_felix_webconsole_plugins_event->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.event."));
        }
    }
    if(m_Org_apache_felix_webconsole_plugins_memoryusageIsSet)
    {
        if (m_Org_apache_felix_webconsole_plugins_memoryusage.get())
        {
            m_Org_apache_felix_webconsole_plugins_memoryusage->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.memoryusage."));
        }
    }
    if(m_Org_apache_felix_webconsole_plugins_packageadminIsSet)
    {
        if (m_Org_apache_felix_webconsole_plugins_packageadmin.get())
        {
            m_Org_apache_felix_webconsole_plugins_packageadmin->toMultipart(multipart, utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.packageadmin."));
        }
    }
    if(m_Org_apache_jackrabbit_oak_auth_ldapIsSet)
    {
        if (m_Org_apache_jackrabbit_oak_auth_ldap.get())
        {
            m_Org_apache_jackrabbit_oak_auth_ldap->toMultipart(multipart, utility::conversions::to_string_t("org.apache.jackrabbit.oak-auth-ldap."));
        }
    }
    if(m_Org_apache_jackrabbit_oak_segment_tarIsSet)
    {
        if (m_Org_apache_jackrabbit_oak_segment_tar.get())
        {
            m_Org_apache_jackrabbit_oak_segment_tar->toMultipart(multipart, utility::conversions::to_string_t("org.apache.jackrabbit.oak-segment-tar."));
        }
    }
    if(m_Org_apache_jackrabbit_oak_solr_osgiIsSet)
    {
        if (m_Org_apache_jackrabbit_oak_solr_osgi.get())
        {
            m_Org_apache_jackrabbit_oak_solr_osgi->toMultipart(multipart, utility::conversions::to_string_t("org.apache.jackrabbit.oak-solr-osgi."));
        }
    }
    if(m_Org_apache_sling_bundleresource_implIsSet)
    {
        if (m_Org_apache_sling_bundleresource_impl.get())
        {
            m_Org_apache_sling_bundleresource_impl->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.bundleresource.impl."));
        }
    }
    if(m_Org_apache_sling_commons_fsclassloaderIsSet)
    {
        if (m_Org_apache_sling_commons_fsclassloader.get())
        {
            m_Org_apache_sling_commons_fsclassloader->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.fsclassloader."));
        }
    }
    if(m_Org_apache_sling_commons_log_webconsoleIsSet)
    {
        if (m_Org_apache_sling_commons_log_webconsole.get())
        {
            m_Org_apache_sling_commons_log_webconsole->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.webconsole."));
        }
    }
    if(m_Org_apache_sling_datasourceIsSet)
    {
        if (m_Org_apache_sling_datasource.get())
        {
            m_Org_apache_sling_datasource->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.datasource."));
        }
    }
    if(m_Org_apache_sling_discovery_baseIsSet)
    {
        if (m_Org_apache_sling_discovery_base.get())
        {
            m_Org_apache_sling_discovery_base->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.discovery.base."));
        }
    }
    if(m_Org_apache_sling_discovery_oakIsSet)
    {
        if (m_Org_apache_sling_discovery_oak.get())
        {
            m_Org_apache_sling_discovery_oak->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.discovery.oak."));
        }
    }
    if(m_Org_apache_sling_discovery_supportIsSet)
    {
        if (m_Org_apache_sling_discovery_support.get())
        {
            m_Org_apache_sling_discovery_support->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.discovery.support."));
        }
    }
    if(m_Org_apache_sling_distribution_apiIsSet)
    {
        if (m_Org_apache_sling_distribution_api.get())
        {
            m_Org_apache_sling_distribution_api->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.distribution.api."));
        }
    }
    if(m_Org_apache_sling_distribution_coreIsSet)
    {
        if (m_Org_apache_sling_distribution_core.get())
        {
            m_Org_apache_sling_distribution_core->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.distribution.core."));
        }
    }
    if(m_Org_apache_sling_extensions_webconsolesecurityproviderIsSet)
    {
        if (m_Org_apache_sling_extensions_webconsolesecurityprovider.get())
        {
            m_Org_apache_sling_extensions_webconsolesecurityprovider->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.extensions.webconsolesecurityprovider."));
        }
    }
    if(m_Org_apache_sling_hc_webconsoleIsSet)
    {
        if (m_Org_apache_sling_hc_webconsole.get())
        {
            m_Org_apache_sling_hc_webconsole->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.hc.webconsole."));
        }
    }
    if(m_Org_apache_sling_installer_consoleIsSet)
    {
        if (m_Org_apache_sling_installer_console.get())
        {
            m_Org_apache_sling_installer_console->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.installer.console."));
        }
    }
    if(m_Org_apache_sling_installer_provider_fileIsSet)
    {
        if (m_Org_apache_sling_installer_provider_file.get())
        {
            m_Org_apache_sling_installer_provider_file->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.installer.provider.file."));
        }
    }
    if(m_Org_apache_sling_installer_provider_jcrIsSet)
    {
        if (m_Org_apache_sling_installer_provider_jcr.get())
        {
            m_Org_apache_sling_installer_provider_jcr->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.installer.provider.jcr."));
        }
    }
    if(m_Org_apache_sling_jcr_davexIsSet)
    {
        if (m_Org_apache_sling_jcr_davex.get())
        {
            m_Org_apache_sling_jcr_davex->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.jcr.davex."));
        }
    }
    if(m_Org_apache_sling_jcr_resourcesecurityIsSet)
    {
        if (m_Org_apache_sling_jcr_resourcesecurity.get())
        {
            m_Org_apache_sling_jcr_resourcesecurity->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.jcr.resourcesecurity."));
        }
    }
    if(m_Org_apache_sling_jmx_providerIsSet)
    {
        if (m_Org_apache_sling_jmx_provider.get())
        {
            m_Org_apache_sling_jmx_provider->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.jmx.provider."));
        }
    }
    if(m_Org_apache_sling_launchpad_installerIsSet)
    {
        if (m_Org_apache_sling_launchpad_installer.get())
        {
            m_Org_apache_sling_launchpad_installer->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.launchpad.installer."));
        }
    }
    if(m_Org_apache_sling_models_implIsSet)
    {
        if (m_Org_apache_sling_models_impl.get())
        {
            m_Org_apache_sling_models_impl->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.models.impl."));
        }
    }
    if(m_Org_apache_sling_repoinit_parserIsSet)
    {
        if (m_Org_apache_sling_repoinit_parser.get())
        {
            m_Org_apache_sling_repoinit_parser->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.repoinit.parser."));
        }
    }
    if(m_Org_apache_sling_resource_inventoryIsSet)
    {
        if (m_Org_apache_sling_resource_inventory.get())
        {
            m_Org_apache_sling_resource_inventory->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.resource.inventory."));
        }
    }
    if(m_Org_apache_sling_resourceresolverIsSet)
    {
        if (m_Org_apache_sling_resourceresolver.get())
        {
            m_Org_apache_sling_resourceresolver->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.resourceresolver."));
        }
    }
    if(m_Org_apache_sling_scripting_javascriptIsSet)
    {
        if (m_Org_apache_sling_scripting_javascript.get())
        {
            m_Org_apache_sling_scripting_javascript->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.scripting.javascript."));
        }
    }
    if(m_Org_apache_sling_scripting_jstIsSet)
    {
        if (m_Org_apache_sling_scripting_jst.get())
        {
            m_Org_apache_sling_scripting_jst->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.scripting.jst."));
        }
    }
    if(m_Org_apache_sling_scripting_sightly_js_providerIsSet)
    {
        if (m_Org_apache_sling_scripting_sightly_js_provider.get())
        {
            m_Org_apache_sling_scripting_sightly_js_provider->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.scripting.sightly.js.provider."));
        }
    }
    if(m_Org_apache_sling_scripting_sightly_models_providerIsSet)
    {
        if (m_Org_apache_sling_scripting_sightly_models_provider.get())
        {
            m_Org_apache_sling_scripting_sightly_models_provider->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.scripting.sightly.models.provider."));
        }
    }
    if(m_Org_apache_sling_securityIsSet)
    {
        if (m_Org_apache_sling_security.get())
        {
            m_Org_apache_sling_security->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.security."));
        }
    }
    if(m_Org_apache_sling_servlets_compatIsSet)
    {
        if (m_Org_apache_sling_servlets_compat.get())
        {
            m_Org_apache_sling_servlets_compat->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.servlets.compat."));
        }
    }
    if(m_Org_apache_sling_servlets_getIsSet)
    {
        if (m_Org_apache_sling_servlets_get.get())
        {
            m_Org_apache_sling_servlets_get->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.servlets.get."));
        }
    }
    if(m_Org_apache_sling_startupfilter_disablerIsSet)
    {
        if (m_Org_apache_sling_startupfilter_disabler.get())
        {
            m_Org_apache_sling_startupfilter_disabler->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.startupfilter.disabler."));
        }
    }
    if(m_Org_apache_sling_tracerIsSet)
    {
        if (m_Org_apache_sling_tracer.get())
        {
            m_Org_apache_sling_tracer->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.tracer."));
        }
    }
    if(m_We_retail_client_app_coreIsSet)
    {
        if (m_We_retail_client_app_core.get())
        {
            m_We_retail_client_app_core->toMultipart(multipart, utility::conversions::to_string_t("we.retail.client.app.core."));
        }
    }
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cdn.cdn-rewriter")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cdn.cdn-rewriter")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.cdn.cdn-rewriter."));
            setComAdobeCqCdnCdnRewriter( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cloud-config.components")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cloud-config.components")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.cloud-config.components."));
            setComAdobeCqCloudConfigComponents( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cloud-config.core")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cloud-config.core")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.cloud-config.core."));
            setComAdobeCqCloudConfigCore( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cloud-config.ui")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cloud-config.ui")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.cloud-config.ui."));
            setComAdobeCqCloudConfigUi( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.editor")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.editor")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.editor."));
            setComAdobeCqComAdobeCqEditor( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.projects.core")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.projects.core")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.projects.core."));
            setComAdobeCqComAdobeCqProjectsCore( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.projects.wcm.core")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.projects.wcm.core")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.projects.wcm.core."));
            setComAdobeCqComAdobeCqProjectsWcmCore( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.ui.commons")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.ui.commons")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.ui.commons."));
            setComAdobeCqComAdobeCqUiCommons( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.wcm.style")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.wcm.style")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.com.adobe.cq.wcm.style."));
            setComAdobeCqComAdobeCqWcmStyle( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cq-activitymap-integration")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cq-activitymap-integration")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.cq-activitymap-integration."));
            setComAdobeCqCqActivitymapIntegration( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cq-contexthub-commons")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cq-contexthub-commons")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.cq-contexthub-commons."));
            setComAdobeCqCqContexthubCommons( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cq-dtm")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cq-dtm")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.cq-dtm."));
            setComAdobeCqCqDtm( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cq-healthcheck")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cq-healthcheck")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.cq-healthcheck."));
            setComAdobeCqCqHealthcheck( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cq-multisite-targeting")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cq-multisite-targeting")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.cq-multisite-targeting."));
            setComAdobeCqCqMultisiteTargeting( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cq-pre-upgrade-cleanup")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cq-pre-upgrade-cleanup")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.cq-pre-upgrade-cleanup."));
            setComAdobeCqCqPreUpgradeCleanup( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cq-product-info-provider")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cq-product-info-provider")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.cq-product-info-provider."));
            setComAdobeCqCqProductInfoProvider( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cq-rest-sites")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cq-rest-sites")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.cq-rest-sites."));
            setComAdobeCqCqRestSites( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cq-security-hc")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.cq-security-hc")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.cq-security-hc."));
            setComAdobeCqCqSecurityHc( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.dam.cq-dam-svg-handler")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.dam.cq-dam-svg-handler")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.dam.cq-dam-svg-handler."));
            setComAdobeCqDamCqDamSvgHandler( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.dam.cq-scene7-imaging")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.dam.cq-scene7-imaging")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.dam.cq-scene7-imaging."));
            setComAdobeCqDamCqScene7Imaging( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.dtm-reactor.core")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.dtm-reactor.core")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.dtm-reactor.core."));
            setComAdobeCqDtmReactorCore( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.dtm-reactor.ui")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.dtm-reactor.ui")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.dtm-reactor.ui."));
            setComAdobeCqDtmReactorUi( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.exp-jspel-resolver")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.exp-jspel-resolver")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.exp-jspel-resolver."));
            setComAdobeCqExpJspelResolver( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.inbox.cq-inbox")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.inbox.cq-inbox")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.inbox.cq-inbox."));
            setComAdobeCqInboxCqInbox( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.json-schema-parser")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.json-schema-parser")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.json-schema-parser."));
            setComAdobeCqJsonSchemaParser( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.media.cq-media-publishing-dps-fp-core")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.media.cq-media-publishing-dps-fp-core")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.media.cq-media-publishing-dps-fp-core."));
            setComAdobeCqMediaCqMediaPublishingDpsFpCore( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-caas")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-caas")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-caas."));
            setComAdobeCqMobileCqMobileCaas( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-index-builder")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-index-builder")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-index-builder."));
            setComAdobeCqMobileCqMobileIndexBuilder( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-phonegap-build")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-phonegap-build")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.mobile.cq-mobile-phonegap-build."));
            setComAdobeCqMobileCqMobilePhonegapBuild( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.myspell")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.myspell")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.myspell."));
            setComAdobeCqMyspell( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.sample.we.retail.core")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.sample.we.retail.core")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.sample.we.retail.core."));
            setComAdobeCqSampleWeRetailCore( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.com.adobe.cq.screens.dcc")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.com.adobe.cq.screens.dcc")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.com.adobe.cq.screens.dcc."));
            setComAdobeCqScreensComAdobeCqScreensDcc( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.com.adobe.cq.screens.mq.core")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.com.adobe.cq.screens.mq.core")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.com.adobe.cq.screens.mq.core."));
            setComAdobeCqScreensComAdobeCqScreensMqCore( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-as-provider")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-as-provider")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-as-provider."));
            setComAdobeCqSocialCqSocialAsProvider( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-badging-basic-impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-badging-basic-impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-badging-basic-impl."));
            setComAdobeCqSocialCqSocialBadgingBasicImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-badging-impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-badging-impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-badging-impl."));
            setComAdobeCqSocialCqSocialBadgingImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-calendar-impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-calendar-impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-calendar-impl."));
            setComAdobeCqSocialCqSocialCalendarImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-content-fragments-impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-content-fragments-impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-content-fragments-impl."));
            setComAdobeCqSocialCqSocialContentFragmentsImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-enablement-impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-enablement-impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-enablement-impl."));
            setComAdobeCqSocialCqSocialEnablementImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-graph-impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-graph-impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-graph-impl."));
            setComAdobeCqSocialCqSocialGraphImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ideation-impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ideation-impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ideation-impl."));
            setComAdobeCqSocialCqSocialIdeationImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-jcr-provider")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-jcr-provider")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-jcr-provider."));
            setComAdobeCqSocialCqSocialJcrProvider( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-members-impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-members-impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-members-impl."));
            setComAdobeCqSocialCqSocialMembersImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ms-provider")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ms-provider")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ms-provider."));
            setComAdobeCqSocialCqSocialMsProvider( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-notifications-channels-web")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-notifications-channels-web")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-notifications-channels-web."));
            setComAdobeCqSocialCqSocialNotificationsChannelsWeb( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-notifications-impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-notifications-impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-notifications-impl."));
            setComAdobeCqSocialCqSocialNotificationsImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-rdb-provider")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-rdb-provider")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-rdb-provider."));
            setComAdobeCqSocialCqSocialRdbProvider( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scf-impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scf-impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scf-impl."));
            setComAdobeCqSocialCqSocialScfImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scoring-basic-impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scoring-basic-impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scoring-basic-impl."));
            setComAdobeCqSocialCqSocialScoringBasicImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scoring-impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scoring-impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-scoring-impl."));
            setComAdobeCqSocialCqSocialScoringImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-serviceusers-impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-serviceusers-impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-serviceusers-impl."));
            setComAdobeCqSocialCqSocialServiceusersImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-srp-impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-srp-impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-srp-impl."));
            setComAdobeCqSocialCqSocialSrpImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ugcbase-impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ugcbase-impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.social.cq-social-ugcbase-impl."));
            setComAdobeCqSocialCqSocialUgcbaseImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.dam.cq-dam-cfm-impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.dam.cq-dam-cfm-impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.dam.cq-dam-cfm-impl."));
            setComAdobeDamCqDamCfmImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.forms.foundation-forms-foundation-base")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.forms.foundation-forms-foundation-base")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.forms.foundation-forms-foundation-base."));
            setComAdobeFormsFoundationFormsFoundationBase( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.apicontroller")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.apicontroller")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.apicontroller."));
            setComAdobeGraniteApicontroller( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.asset.core")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.asset.core")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.asset.core."));
            setComAdobeGraniteAssetCore( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.auth.sso")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.auth.sso")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.auth.sso."));
            setComAdobeGraniteAuthSso( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.bundles.hc.impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.bundles.hc.impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.bundles.hc.impl."));
            setComAdobeGraniteBundlesHcImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.compat-router")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.compat-router")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.compat-router."));
            setComAdobeGraniteCompatRouter( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.conf")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.conf")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.conf."));
            setComAdobeGraniteConf( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.conf.ui.core")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.conf.ui.core")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.conf.ui.core."));
            setComAdobeGraniteConfUiCore( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.cors")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.cors")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.cors."));
            setComAdobeGraniteCors( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.crx-explorer")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.crx-explorer")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.crx-explorer."));
            setComAdobeGraniteCrxExplorer( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.crxde-lite")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.crxde-lite")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.crxde-lite."));
            setComAdobeGraniteCrxdeLite( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.crypto.config")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.crypto.config")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.crypto.config."));
            setComAdobeGraniteCryptoConfig( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.crypto.extension")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.crypto.extension")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.crypto.extension."));
            setComAdobeGraniteCryptoExtension( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.crypto.file")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.crypto.file")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.crypto.file."));
            setComAdobeGraniteCryptoFile( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.crypto.jcr")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.crypto.jcr")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.crypto.jcr."));
            setComAdobeGraniteCryptoJcr( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.csrf")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.csrf")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.csrf."));
            setComAdobeGraniteCsrf( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.distribution.core")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.distribution.core")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.distribution.core."));
            setComAdobeGraniteDistributionCore( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.dropwizard.metrics")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.dropwizard.metrics")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.dropwizard.metrics."));
            setComAdobeGraniteDropwizardMetrics( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.frags.impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.frags.impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.frags.impl."));
            setComAdobeGraniteFragsImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.gibson")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.gibson")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.gibson."));
            setComAdobeGraniteGibson( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.infocollector")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.infocollector")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.infocollector."));
            setComAdobeGraniteInfocollector( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.installer.factory.packages")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.installer.factory.packages")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.installer.factory.packages."));
            setComAdobeGraniteInstallerFactoryPackages( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.jetty.ssl."));
            setComAdobeGraniteJettySsl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.jobs.async")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.jobs.async")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.jobs.async."));
            setComAdobeGraniteJobsAsync( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.maintenance.oak")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.maintenance.oak")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.maintenance.oak."));
            setComAdobeGraniteMaintenanceOak( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.monitoring.core")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.monitoring.core")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.monitoring.core."));
            setComAdobeGraniteMonitoringCore( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.queries")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.queries")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.queries."));
            setComAdobeGraniteQueries( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.replication.hc.impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.replication.hc.impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.replication.hc.impl."));
            setComAdobeGraniteReplicationHcImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.repository.checker")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.repository.checker")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.repository.checker."));
            setComAdobeGraniteRepositoryChecker( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.repository.hc.impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.repository.hc.impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.repository.hc.impl."));
            setComAdobeGraniteRepositoryHcImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.rest.assets")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.rest.assets")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.rest.assets."));
            setComAdobeGraniteRestAssets( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.security.ui")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.security.ui")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.security.ui."));
            setComAdobeGraniteSecurityUi( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.startup")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.startup")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.startup."));
            setComAdobeGraniteStartup( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.tagsoup")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.tagsoup")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.tagsoup."));
            setComAdobeGraniteTagsoup( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.taskmanagement.core")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.taskmanagement.core")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.taskmanagement.core."));
            setComAdobeGraniteTaskmanagementCore( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.taskmanagement.workflow")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.taskmanagement.workflow")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.taskmanagement.workflow."));
            setComAdobeGraniteTaskmanagementWorkflow( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.ui.clientlibs.compiler.less")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.ui.clientlibs.compiler.less")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.ui.clientlibs.compiler.less."));
            setComAdobeGraniteUiClientlibsCompilerLess( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.ui.clientlibs.processor.gcc")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.ui.clientlibs.processor.gcc")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.ui.clientlibs.processor.gcc."));
            setComAdobeGraniteUiClientlibsProcessorGcc( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.webconsole.plugins")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.webconsole.plugins")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.webconsole.plugins."));
            setComAdobeGraniteWebconsolePlugins( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.workflow.console")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.workflow.console")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.workflow.console."));
            setComAdobeGraniteWorkflowConsole( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.linux")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.linux")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.linux."));
            setComAdobeXmpWorkerFilesNativeFragmentLinux( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.macosx")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.macosx")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.macosx."));
            setComAdobeXmpWorkerFilesNativeFragmentMacosx( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.win")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.win")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.xmp.worker.files.native.fragment.win."));
            setComAdobeXmpWorkerFilesNativeFragmentWin( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.day.commons.osgi.wrapper.simple-jndi")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.day.commons.osgi.wrapper.simple-jndi")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.day.commons.osgi.wrapper.simple-jndi."));
            setComDayCommonsOsgiWrapperSimpleJndi( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.cq-authhandler")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.cq-authhandler")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.day.cq.cq-authhandler."));
            setComDayCqCqAuthhandler( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.cq-compat-configupdate")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.cq-compat-configupdate")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.day.cq.cq-compat-configupdate."));
            setComDayCqCqCompatConfigupdate( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.cq-licensebranding")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.cq-licensebranding")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.day.cq.cq-licensebranding."));
            setComDayCqCqLicensebranding( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.cq-notifcation-impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.cq-notifcation-impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.day.cq.cq-notifcation-impl."));
            setComDayCqCqNotifcationImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.cq-replication-audit")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.cq-replication-audit")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.day.cq.cq-replication-audit."));
            setComDayCqCqReplicationAudit( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.cq-search-ext")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.cq-search-ext")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.day.cq.cq-search-ext."));
            setComDayCqCqSearchExt( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.dam.cq-dam-annotation-print")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.dam.cq-dam-annotation-print")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.day.cq.dam.cq-dam-annotation-print."));
            setComDayCqDamCqDamAnnotationPrint( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.dam.cq-dam-asset-usage")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.dam.cq-dam-asset-usage")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.day.cq.dam.cq-dam-asset-usage."));
            setComDayCqDamCqDamAssetUsage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.dam.cq-dam-s7dam")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.dam.cq-dam-s7dam")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.day.cq.dam.cq-dam-s7dam."));
            setComDayCqDamCqDamS7dam( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.dam.cq-dam-similaritysearch")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.dam.cq-dam-similaritysearch")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.day.cq.dam.cq-dam-similaritysearch."));
            setComDayCqDamCqDamSimilaritysearch( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.dam.dam-webdav-support")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.dam.dam-webdav-support")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.day.cq.dam.dam-webdav-support."));
            setComDayCqDamDamWebdavSupport( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.pre-upgrade-tasks")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.pre-upgrade-tasks")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.day.cq.pre-upgrade-tasks."));
            setComDayCqPreUpgradeTasks( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.replication.extensions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.replication.extensions")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.day.cq.replication.extensions."));
            setComDayCqReplicationExtensions( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.wcm.cq-msm-core")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.wcm.cq-msm-core")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.day.cq.wcm.cq-msm-core."));
            setComDayCqWcmCqMsmCore( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.wcm.cq-wcm-translation")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.day.cq.wcm.cq-wcm-translation")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.day.cq.wcm.cq-wcm-translation."));
            setComDayCqWcmCqWcmTranslation( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("day-commons-jrawio")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("day-commons-jrawio")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("day-commons-jrawio."));
            setDayCommonsJrawio( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.aries.jmx.whiteboard")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.aries.jmx.whiteboard")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.aries.jmx.whiteboard."));
            setOrgApacheAriesJmxWhiteboard( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.sslfilter")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.http.sslfilter")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.http.sslfilter."));
            setOrgApacheFelixHttpSslfilter( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.org.apache.felix.threaddump")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.org.apache.felix.threaddump")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.org.apache.felix.threaddump."));
            setOrgApacheFelixOrgApacheFelixThreaddump( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.ds")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.ds")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.ds."));
            setOrgApacheFelixWebconsolePluginsDs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.event")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.event")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.event."));
            setOrgApacheFelixWebconsolePluginsEvent( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.memoryusage")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.memoryusage")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.memoryusage."));
            setOrgApacheFelixWebconsolePluginsMemoryusage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.packageadmin")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.packageadmin")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.felix.webconsole.plugins.packageadmin."));
            setOrgApacheFelixWebconsolePluginsPackageadmin( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.jackrabbit.oak-auth-ldap")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.jackrabbit.oak-auth-ldap")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.jackrabbit.oak-auth-ldap."));
            setOrgApacheJackrabbitOakAuthLdap( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.jackrabbit.oak-segment-tar")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.jackrabbit.oak-segment-tar")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.jackrabbit.oak-segment-tar."));
            setOrgApacheJackrabbitOakSegmentTar( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.jackrabbit.oak-solr-osgi")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.jackrabbit.oak-solr-osgi")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.jackrabbit.oak-solr-osgi."));
            setOrgApacheJackrabbitOakSolrOsgi( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.bundleresource.impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.bundleresource.impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.bundleresource.impl."));
            setOrgApacheSlingBundleresourceImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.fsclassloader")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.fsclassloader")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.fsclassloader."));
            setOrgApacheSlingCommonsFsclassloader( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.webconsole")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.webconsole")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.webconsole."));
            setOrgApacheSlingCommonsLogWebconsole( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.datasource")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.datasource")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.datasource."));
            setOrgApacheSlingDatasource( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.discovery.base")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.discovery.base")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.discovery.base."));
            setOrgApacheSlingDiscoveryBase( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.discovery.oak")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.discovery.oak")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.discovery.oak."));
            setOrgApacheSlingDiscoveryOak( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.discovery.support")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.discovery.support")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.discovery.support."));
            setOrgApacheSlingDiscoverySupport( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.distribution.api")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.distribution.api")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.distribution.api."));
            setOrgApacheSlingDistributionApi( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.distribution.core")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.distribution.core")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.distribution.core."));
            setOrgApacheSlingDistributionCore( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.extensions.webconsolesecurityprovider")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.extensions.webconsolesecurityprovider")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.extensions.webconsolesecurityprovider."));
            setOrgApacheSlingExtensionsWebconsolesecurityprovider( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.hc.webconsole")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.hc.webconsole")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.hc.webconsole."));
            setOrgApacheSlingHcWebconsole( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.installer.console")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.installer.console")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.installer.console."));
            setOrgApacheSlingInstallerConsole( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.installer.provider.file")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.installer.provider.file")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.installer.provider.file."));
            setOrgApacheSlingInstallerProviderFile( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.installer.provider.jcr")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.installer.provider.jcr")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.installer.provider.jcr."));
            setOrgApacheSlingInstallerProviderJcr( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.jcr.davex")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.jcr.davex")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.jcr.davex."));
            setOrgApacheSlingJcrDavex( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.jcr.resourcesecurity")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.jcr.resourcesecurity")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.jcr.resourcesecurity."));
            setOrgApacheSlingJcrResourcesecurity( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.jmx.provider")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.jmx.provider")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.jmx.provider."));
            setOrgApacheSlingJmxProvider( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.launchpad.installer")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.launchpad.installer")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.launchpad.installer."));
            setOrgApacheSlingLaunchpadInstaller( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.models.impl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.models.impl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.models.impl."));
            setOrgApacheSlingModelsImpl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.repoinit.parser")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.repoinit.parser")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.repoinit.parser."));
            setOrgApacheSlingRepoinitParser( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.resource.inventory")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.resource.inventory")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.resource.inventory."));
            setOrgApacheSlingResourceInventory( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.resourceresolver")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.resourceresolver")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.resourceresolver."));
            setOrgApacheSlingResourceresolver( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.scripting.javascript")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.scripting.javascript")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.scripting.javascript."));
            setOrgApacheSlingScriptingJavascript( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.scripting.jst")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.scripting.jst")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.scripting.jst."));
            setOrgApacheSlingScriptingJst( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.scripting.sightly.js.provider")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.scripting.sightly.js.provider")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.scripting.sightly.js.provider."));
            setOrgApacheSlingScriptingSightlyJsProvider( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.scripting.sightly.models.provider")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.scripting.sightly.models.provider")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.scripting.sightly.models.provider."));
            setOrgApacheSlingScriptingSightlyModelsProvider( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.security")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.security")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.security."));
            setOrgApacheSlingSecurity( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.servlets.compat")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.servlets.compat")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.servlets.compat."));
            setOrgApacheSlingServletsCompat( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.servlets.get")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.servlets.get")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.servlets.get."));
            setOrgApacheSlingServletsGet( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.startupfilter.disabler")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.startupfilter.disabler")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.startupfilter.disabler."));
            setOrgApacheSlingStartupfilterDisabler( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.tracer")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.tracer")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.tracer."));
            setOrgApacheSlingTracer( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("we.retail.client.app.core")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("we.retail.client.app.core")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("we.retail.client.app.core."));
            setWeRetailClientAppCore( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqCdnCdnRewriter() const
{
    return m_Com_adobe_cq_cdn_cdn_rewriter;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqCdnCdnRewriter(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_cdn_cdn_rewriter = value;
    m_Com_adobe_cq_cdn_cdn_rewriterIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqCdnCdnRewriterIsSet() const
{
    return m_Com_adobe_cq_cdn_cdn_rewriterIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_cdn_cdn_rewriter()
{
    m_Com_adobe_cq_cdn_cdn_rewriterIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqCloudConfigComponents() const
{
    return m_Com_adobe_cq_cloud_config_components;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqCloudConfigComponents(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_cloud_config_components = value;
    m_Com_adobe_cq_cloud_config_componentsIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqCloudConfigComponentsIsSet() const
{
    return m_Com_adobe_cq_cloud_config_componentsIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_cloud_config_components()
{
    m_Com_adobe_cq_cloud_config_componentsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqCloudConfigCore() const
{
    return m_Com_adobe_cq_cloud_config_core;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqCloudConfigCore(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_cloud_config_core = value;
    m_Com_adobe_cq_cloud_config_coreIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqCloudConfigCoreIsSet() const
{
    return m_Com_adobe_cq_cloud_config_coreIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_cloud_config_core()
{
    m_Com_adobe_cq_cloud_config_coreIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqCloudConfigUi() const
{
    return m_Com_adobe_cq_cloud_config_ui;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqCloudConfigUi(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_cloud_config_ui = value;
    m_Com_adobe_cq_cloud_config_uiIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqCloudConfigUiIsSet() const
{
    return m_Com_adobe_cq_cloud_config_uiIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_cloud_config_ui()
{
    m_Com_adobe_cq_cloud_config_uiIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqComAdobeCqEditor() const
{
    return m_Com_adobe_cq_com_adobe_cq_editor;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqComAdobeCqEditor(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_com_adobe_cq_editor = value;
    m_Com_adobe_cq_com_adobe_cq_editorIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqComAdobeCqEditorIsSet() const
{
    return m_Com_adobe_cq_com_adobe_cq_editorIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_com_adobe_cq_editor()
{
    m_Com_adobe_cq_com_adobe_cq_editorIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqComAdobeCqProjectsCore() const
{
    return m_Com_adobe_cq_com_adobe_cq_projects_core;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqComAdobeCqProjectsCore(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_com_adobe_cq_projects_core = value;
    m_Com_adobe_cq_com_adobe_cq_projects_coreIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqComAdobeCqProjectsCoreIsSet() const
{
    return m_Com_adobe_cq_com_adobe_cq_projects_coreIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_com_adobe_cq_projects_core()
{
    m_Com_adobe_cq_com_adobe_cq_projects_coreIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqComAdobeCqProjectsWcmCore() const
{
    return m_Com_adobe_cq_com_adobe_cq_projects_wcm_core;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqComAdobeCqProjectsWcmCore(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_com_adobe_cq_projects_wcm_core = value;
    m_Com_adobe_cq_com_adobe_cq_projects_wcm_coreIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqComAdobeCqProjectsWcmCoreIsSet() const
{
    return m_Com_adobe_cq_com_adobe_cq_projects_wcm_coreIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_com_adobe_cq_projects_wcm_core()
{
    m_Com_adobe_cq_com_adobe_cq_projects_wcm_coreIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqComAdobeCqUiCommons() const
{
    return m_Com_adobe_cq_com_adobe_cq_ui_commons;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqComAdobeCqUiCommons(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_com_adobe_cq_ui_commons = value;
    m_Com_adobe_cq_com_adobe_cq_ui_commonsIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqComAdobeCqUiCommonsIsSet() const
{
    return m_Com_adobe_cq_com_adobe_cq_ui_commonsIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_com_adobe_cq_ui_commons()
{
    m_Com_adobe_cq_com_adobe_cq_ui_commonsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqComAdobeCqWcmStyle() const
{
    return m_Com_adobe_cq_com_adobe_cq_wcm_style;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqComAdobeCqWcmStyle(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_com_adobe_cq_wcm_style = value;
    m_Com_adobe_cq_com_adobe_cq_wcm_styleIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqComAdobeCqWcmStyleIsSet() const
{
    return m_Com_adobe_cq_com_adobe_cq_wcm_styleIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_com_adobe_cq_wcm_style()
{
    m_Com_adobe_cq_com_adobe_cq_wcm_styleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqCqActivitymapIntegration() const
{
    return m_Com_adobe_cq_cq_activitymap_integration;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqCqActivitymapIntegration(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_cq_activitymap_integration = value;
    m_Com_adobe_cq_cq_activitymap_integrationIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqCqActivitymapIntegrationIsSet() const
{
    return m_Com_adobe_cq_cq_activitymap_integrationIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_cq_activitymap_integration()
{
    m_Com_adobe_cq_cq_activitymap_integrationIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqCqContexthubCommons() const
{
    return m_Com_adobe_cq_cq_contexthub_commons;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqCqContexthubCommons(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_cq_contexthub_commons = value;
    m_Com_adobe_cq_cq_contexthub_commonsIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqCqContexthubCommonsIsSet() const
{
    return m_Com_adobe_cq_cq_contexthub_commonsIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_cq_contexthub_commons()
{
    m_Com_adobe_cq_cq_contexthub_commonsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqCqDtm() const
{
    return m_Com_adobe_cq_cq_dtm;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqCqDtm(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_cq_dtm = value;
    m_Com_adobe_cq_cq_dtmIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqCqDtmIsSet() const
{
    return m_Com_adobe_cq_cq_dtmIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_cq_dtm()
{
    m_Com_adobe_cq_cq_dtmIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqCqHealthcheck() const
{
    return m_Com_adobe_cq_cq_healthcheck;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqCqHealthcheck(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_cq_healthcheck = value;
    m_Com_adobe_cq_cq_healthcheckIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqCqHealthcheckIsSet() const
{
    return m_Com_adobe_cq_cq_healthcheckIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_cq_healthcheck()
{
    m_Com_adobe_cq_cq_healthcheckIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqCqMultisiteTargeting() const
{
    return m_Com_adobe_cq_cq_multisite_targeting;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqCqMultisiteTargeting(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_cq_multisite_targeting = value;
    m_Com_adobe_cq_cq_multisite_targetingIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqCqMultisiteTargetingIsSet() const
{
    return m_Com_adobe_cq_cq_multisite_targetingIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_cq_multisite_targeting()
{
    m_Com_adobe_cq_cq_multisite_targetingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqCqPreUpgradeCleanup() const
{
    return m_Com_adobe_cq_cq_pre_upgrade_cleanup;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqCqPreUpgradeCleanup(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_cq_pre_upgrade_cleanup = value;
    m_Com_adobe_cq_cq_pre_upgrade_cleanupIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqCqPreUpgradeCleanupIsSet() const
{
    return m_Com_adobe_cq_cq_pre_upgrade_cleanupIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_cq_pre_upgrade_cleanup()
{
    m_Com_adobe_cq_cq_pre_upgrade_cleanupIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqCqProductInfoProvider() const
{
    return m_Com_adobe_cq_cq_product_info_provider;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqCqProductInfoProvider(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_cq_product_info_provider = value;
    m_Com_adobe_cq_cq_product_info_providerIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqCqProductInfoProviderIsSet() const
{
    return m_Com_adobe_cq_cq_product_info_providerIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_cq_product_info_provider()
{
    m_Com_adobe_cq_cq_product_info_providerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqCqRestSites() const
{
    return m_Com_adobe_cq_cq_rest_sites;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqCqRestSites(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_cq_rest_sites = value;
    m_Com_adobe_cq_cq_rest_sitesIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqCqRestSitesIsSet() const
{
    return m_Com_adobe_cq_cq_rest_sitesIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_cq_rest_sites()
{
    m_Com_adobe_cq_cq_rest_sitesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqCqSecurityHc() const
{
    return m_Com_adobe_cq_cq_security_hc;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqCqSecurityHc(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_cq_security_hc = value;
    m_Com_adobe_cq_cq_security_hcIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqCqSecurityHcIsSet() const
{
    return m_Com_adobe_cq_cq_security_hcIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_cq_security_hc()
{
    m_Com_adobe_cq_cq_security_hcIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqDamCqDamSvgHandler() const
{
    return m_Com_adobe_cq_dam_cq_dam_svg_handler;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqDamCqDamSvgHandler(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_dam_cq_dam_svg_handler = value;
    m_Com_adobe_cq_dam_cq_dam_svg_handlerIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqDamCqDamSvgHandlerIsSet() const
{
    return m_Com_adobe_cq_dam_cq_dam_svg_handlerIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_dam_cq_dam_svg_handler()
{
    m_Com_adobe_cq_dam_cq_dam_svg_handlerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqDamCqScene7Imaging() const
{
    return m_Com_adobe_cq_dam_cq_scene7_imaging;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqDamCqScene7Imaging(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_dam_cq_scene7_imaging = value;
    m_Com_adobe_cq_dam_cq_scene7_imagingIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqDamCqScene7ImagingIsSet() const
{
    return m_Com_adobe_cq_dam_cq_scene7_imagingIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_dam_cq_scene7_imaging()
{
    m_Com_adobe_cq_dam_cq_scene7_imagingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqDtmReactorCore() const
{
    return m_Com_adobe_cq_dtm_reactor_core;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqDtmReactorCore(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_dtm_reactor_core = value;
    m_Com_adobe_cq_dtm_reactor_coreIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqDtmReactorCoreIsSet() const
{
    return m_Com_adobe_cq_dtm_reactor_coreIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_dtm_reactor_core()
{
    m_Com_adobe_cq_dtm_reactor_coreIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqDtmReactorUi() const
{
    return m_Com_adobe_cq_dtm_reactor_ui;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqDtmReactorUi(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_dtm_reactor_ui = value;
    m_Com_adobe_cq_dtm_reactor_uiIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqDtmReactorUiIsSet() const
{
    return m_Com_adobe_cq_dtm_reactor_uiIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_dtm_reactor_ui()
{
    m_Com_adobe_cq_dtm_reactor_uiIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqExpJspelResolver() const
{
    return m_Com_adobe_cq_exp_jspel_resolver;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqExpJspelResolver(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_exp_jspel_resolver = value;
    m_Com_adobe_cq_exp_jspel_resolverIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqExpJspelResolverIsSet() const
{
    return m_Com_adobe_cq_exp_jspel_resolverIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_exp_jspel_resolver()
{
    m_Com_adobe_cq_exp_jspel_resolverIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqInboxCqInbox() const
{
    return m_Com_adobe_cq_inbox_cq_inbox;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqInboxCqInbox(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_inbox_cq_inbox = value;
    m_Com_adobe_cq_inbox_cq_inboxIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqInboxCqInboxIsSet() const
{
    return m_Com_adobe_cq_inbox_cq_inboxIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_inbox_cq_inbox()
{
    m_Com_adobe_cq_inbox_cq_inboxIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqJsonSchemaParser() const
{
    return m_Com_adobe_cq_json_schema_parser;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqJsonSchemaParser(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_json_schema_parser = value;
    m_Com_adobe_cq_json_schema_parserIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqJsonSchemaParserIsSet() const
{
    return m_Com_adobe_cq_json_schema_parserIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_json_schema_parser()
{
    m_Com_adobe_cq_json_schema_parserIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqMediaCqMediaPublishingDpsFpCore() const
{
    return m_Com_adobe_cq_media_cq_media_publishing_dps_fp_core;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqMediaCqMediaPublishingDpsFpCore(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_media_cq_media_publishing_dps_fp_core = value;
    m_Com_adobe_cq_media_cq_media_publishing_dps_fp_coreIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqMediaCqMediaPublishingDpsFpCoreIsSet() const
{
    return m_Com_adobe_cq_media_cq_media_publishing_dps_fp_coreIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_media_cq_media_publishing_dps_fp_core()
{
    m_Com_adobe_cq_media_cq_media_publishing_dps_fp_coreIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqMobileCqMobileCaas() const
{
    return m_Com_adobe_cq_mobile_cq_mobile_caas;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqMobileCqMobileCaas(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_mobile_cq_mobile_caas = value;
    m_Com_adobe_cq_mobile_cq_mobile_caasIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqMobileCqMobileCaasIsSet() const
{
    return m_Com_adobe_cq_mobile_cq_mobile_caasIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_mobile_cq_mobile_caas()
{
    m_Com_adobe_cq_mobile_cq_mobile_caasIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqMobileCqMobileIndexBuilder() const
{
    return m_Com_adobe_cq_mobile_cq_mobile_index_builder;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqMobileCqMobileIndexBuilder(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_mobile_cq_mobile_index_builder = value;
    m_Com_adobe_cq_mobile_cq_mobile_index_builderIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqMobileCqMobileIndexBuilderIsSet() const
{
    return m_Com_adobe_cq_mobile_cq_mobile_index_builderIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_mobile_cq_mobile_index_builder()
{
    m_Com_adobe_cq_mobile_cq_mobile_index_builderIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqMobileCqMobilePhonegapBuild() const
{
    return m_Com_adobe_cq_mobile_cq_mobile_phonegap_build;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqMobileCqMobilePhonegapBuild(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_mobile_cq_mobile_phonegap_build = value;
    m_Com_adobe_cq_mobile_cq_mobile_phonegap_buildIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqMobileCqMobilePhonegapBuildIsSet() const
{
    return m_Com_adobe_cq_mobile_cq_mobile_phonegap_buildIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_mobile_cq_mobile_phonegap_build()
{
    m_Com_adobe_cq_mobile_cq_mobile_phonegap_buildIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqMyspell() const
{
    return m_Com_adobe_cq_myspell;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqMyspell(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_myspell = value;
    m_Com_adobe_cq_myspellIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqMyspellIsSet() const
{
    return m_Com_adobe_cq_myspellIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_myspell()
{
    m_Com_adobe_cq_myspellIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSampleWeRetailCore() const
{
    return m_Com_adobe_cq_sample_we_retail_core;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSampleWeRetailCore(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_sample_we_retail_core = value;
    m_Com_adobe_cq_sample_we_retail_coreIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSampleWeRetailCoreIsSet() const
{
    return m_Com_adobe_cq_sample_we_retail_coreIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_sample_we_retail_core()
{
    m_Com_adobe_cq_sample_we_retail_coreIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqScreensComAdobeCqScreensDcc() const
{
    return m_Com_adobe_cq_screens_com_adobe_cq_screens_dcc;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqScreensComAdobeCqScreensDcc(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_screens_com_adobe_cq_screens_dcc = value;
    m_Com_adobe_cq_screens_com_adobe_cq_screens_dccIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqScreensComAdobeCqScreensDccIsSet() const
{
    return m_Com_adobe_cq_screens_com_adobe_cq_screens_dccIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_screens_com_adobe_cq_screens_dcc()
{
    m_Com_adobe_cq_screens_com_adobe_cq_screens_dccIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqScreensComAdobeCqScreensMqCore() const
{
    return m_Com_adobe_cq_screens_com_adobe_cq_screens_mq_core;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqScreensComAdobeCqScreensMqCore(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_screens_com_adobe_cq_screens_mq_core = value;
    m_Com_adobe_cq_screens_com_adobe_cq_screens_mq_coreIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqScreensComAdobeCqScreensMqCoreIsSet() const
{
    return m_Com_adobe_cq_screens_com_adobe_cq_screens_mq_coreIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_screens_com_adobe_cq_screens_mq_core()
{
    m_Com_adobe_cq_screens_com_adobe_cq_screens_mq_coreIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialAsProvider() const
{
    return m_Com_adobe_cq_social_cq_social_as_provider;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialAsProvider(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_as_provider = value;
    m_Com_adobe_cq_social_cq_social_as_providerIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialAsProviderIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_as_providerIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_as_provider()
{
    m_Com_adobe_cq_social_cq_social_as_providerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialBadgingBasicImpl() const
{
    return m_Com_adobe_cq_social_cq_social_badging_basic_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialBadgingBasicImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_badging_basic_impl = value;
    m_Com_adobe_cq_social_cq_social_badging_basic_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialBadgingBasicImplIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_badging_basic_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_badging_basic_impl()
{
    m_Com_adobe_cq_social_cq_social_badging_basic_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialBadgingImpl() const
{
    return m_Com_adobe_cq_social_cq_social_badging_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialBadgingImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_badging_impl = value;
    m_Com_adobe_cq_social_cq_social_badging_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialBadgingImplIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_badging_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_badging_impl()
{
    m_Com_adobe_cq_social_cq_social_badging_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialCalendarImpl() const
{
    return m_Com_adobe_cq_social_cq_social_calendar_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialCalendarImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_calendar_impl = value;
    m_Com_adobe_cq_social_cq_social_calendar_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialCalendarImplIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_calendar_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_calendar_impl()
{
    m_Com_adobe_cq_social_cq_social_calendar_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialContentFragmentsImpl() const
{
    return m_Com_adobe_cq_social_cq_social_content_fragments_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialContentFragmentsImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_content_fragments_impl = value;
    m_Com_adobe_cq_social_cq_social_content_fragments_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialContentFragmentsImplIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_content_fragments_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_content_fragments_impl()
{
    m_Com_adobe_cq_social_cq_social_content_fragments_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialEnablementImpl() const
{
    return m_Com_adobe_cq_social_cq_social_enablement_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialEnablementImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_enablement_impl = value;
    m_Com_adobe_cq_social_cq_social_enablement_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialEnablementImplIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_enablement_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_enablement_impl()
{
    m_Com_adobe_cq_social_cq_social_enablement_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialGraphImpl() const
{
    return m_Com_adobe_cq_social_cq_social_graph_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialGraphImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_graph_impl = value;
    m_Com_adobe_cq_social_cq_social_graph_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialGraphImplIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_graph_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_graph_impl()
{
    m_Com_adobe_cq_social_cq_social_graph_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialIdeationImpl() const
{
    return m_Com_adobe_cq_social_cq_social_ideation_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialIdeationImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_ideation_impl = value;
    m_Com_adobe_cq_social_cq_social_ideation_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialIdeationImplIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_ideation_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_ideation_impl()
{
    m_Com_adobe_cq_social_cq_social_ideation_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialJcrProvider() const
{
    return m_Com_adobe_cq_social_cq_social_jcr_provider;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialJcrProvider(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_jcr_provider = value;
    m_Com_adobe_cq_social_cq_social_jcr_providerIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialJcrProviderIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_jcr_providerIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_jcr_provider()
{
    m_Com_adobe_cq_social_cq_social_jcr_providerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialMembersImpl() const
{
    return m_Com_adobe_cq_social_cq_social_members_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialMembersImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_members_impl = value;
    m_Com_adobe_cq_social_cq_social_members_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialMembersImplIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_members_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_members_impl()
{
    m_Com_adobe_cq_social_cq_social_members_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialMsProvider() const
{
    return m_Com_adobe_cq_social_cq_social_ms_provider;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialMsProvider(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_ms_provider = value;
    m_Com_adobe_cq_social_cq_social_ms_providerIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialMsProviderIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_ms_providerIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_ms_provider()
{
    m_Com_adobe_cq_social_cq_social_ms_providerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialNotificationsChannelsWeb() const
{
    return m_Com_adobe_cq_social_cq_social_notifications_channels_web;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialNotificationsChannelsWeb(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_notifications_channels_web = value;
    m_Com_adobe_cq_social_cq_social_notifications_channels_webIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialNotificationsChannelsWebIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_notifications_channels_webIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_notifications_channels_web()
{
    m_Com_adobe_cq_social_cq_social_notifications_channels_webIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialNotificationsImpl() const
{
    return m_Com_adobe_cq_social_cq_social_notifications_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialNotificationsImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_notifications_impl = value;
    m_Com_adobe_cq_social_cq_social_notifications_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialNotificationsImplIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_notifications_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_notifications_impl()
{
    m_Com_adobe_cq_social_cq_social_notifications_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialRdbProvider() const
{
    return m_Com_adobe_cq_social_cq_social_rdb_provider;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialRdbProvider(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_rdb_provider = value;
    m_Com_adobe_cq_social_cq_social_rdb_providerIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialRdbProviderIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_rdb_providerIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_rdb_provider()
{
    m_Com_adobe_cq_social_cq_social_rdb_providerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialScfImpl() const
{
    return m_Com_adobe_cq_social_cq_social_scf_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialScfImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_scf_impl = value;
    m_Com_adobe_cq_social_cq_social_scf_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialScfImplIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_scf_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_scf_impl()
{
    m_Com_adobe_cq_social_cq_social_scf_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialScoringBasicImpl() const
{
    return m_Com_adobe_cq_social_cq_social_scoring_basic_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialScoringBasicImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_scoring_basic_impl = value;
    m_Com_adobe_cq_social_cq_social_scoring_basic_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialScoringBasicImplIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_scoring_basic_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_scoring_basic_impl()
{
    m_Com_adobe_cq_social_cq_social_scoring_basic_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialScoringImpl() const
{
    return m_Com_adobe_cq_social_cq_social_scoring_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialScoringImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_scoring_impl = value;
    m_Com_adobe_cq_social_cq_social_scoring_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialScoringImplIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_scoring_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_scoring_impl()
{
    m_Com_adobe_cq_social_cq_social_scoring_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialServiceusersImpl() const
{
    return m_Com_adobe_cq_social_cq_social_serviceusers_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialServiceusersImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_serviceusers_impl = value;
    m_Com_adobe_cq_social_cq_social_serviceusers_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialServiceusersImplIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_serviceusers_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_serviceusers_impl()
{
    m_Com_adobe_cq_social_cq_social_serviceusers_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialSrpImpl() const
{
    return m_Com_adobe_cq_social_cq_social_srp_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialSrpImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_srp_impl = value;
    m_Com_adobe_cq_social_cq_social_srp_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialSrpImplIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_srp_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_srp_impl()
{
    m_Com_adobe_cq_social_cq_social_srp_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeCqSocialCqSocialUgcbaseImpl() const
{
    return m_Com_adobe_cq_social_cq_social_ugcbase_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeCqSocialCqSocialUgcbaseImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_social_cq_social_ugcbase_impl = value;
    m_Com_adobe_cq_social_cq_social_ugcbase_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeCqSocialCqSocialUgcbaseImplIsSet() const
{
    return m_Com_adobe_cq_social_cq_social_ugcbase_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_cq_social_cq_social_ugcbase_impl()
{
    m_Com_adobe_cq_social_cq_social_ugcbase_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeDamCqDamCfmImpl() const
{
    return m_Com_adobe_dam_cq_dam_cfm_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeDamCqDamCfmImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_dam_cq_dam_cfm_impl = value;
    m_Com_adobe_dam_cq_dam_cfm_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeDamCqDamCfmImplIsSet() const
{
    return m_Com_adobe_dam_cq_dam_cfm_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_dam_cq_dam_cfm_impl()
{
    m_Com_adobe_dam_cq_dam_cfm_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeFormsFoundationFormsFoundationBase() const
{
    return m_Com_adobe_forms_foundation_forms_foundation_base;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeFormsFoundationFormsFoundationBase(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_forms_foundation_forms_foundation_base = value;
    m_Com_adobe_forms_foundation_forms_foundation_baseIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeFormsFoundationFormsFoundationBaseIsSet() const
{
    return m_Com_adobe_forms_foundation_forms_foundation_baseIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_forms_foundation_forms_foundation_base()
{
    m_Com_adobe_forms_foundation_forms_foundation_baseIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteApicontroller() const
{
    return m_Com_adobe_granite_apicontroller;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteApicontroller(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_apicontroller = value;
    m_Com_adobe_granite_apicontrollerIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteApicontrollerIsSet() const
{
    return m_Com_adobe_granite_apicontrollerIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_apicontroller()
{
    m_Com_adobe_granite_apicontrollerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteAssetCore() const
{
    return m_Com_adobe_granite_asset_core;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteAssetCore(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_asset_core = value;
    m_Com_adobe_granite_asset_coreIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteAssetCoreIsSet() const
{
    return m_Com_adobe_granite_asset_coreIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_asset_core()
{
    m_Com_adobe_granite_asset_coreIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteAuthSso() const
{
    return m_Com_adobe_granite_auth_sso;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteAuthSso(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_auth_sso = value;
    m_Com_adobe_granite_auth_ssoIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteAuthSsoIsSet() const
{
    return m_Com_adobe_granite_auth_ssoIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_auth_sso()
{
    m_Com_adobe_granite_auth_ssoIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteBundlesHcImpl() const
{
    return m_Com_adobe_granite_bundles_hc_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteBundlesHcImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_bundles_hc_impl = value;
    m_Com_adobe_granite_bundles_hc_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteBundlesHcImplIsSet() const
{
    return m_Com_adobe_granite_bundles_hc_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_bundles_hc_impl()
{
    m_Com_adobe_granite_bundles_hc_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteCompatRouter() const
{
    return m_Com_adobe_granite_compat_router;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteCompatRouter(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_compat_router = value;
    m_Com_adobe_granite_compat_routerIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteCompatRouterIsSet() const
{
    return m_Com_adobe_granite_compat_routerIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_compat_router()
{
    m_Com_adobe_granite_compat_routerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteConf() const
{
    return m_Com_adobe_granite_conf;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteConf(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_conf = value;
    m_Com_adobe_granite_confIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteConfIsSet() const
{
    return m_Com_adobe_granite_confIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_conf()
{
    m_Com_adobe_granite_confIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteConfUiCore() const
{
    return m_Com_adobe_granite_conf_ui_core;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteConfUiCore(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_conf_ui_core = value;
    m_Com_adobe_granite_conf_ui_coreIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteConfUiCoreIsSet() const
{
    return m_Com_adobe_granite_conf_ui_coreIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_conf_ui_core()
{
    m_Com_adobe_granite_conf_ui_coreIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteCors() const
{
    return m_Com_adobe_granite_cors;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteCors(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_cors = value;
    m_Com_adobe_granite_corsIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteCorsIsSet() const
{
    return m_Com_adobe_granite_corsIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_cors()
{
    m_Com_adobe_granite_corsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteCrxExplorer() const
{
    return m_Com_adobe_granite_crx_explorer;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteCrxExplorer(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_crx_explorer = value;
    m_Com_adobe_granite_crx_explorerIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteCrxExplorerIsSet() const
{
    return m_Com_adobe_granite_crx_explorerIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_crx_explorer()
{
    m_Com_adobe_granite_crx_explorerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteCrxdeLite() const
{
    return m_Com_adobe_granite_crxde_lite;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteCrxdeLite(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_crxde_lite = value;
    m_Com_adobe_granite_crxde_liteIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteCrxdeLiteIsSet() const
{
    return m_Com_adobe_granite_crxde_liteIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_crxde_lite()
{
    m_Com_adobe_granite_crxde_liteIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteCryptoConfig() const
{
    return m_Com_adobe_granite_crypto_config;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteCryptoConfig(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_crypto_config = value;
    m_Com_adobe_granite_crypto_configIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteCryptoConfigIsSet() const
{
    return m_Com_adobe_granite_crypto_configIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_crypto_config()
{
    m_Com_adobe_granite_crypto_configIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteCryptoExtension() const
{
    return m_Com_adobe_granite_crypto_extension;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteCryptoExtension(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_crypto_extension = value;
    m_Com_adobe_granite_crypto_extensionIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteCryptoExtensionIsSet() const
{
    return m_Com_adobe_granite_crypto_extensionIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_crypto_extension()
{
    m_Com_adobe_granite_crypto_extensionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteCryptoFile() const
{
    return m_Com_adobe_granite_crypto_file;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteCryptoFile(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_crypto_file = value;
    m_Com_adobe_granite_crypto_fileIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteCryptoFileIsSet() const
{
    return m_Com_adobe_granite_crypto_fileIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_crypto_file()
{
    m_Com_adobe_granite_crypto_fileIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteCryptoJcr() const
{
    return m_Com_adobe_granite_crypto_jcr;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteCryptoJcr(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_crypto_jcr = value;
    m_Com_adobe_granite_crypto_jcrIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteCryptoJcrIsSet() const
{
    return m_Com_adobe_granite_crypto_jcrIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_crypto_jcr()
{
    m_Com_adobe_granite_crypto_jcrIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteCsrf() const
{
    return m_Com_adobe_granite_csrf;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteCsrf(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_csrf = value;
    m_Com_adobe_granite_csrfIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteCsrfIsSet() const
{
    return m_Com_adobe_granite_csrfIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_csrf()
{
    m_Com_adobe_granite_csrfIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteDistributionCore() const
{
    return m_Com_adobe_granite_distribution_core;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteDistributionCore(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_distribution_core = value;
    m_Com_adobe_granite_distribution_coreIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteDistributionCoreIsSet() const
{
    return m_Com_adobe_granite_distribution_coreIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_distribution_core()
{
    m_Com_adobe_granite_distribution_coreIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteDropwizardMetrics() const
{
    return m_Com_adobe_granite_dropwizard_metrics;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteDropwizardMetrics(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_dropwizard_metrics = value;
    m_Com_adobe_granite_dropwizard_metricsIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteDropwizardMetricsIsSet() const
{
    return m_Com_adobe_granite_dropwizard_metricsIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_dropwizard_metrics()
{
    m_Com_adobe_granite_dropwizard_metricsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteFragsImpl() const
{
    return m_Com_adobe_granite_frags_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteFragsImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_frags_impl = value;
    m_Com_adobe_granite_frags_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteFragsImplIsSet() const
{
    return m_Com_adobe_granite_frags_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_frags_impl()
{
    m_Com_adobe_granite_frags_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteGibson() const
{
    return m_Com_adobe_granite_gibson;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteGibson(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_gibson = value;
    m_Com_adobe_granite_gibsonIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteGibsonIsSet() const
{
    return m_Com_adobe_granite_gibsonIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_gibson()
{
    m_Com_adobe_granite_gibsonIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteInfocollector() const
{
    return m_Com_adobe_granite_infocollector;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteInfocollector(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_infocollector = value;
    m_Com_adobe_granite_infocollectorIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteInfocollectorIsSet() const
{
    return m_Com_adobe_granite_infocollectorIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_infocollector()
{
    m_Com_adobe_granite_infocollectorIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteInstallerFactoryPackages() const
{
    return m_Com_adobe_granite_installer_factory_packages;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteInstallerFactoryPackages(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_installer_factory_packages = value;
    m_Com_adobe_granite_installer_factory_packagesIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteInstallerFactoryPackagesIsSet() const
{
    return m_Com_adobe_granite_installer_factory_packagesIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_installer_factory_packages()
{
    m_Com_adobe_granite_installer_factory_packagesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteJettySsl() const
{
    return m_Com_adobe_granite_jetty_ssl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteJettySsl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_jetty_ssl = value;
    m_Com_adobe_granite_jetty_sslIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteJettySslIsSet() const
{
    return m_Com_adobe_granite_jetty_sslIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_jetty_ssl()
{
    m_Com_adobe_granite_jetty_sslIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteJobsAsync() const
{
    return m_Com_adobe_granite_jobs_async;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteJobsAsync(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_jobs_async = value;
    m_Com_adobe_granite_jobs_asyncIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteJobsAsyncIsSet() const
{
    return m_Com_adobe_granite_jobs_asyncIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_jobs_async()
{
    m_Com_adobe_granite_jobs_asyncIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteMaintenanceOak() const
{
    return m_Com_adobe_granite_maintenance_oak;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteMaintenanceOak(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_maintenance_oak = value;
    m_Com_adobe_granite_maintenance_oakIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteMaintenanceOakIsSet() const
{
    return m_Com_adobe_granite_maintenance_oakIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_maintenance_oak()
{
    m_Com_adobe_granite_maintenance_oakIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteMonitoringCore() const
{
    return m_Com_adobe_granite_monitoring_core;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteMonitoringCore(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_monitoring_core = value;
    m_Com_adobe_granite_monitoring_coreIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteMonitoringCoreIsSet() const
{
    return m_Com_adobe_granite_monitoring_coreIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_monitoring_core()
{
    m_Com_adobe_granite_monitoring_coreIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteQueries() const
{
    return m_Com_adobe_granite_queries;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteQueries(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_queries = value;
    m_Com_adobe_granite_queriesIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteQueriesIsSet() const
{
    return m_Com_adobe_granite_queriesIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_queries()
{
    m_Com_adobe_granite_queriesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteReplicationHcImpl() const
{
    return m_Com_adobe_granite_replication_hc_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteReplicationHcImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_replication_hc_impl = value;
    m_Com_adobe_granite_replication_hc_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteReplicationHcImplIsSet() const
{
    return m_Com_adobe_granite_replication_hc_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_replication_hc_impl()
{
    m_Com_adobe_granite_replication_hc_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteRepositoryChecker() const
{
    return m_Com_adobe_granite_repository_checker;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteRepositoryChecker(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_repository_checker = value;
    m_Com_adobe_granite_repository_checkerIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteRepositoryCheckerIsSet() const
{
    return m_Com_adobe_granite_repository_checkerIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_repository_checker()
{
    m_Com_adobe_granite_repository_checkerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteRepositoryHcImpl() const
{
    return m_Com_adobe_granite_repository_hc_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteRepositoryHcImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_repository_hc_impl = value;
    m_Com_adobe_granite_repository_hc_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteRepositoryHcImplIsSet() const
{
    return m_Com_adobe_granite_repository_hc_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_repository_hc_impl()
{
    m_Com_adobe_granite_repository_hc_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteRestAssets() const
{
    return m_Com_adobe_granite_rest_assets;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteRestAssets(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_rest_assets = value;
    m_Com_adobe_granite_rest_assetsIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteRestAssetsIsSet() const
{
    return m_Com_adobe_granite_rest_assetsIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_rest_assets()
{
    m_Com_adobe_granite_rest_assetsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteSecurityUi() const
{
    return m_Com_adobe_granite_security_ui;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteSecurityUi(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_security_ui = value;
    m_Com_adobe_granite_security_uiIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteSecurityUiIsSet() const
{
    return m_Com_adobe_granite_security_uiIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_security_ui()
{
    m_Com_adobe_granite_security_uiIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteStartup() const
{
    return m_Com_adobe_granite_startup;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteStartup(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_startup = value;
    m_Com_adobe_granite_startupIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteStartupIsSet() const
{
    return m_Com_adobe_granite_startupIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_startup()
{
    m_Com_adobe_granite_startupIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteTagsoup() const
{
    return m_Com_adobe_granite_tagsoup;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteTagsoup(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_tagsoup = value;
    m_Com_adobe_granite_tagsoupIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteTagsoupIsSet() const
{
    return m_Com_adobe_granite_tagsoupIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_tagsoup()
{
    m_Com_adobe_granite_tagsoupIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteTaskmanagementCore() const
{
    return m_Com_adobe_granite_taskmanagement_core;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteTaskmanagementCore(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_taskmanagement_core = value;
    m_Com_adobe_granite_taskmanagement_coreIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteTaskmanagementCoreIsSet() const
{
    return m_Com_adobe_granite_taskmanagement_coreIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_taskmanagement_core()
{
    m_Com_adobe_granite_taskmanagement_coreIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteTaskmanagementWorkflow() const
{
    return m_Com_adobe_granite_taskmanagement_workflow;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteTaskmanagementWorkflow(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_taskmanagement_workflow = value;
    m_Com_adobe_granite_taskmanagement_workflowIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteTaskmanagementWorkflowIsSet() const
{
    return m_Com_adobe_granite_taskmanagement_workflowIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_taskmanagement_workflow()
{
    m_Com_adobe_granite_taskmanagement_workflowIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteUiClientlibsCompilerLess() const
{
    return m_Com_adobe_granite_ui_clientlibs_compiler_less;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteUiClientlibsCompilerLess(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_ui_clientlibs_compiler_less = value;
    m_Com_adobe_granite_ui_clientlibs_compiler_lessIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteUiClientlibsCompilerLessIsSet() const
{
    return m_Com_adobe_granite_ui_clientlibs_compiler_lessIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_ui_clientlibs_compiler_less()
{
    m_Com_adobe_granite_ui_clientlibs_compiler_lessIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteUiClientlibsProcessorGcc() const
{
    return m_Com_adobe_granite_ui_clientlibs_processor_gcc;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteUiClientlibsProcessorGcc(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_ui_clientlibs_processor_gcc = value;
    m_Com_adobe_granite_ui_clientlibs_processor_gccIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteUiClientlibsProcessorGccIsSet() const
{
    return m_Com_adobe_granite_ui_clientlibs_processor_gccIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_ui_clientlibs_processor_gcc()
{
    m_Com_adobe_granite_ui_clientlibs_processor_gccIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteWebconsolePlugins() const
{
    return m_Com_adobe_granite_webconsole_plugins;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteWebconsolePlugins(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_webconsole_plugins = value;
    m_Com_adobe_granite_webconsole_pluginsIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteWebconsolePluginsIsSet() const
{
    return m_Com_adobe_granite_webconsole_pluginsIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_webconsole_plugins()
{
    m_Com_adobe_granite_webconsole_pluginsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeGraniteWorkflowConsole() const
{
    return m_Com_adobe_granite_workflow_console;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeGraniteWorkflowConsole(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_workflow_console = value;
    m_Com_adobe_granite_workflow_consoleIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeGraniteWorkflowConsoleIsSet() const
{
    return m_Com_adobe_granite_workflow_consoleIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_granite_workflow_console()
{
    m_Com_adobe_granite_workflow_consoleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeXmpWorkerFilesNativeFragmentLinux() const
{
    return m_Com_adobe_xmp_worker_files_native_fragment_linux;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeXmpWorkerFilesNativeFragmentLinux(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_xmp_worker_files_native_fragment_linux = value;
    m_Com_adobe_xmp_worker_files_native_fragment_linuxIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeXmpWorkerFilesNativeFragmentLinuxIsSet() const
{
    return m_Com_adobe_xmp_worker_files_native_fragment_linuxIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_xmp_worker_files_native_fragment_linux()
{
    m_Com_adobe_xmp_worker_files_native_fragment_linuxIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeXmpWorkerFilesNativeFragmentMacosx() const
{
    return m_Com_adobe_xmp_worker_files_native_fragment_macosx;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeXmpWorkerFilesNativeFragmentMacosx(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_xmp_worker_files_native_fragment_macosx = value;
    m_Com_adobe_xmp_worker_files_native_fragment_macosxIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeXmpWorkerFilesNativeFragmentMacosxIsSet() const
{
    return m_Com_adobe_xmp_worker_files_native_fragment_macosxIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_xmp_worker_files_native_fragment_macosx()
{
    m_Com_adobe_xmp_worker_files_native_fragment_macosxIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComAdobeXmpWorkerFilesNativeFragmentWin() const
{
    return m_Com_adobe_xmp_worker_files_native_fragment_win;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComAdobeXmpWorkerFilesNativeFragmentWin(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_xmp_worker_files_native_fragment_win = value;
    m_Com_adobe_xmp_worker_files_native_fragment_winIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comAdobeXmpWorkerFilesNativeFragmentWinIsSet() const
{
    return m_Com_adobe_xmp_worker_files_native_fragment_winIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_adobe_xmp_worker_files_native_fragment_win()
{
    m_Com_adobe_xmp_worker_files_native_fragment_winIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComDayCommonsOsgiWrapperSimpleJndi() const
{
    return m_Com_day_commons_osgi_wrapper_simple_jndi;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComDayCommonsOsgiWrapperSimpleJndi(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_day_commons_osgi_wrapper_simple_jndi = value;
    m_Com_day_commons_osgi_wrapper_simple_jndiIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comDayCommonsOsgiWrapperSimpleJndiIsSet() const
{
    return m_Com_day_commons_osgi_wrapper_simple_jndiIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_day_commons_osgi_wrapper_simple_jndi()
{
    m_Com_day_commons_osgi_wrapper_simple_jndiIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComDayCqCqAuthhandler() const
{
    return m_Com_day_cq_cq_authhandler;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComDayCqCqAuthhandler(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_day_cq_cq_authhandler = value;
    m_Com_day_cq_cq_authhandlerIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comDayCqCqAuthhandlerIsSet() const
{
    return m_Com_day_cq_cq_authhandlerIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_day_cq_cq_authhandler()
{
    m_Com_day_cq_cq_authhandlerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComDayCqCqCompatConfigupdate() const
{
    return m_Com_day_cq_cq_compat_configupdate;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComDayCqCqCompatConfigupdate(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_day_cq_cq_compat_configupdate = value;
    m_Com_day_cq_cq_compat_configupdateIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comDayCqCqCompatConfigupdateIsSet() const
{
    return m_Com_day_cq_cq_compat_configupdateIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_day_cq_cq_compat_configupdate()
{
    m_Com_day_cq_cq_compat_configupdateIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComDayCqCqLicensebranding() const
{
    return m_Com_day_cq_cq_licensebranding;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComDayCqCqLicensebranding(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_day_cq_cq_licensebranding = value;
    m_Com_day_cq_cq_licensebrandingIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comDayCqCqLicensebrandingIsSet() const
{
    return m_Com_day_cq_cq_licensebrandingIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_day_cq_cq_licensebranding()
{
    m_Com_day_cq_cq_licensebrandingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComDayCqCqNotifcationImpl() const
{
    return m_Com_day_cq_cq_notifcation_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComDayCqCqNotifcationImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_day_cq_cq_notifcation_impl = value;
    m_Com_day_cq_cq_notifcation_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comDayCqCqNotifcationImplIsSet() const
{
    return m_Com_day_cq_cq_notifcation_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_day_cq_cq_notifcation_impl()
{
    m_Com_day_cq_cq_notifcation_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComDayCqCqReplicationAudit() const
{
    return m_Com_day_cq_cq_replication_audit;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComDayCqCqReplicationAudit(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_day_cq_cq_replication_audit = value;
    m_Com_day_cq_cq_replication_auditIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comDayCqCqReplicationAuditIsSet() const
{
    return m_Com_day_cq_cq_replication_auditIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_day_cq_cq_replication_audit()
{
    m_Com_day_cq_cq_replication_auditIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComDayCqCqSearchExt() const
{
    return m_Com_day_cq_cq_search_ext;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComDayCqCqSearchExt(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_day_cq_cq_search_ext = value;
    m_Com_day_cq_cq_search_extIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comDayCqCqSearchExtIsSet() const
{
    return m_Com_day_cq_cq_search_extIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_day_cq_cq_search_ext()
{
    m_Com_day_cq_cq_search_extIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComDayCqDamCqDamAnnotationPrint() const
{
    return m_Com_day_cq_dam_cq_dam_annotation_print;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComDayCqDamCqDamAnnotationPrint(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_day_cq_dam_cq_dam_annotation_print = value;
    m_Com_day_cq_dam_cq_dam_annotation_printIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comDayCqDamCqDamAnnotationPrintIsSet() const
{
    return m_Com_day_cq_dam_cq_dam_annotation_printIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_day_cq_dam_cq_dam_annotation_print()
{
    m_Com_day_cq_dam_cq_dam_annotation_printIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComDayCqDamCqDamAssetUsage() const
{
    return m_Com_day_cq_dam_cq_dam_asset_usage;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComDayCqDamCqDamAssetUsage(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_day_cq_dam_cq_dam_asset_usage = value;
    m_Com_day_cq_dam_cq_dam_asset_usageIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comDayCqDamCqDamAssetUsageIsSet() const
{
    return m_Com_day_cq_dam_cq_dam_asset_usageIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_day_cq_dam_cq_dam_asset_usage()
{
    m_Com_day_cq_dam_cq_dam_asset_usageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComDayCqDamCqDamS7dam() const
{
    return m_Com_day_cq_dam_cq_dam_s7dam;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComDayCqDamCqDamS7dam(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_day_cq_dam_cq_dam_s7dam = value;
    m_Com_day_cq_dam_cq_dam_s7damIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comDayCqDamCqDamS7damIsSet() const
{
    return m_Com_day_cq_dam_cq_dam_s7damIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_day_cq_dam_cq_dam_s7dam()
{
    m_Com_day_cq_dam_cq_dam_s7damIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComDayCqDamCqDamSimilaritysearch() const
{
    return m_Com_day_cq_dam_cq_dam_similaritysearch;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComDayCqDamCqDamSimilaritysearch(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_day_cq_dam_cq_dam_similaritysearch = value;
    m_Com_day_cq_dam_cq_dam_similaritysearchIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comDayCqDamCqDamSimilaritysearchIsSet() const
{
    return m_Com_day_cq_dam_cq_dam_similaritysearchIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_day_cq_dam_cq_dam_similaritysearch()
{
    m_Com_day_cq_dam_cq_dam_similaritysearchIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComDayCqDamDamWebdavSupport() const
{
    return m_Com_day_cq_dam_dam_webdav_support;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComDayCqDamDamWebdavSupport(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_day_cq_dam_dam_webdav_support = value;
    m_Com_day_cq_dam_dam_webdav_supportIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comDayCqDamDamWebdavSupportIsSet() const
{
    return m_Com_day_cq_dam_dam_webdav_supportIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_day_cq_dam_dam_webdav_support()
{
    m_Com_day_cq_dam_dam_webdav_supportIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComDayCqPreUpgradeTasks() const
{
    return m_Com_day_cq_pre_upgrade_tasks;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComDayCqPreUpgradeTasks(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_day_cq_pre_upgrade_tasks = value;
    m_Com_day_cq_pre_upgrade_tasksIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comDayCqPreUpgradeTasksIsSet() const
{
    return m_Com_day_cq_pre_upgrade_tasksIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_day_cq_pre_upgrade_tasks()
{
    m_Com_day_cq_pre_upgrade_tasksIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComDayCqReplicationExtensions() const
{
    return m_Com_day_cq_replication_extensions;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComDayCqReplicationExtensions(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_day_cq_replication_extensions = value;
    m_Com_day_cq_replication_extensionsIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comDayCqReplicationExtensionsIsSet() const
{
    return m_Com_day_cq_replication_extensionsIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_day_cq_replication_extensions()
{
    m_Com_day_cq_replication_extensionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComDayCqWcmCqMsmCore() const
{
    return m_Com_day_cq_wcm_cq_msm_core;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComDayCqWcmCqMsmCore(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_day_cq_wcm_cq_msm_core = value;
    m_Com_day_cq_wcm_cq_msm_coreIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comDayCqWcmCqMsmCoreIsSet() const
{
    return m_Com_day_cq_wcm_cq_msm_coreIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_day_cq_wcm_cq_msm_core()
{
    m_Com_day_cq_wcm_cq_msm_coreIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getComDayCqWcmCqWcmTranslation() const
{
    return m_Com_day_cq_wcm_cq_wcm_translation;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setComDayCqWcmCqWcmTranslation(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_day_cq_wcm_cq_wcm_translation = value;
    m_Com_day_cq_wcm_cq_wcm_translationIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::comDayCqWcmCqWcmTranslationIsSet() const
{
    return m_Com_day_cq_wcm_cq_wcm_translationIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetCom_day_cq_wcm_cq_wcm_translation()
{
    m_Com_day_cq_wcm_cq_wcm_translationIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getDayCommonsJrawio() const
{
    return m_Day_commons_jrawio;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setDayCommonsJrawio(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Day_commons_jrawio = value;
    m_Day_commons_jrawioIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::dayCommonsJrawioIsSet() const
{
    return m_Day_commons_jrawioIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetDay_commons_jrawio()
{
    m_Day_commons_jrawioIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheAriesJmxWhiteboard() const
{
    return m_Org_apache_aries_jmx_whiteboard;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheAriesJmxWhiteboard(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_aries_jmx_whiteboard = value;
    m_Org_apache_aries_jmx_whiteboardIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheAriesJmxWhiteboardIsSet() const
{
    return m_Org_apache_aries_jmx_whiteboardIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_aries_jmx_whiteboard()
{
    m_Org_apache_aries_jmx_whiteboardIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheFelixHttpSslfilter() const
{
    return m_Org_apache_felix_http_sslfilter;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheFelixHttpSslfilter(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_felix_http_sslfilter = value;
    m_Org_apache_felix_http_sslfilterIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheFelixHttpSslfilterIsSet() const
{
    return m_Org_apache_felix_http_sslfilterIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_felix_http_sslfilter()
{
    m_Org_apache_felix_http_sslfilterIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheFelixOrgApacheFelixThreaddump() const
{
    return m_Org_apache_felix_org_apache_felix_threaddump;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheFelixOrgApacheFelixThreaddump(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_felix_org_apache_felix_threaddump = value;
    m_Org_apache_felix_org_apache_felix_threaddumpIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheFelixOrgApacheFelixThreaddumpIsSet() const
{
    return m_Org_apache_felix_org_apache_felix_threaddumpIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_felix_org_apache_felix_threaddump()
{
    m_Org_apache_felix_org_apache_felix_threaddumpIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheFelixWebconsolePluginsDs() const
{
    return m_Org_apache_felix_webconsole_plugins_ds;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheFelixWebconsolePluginsDs(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_felix_webconsole_plugins_ds = value;
    m_Org_apache_felix_webconsole_plugins_dsIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheFelixWebconsolePluginsDsIsSet() const
{
    return m_Org_apache_felix_webconsole_plugins_dsIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_felix_webconsole_plugins_ds()
{
    m_Org_apache_felix_webconsole_plugins_dsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheFelixWebconsolePluginsEvent() const
{
    return m_Org_apache_felix_webconsole_plugins_event;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheFelixWebconsolePluginsEvent(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_felix_webconsole_plugins_event = value;
    m_Org_apache_felix_webconsole_plugins_eventIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheFelixWebconsolePluginsEventIsSet() const
{
    return m_Org_apache_felix_webconsole_plugins_eventIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_felix_webconsole_plugins_event()
{
    m_Org_apache_felix_webconsole_plugins_eventIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheFelixWebconsolePluginsMemoryusage() const
{
    return m_Org_apache_felix_webconsole_plugins_memoryusage;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheFelixWebconsolePluginsMemoryusage(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_felix_webconsole_plugins_memoryusage = value;
    m_Org_apache_felix_webconsole_plugins_memoryusageIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheFelixWebconsolePluginsMemoryusageIsSet() const
{
    return m_Org_apache_felix_webconsole_plugins_memoryusageIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_felix_webconsole_plugins_memoryusage()
{
    m_Org_apache_felix_webconsole_plugins_memoryusageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheFelixWebconsolePluginsPackageadmin() const
{
    return m_Org_apache_felix_webconsole_plugins_packageadmin;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheFelixWebconsolePluginsPackageadmin(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_felix_webconsole_plugins_packageadmin = value;
    m_Org_apache_felix_webconsole_plugins_packageadminIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheFelixWebconsolePluginsPackageadminIsSet() const
{
    return m_Org_apache_felix_webconsole_plugins_packageadminIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_felix_webconsole_plugins_packageadmin()
{
    m_Org_apache_felix_webconsole_plugins_packageadminIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheJackrabbitOakAuthLdap() const
{
    return m_Org_apache_jackrabbit_oak_auth_ldap;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheJackrabbitOakAuthLdap(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_jackrabbit_oak_auth_ldap = value;
    m_Org_apache_jackrabbit_oak_auth_ldapIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheJackrabbitOakAuthLdapIsSet() const
{
    return m_Org_apache_jackrabbit_oak_auth_ldapIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_jackrabbit_oak_auth_ldap()
{
    m_Org_apache_jackrabbit_oak_auth_ldapIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheJackrabbitOakSegmentTar() const
{
    return m_Org_apache_jackrabbit_oak_segment_tar;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheJackrabbitOakSegmentTar(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_jackrabbit_oak_segment_tar = value;
    m_Org_apache_jackrabbit_oak_segment_tarIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheJackrabbitOakSegmentTarIsSet() const
{
    return m_Org_apache_jackrabbit_oak_segment_tarIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_jackrabbit_oak_segment_tar()
{
    m_Org_apache_jackrabbit_oak_segment_tarIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheJackrabbitOakSolrOsgi() const
{
    return m_Org_apache_jackrabbit_oak_solr_osgi;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheJackrabbitOakSolrOsgi(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_jackrabbit_oak_solr_osgi = value;
    m_Org_apache_jackrabbit_oak_solr_osgiIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheJackrabbitOakSolrOsgiIsSet() const
{
    return m_Org_apache_jackrabbit_oak_solr_osgiIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_jackrabbit_oak_solr_osgi()
{
    m_Org_apache_jackrabbit_oak_solr_osgiIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingBundleresourceImpl() const
{
    return m_Org_apache_sling_bundleresource_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingBundleresourceImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_bundleresource_impl = value;
    m_Org_apache_sling_bundleresource_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingBundleresourceImplIsSet() const
{
    return m_Org_apache_sling_bundleresource_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_bundleresource_impl()
{
    m_Org_apache_sling_bundleresource_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingCommonsFsclassloader() const
{
    return m_Org_apache_sling_commons_fsclassloader;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingCommonsFsclassloader(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_commons_fsclassloader = value;
    m_Org_apache_sling_commons_fsclassloaderIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingCommonsFsclassloaderIsSet() const
{
    return m_Org_apache_sling_commons_fsclassloaderIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_commons_fsclassloader()
{
    m_Org_apache_sling_commons_fsclassloaderIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingCommonsLogWebconsole() const
{
    return m_Org_apache_sling_commons_log_webconsole;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingCommonsLogWebconsole(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_commons_log_webconsole = value;
    m_Org_apache_sling_commons_log_webconsoleIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingCommonsLogWebconsoleIsSet() const
{
    return m_Org_apache_sling_commons_log_webconsoleIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_commons_log_webconsole()
{
    m_Org_apache_sling_commons_log_webconsoleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingDatasource() const
{
    return m_Org_apache_sling_datasource;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingDatasource(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_datasource = value;
    m_Org_apache_sling_datasourceIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingDatasourceIsSet() const
{
    return m_Org_apache_sling_datasourceIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_datasource()
{
    m_Org_apache_sling_datasourceIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingDiscoveryBase() const
{
    return m_Org_apache_sling_discovery_base;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingDiscoveryBase(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_discovery_base = value;
    m_Org_apache_sling_discovery_baseIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingDiscoveryBaseIsSet() const
{
    return m_Org_apache_sling_discovery_baseIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_discovery_base()
{
    m_Org_apache_sling_discovery_baseIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingDiscoveryOak() const
{
    return m_Org_apache_sling_discovery_oak;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingDiscoveryOak(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_discovery_oak = value;
    m_Org_apache_sling_discovery_oakIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingDiscoveryOakIsSet() const
{
    return m_Org_apache_sling_discovery_oakIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_discovery_oak()
{
    m_Org_apache_sling_discovery_oakIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingDiscoverySupport() const
{
    return m_Org_apache_sling_discovery_support;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingDiscoverySupport(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_discovery_support = value;
    m_Org_apache_sling_discovery_supportIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingDiscoverySupportIsSet() const
{
    return m_Org_apache_sling_discovery_supportIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_discovery_support()
{
    m_Org_apache_sling_discovery_supportIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingDistributionApi() const
{
    return m_Org_apache_sling_distribution_api;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingDistributionApi(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_distribution_api = value;
    m_Org_apache_sling_distribution_apiIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingDistributionApiIsSet() const
{
    return m_Org_apache_sling_distribution_apiIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_distribution_api()
{
    m_Org_apache_sling_distribution_apiIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingDistributionCore() const
{
    return m_Org_apache_sling_distribution_core;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingDistributionCore(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_distribution_core = value;
    m_Org_apache_sling_distribution_coreIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingDistributionCoreIsSet() const
{
    return m_Org_apache_sling_distribution_coreIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_distribution_core()
{
    m_Org_apache_sling_distribution_coreIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingExtensionsWebconsolesecurityprovider() const
{
    return m_Org_apache_sling_extensions_webconsolesecurityprovider;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingExtensionsWebconsolesecurityprovider(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_extensions_webconsolesecurityprovider = value;
    m_Org_apache_sling_extensions_webconsolesecurityproviderIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingExtensionsWebconsolesecurityproviderIsSet() const
{
    return m_Org_apache_sling_extensions_webconsolesecurityproviderIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_extensions_webconsolesecurityprovider()
{
    m_Org_apache_sling_extensions_webconsolesecurityproviderIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingHcWebconsole() const
{
    return m_Org_apache_sling_hc_webconsole;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingHcWebconsole(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_hc_webconsole = value;
    m_Org_apache_sling_hc_webconsoleIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingHcWebconsoleIsSet() const
{
    return m_Org_apache_sling_hc_webconsoleIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_hc_webconsole()
{
    m_Org_apache_sling_hc_webconsoleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingInstallerConsole() const
{
    return m_Org_apache_sling_installer_console;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingInstallerConsole(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_installer_console = value;
    m_Org_apache_sling_installer_consoleIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingInstallerConsoleIsSet() const
{
    return m_Org_apache_sling_installer_consoleIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_installer_console()
{
    m_Org_apache_sling_installer_consoleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingInstallerProviderFile() const
{
    return m_Org_apache_sling_installer_provider_file;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingInstallerProviderFile(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_installer_provider_file = value;
    m_Org_apache_sling_installer_provider_fileIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingInstallerProviderFileIsSet() const
{
    return m_Org_apache_sling_installer_provider_fileIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_installer_provider_file()
{
    m_Org_apache_sling_installer_provider_fileIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingInstallerProviderJcr() const
{
    return m_Org_apache_sling_installer_provider_jcr;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingInstallerProviderJcr(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_installer_provider_jcr = value;
    m_Org_apache_sling_installer_provider_jcrIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingInstallerProviderJcrIsSet() const
{
    return m_Org_apache_sling_installer_provider_jcrIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_installer_provider_jcr()
{
    m_Org_apache_sling_installer_provider_jcrIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingJcrDavex() const
{
    return m_Org_apache_sling_jcr_davex;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingJcrDavex(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_jcr_davex = value;
    m_Org_apache_sling_jcr_davexIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingJcrDavexIsSet() const
{
    return m_Org_apache_sling_jcr_davexIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_jcr_davex()
{
    m_Org_apache_sling_jcr_davexIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingJcrResourcesecurity() const
{
    return m_Org_apache_sling_jcr_resourcesecurity;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingJcrResourcesecurity(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_jcr_resourcesecurity = value;
    m_Org_apache_sling_jcr_resourcesecurityIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingJcrResourcesecurityIsSet() const
{
    return m_Org_apache_sling_jcr_resourcesecurityIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_jcr_resourcesecurity()
{
    m_Org_apache_sling_jcr_resourcesecurityIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingJmxProvider() const
{
    return m_Org_apache_sling_jmx_provider;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingJmxProvider(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_jmx_provider = value;
    m_Org_apache_sling_jmx_providerIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingJmxProviderIsSet() const
{
    return m_Org_apache_sling_jmx_providerIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_jmx_provider()
{
    m_Org_apache_sling_jmx_providerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingLaunchpadInstaller() const
{
    return m_Org_apache_sling_launchpad_installer;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingLaunchpadInstaller(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_launchpad_installer = value;
    m_Org_apache_sling_launchpad_installerIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingLaunchpadInstallerIsSet() const
{
    return m_Org_apache_sling_launchpad_installerIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_launchpad_installer()
{
    m_Org_apache_sling_launchpad_installerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingModelsImpl() const
{
    return m_Org_apache_sling_models_impl;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingModelsImpl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_models_impl = value;
    m_Org_apache_sling_models_implIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingModelsImplIsSet() const
{
    return m_Org_apache_sling_models_implIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_models_impl()
{
    m_Org_apache_sling_models_implIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingRepoinitParser() const
{
    return m_Org_apache_sling_repoinit_parser;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingRepoinitParser(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_repoinit_parser = value;
    m_Org_apache_sling_repoinit_parserIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingRepoinitParserIsSet() const
{
    return m_Org_apache_sling_repoinit_parserIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_repoinit_parser()
{
    m_Org_apache_sling_repoinit_parserIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingResourceInventory() const
{
    return m_Org_apache_sling_resource_inventory;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingResourceInventory(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_resource_inventory = value;
    m_Org_apache_sling_resource_inventoryIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingResourceInventoryIsSet() const
{
    return m_Org_apache_sling_resource_inventoryIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_resource_inventory()
{
    m_Org_apache_sling_resource_inventoryIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingResourceresolver() const
{
    return m_Org_apache_sling_resourceresolver;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingResourceresolver(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_resourceresolver = value;
    m_Org_apache_sling_resourceresolverIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingResourceresolverIsSet() const
{
    return m_Org_apache_sling_resourceresolverIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_resourceresolver()
{
    m_Org_apache_sling_resourceresolverIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingScriptingJavascript() const
{
    return m_Org_apache_sling_scripting_javascript;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingScriptingJavascript(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_scripting_javascript = value;
    m_Org_apache_sling_scripting_javascriptIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingScriptingJavascriptIsSet() const
{
    return m_Org_apache_sling_scripting_javascriptIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_scripting_javascript()
{
    m_Org_apache_sling_scripting_javascriptIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingScriptingJst() const
{
    return m_Org_apache_sling_scripting_jst;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingScriptingJst(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_scripting_jst = value;
    m_Org_apache_sling_scripting_jstIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingScriptingJstIsSet() const
{
    return m_Org_apache_sling_scripting_jstIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_scripting_jst()
{
    m_Org_apache_sling_scripting_jstIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingScriptingSightlyJsProvider() const
{
    return m_Org_apache_sling_scripting_sightly_js_provider;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingScriptingSightlyJsProvider(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_scripting_sightly_js_provider = value;
    m_Org_apache_sling_scripting_sightly_js_providerIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingScriptingSightlyJsProviderIsSet() const
{
    return m_Org_apache_sling_scripting_sightly_js_providerIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_scripting_sightly_js_provider()
{
    m_Org_apache_sling_scripting_sightly_js_providerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingScriptingSightlyModelsProvider() const
{
    return m_Org_apache_sling_scripting_sightly_models_provider;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingScriptingSightlyModelsProvider(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_scripting_sightly_models_provider = value;
    m_Org_apache_sling_scripting_sightly_models_providerIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingScriptingSightlyModelsProviderIsSet() const
{
    return m_Org_apache_sling_scripting_sightly_models_providerIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_scripting_sightly_models_provider()
{
    m_Org_apache_sling_scripting_sightly_models_providerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingSecurity() const
{
    return m_Org_apache_sling_security;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingSecurity(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_security = value;
    m_Org_apache_sling_securityIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingSecurityIsSet() const
{
    return m_Org_apache_sling_securityIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_security()
{
    m_Org_apache_sling_securityIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingServletsCompat() const
{
    return m_Org_apache_sling_servlets_compat;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingServletsCompat(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_servlets_compat = value;
    m_Org_apache_sling_servlets_compatIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingServletsCompatIsSet() const
{
    return m_Org_apache_sling_servlets_compatIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_servlets_compat()
{
    m_Org_apache_sling_servlets_compatIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingServletsGet() const
{
    return m_Org_apache_sling_servlets_get;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingServletsGet(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_servlets_get = value;
    m_Org_apache_sling_servlets_getIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingServletsGetIsSet() const
{
    return m_Org_apache_sling_servlets_getIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_servlets_get()
{
    m_Org_apache_sling_servlets_getIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingStartupfilterDisabler() const
{
    return m_Org_apache_sling_startupfilter_disabler;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingStartupfilterDisabler(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_startupfilter_disabler = value;
    m_Org_apache_sling_startupfilter_disablerIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingStartupfilterDisablerIsSet() const
{
    return m_Org_apache_sling_startupfilter_disablerIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_startupfilter_disabler()
{
    m_Org_apache_sling_startupfilter_disablerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getOrgApacheSlingTracer() const
{
    return m_Org_apache_sling_tracer;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setOrgApacheSlingTracer(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_tracer = value;
    m_Org_apache_sling_tracerIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::orgApacheSlingTracerIsSet() const
{
    return m_Org_apache_sling_tracerIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetOrg_apache_sling_tracer()
{
    m_Org_apache_sling_tracerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::getWeRetailClientAppCore() const
{
    return m_We_retail_client_app_core;
}


void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::setWeRetailClientAppCore(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_We_retail_client_app_core = value;
    m_We_retail_client_app_coreIsSet = true;
}
bool ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::weRetailClientAppCoreIsSet() const
{
    return m_We_retail_client_app_coreIsSet;
}

void ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties::unsetWe_retail_client_app_core()
{
    m_We_retail_client_app_coreIsSet = false;
}

}
}
}
}

