/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamCoreImplMissingMetadataNotificationJobProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::ComDayCqDamCoreImplMissingMetadataNotificationJobProperties()
{
    m_Cq_dam_missingmetadata_notification_scheduler_istimebasedIsSet = false;
    m_Cq_dam_missingmetadata_notification_scheduler_timebased_ruleIsSet = false;
    m_Cq_dam_missingmetadata_notification_scheduler_period_ruleIsSet = false;
    m_Cq_dam_missingmetadata_notification_recipientIsSet = false;
}

ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::~ComDayCqDamCoreImplMissingMetadataNotificationJobProperties()
{
}

void ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_dam_missingmetadata_notification_scheduler_istimebasedIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.istimebased")] = ModelBase::toJson(m_Cq_dam_missingmetadata_notification_scheduler_istimebased);
    }
    if(m_Cq_dam_missingmetadata_notification_scheduler_timebased_ruleIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.timebased.rule")] = ModelBase::toJson(m_Cq_dam_missingmetadata_notification_scheduler_timebased_rule);
    }
    if(m_Cq_dam_missingmetadata_notification_scheduler_period_ruleIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.period.rule")] = ModelBase::toJson(m_Cq_dam_missingmetadata_notification_scheduler_period_rule);
    }
    if(m_Cq_dam_missingmetadata_notification_recipientIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.missingmetadata.notification.recipient")] = ModelBase::toJson(m_Cq_dam_missingmetadata_notification_recipient);
    }

    return val;
}

void ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.istimebased")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.istimebased")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.istimebased")]);
            setCqDamMissingmetadataNotificationSchedulerIstimebased( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.timebased.rule")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.timebased.rule")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.timebased.rule")]);
            setCqDamMissingmetadataNotificationSchedulerTimebasedRule( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.period.rule")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.period.rule")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.period.rule")]);
            setCqDamMissingmetadataNotificationSchedulerPeriodRule( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.missingmetadata.notification.recipient")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.missingmetadata.notification.recipient")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.missingmetadata.notification.recipient")]);
            setCqDamMissingmetadataNotificationRecipient( newItem );
        }
    }
}

void ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_dam_missingmetadata_notification_scheduler_istimebasedIsSet)
    {
        if (m_Cq_dam_missingmetadata_notification_scheduler_istimebased.get())
        {
            m_Cq_dam_missingmetadata_notification_scheduler_istimebased->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.istimebased."));
        }
    }
    if(m_Cq_dam_missingmetadata_notification_scheduler_timebased_ruleIsSet)
    {
        if (m_Cq_dam_missingmetadata_notification_scheduler_timebased_rule.get())
        {
            m_Cq_dam_missingmetadata_notification_scheduler_timebased_rule->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.timebased.rule."));
        }
    }
    if(m_Cq_dam_missingmetadata_notification_scheduler_period_ruleIsSet)
    {
        if (m_Cq_dam_missingmetadata_notification_scheduler_period_rule.get())
        {
            m_Cq_dam_missingmetadata_notification_scheduler_period_rule->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.period.rule."));
        }
    }
    if(m_Cq_dam_missingmetadata_notification_recipientIsSet)
    {
        if (m_Cq_dam_missingmetadata_notification_recipient.get())
        {
            m_Cq_dam_missingmetadata_notification_recipient->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.missingmetadata.notification.recipient."));
        }
    }
}

void ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.istimebased")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.istimebased")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.istimebased."));
            setCqDamMissingmetadataNotificationSchedulerIstimebased( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.timebased.rule")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.timebased.rule")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.timebased.rule."));
            setCqDamMissingmetadataNotificationSchedulerTimebasedRule( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.period.rule")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.period.rule")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.missingmetadata.notification.scheduler.period.rule."));
            setCqDamMissingmetadataNotificationSchedulerPeriodRule( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.missingmetadata.notification.recipient")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.missingmetadata.notification.recipient")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.missingmetadata.notification.recipient."));
            setCqDamMissingmetadataNotificationRecipient( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::getCqDamMissingmetadataNotificationSchedulerIstimebased() const
{
    return m_Cq_dam_missingmetadata_notification_scheduler_istimebased;
}


void ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::setCqDamMissingmetadataNotificationSchedulerIstimebased(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Cq_dam_missingmetadata_notification_scheduler_istimebased = value;
    m_Cq_dam_missingmetadata_notification_scheduler_istimebasedIsSet = true;
}
bool ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::cqDamMissingmetadataNotificationSchedulerIstimebasedIsSet() const
{
    return m_Cq_dam_missingmetadata_notification_scheduler_istimebasedIsSet;
}

void ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::unsetCq_dam_missingmetadata_notification_scheduler_istimebased()
{
    m_Cq_dam_missingmetadata_notification_scheduler_istimebasedIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::getCqDamMissingmetadataNotificationSchedulerTimebasedRule() const
{
    return m_Cq_dam_missingmetadata_notification_scheduler_timebased_rule;
}


void ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::setCqDamMissingmetadataNotificationSchedulerTimebasedRule(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_dam_missingmetadata_notification_scheduler_timebased_rule = value;
    m_Cq_dam_missingmetadata_notification_scheduler_timebased_ruleIsSet = true;
}
bool ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::cqDamMissingmetadataNotificationSchedulerTimebasedRuleIsSet() const
{
    return m_Cq_dam_missingmetadata_notification_scheduler_timebased_ruleIsSet;
}

void ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::unsetCq_dam_missingmetadata_notification_scheduler_timebased_rule()
{
    m_Cq_dam_missingmetadata_notification_scheduler_timebased_ruleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::getCqDamMissingmetadataNotificationSchedulerPeriodRule() const
{
    return m_Cq_dam_missingmetadata_notification_scheduler_period_rule;
}


void ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::setCqDamMissingmetadataNotificationSchedulerPeriodRule(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_missingmetadata_notification_scheduler_period_rule = value;
    m_Cq_dam_missingmetadata_notification_scheduler_period_ruleIsSet = true;
}
bool ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::cqDamMissingmetadataNotificationSchedulerPeriodRuleIsSet() const
{
    return m_Cq_dam_missingmetadata_notification_scheduler_period_ruleIsSet;
}

void ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::unsetCq_dam_missingmetadata_notification_scheduler_period_rule()
{
    m_Cq_dam_missingmetadata_notification_scheduler_period_ruleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::getCqDamMissingmetadataNotificationRecipient() const
{
    return m_Cq_dam_missingmetadata_notification_recipient;
}


void ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::setCqDamMissingmetadataNotificationRecipient(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_dam_missingmetadata_notification_recipient = value;
    m_Cq_dam_missingmetadata_notification_recipientIsSet = true;
}
bool ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::cqDamMissingmetadataNotificationRecipientIsSet() const
{
    return m_Cq_dam_missingmetadata_notification_recipientIsSet;
}

void ComDayCqDamCoreImplMissingMetadataNotificationJobProperties::unsetCq_dam_missingmetadata_notification_recipient()
{
    m_Cq_dam_missingmetadata_notification_recipientIsSet = false;
}

}
}
}
}

