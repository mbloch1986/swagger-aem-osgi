/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqAuditPurgeReplicationProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqAuditPurgeReplicationProperties::OAIComAdobeCqAuditPurgeReplicationProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqAuditPurgeReplicationProperties::OAIComAdobeCqAuditPurgeReplicationProperties() {
    this->init();
}

OAIComAdobeCqAuditPurgeReplicationProperties::~OAIComAdobeCqAuditPurgeReplicationProperties() {
    
}

void
OAIComAdobeCqAuditPurgeReplicationProperties::init() {
    m_auditlog_rule_name_isSet = false;
    m_auditlog_rule_contentpath_isSet = false;
    m_auditlog_rule_minimumage_isSet = false;
    m_auditlog_rule_types_isSet = false;
}

void
OAIComAdobeCqAuditPurgeReplicationProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqAuditPurgeReplicationProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(auditlog_rule_name, json[QString("auditlog.rule.name")]);
    
    ::OpenAPI::fromJsonValue(auditlog_rule_contentpath, json[QString("auditlog.rule.contentpath")]);
    
    ::OpenAPI::fromJsonValue(auditlog_rule_minimumage, json[QString("auditlog.rule.minimumage")]);
    
    ::OpenAPI::fromJsonValue(auditlog_rule_types, json[QString("auditlog.rule.types")]);
    
}

QString
OAIComAdobeCqAuditPurgeReplicationProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqAuditPurgeReplicationProperties::asJsonObject() const {
    QJsonObject obj;
	if(auditlog_rule_name.isSet()){
        obj.insert(QString("auditlog.rule.name"), ::OpenAPI::toJsonValue(auditlog_rule_name));
    }
	if(auditlog_rule_contentpath.isSet()){
        obj.insert(QString("auditlog.rule.contentpath"), ::OpenAPI::toJsonValue(auditlog_rule_contentpath));
    }
	if(auditlog_rule_minimumage.isSet()){
        obj.insert(QString("auditlog.rule.minimumage"), ::OpenAPI::toJsonValue(auditlog_rule_minimumage));
    }
	if(auditlog_rule_types.isSet()){
        obj.insert(QString("auditlog.rule.types"), ::OpenAPI::toJsonValue(auditlog_rule_types));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeCqAuditPurgeReplicationProperties::getAuditlogRuleName() const {
    return auditlog_rule_name;
}
void
OAIComAdobeCqAuditPurgeReplicationProperties::setAuditlogRuleName(const OAIConfigNodePropertyString &auditlog_rule_name) {
    this->auditlog_rule_name = auditlog_rule_name;
    this->m_auditlog_rule_name_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqAuditPurgeReplicationProperties::getAuditlogRuleContentpath() const {
    return auditlog_rule_contentpath;
}
void
OAIComAdobeCqAuditPurgeReplicationProperties::setAuditlogRuleContentpath(const OAIConfigNodePropertyString &auditlog_rule_contentpath) {
    this->auditlog_rule_contentpath = auditlog_rule_contentpath;
    this->m_auditlog_rule_contentpath_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqAuditPurgeReplicationProperties::getAuditlogRuleMinimumage() const {
    return auditlog_rule_minimumage;
}
void
OAIComAdobeCqAuditPurgeReplicationProperties::setAuditlogRuleMinimumage(const OAIConfigNodePropertyInteger &auditlog_rule_minimumage) {
    this->auditlog_rule_minimumage = auditlog_rule_minimumage;
    this->m_auditlog_rule_minimumage_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIComAdobeCqAuditPurgeReplicationProperties::getAuditlogRuleTypes() const {
    return auditlog_rule_types;
}
void
OAIComAdobeCqAuditPurgeReplicationProperties::setAuditlogRuleTypes(const OAIConfigNodePropertyDropDown &auditlog_rule_types) {
    this->auditlog_rule_types = auditlog_rule_types;
    this->m_auditlog_rule_types_isSet = true;
}


bool
OAIComAdobeCqAuditPurgeReplicationProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(auditlog_rule_name.isSet()){ isObjectUpdated = true; break;}
    
        if(auditlog_rule_contentpath.isSet()){ isObjectUpdated = true; break;}
    
        if(auditlog_rule_minimumage.isSet()){ isObjectUpdated = true; break;}
    
        if(auditlog_rule_types.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

