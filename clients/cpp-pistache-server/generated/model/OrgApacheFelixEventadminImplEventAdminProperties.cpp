/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheFelixEventadminImplEventAdminProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheFelixEventadminImplEventAdminProperties::OrgApacheFelixEventadminImplEventAdminProperties()
{
    m_Org_apache_felix_eventadmin_ThreadPoolSizeIsSet = false;
    m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatioIsSet = false;
    m_Org_apache_felix_eventadmin_TimeoutIsSet = false;
    m_Org_apache_felix_eventadmin_RequireTopicIsSet = false;
    m_Org_apache_felix_eventadmin_IgnoreTimeoutIsSet = false;
    m_Org_apache_felix_eventadmin_IgnoreTopicIsSet = false;
    
}

OrgApacheFelixEventadminImplEventAdminProperties::~OrgApacheFelixEventadminImplEventAdminProperties()
{
}

void OrgApacheFelixEventadminImplEventAdminProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheFelixEventadminImplEventAdminProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Org_apache_felix_eventadmin_ThreadPoolSizeIsSet)
    {
        val["org.apache.felix.eventadmin.ThreadPoolSize"] = ModelBase::toJson(m_Org_apache_felix_eventadmin_ThreadPoolSize);
    }
    if(m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatioIsSet)
    {
        val["org.apache.felix.eventadmin.AsyncToSyncThreadRatio"] = ModelBase::toJson(m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatio);
    }
    if(m_Org_apache_felix_eventadmin_TimeoutIsSet)
    {
        val["org.apache.felix.eventadmin.Timeout"] = ModelBase::toJson(m_Org_apache_felix_eventadmin_Timeout);
    }
    if(m_Org_apache_felix_eventadmin_RequireTopicIsSet)
    {
        val["org.apache.felix.eventadmin.RequireTopic"] = ModelBase::toJson(m_Org_apache_felix_eventadmin_RequireTopic);
    }
    if(m_Org_apache_felix_eventadmin_IgnoreTimeoutIsSet)
    {
        val["org.apache.felix.eventadmin.IgnoreTimeout"] = ModelBase::toJson(m_Org_apache_felix_eventadmin_IgnoreTimeout);
    }
    if(m_Org_apache_felix_eventadmin_IgnoreTopicIsSet)
    {
        val["org.apache.felix.eventadmin.IgnoreTopic"] = ModelBase::toJson(m_Org_apache_felix_eventadmin_IgnoreTopic);
    }
    

    return val;
}

void OrgApacheFelixEventadminImplEventAdminProperties::fromJson(nlohmann::json& val)
{
    if(val.find("org.apache.felix.eventadmin.ThreadPoolSize") != val.end())
    {
        if(!val["org.apache.felix.eventadmin.ThreadPoolSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["org.apache.felix.eventadmin.ThreadPoolSize"]);
            setOrgApacheFelixEventadminThreadPoolSize( newItem );
        }
        
    }
    if(val.find("org.apache.felix.eventadmin.AsyncToSyncThreadRatio") != val.end())
    {
        if(!val["org.apache.felix.eventadmin.AsyncToSyncThreadRatio"].is_null())
        {
            ConfigNodePropertyFloat newItem;
            newItem.fromJson(val["org.apache.felix.eventadmin.AsyncToSyncThreadRatio"]);
            setOrgApacheFelixEventadminAsyncToSyncThreadRatio( newItem );
        }
        
    }
    if(val.find("org.apache.felix.eventadmin.Timeout") != val.end())
    {
        if(!val["org.apache.felix.eventadmin.Timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["org.apache.felix.eventadmin.Timeout"]);
            setOrgApacheFelixEventadminTimeout( newItem );
        }
        
    }
    if(val.find("org.apache.felix.eventadmin.RequireTopic") != val.end())
    {
        if(!val["org.apache.felix.eventadmin.RequireTopic"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["org.apache.felix.eventadmin.RequireTopic"]);
            setOrgApacheFelixEventadminRequireTopic( newItem );
        }
        
    }
    if(val.find("org.apache.felix.eventadmin.IgnoreTimeout") != val.end())
    {
        if(!val["org.apache.felix.eventadmin.IgnoreTimeout"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["org.apache.felix.eventadmin.IgnoreTimeout"]);
            setOrgApacheFelixEventadminIgnoreTimeout( newItem );
        }
        
    }
    if(val.find("org.apache.felix.eventadmin.IgnoreTopic") != val.end())
    {
        if(!val["org.apache.felix.eventadmin.IgnoreTopic"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["org.apache.felix.eventadmin.IgnoreTopic"]);
            setOrgApacheFelixEventadminIgnoreTopic( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger OrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminThreadPoolSize() const
{
    return m_Org_apache_felix_eventadmin_ThreadPoolSize;
}
void OrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminThreadPoolSize(ConfigNodePropertyInteger const& value)
{
    m_Org_apache_felix_eventadmin_ThreadPoolSize = value;
    m_Org_apache_felix_eventadmin_ThreadPoolSizeIsSet = true;
}
bool OrgApacheFelixEventadminImplEventAdminProperties::orgApacheFelixEventadminThreadPoolSizeIsSet() const
{
    return m_Org_apache_felix_eventadmin_ThreadPoolSizeIsSet;
}
void OrgApacheFelixEventadminImplEventAdminProperties::unsetOrg_apache_felix_eventadmin_ThreadPoolSize()
{
    m_Org_apache_felix_eventadmin_ThreadPoolSizeIsSet = false;
}
ConfigNodePropertyFloat OrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminAsyncToSyncThreadRatio() const
{
    return m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatio;
}
void OrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminAsyncToSyncThreadRatio(ConfigNodePropertyFloat const& value)
{
    m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatio = value;
    m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatioIsSet = true;
}
bool OrgApacheFelixEventadminImplEventAdminProperties::orgApacheFelixEventadminAsyncToSyncThreadRatioIsSet() const
{
    return m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatioIsSet;
}
void OrgApacheFelixEventadminImplEventAdminProperties::unsetOrg_apache_felix_eventadmin_AsyncToSyncThreadRatio()
{
    m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatioIsSet = false;
}
ConfigNodePropertyInteger OrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminTimeout() const
{
    return m_Org_apache_felix_eventadmin_Timeout;
}
void OrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminTimeout(ConfigNodePropertyInteger const& value)
{
    m_Org_apache_felix_eventadmin_Timeout = value;
    m_Org_apache_felix_eventadmin_TimeoutIsSet = true;
}
bool OrgApacheFelixEventadminImplEventAdminProperties::orgApacheFelixEventadminTimeoutIsSet() const
{
    return m_Org_apache_felix_eventadmin_TimeoutIsSet;
}
void OrgApacheFelixEventadminImplEventAdminProperties::unsetOrg_apache_felix_eventadmin_Timeout()
{
    m_Org_apache_felix_eventadmin_TimeoutIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminRequireTopic() const
{
    return m_Org_apache_felix_eventadmin_RequireTopic;
}
void OrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminRequireTopic(ConfigNodePropertyBoolean const& value)
{
    m_Org_apache_felix_eventadmin_RequireTopic = value;
    m_Org_apache_felix_eventadmin_RequireTopicIsSet = true;
}
bool OrgApacheFelixEventadminImplEventAdminProperties::orgApacheFelixEventadminRequireTopicIsSet() const
{
    return m_Org_apache_felix_eventadmin_RequireTopicIsSet;
}
void OrgApacheFelixEventadminImplEventAdminProperties::unsetOrg_apache_felix_eventadmin_RequireTopic()
{
    m_Org_apache_felix_eventadmin_RequireTopicIsSet = false;
}
ConfigNodePropertyArray OrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminIgnoreTimeout() const
{
    return m_Org_apache_felix_eventadmin_IgnoreTimeout;
}
void OrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminIgnoreTimeout(ConfigNodePropertyArray const& value)
{
    m_Org_apache_felix_eventadmin_IgnoreTimeout = value;
    m_Org_apache_felix_eventadmin_IgnoreTimeoutIsSet = true;
}
bool OrgApacheFelixEventadminImplEventAdminProperties::orgApacheFelixEventadminIgnoreTimeoutIsSet() const
{
    return m_Org_apache_felix_eventadmin_IgnoreTimeoutIsSet;
}
void OrgApacheFelixEventadminImplEventAdminProperties::unsetOrg_apache_felix_eventadmin_IgnoreTimeout()
{
    m_Org_apache_felix_eventadmin_IgnoreTimeoutIsSet = false;
}
ConfigNodePropertyArray OrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminIgnoreTopic() const
{
    return m_Org_apache_felix_eventadmin_IgnoreTopic;
}
void OrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminIgnoreTopic(ConfigNodePropertyArray const& value)
{
    m_Org_apache_felix_eventadmin_IgnoreTopic = value;
    m_Org_apache_felix_eventadmin_IgnoreTopicIsSet = true;
}
bool OrgApacheFelixEventadminImplEventAdminProperties::orgApacheFelixEventadminIgnoreTopicIsSet() const
{
    return m_Org_apache_felix_eventadmin_IgnoreTopicIsSet;
}
void OrgApacheFelixEventadminImplEventAdminProperties::unsetOrg_apache_felix_eventadmin_IgnoreTopic()
{
    m_Org_apache_felix_eventadmin_IgnoreTopicIsSet = false;
}

}
}
}
}

