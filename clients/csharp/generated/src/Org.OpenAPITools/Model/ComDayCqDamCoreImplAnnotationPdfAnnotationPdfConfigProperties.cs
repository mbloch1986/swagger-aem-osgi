/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties :  IEquatable<ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties" /> class.
        /// </summary>
        /// <param name="cqDamConfigAnnotationPdfDocumentWidth">cqDamConfigAnnotationPdfDocumentWidth.</param>
        /// <param name="cqDamConfigAnnotationPdfDocumentHeight">cqDamConfigAnnotationPdfDocumentHeight.</param>
        /// <param name="cqDamConfigAnnotationPdfDocumentPaddingHorizontal">cqDamConfigAnnotationPdfDocumentPaddingHorizontal.</param>
        /// <param name="cqDamConfigAnnotationPdfDocumentPaddingVertical">cqDamConfigAnnotationPdfDocumentPaddingVertical.</param>
        /// <param name="cqDamConfigAnnotationPdfFontSize">cqDamConfigAnnotationPdfFontSize.</param>
        /// <param name="cqDamConfigAnnotationPdfFontColor">cqDamConfigAnnotationPdfFontColor.</param>
        /// <param name="cqDamConfigAnnotationPdfFontFamily">cqDamConfigAnnotationPdfFontFamily.</param>
        /// <param name="cqDamConfigAnnotationPdfFontLight">cqDamConfigAnnotationPdfFontLight.</param>
        /// <param name="cqDamConfigAnnotationPdfMarginTextImage">cqDamConfigAnnotationPdfMarginTextImage.</param>
        /// <param name="cqDamConfigAnnotationPdfMinImageHeight">cqDamConfigAnnotationPdfMinImageHeight.</param>
        /// <param name="cqDamConfigAnnotationPdfReviewStatusWidth">cqDamConfigAnnotationPdfReviewStatusWidth.</param>
        /// <param name="cqDamConfigAnnotationPdfReviewStatusColorApproved">cqDamConfigAnnotationPdfReviewStatusColorApproved.</param>
        /// <param name="cqDamConfigAnnotationPdfReviewStatusColorRejected">cqDamConfigAnnotationPdfReviewStatusColorRejected.</param>
        /// <param name="cqDamConfigAnnotationPdfReviewStatusColorChangesRequested">cqDamConfigAnnotationPdfReviewStatusColorChangesRequested.</param>
        /// <param name="cqDamConfigAnnotationPdfAnnotationMarkerWidth">cqDamConfigAnnotationPdfAnnotationMarkerWidth.</param>
        /// <param name="cqDamConfigAnnotationPdfAssetMinheight">cqDamConfigAnnotationPdfAssetMinheight.</param>
        public ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties(ConfigNodePropertyInteger cqDamConfigAnnotationPdfDocumentWidth = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger cqDamConfigAnnotationPdfDocumentHeight = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger cqDamConfigAnnotationPdfDocumentPaddingHorizontal = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger cqDamConfigAnnotationPdfDocumentPaddingVertical = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger cqDamConfigAnnotationPdfFontSize = default(ConfigNodePropertyInteger), ConfigNodePropertyString cqDamConfigAnnotationPdfFontColor = default(ConfigNodePropertyString), ConfigNodePropertyString cqDamConfigAnnotationPdfFontFamily = default(ConfigNodePropertyString), ConfigNodePropertyString cqDamConfigAnnotationPdfFontLight = default(ConfigNodePropertyString), ConfigNodePropertyInteger cqDamConfigAnnotationPdfMarginTextImage = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger cqDamConfigAnnotationPdfMinImageHeight = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger cqDamConfigAnnotationPdfReviewStatusWidth = default(ConfigNodePropertyInteger), ConfigNodePropertyString cqDamConfigAnnotationPdfReviewStatusColorApproved = default(ConfigNodePropertyString), ConfigNodePropertyString cqDamConfigAnnotationPdfReviewStatusColorRejected = default(ConfigNodePropertyString), ConfigNodePropertyString cqDamConfigAnnotationPdfReviewStatusColorChangesRequested = default(ConfigNodePropertyString), ConfigNodePropertyInteger cqDamConfigAnnotationPdfAnnotationMarkerWidth = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger cqDamConfigAnnotationPdfAssetMinheight = default(ConfigNodePropertyInteger))
        {
            this.CqDamConfigAnnotationPdfDocumentWidth = cqDamConfigAnnotationPdfDocumentWidth;
            this.CqDamConfigAnnotationPdfDocumentHeight = cqDamConfigAnnotationPdfDocumentHeight;
            this.CqDamConfigAnnotationPdfDocumentPaddingHorizontal = cqDamConfigAnnotationPdfDocumentPaddingHorizontal;
            this.CqDamConfigAnnotationPdfDocumentPaddingVertical = cqDamConfigAnnotationPdfDocumentPaddingVertical;
            this.CqDamConfigAnnotationPdfFontSize = cqDamConfigAnnotationPdfFontSize;
            this.CqDamConfigAnnotationPdfFontColor = cqDamConfigAnnotationPdfFontColor;
            this.CqDamConfigAnnotationPdfFontFamily = cqDamConfigAnnotationPdfFontFamily;
            this.CqDamConfigAnnotationPdfFontLight = cqDamConfigAnnotationPdfFontLight;
            this.CqDamConfigAnnotationPdfMarginTextImage = cqDamConfigAnnotationPdfMarginTextImage;
            this.CqDamConfigAnnotationPdfMinImageHeight = cqDamConfigAnnotationPdfMinImageHeight;
            this.CqDamConfigAnnotationPdfReviewStatusWidth = cqDamConfigAnnotationPdfReviewStatusWidth;
            this.CqDamConfigAnnotationPdfReviewStatusColorApproved = cqDamConfigAnnotationPdfReviewStatusColorApproved;
            this.CqDamConfigAnnotationPdfReviewStatusColorRejected = cqDamConfigAnnotationPdfReviewStatusColorRejected;
            this.CqDamConfigAnnotationPdfReviewStatusColorChangesRequested = cqDamConfigAnnotationPdfReviewStatusColorChangesRequested;
            this.CqDamConfigAnnotationPdfAnnotationMarkerWidth = cqDamConfigAnnotationPdfAnnotationMarkerWidth;
            this.CqDamConfigAnnotationPdfAssetMinheight = cqDamConfigAnnotationPdfAssetMinheight;
        }
        
        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfDocumentWidth
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.document.width", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfDocumentWidth { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfDocumentHeight
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.document.height", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfDocumentHeight { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfDocumentPaddingHorizontal
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.document.padding.horizontal", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfDocumentPaddingHorizontal { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfDocumentPaddingVertical
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.document.padding.vertical", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfDocumentPaddingVertical { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfFontSize
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.font.size", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfFontSize { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfFontColor
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.font.color", EmitDefaultValue=false)]
        public ConfigNodePropertyString CqDamConfigAnnotationPdfFontColor { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfFontFamily
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.font.family", EmitDefaultValue=false)]
        public ConfigNodePropertyString CqDamConfigAnnotationPdfFontFamily { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfFontLight
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.font.light", EmitDefaultValue=false)]
        public ConfigNodePropertyString CqDamConfigAnnotationPdfFontLight { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfMarginTextImage
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.marginTextImage", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfMarginTextImage { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfMinImageHeight
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.minImageHeight", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfMinImageHeight { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfReviewStatusWidth
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.reviewStatus.width", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfReviewStatusWidth { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfReviewStatusColorApproved
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.reviewStatus.color.approved", EmitDefaultValue=false)]
        public ConfigNodePropertyString CqDamConfigAnnotationPdfReviewStatusColorApproved { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfReviewStatusColorRejected
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.reviewStatus.color.rejected", EmitDefaultValue=false)]
        public ConfigNodePropertyString CqDamConfigAnnotationPdfReviewStatusColorRejected { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfReviewStatusColorChangesRequested
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested", EmitDefaultValue=false)]
        public ConfigNodePropertyString CqDamConfigAnnotationPdfReviewStatusColorChangesRequested { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfAnnotationMarkerWidth
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.annotationMarker.width", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfAnnotationMarkerWidth { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfAssetMinheight
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.asset.minheight", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfAssetMinheight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties {\n");
            sb.Append("  CqDamConfigAnnotationPdfDocumentWidth: ").Append(CqDamConfigAnnotationPdfDocumentWidth).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfDocumentHeight: ").Append(CqDamConfigAnnotationPdfDocumentHeight).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfDocumentPaddingHorizontal: ").Append(CqDamConfigAnnotationPdfDocumentPaddingHorizontal).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfDocumentPaddingVertical: ").Append(CqDamConfigAnnotationPdfDocumentPaddingVertical).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfFontSize: ").Append(CqDamConfigAnnotationPdfFontSize).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfFontColor: ").Append(CqDamConfigAnnotationPdfFontColor).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfFontFamily: ").Append(CqDamConfigAnnotationPdfFontFamily).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfFontLight: ").Append(CqDamConfigAnnotationPdfFontLight).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfMarginTextImage: ").Append(CqDamConfigAnnotationPdfMarginTextImage).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfMinImageHeight: ").Append(CqDamConfigAnnotationPdfMinImageHeight).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfReviewStatusWidth: ").Append(CqDamConfigAnnotationPdfReviewStatusWidth).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfReviewStatusColorApproved: ").Append(CqDamConfigAnnotationPdfReviewStatusColorApproved).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfReviewStatusColorRejected: ").Append(CqDamConfigAnnotationPdfReviewStatusColorRejected).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfReviewStatusColorChangesRequested: ").Append(CqDamConfigAnnotationPdfReviewStatusColorChangesRequested).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfAnnotationMarkerWidth: ").Append(CqDamConfigAnnotationPdfAnnotationMarkerWidth).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfAssetMinheight: ").Append(CqDamConfigAnnotationPdfAssetMinheight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CqDamConfigAnnotationPdfDocumentWidth == input.CqDamConfigAnnotationPdfDocumentWidth ||
                    (this.CqDamConfigAnnotationPdfDocumentWidth != null &&
                    this.CqDamConfigAnnotationPdfDocumentWidth.Equals(input.CqDamConfigAnnotationPdfDocumentWidth))
                ) && 
                (
                    this.CqDamConfigAnnotationPdfDocumentHeight == input.CqDamConfigAnnotationPdfDocumentHeight ||
                    (this.CqDamConfigAnnotationPdfDocumentHeight != null &&
                    this.CqDamConfigAnnotationPdfDocumentHeight.Equals(input.CqDamConfigAnnotationPdfDocumentHeight))
                ) && 
                (
                    this.CqDamConfigAnnotationPdfDocumentPaddingHorizontal == input.CqDamConfigAnnotationPdfDocumentPaddingHorizontal ||
                    (this.CqDamConfigAnnotationPdfDocumentPaddingHorizontal != null &&
                    this.CqDamConfigAnnotationPdfDocumentPaddingHorizontal.Equals(input.CqDamConfigAnnotationPdfDocumentPaddingHorizontal))
                ) && 
                (
                    this.CqDamConfigAnnotationPdfDocumentPaddingVertical == input.CqDamConfigAnnotationPdfDocumentPaddingVertical ||
                    (this.CqDamConfigAnnotationPdfDocumentPaddingVertical != null &&
                    this.CqDamConfigAnnotationPdfDocumentPaddingVertical.Equals(input.CqDamConfigAnnotationPdfDocumentPaddingVertical))
                ) && 
                (
                    this.CqDamConfigAnnotationPdfFontSize == input.CqDamConfigAnnotationPdfFontSize ||
                    (this.CqDamConfigAnnotationPdfFontSize != null &&
                    this.CqDamConfigAnnotationPdfFontSize.Equals(input.CqDamConfigAnnotationPdfFontSize))
                ) && 
                (
                    this.CqDamConfigAnnotationPdfFontColor == input.CqDamConfigAnnotationPdfFontColor ||
                    (this.CqDamConfigAnnotationPdfFontColor != null &&
                    this.CqDamConfigAnnotationPdfFontColor.Equals(input.CqDamConfigAnnotationPdfFontColor))
                ) && 
                (
                    this.CqDamConfigAnnotationPdfFontFamily == input.CqDamConfigAnnotationPdfFontFamily ||
                    (this.CqDamConfigAnnotationPdfFontFamily != null &&
                    this.CqDamConfigAnnotationPdfFontFamily.Equals(input.CqDamConfigAnnotationPdfFontFamily))
                ) && 
                (
                    this.CqDamConfigAnnotationPdfFontLight == input.CqDamConfigAnnotationPdfFontLight ||
                    (this.CqDamConfigAnnotationPdfFontLight != null &&
                    this.CqDamConfigAnnotationPdfFontLight.Equals(input.CqDamConfigAnnotationPdfFontLight))
                ) && 
                (
                    this.CqDamConfigAnnotationPdfMarginTextImage == input.CqDamConfigAnnotationPdfMarginTextImage ||
                    (this.CqDamConfigAnnotationPdfMarginTextImage != null &&
                    this.CqDamConfigAnnotationPdfMarginTextImage.Equals(input.CqDamConfigAnnotationPdfMarginTextImage))
                ) && 
                (
                    this.CqDamConfigAnnotationPdfMinImageHeight == input.CqDamConfigAnnotationPdfMinImageHeight ||
                    (this.CqDamConfigAnnotationPdfMinImageHeight != null &&
                    this.CqDamConfigAnnotationPdfMinImageHeight.Equals(input.CqDamConfigAnnotationPdfMinImageHeight))
                ) && 
                (
                    this.CqDamConfigAnnotationPdfReviewStatusWidth == input.CqDamConfigAnnotationPdfReviewStatusWidth ||
                    (this.CqDamConfigAnnotationPdfReviewStatusWidth != null &&
                    this.CqDamConfigAnnotationPdfReviewStatusWidth.Equals(input.CqDamConfigAnnotationPdfReviewStatusWidth))
                ) && 
                (
                    this.CqDamConfigAnnotationPdfReviewStatusColorApproved == input.CqDamConfigAnnotationPdfReviewStatusColorApproved ||
                    (this.CqDamConfigAnnotationPdfReviewStatusColorApproved != null &&
                    this.CqDamConfigAnnotationPdfReviewStatusColorApproved.Equals(input.CqDamConfigAnnotationPdfReviewStatusColorApproved))
                ) && 
                (
                    this.CqDamConfigAnnotationPdfReviewStatusColorRejected == input.CqDamConfigAnnotationPdfReviewStatusColorRejected ||
                    (this.CqDamConfigAnnotationPdfReviewStatusColorRejected != null &&
                    this.CqDamConfigAnnotationPdfReviewStatusColorRejected.Equals(input.CqDamConfigAnnotationPdfReviewStatusColorRejected))
                ) && 
                (
                    this.CqDamConfigAnnotationPdfReviewStatusColorChangesRequested == input.CqDamConfigAnnotationPdfReviewStatusColorChangesRequested ||
                    (this.CqDamConfigAnnotationPdfReviewStatusColorChangesRequested != null &&
                    this.CqDamConfigAnnotationPdfReviewStatusColorChangesRequested.Equals(input.CqDamConfigAnnotationPdfReviewStatusColorChangesRequested))
                ) && 
                (
                    this.CqDamConfigAnnotationPdfAnnotationMarkerWidth == input.CqDamConfigAnnotationPdfAnnotationMarkerWidth ||
                    (this.CqDamConfigAnnotationPdfAnnotationMarkerWidth != null &&
                    this.CqDamConfigAnnotationPdfAnnotationMarkerWidth.Equals(input.CqDamConfigAnnotationPdfAnnotationMarkerWidth))
                ) && 
                (
                    this.CqDamConfigAnnotationPdfAssetMinheight == input.CqDamConfigAnnotationPdfAssetMinheight ||
                    (this.CqDamConfigAnnotationPdfAssetMinheight != null &&
                    this.CqDamConfigAnnotationPdfAssetMinheight.Equals(input.CqDamConfigAnnotationPdfAssetMinheight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CqDamConfigAnnotationPdfDocumentWidth != null)
                    hashCode = hashCode * 59 + this.CqDamConfigAnnotationPdfDocumentWidth.GetHashCode();
                if (this.CqDamConfigAnnotationPdfDocumentHeight != null)
                    hashCode = hashCode * 59 + this.CqDamConfigAnnotationPdfDocumentHeight.GetHashCode();
                if (this.CqDamConfigAnnotationPdfDocumentPaddingHorizontal != null)
                    hashCode = hashCode * 59 + this.CqDamConfigAnnotationPdfDocumentPaddingHorizontal.GetHashCode();
                if (this.CqDamConfigAnnotationPdfDocumentPaddingVertical != null)
                    hashCode = hashCode * 59 + this.CqDamConfigAnnotationPdfDocumentPaddingVertical.GetHashCode();
                if (this.CqDamConfigAnnotationPdfFontSize != null)
                    hashCode = hashCode * 59 + this.CqDamConfigAnnotationPdfFontSize.GetHashCode();
                if (this.CqDamConfigAnnotationPdfFontColor != null)
                    hashCode = hashCode * 59 + this.CqDamConfigAnnotationPdfFontColor.GetHashCode();
                if (this.CqDamConfigAnnotationPdfFontFamily != null)
                    hashCode = hashCode * 59 + this.CqDamConfigAnnotationPdfFontFamily.GetHashCode();
                if (this.CqDamConfigAnnotationPdfFontLight != null)
                    hashCode = hashCode * 59 + this.CqDamConfigAnnotationPdfFontLight.GetHashCode();
                if (this.CqDamConfigAnnotationPdfMarginTextImage != null)
                    hashCode = hashCode * 59 + this.CqDamConfigAnnotationPdfMarginTextImage.GetHashCode();
                if (this.CqDamConfigAnnotationPdfMinImageHeight != null)
                    hashCode = hashCode * 59 + this.CqDamConfigAnnotationPdfMinImageHeight.GetHashCode();
                if (this.CqDamConfigAnnotationPdfReviewStatusWidth != null)
                    hashCode = hashCode * 59 + this.CqDamConfigAnnotationPdfReviewStatusWidth.GetHashCode();
                if (this.CqDamConfigAnnotationPdfReviewStatusColorApproved != null)
                    hashCode = hashCode * 59 + this.CqDamConfigAnnotationPdfReviewStatusColorApproved.GetHashCode();
                if (this.CqDamConfigAnnotationPdfReviewStatusColorRejected != null)
                    hashCode = hashCode * 59 + this.CqDamConfigAnnotationPdfReviewStatusColorRejected.GetHashCode();
                if (this.CqDamConfigAnnotationPdfReviewStatusColorChangesRequested != null)
                    hashCode = hashCode * 59 + this.CqDamConfigAnnotationPdfReviewStatusColorChangesRequested.GetHashCode();
                if (this.CqDamConfigAnnotationPdfAnnotationMarkerWidth != null)
                    hashCode = hashCode * 59 + this.CqDamConfigAnnotationPdfAnnotationMarkerWidth.GetHashCode();
                if (this.CqDamConfigAnnotationPdfAssetMinheight != null)
                    hashCode = hashCode * 59 + this.CqDamConfigAnnotationPdfAssetMinheight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
