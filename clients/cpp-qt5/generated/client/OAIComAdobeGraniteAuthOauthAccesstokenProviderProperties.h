/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties.h
 *
 * 
 */

#ifndef OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties_H_
#define OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyArray.h"
#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyInteger.h"
#include "OAIOAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties: public OAIObject {
public:
    OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties();
    OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties(QString json);
    ~OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyString* getName();
    void setName(OAIConfigNodePropertyString* name);

    OAIConfigNodePropertyString* getAuthTokenProviderTitle();
    void setAuthTokenProviderTitle(OAIConfigNodePropertyString* auth_token_provider_title);

    OAIConfigNodePropertyArray* getAuthTokenProviderDefaultClaims();
    void setAuthTokenProviderDefaultClaims(OAIConfigNodePropertyArray* auth_token_provider_default_claims);

    OAIConfigNodePropertyString* getAuthTokenProviderEndpoint();
    void setAuthTokenProviderEndpoint(OAIConfigNodePropertyString* auth_token_provider_endpoint);

    OAIConfigNodePropertyString* getAuthAccessTokenRequest();
    void setAuthAccessTokenRequest(OAIConfigNodePropertyString* auth_access_token_request);

    OAIConfigNodePropertyString* getAuthTokenProviderKeypairAlias();
    void setAuthTokenProviderKeypairAlias(OAIConfigNodePropertyString* auth_token_provider_keypair_alias);

    OAIConfigNodePropertyInteger* getAuthTokenProviderConnTimeout();
    void setAuthTokenProviderConnTimeout(OAIConfigNodePropertyInteger* auth_token_provider_conn_timeout);

    OAIConfigNodePropertyInteger* getAuthTokenProviderSoTimeout();
    void setAuthTokenProviderSoTimeout(OAIConfigNodePropertyInteger* auth_token_provider_so_timeout);

    OAIConfigNodePropertyString* getAuthTokenProviderClientId();
    void setAuthTokenProviderClientId(OAIConfigNodePropertyString* auth_token_provider_client_id);

    OAIConfigNodePropertyString* getAuthTokenProviderScope();
    void setAuthTokenProviderScope(OAIConfigNodePropertyString* auth_token_provider_scope);

    OAIConfigNodePropertyBoolean* getAuthTokenProviderReuseAccessToken();
    void setAuthTokenProviderReuseAccessToken(OAIConfigNodePropertyBoolean* auth_token_provider_reuse_access_token);

    OAIConfigNodePropertyBoolean* getAuthTokenProviderRelaxedSsl();
    void setAuthTokenProviderRelaxedSsl(OAIConfigNodePropertyBoolean* auth_token_provider_relaxed_ssl);

    OAIConfigNodePropertyString* getTokenRequestCustomizerType();
    void setTokenRequestCustomizerType(OAIConfigNodePropertyString* token_request_customizer_type);

    OAIConfigNodePropertyString* getAuthTokenValidatorType();
    void setAuthTokenValidatorType(OAIConfigNodePropertyString* auth_token_validator_type);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyString* name;
    bool m_name_isSet;

    OAIConfigNodePropertyString* auth_token_provider_title;
    bool m_auth_token_provider_title_isSet;

    OAIConfigNodePropertyArray* auth_token_provider_default_claims;
    bool m_auth_token_provider_default_claims_isSet;

    OAIConfigNodePropertyString* auth_token_provider_endpoint;
    bool m_auth_token_provider_endpoint_isSet;

    OAIConfigNodePropertyString* auth_access_token_request;
    bool m_auth_access_token_request_isSet;

    OAIConfigNodePropertyString* auth_token_provider_keypair_alias;
    bool m_auth_token_provider_keypair_alias_isSet;

    OAIConfigNodePropertyInteger* auth_token_provider_conn_timeout;
    bool m_auth_token_provider_conn_timeout_isSet;

    OAIConfigNodePropertyInteger* auth_token_provider_so_timeout;
    bool m_auth_token_provider_so_timeout_isSet;

    OAIConfigNodePropertyString* auth_token_provider_client_id;
    bool m_auth_token_provider_client_id_isSet;

    OAIConfigNodePropertyString* auth_token_provider_scope;
    bool m_auth_token_provider_scope_isSet;

    OAIConfigNodePropertyBoolean* auth_token_provider_reuse_access_token;
    bool m_auth_token_provider_reuse_access_token_isSet;

    OAIConfigNodePropertyBoolean* auth_token_provider_relaxed_ssl;
    bool m_auth_token_provider_relaxed_ssl_isSet;

    OAIConfigNodePropertyString* token_request_customizer_type;
    bool m_token_request_customizer_type_isSet;

    OAIConfigNodePropertyString* auth_token_validator_type;
    bool m_auth_token_validator_type_isSet;

};

}

#endif /* OAIComAdobeGraniteAuthOauthAccesstokenProviderProperties_H_ */
