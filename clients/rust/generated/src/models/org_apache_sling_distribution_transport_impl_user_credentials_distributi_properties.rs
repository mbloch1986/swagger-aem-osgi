/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties {
  #[serde(rename = "name")]
  name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "username")]
  username: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "password")]
  password: Option<::models::ConfigNodePropertyString>
}

impl OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties {
  pub fn new() -> OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties {
    OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties {
      name: None,
      username: None,
      password: None
    }
  }

  pub fn set_name(&mut self, name: ::models::ConfigNodePropertyString) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_username(&mut self, username: ::models::ConfigNodePropertyString) {
    self.username = Some(username);
  }

  pub fn with_username(mut self, username: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties {
    self.username = Some(username);
    self
  }

  pub fn username(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.username.as_ref()
  }

  pub fn reset_username(&mut self) {
    self.username = None;
  }

  pub fn set_password(&mut self, password: ::models::ConfigNodePropertyString) {
    self.password = Some(password);
  }

  pub fn with_password(mut self, password: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties {
    self.password = Some(password);
    self
  }

  pub fn password(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.password.as_ref()
  }

  pub fn reset_password(&mut self) {
    self.password = None;
  }

}



