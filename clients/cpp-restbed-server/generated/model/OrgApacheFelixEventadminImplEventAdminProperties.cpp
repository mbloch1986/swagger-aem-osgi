/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheFelixEventadminImplEventAdminProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheFelixEventadminImplEventAdminProperties::OrgApacheFelixEventadminImplEventAdminProperties()
{
    
}

OrgApacheFelixEventadminImplEventAdminProperties::~OrgApacheFelixEventadminImplEventAdminProperties()
{
}

std::string OrgApacheFelixEventadminImplEventAdminProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void OrgApacheFelixEventadminImplEventAdminProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminThreadPoolSize() const
{
    return m_Org_apache_felix_eventadmin_ThreadPoolSize;
}
void OrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminThreadPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_felix_eventadmin_ThreadPoolSize = value;
}
std::shared_ptr<ConfigNodePropertyFloat> OrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminAsyncToSyncThreadRatio() const
{
    return m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatio;
}
void OrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminAsyncToSyncThreadRatio(std::shared_ptr<ConfigNodePropertyFloat> value)
{
    m_Org_apache_felix_eventadmin_AsyncToSyncThreadRatio = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminTimeout() const
{
    return m_Org_apache_felix_eventadmin_Timeout;
}
void OrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_felix_eventadmin_Timeout = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminRequireTopic() const
{
    return m_Org_apache_felix_eventadmin_RequireTopic;
}
void OrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminRequireTopic(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_felix_eventadmin_RequireTopic = value;
}
std::shared_ptr<ConfigNodePropertyArray> OrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminIgnoreTimeout() const
{
    return m_Org_apache_felix_eventadmin_IgnoreTimeout;
}
void OrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminIgnoreTimeout(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Org_apache_felix_eventadmin_IgnoreTimeout = value;
}
std::shared_ptr<ConfigNodePropertyArray> OrgApacheFelixEventadminImplEventAdminProperties::getOrgApacheFelixEventadminIgnoreTopic() const
{
    return m_Org_apache_felix_eventadmin_IgnoreTopic;
}
void OrgApacheFelixEventadminImplEventAdminProperties::setOrgApacheFelixEventadminIgnoreTopic(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Org_apache_felix_eventadmin_IgnoreTopic = value;
}

}
}
}
}

