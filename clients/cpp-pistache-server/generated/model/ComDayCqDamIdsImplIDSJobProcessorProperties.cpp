/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqDamIdsImplIDSJobProcessorProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqDamIdsImplIDSJobProcessorProperties::ComDayCqDamIdsImplIDSJobProcessorProperties()
{
    m_Enable_multisessionIsSet = false;
    m_Ids_cc_enableIsSet = false;
    m_Enable_retryIsSet = false;
    m_Enable_retry_scripterrorIsSet = false;
    m_Externalizer_domain_cqhostIsSet = false;
    m_Externalizer_domain_httpIsSet = false;
    
}

ComDayCqDamIdsImplIDSJobProcessorProperties::~ComDayCqDamIdsImplIDSJobProcessorProperties()
{
}

void ComDayCqDamIdsImplIDSJobProcessorProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqDamIdsImplIDSJobProcessorProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Enable_multisessionIsSet)
    {
        val["enable.multisession"] = ModelBase::toJson(m_Enable_multisession);
    }
    if(m_Ids_cc_enableIsSet)
    {
        val["ids.cc.enable"] = ModelBase::toJson(m_Ids_cc_enable);
    }
    if(m_Enable_retryIsSet)
    {
        val["enable.retry"] = ModelBase::toJson(m_Enable_retry);
    }
    if(m_Enable_retry_scripterrorIsSet)
    {
        val["enable.retry.scripterror"] = ModelBase::toJson(m_Enable_retry_scripterror);
    }
    if(m_Externalizer_domain_cqhostIsSet)
    {
        val["externalizer.domain.cqhost"] = ModelBase::toJson(m_Externalizer_domain_cqhost);
    }
    if(m_Externalizer_domain_httpIsSet)
    {
        val["externalizer.domain.http"] = ModelBase::toJson(m_Externalizer_domain_http);
    }
    

    return val;
}

void ComDayCqDamIdsImplIDSJobProcessorProperties::fromJson(nlohmann::json& val)
{
    if(val.find("enable.multisession") != val.end())
    {
        if(!val["enable.multisession"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enable.multisession"]);
            setEnableMultisession( newItem );
        }
        
    }
    if(val.find("ids.cc.enable") != val.end())
    {
        if(!val["ids.cc.enable"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["ids.cc.enable"]);
            setIdsCcEnable( newItem );
        }
        
    }
    if(val.find("enable.retry") != val.end())
    {
        if(!val["enable.retry"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enable.retry"]);
            setEnableRetry( newItem );
        }
        
    }
    if(val.find("enable.retry.scripterror") != val.end())
    {
        if(!val["enable.retry.scripterror"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enable.retry.scripterror"]);
            setEnableRetryScripterror( newItem );
        }
        
    }
    if(val.find("externalizer.domain.cqhost") != val.end())
    {
        if(!val["externalizer.domain.cqhost"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["externalizer.domain.cqhost"]);
            setExternalizerDomainCqhost( newItem );
        }
        
    }
    if(val.find("externalizer.domain.http") != val.end())
    {
        if(!val["externalizer.domain.http"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["externalizer.domain.http"]);
            setExternalizerDomainHttp( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComDayCqDamIdsImplIDSJobProcessorProperties::getEnableMultisession() const
{
    return m_Enable_multisession;
}
void ComDayCqDamIdsImplIDSJobProcessorProperties::setEnableMultisession(ConfigNodePropertyBoolean const& value)
{
    m_Enable_multisession = value;
    m_Enable_multisessionIsSet = true;
}
bool ComDayCqDamIdsImplIDSJobProcessorProperties::enableMultisessionIsSet() const
{
    return m_Enable_multisessionIsSet;
}
void ComDayCqDamIdsImplIDSJobProcessorProperties::unsetEnable_multisession()
{
    m_Enable_multisessionIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqDamIdsImplIDSJobProcessorProperties::getIdsCcEnable() const
{
    return m_Ids_cc_enable;
}
void ComDayCqDamIdsImplIDSJobProcessorProperties::setIdsCcEnable(ConfigNodePropertyBoolean const& value)
{
    m_Ids_cc_enable = value;
    m_Ids_cc_enableIsSet = true;
}
bool ComDayCqDamIdsImplIDSJobProcessorProperties::idsCcEnableIsSet() const
{
    return m_Ids_cc_enableIsSet;
}
void ComDayCqDamIdsImplIDSJobProcessorProperties::unsetIds_cc_enable()
{
    m_Ids_cc_enableIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqDamIdsImplIDSJobProcessorProperties::getEnableRetry() const
{
    return m_Enable_retry;
}
void ComDayCqDamIdsImplIDSJobProcessorProperties::setEnableRetry(ConfigNodePropertyBoolean const& value)
{
    m_Enable_retry = value;
    m_Enable_retryIsSet = true;
}
bool ComDayCqDamIdsImplIDSJobProcessorProperties::enableRetryIsSet() const
{
    return m_Enable_retryIsSet;
}
void ComDayCqDamIdsImplIDSJobProcessorProperties::unsetEnable_retry()
{
    m_Enable_retryIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqDamIdsImplIDSJobProcessorProperties::getEnableRetryScripterror() const
{
    return m_Enable_retry_scripterror;
}
void ComDayCqDamIdsImplIDSJobProcessorProperties::setEnableRetryScripterror(ConfigNodePropertyBoolean const& value)
{
    m_Enable_retry_scripterror = value;
    m_Enable_retry_scripterrorIsSet = true;
}
bool ComDayCqDamIdsImplIDSJobProcessorProperties::enableRetryScripterrorIsSet() const
{
    return m_Enable_retry_scripterrorIsSet;
}
void ComDayCqDamIdsImplIDSJobProcessorProperties::unsetEnable_retry_scripterror()
{
    m_Enable_retry_scripterrorIsSet = false;
}
ConfigNodePropertyString ComDayCqDamIdsImplIDSJobProcessorProperties::getExternalizerDomainCqhost() const
{
    return m_Externalizer_domain_cqhost;
}
void ComDayCqDamIdsImplIDSJobProcessorProperties::setExternalizerDomainCqhost(ConfigNodePropertyString const& value)
{
    m_Externalizer_domain_cqhost = value;
    m_Externalizer_domain_cqhostIsSet = true;
}
bool ComDayCqDamIdsImplIDSJobProcessorProperties::externalizerDomainCqhostIsSet() const
{
    return m_Externalizer_domain_cqhostIsSet;
}
void ComDayCqDamIdsImplIDSJobProcessorProperties::unsetExternalizer_domain_cqhost()
{
    m_Externalizer_domain_cqhostIsSet = false;
}
ConfigNodePropertyString ComDayCqDamIdsImplIDSJobProcessorProperties::getExternalizerDomainHttp() const
{
    return m_Externalizer_domain_http;
}
void ComDayCqDamIdsImplIDSJobProcessorProperties::setExternalizerDomainHttp(ConfigNodePropertyString const& value)
{
    m_Externalizer_domain_http = value;
    m_Externalizer_domain_httpIsSet = true;
}
bool ComDayCqDamIdsImplIDSJobProcessorProperties::externalizerDomainHttpIsSet() const
{
    return m_Externalizer_domain_httpIsSet;
}
void ComDayCqDamIdsImplIDSJobProcessorProperties::unsetExternalizer_domain_http()
{
    m_Externalizer_domain_httpIsSet = false;
}

}
}
}
}

