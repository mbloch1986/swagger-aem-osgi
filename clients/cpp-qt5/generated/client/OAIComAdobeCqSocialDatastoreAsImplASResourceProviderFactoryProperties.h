/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.h
 *
 * 
 */

#ifndef OAIComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties_H_
#define OAIComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyInteger.h"
#include "OAIOAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties: public OAIObject {
public:
    OAIComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties();
    OAIComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties(QString json);
    ~OAIComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyString* getVersionId();
    void setVersionId(OAIConfigNodePropertyString* version_id);

    OAIConfigNodePropertyBoolean* getCacheOn();
    void setCacheOn(OAIConfigNodePropertyBoolean* cache_on);

    OAIConfigNodePropertyInteger* getConcurrencyLevel();
    void setConcurrencyLevel(OAIConfigNodePropertyInteger* concurrency_level);

    OAIConfigNodePropertyInteger* getCacheStartSize();
    void setCacheStartSize(OAIConfigNodePropertyInteger* cache_start_size);

    OAIConfigNodePropertyInteger* getCacheTtl();
    void setCacheTtl(OAIConfigNodePropertyInteger* cache_ttl);

    OAIConfigNodePropertyInteger* getCacheSize();
    void setCacheSize(OAIConfigNodePropertyInteger* cache_size);

    OAIConfigNodePropertyInteger* getTimeLimit();
    void setTimeLimit(OAIConfigNodePropertyInteger* time_limit);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyString* version_id;
    bool m_version_id_isSet;

    OAIConfigNodePropertyBoolean* cache_on;
    bool m_cache_on_isSet;

    OAIConfigNodePropertyInteger* concurrency_level;
    bool m_concurrency_level_isSet;

    OAIConfigNodePropertyInteger* cache_start_size;
    bool m_cache_start_size_isSet;

    OAIConfigNodePropertyInteger* cache_ttl;
    bool m_cache_ttl_isSet;

    OAIConfigNodePropertyInteger* cache_size;
    bool m_cache_size_isSet;

    OAIConfigNodePropertyInteger* time_limit;
    bool m_time_limit_isSet;

};

}

#endif /* OAIComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties_H_ */
