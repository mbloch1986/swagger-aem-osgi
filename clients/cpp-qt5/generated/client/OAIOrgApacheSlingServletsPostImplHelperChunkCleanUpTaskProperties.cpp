/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties() {
    init();
}

OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::~OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::init() {
    scheduler_expression = new OAIConfigNodePropertyString();
    m_scheduler_expression_isSet = false;
    scheduler_concurrent = new OAIConfigNodePropertyBoolean();
    m_scheduler_concurrent_isSet = false;
    chunk_cleanup_age = new OAIConfigNodePropertyInteger();
    m_chunk_cleanup_age_isSet = false;
}

void
OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::cleanup() {
    if(scheduler_expression != nullptr) { 
        delete scheduler_expression;
    }
    if(scheduler_concurrent != nullptr) { 
        delete scheduler_concurrent;
    }
    if(chunk_cleanup_age != nullptr) { 
        delete chunk_cleanup_age;
    }
}

OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties*
OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&scheduler_expression, pJson["scheduler.expression"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&scheduler_concurrent, pJson["scheduler.concurrent"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&chunk_cleanup_age, pJson["chunk.cleanup.age"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::asJsonObject() {
    QJsonObject obj;
    if((scheduler_expression != nullptr) && (scheduler_expression->isSet())){
        toJsonValue(QString("scheduler.expression"), scheduler_expression, obj, QString("OAIConfigNodePropertyString"));
    }
    if((scheduler_concurrent != nullptr) && (scheduler_concurrent->isSet())){
        toJsonValue(QString("scheduler.concurrent"), scheduler_concurrent, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((chunk_cleanup_age != nullptr) && (chunk_cleanup_age->isSet())){
        toJsonValue(QString("chunk.cleanup.age"), chunk_cleanup_age, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::getSchedulerExpression() {
    return scheduler_expression;
}
void
OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::setSchedulerExpression(OAIConfigNodePropertyString* scheduler_expression) {
    this->scheduler_expression = scheduler_expression;
    this->m_scheduler_expression_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::getSchedulerConcurrent() {
    return scheduler_concurrent;
}
void
OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::setSchedulerConcurrent(OAIConfigNodePropertyBoolean* scheduler_concurrent) {
    this->scheduler_concurrent = scheduler_concurrent;
    this->m_scheduler_concurrent_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::getChunkCleanupAge() {
    return chunk_cleanup_age;
}
void
OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::setChunkCleanupAge(OAIConfigNodePropertyInteger* chunk_cleanup_age) {
    this->chunk_cleanup_age = chunk_cleanup_age;
    this->m_chunk_cleanup_age_isSet = true;
}


bool
OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(scheduler_expression != nullptr && scheduler_expression->isSet()){ isObjectUpdated = true; break;}
        if(scheduler_concurrent != nullptr && scheduler_concurrent->isSet()){ isObjectUpdated = true; break;}
        if(chunk_cleanup_age != nullptr && chunk_cleanup_age->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

