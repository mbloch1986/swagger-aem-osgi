/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties()
{
    m_CreatePreviewEnabledIsSet = false;
    m_UpdatePreviewEnabledIsSet = false;
    m_QueueSizeIsSet = false;
    m_FolderPreviewRenditionRegexIsSet = false;
}

ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::~ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties()
{
}

void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CreatePreviewEnabledIsSet)
    {
        val[utility::conversions::to_string_t("createPreviewEnabled")] = ModelBase::toJson(m_CreatePreviewEnabled);
    }
    if(m_UpdatePreviewEnabledIsSet)
    {
        val[utility::conversions::to_string_t("updatePreviewEnabled")] = ModelBase::toJson(m_UpdatePreviewEnabled);
    }
    if(m_QueueSizeIsSet)
    {
        val[utility::conversions::to_string_t("queueSize")] = ModelBase::toJson(m_QueueSize);
    }
    if(m_FolderPreviewRenditionRegexIsSet)
    {
        val[utility::conversions::to_string_t("folderPreviewRenditionRegex")] = ModelBase::toJson(m_FolderPreviewRenditionRegex);
    }

    return val;
}

void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("createPreviewEnabled")))
    {
        if(!val[utility::conversions::to_string_t("createPreviewEnabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("createPreviewEnabled")]);
            setCreatePreviewEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updatePreviewEnabled")))
    {
        if(!val[utility::conversions::to_string_t("updatePreviewEnabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("updatePreviewEnabled")]);
            setUpdatePreviewEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queueSize")))
    {
        if(!val[utility::conversions::to_string_t("queueSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("queueSize")]);
            setQueueSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("folderPreviewRenditionRegex")))
    {
        if(!val[utility::conversions::to_string_t("folderPreviewRenditionRegex")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("folderPreviewRenditionRegex")]);
            setFolderPreviewRenditionRegex( newItem );
        }
    }
}

void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CreatePreviewEnabledIsSet)
    {
        if (m_CreatePreviewEnabled.get())
        {
            m_CreatePreviewEnabled->toMultipart(multipart, utility::conversions::to_string_t("createPreviewEnabled."));
        }
    }
    if(m_UpdatePreviewEnabledIsSet)
    {
        if (m_UpdatePreviewEnabled.get())
        {
            m_UpdatePreviewEnabled->toMultipart(multipart, utility::conversions::to_string_t("updatePreviewEnabled."));
        }
    }
    if(m_QueueSizeIsSet)
    {
        if (m_QueueSize.get())
        {
            m_QueueSize->toMultipart(multipart, utility::conversions::to_string_t("queueSize."));
        }
    }
    if(m_FolderPreviewRenditionRegexIsSet)
    {
        if (m_FolderPreviewRenditionRegex.get())
        {
            m_FolderPreviewRenditionRegex->toMultipart(multipart, utility::conversions::to_string_t("folderPreviewRenditionRegex."));
        }
    }
}

void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("createPreviewEnabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("createPreviewEnabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("createPreviewEnabled."));
            setCreatePreviewEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updatePreviewEnabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("updatePreviewEnabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("updatePreviewEnabled."));
            setUpdatePreviewEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queueSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queueSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queueSize."));
            setQueueSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("folderPreviewRenditionRegex")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("folderPreviewRenditionRegex")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("folderPreviewRenditionRegex."));
            setFolderPreviewRenditionRegex( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::getCreatePreviewEnabled() const
{
    return m_CreatePreviewEnabled;
}


void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::setCreatePreviewEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_CreatePreviewEnabled = value;
    m_CreatePreviewEnabledIsSet = true;
}
bool ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::createPreviewEnabledIsSet() const
{
    return m_CreatePreviewEnabledIsSet;
}

void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::unsetCreatePreviewEnabled()
{
    m_CreatePreviewEnabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::getUpdatePreviewEnabled() const
{
    return m_UpdatePreviewEnabled;
}


void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::setUpdatePreviewEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_UpdatePreviewEnabled = value;
    m_UpdatePreviewEnabledIsSet = true;
}
bool ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::updatePreviewEnabledIsSet() const
{
    return m_UpdatePreviewEnabledIsSet;
}

void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::unsetUpdatePreviewEnabled()
{
    m_UpdatePreviewEnabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::getQueueSize() const
{
    return m_QueueSize;
}


void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::setQueueSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_QueueSize = value;
    m_QueueSizeIsSet = true;
}
bool ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::queueSizeIsSet() const
{
    return m_QueueSizeIsSet;
}

void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::unsetQueueSize()
{
    m_QueueSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::getFolderPreviewRenditionRegex() const
{
    return m_FolderPreviewRenditionRegex;
}


void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::setFolderPreviewRenditionRegex(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_FolderPreviewRenditionRegex = value;
    m_FolderPreviewRenditionRegexIsSet = true;
}
bool ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::folderPreviewRenditionRegexIsSet() const
{
    return m_FolderPreviewRenditionRegexIsSet;
}

void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::unsetFolderPreviewRenditionRegex()
{
    m_FolderPreviewRenditionRegexIsSet = false;
}

}
}
}
}

