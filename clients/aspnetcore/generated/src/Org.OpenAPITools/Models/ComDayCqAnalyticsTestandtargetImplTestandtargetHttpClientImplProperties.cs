/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties : IEquatable<ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties>
    { 
        /// <summary>
        /// Gets or Sets CqAnalyticsTestandtargetApiUrl
        /// </summary>
        [DataMember(Name="cq.analytics.testandtarget.api.url")]
        public ConfigNodePropertyString CqAnalyticsTestandtargetApiUrl { get; set; }

        /// <summary>
        /// Gets or Sets CqAnalyticsTestandtargetTimeout
        /// </summary>
        [DataMember(Name="cq.analytics.testandtarget.timeout")]
        public ConfigNodePropertyInteger CqAnalyticsTestandtargetTimeout { get; set; }

        /// <summary>
        /// Gets or Sets CqAnalyticsTestandtargetSockettimeout
        /// </summary>
        [DataMember(Name="cq.analytics.testandtarget.sockettimeout")]
        public ConfigNodePropertyInteger CqAnalyticsTestandtargetSockettimeout { get; set; }

        /// <summary>
        /// Gets or Sets CqAnalyticsTestandtargetRecommendationsUrlReplace
        /// </summary>
        [DataMember(Name="cq.analytics.testandtarget.recommendations.url.replace")]
        public ConfigNodePropertyString CqAnalyticsTestandtargetRecommendationsUrlReplace { get; set; }

        /// <summary>
        /// Gets or Sets CqAnalyticsTestandtargetRecommendationsUrlReplacewith
        /// </summary>
        [DataMember(Name="cq.analytics.testandtarget.recommendations.url.replacewith")]
        public ConfigNodePropertyString CqAnalyticsTestandtargetRecommendationsUrlReplacewith { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties {\n");
            sb.Append("  CqAnalyticsTestandtargetApiUrl: ").Append(CqAnalyticsTestandtargetApiUrl).Append("\n");
            sb.Append("  CqAnalyticsTestandtargetTimeout: ").Append(CqAnalyticsTestandtargetTimeout).Append("\n");
            sb.Append("  CqAnalyticsTestandtargetSockettimeout: ").Append(CqAnalyticsTestandtargetSockettimeout).Append("\n");
            sb.Append("  CqAnalyticsTestandtargetRecommendationsUrlReplace: ").Append(CqAnalyticsTestandtargetRecommendationsUrlReplace).Append("\n");
            sb.Append("  CqAnalyticsTestandtargetRecommendationsUrlReplacewith: ").Append(CqAnalyticsTestandtargetRecommendationsUrlReplacewith).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CqAnalyticsTestandtargetApiUrl == other.CqAnalyticsTestandtargetApiUrl ||
                    CqAnalyticsTestandtargetApiUrl != null &&
                    CqAnalyticsTestandtargetApiUrl.Equals(other.CqAnalyticsTestandtargetApiUrl)
                ) && 
                (
                    CqAnalyticsTestandtargetTimeout == other.CqAnalyticsTestandtargetTimeout ||
                    CqAnalyticsTestandtargetTimeout != null &&
                    CqAnalyticsTestandtargetTimeout.Equals(other.CqAnalyticsTestandtargetTimeout)
                ) && 
                (
                    CqAnalyticsTestandtargetSockettimeout == other.CqAnalyticsTestandtargetSockettimeout ||
                    CqAnalyticsTestandtargetSockettimeout != null &&
                    CqAnalyticsTestandtargetSockettimeout.Equals(other.CqAnalyticsTestandtargetSockettimeout)
                ) && 
                (
                    CqAnalyticsTestandtargetRecommendationsUrlReplace == other.CqAnalyticsTestandtargetRecommendationsUrlReplace ||
                    CqAnalyticsTestandtargetRecommendationsUrlReplace != null &&
                    CqAnalyticsTestandtargetRecommendationsUrlReplace.Equals(other.CqAnalyticsTestandtargetRecommendationsUrlReplace)
                ) && 
                (
                    CqAnalyticsTestandtargetRecommendationsUrlReplacewith == other.CqAnalyticsTestandtargetRecommendationsUrlReplacewith ||
                    CqAnalyticsTestandtargetRecommendationsUrlReplacewith != null &&
                    CqAnalyticsTestandtargetRecommendationsUrlReplacewith.Equals(other.CqAnalyticsTestandtargetRecommendationsUrlReplacewith)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CqAnalyticsTestandtargetApiUrl != null)
                    hashCode = hashCode * 59 + CqAnalyticsTestandtargetApiUrl.GetHashCode();
                    if (CqAnalyticsTestandtargetTimeout != null)
                    hashCode = hashCode * 59 + CqAnalyticsTestandtargetTimeout.GetHashCode();
                    if (CqAnalyticsTestandtargetSockettimeout != null)
                    hashCode = hashCode * 59 + CqAnalyticsTestandtargetSockettimeout.GetHashCode();
                    if (CqAnalyticsTestandtargetRecommendationsUrlReplace != null)
                    hashCode = hashCode * 59 + CqAnalyticsTestandtargetRecommendationsUrlReplace.GetHashCode();
                    if (CqAnalyticsTestandtargetRecommendationsUrlReplacewith != null)
                    hashCode = hashCode * 59 + CqAnalyticsTestandtargetRecommendationsUrlReplacewith.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties left, ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties left, ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
