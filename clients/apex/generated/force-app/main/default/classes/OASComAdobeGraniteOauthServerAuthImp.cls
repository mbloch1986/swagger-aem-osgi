/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASComAdobeGraniteOauthServerAuthImp
 */
public class OASComAdobeGraniteOauthServerAuthImp implements OAS.MappedProperties {
    /**
     * Get path
     * @return path
     */
    public OASConfigNodePropertyString path { get; set; }

    /**
     * Get jaasControlFlag
     * @return jaasControlFlag
     */
    public OASConfigNodePropertyString jaasControlFlag { get; set; }

    /**
     * Get jaasRealmName
     * @return jaasRealmName
     */
    public OASConfigNodePropertyString jaasRealmName { get; set; }

    /**
     * Get jaasRanking
     * @return jaasRanking
     */
    public OASConfigNodePropertyInteger jaasRanking { get; set; }

    /**
     * Get oauthOfflineValidation
     * @return oauthOfflineValidation
     */
    public OASConfigNodePropertyBoolean oauthOfflineValidation { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'jaas.controlFlag' => 'jaasControlFlag',
        'jaas.realmName' => 'jaasRealmName',
        'jaas.ranking' => 'jaasRanking',
        'oauth.offline.validation' => 'oauthOfflineValidation'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASComAdobeGraniteOauthServerAuthImp getExample() {
        OASComAdobeGraniteOauthServerAuthImp comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties = new OASComAdobeGraniteOauthServerAuthImp();
          comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties.path = OASConfigNodePropertyString.getExample();
          comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties.jaasControlFlag = OASConfigNodePropertyString.getExample();
          comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties.jaasRealmName = OASConfigNodePropertyString.getExample();
          comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties.jaasRanking = OASConfigNodePropertyInteger.getExample();
          comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties.oauthOfflineValidation = OASConfigNodePropertyBoolean.getExample();
        return comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASComAdobeGraniteOauthServerAuthImp) {           
            OASComAdobeGraniteOauthServerAuthImp comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties = (OASComAdobeGraniteOauthServerAuthImp) obj;
            return this.path == comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties.path
                && this.jaasControlFlag == comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties.jaasControlFlag
                && this.jaasRealmName == comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties.jaasRealmName
                && this.jaasRanking == comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties.jaasRanking
                && this.oauthOfflineValidation == comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties.oauthOfflineValidation;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (path == null ? 0 : System.hashCode(path));
        hashCode = (17 * hashCode) + (jaasControlFlag == null ? 0 : System.hashCode(jaasControlFlag));
        hashCode = (17 * hashCode) + (jaasRealmName == null ? 0 : System.hashCode(jaasRealmName));
        hashCode = (17 * hashCode) + (jaasRanking == null ? 0 : System.hashCode(jaasRanking));
        hashCode = (17 * hashCode) + (oauthOfflineValidation == null ? 0 : System.hashCode(oauthOfflineValidation));
        return hashCode;
    }
}

