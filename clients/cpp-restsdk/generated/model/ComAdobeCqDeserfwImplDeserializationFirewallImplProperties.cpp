/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqDeserfwImplDeserializationFirewallImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::ComAdobeCqDeserfwImplDeserializationFirewallImplProperties()
{
    m_Firewall_deserialization_whitelistIsSet = false;
    m_Firewall_deserialization_blacklistIsSet = false;
    m_Firewall_deserialization_diagnosticsIsSet = false;
}

ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::~ComAdobeCqDeserfwImplDeserializationFirewallImplProperties()
{
}

void ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Firewall_deserialization_whitelistIsSet)
    {
        val[utility::conversions::to_string_t("firewall.deserialization.whitelist")] = ModelBase::toJson(m_Firewall_deserialization_whitelist);
    }
    if(m_Firewall_deserialization_blacklistIsSet)
    {
        val[utility::conversions::to_string_t("firewall.deserialization.blacklist")] = ModelBase::toJson(m_Firewall_deserialization_blacklist);
    }
    if(m_Firewall_deserialization_diagnosticsIsSet)
    {
        val[utility::conversions::to_string_t("firewall.deserialization.diagnostics")] = ModelBase::toJson(m_Firewall_deserialization_diagnostics);
    }

    return val;
}

void ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("firewall.deserialization.whitelist")))
    {
        if(!val[utility::conversions::to_string_t("firewall.deserialization.whitelist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("firewall.deserialization.whitelist")]);
            setFirewallDeserializationWhitelist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("firewall.deserialization.blacklist")))
    {
        if(!val[utility::conversions::to_string_t("firewall.deserialization.blacklist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("firewall.deserialization.blacklist")]);
            setFirewallDeserializationBlacklist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("firewall.deserialization.diagnostics")))
    {
        if(!val[utility::conversions::to_string_t("firewall.deserialization.diagnostics")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("firewall.deserialization.diagnostics")]);
            setFirewallDeserializationDiagnostics( newItem );
        }
    }
}

void ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Firewall_deserialization_whitelistIsSet)
    {
        if (m_Firewall_deserialization_whitelist.get())
        {
            m_Firewall_deserialization_whitelist->toMultipart(multipart, utility::conversions::to_string_t("firewall.deserialization.whitelist."));
        }
    }
    if(m_Firewall_deserialization_blacklistIsSet)
    {
        if (m_Firewall_deserialization_blacklist.get())
        {
            m_Firewall_deserialization_blacklist->toMultipart(multipart, utility::conversions::to_string_t("firewall.deserialization.blacklist."));
        }
    }
    if(m_Firewall_deserialization_diagnosticsIsSet)
    {
        if (m_Firewall_deserialization_diagnostics.get())
        {
            m_Firewall_deserialization_diagnostics->toMultipart(multipart, utility::conversions::to_string_t("firewall.deserialization.diagnostics."));
        }
    }
}

void ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("firewall.deserialization.whitelist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("firewall.deserialization.whitelist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("firewall.deserialization.whitelist."));
            setFirewallDeserializationWhitelist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("firewall.deserialization.blacklist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("firewall.deserialization.blacklist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("firewall.deserialization.blacklist."));
            setFirewallDeserializationBlacklist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("firewall.deserialization.diagnostics")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("firewall.deserialization.diagnostics")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("firewall.deserialization.diagnostics."));
            setFirewallDeserializationDiagnostics( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::getFirewallDeserializationWhitelist() const
{
    return m_Firewall_deserialization_whitelist;
}


void ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::setFirewallDeserializationWhitelist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Firewall_deserialization_whitelist = value;
    m_Firewall_deserialization_whitelistIsSet = true;
}
bool ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::firewallDeserializationWhitelistIsSet() const
{
    return m_Firewall_deserialization_whitelistIsSet;
}

void ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::unsetFirewall_deserialization_whitelist()
{
    m_Firewall_deserialization_whitelistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::getFirewallDeserializationBlacklist() const
{
    return m_Firewall_deserialization_blacklist;
}


void ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::setFirewallDeserializationBlacklist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Firewall_deserialization_blacklist = value;
    m_Firewall_deserialization_blacklistIsSet = true;
}
bool ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::firewallDeserializationBlacklistIsSet() const
{
    return m_Firewall_deserialization_blacklistIsSet;
}

void ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::unsetFirewall_deserialization_blacklist()
{
    m_Firewall_deserialization_blacklistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::getFirewallDeserializationDiagnostics() const
{
    return m_Firewall_deserialization_diagnostics;
}


void ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::setFirewallDeserializationDiagnostics(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Firewall_deserialization_diagnostics = value;
    m_Firewall_deserialization_diagnosticsIsSet = true;
}
bool ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::firewallDeserializationDiagnosticsIsSet() const
{
    return m_Firewall_deserialization_diagnosticsIsSet;
}

void ComAdobeCqDeserfwImplDeserializationFirewallImplProperties::unsetFirewall_deserialization_diagnostics()
{
    m_Firewall_deserialization_diagnosticsIsSet = false;
}

}
}
}
}

