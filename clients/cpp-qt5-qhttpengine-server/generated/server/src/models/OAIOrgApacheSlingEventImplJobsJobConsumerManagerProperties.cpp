/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties() {
    this->init();
}

OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::~OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties() {
    
}

void
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::init() {
    m_org_apache_sling_installer_configuration_persist_isSet = false;
    m_job_consumermanager_whitelist_isSet = false;
    m_job_consumermanager_blacklist_isSet = false;
}

void
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(org_apache_sling_installer_configuration_persist, json[QString("org.apache.sling.installer.configuration.persist")]);
    
    ::OpenAPI::fromJsonValue(job_consumermanager_whitelist, json[QString("job.consumermanager.whitelist")]);
    
    ::OpenAPI::fromJsonValue(job_consumermanager_blacklist, json[QString("job.consumermanager.blacklist")]);
    
}

QString
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::asJsonObject() const {
    QJsonObject obj;
	if(org_apache_sling_installer_configuration_persist.isSet()){
        obj.insert(QString("org.apache.sling.installer.configuration.persist"), ::OpenAPI::toJsonValue(org_apache_sling_installer_configuration_persist));
    }
	if(job_consumermanager_whitelist.isSet()){
        obj.insert(QString("job.consumermanager.whitelist"), ::OpenAPI::toJsonValue(job_consumermanager_whitelist));
    }
	if(job_consumermanager_blacklist.isSet()){
        obj.insert(QString("job.consumermanager.blacklist"), ::OpenAPI::toJsonValue(job_consumermanager_blacklist));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::getOrgApacheSlingInstallerConfigurationPersist() const {
    return org_apache_sling_installer_configuration_persist;
}
void
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::setOrgApacheSlingInstallerConfigurationPersist(const OAIConfigNodePropertyBoolean &org_apache_sling_installer_configuration_persist) {
    this->org_apache_sling_installer_configuration_persist = org_apache_sling_installer_configuration_persist;
    this->m_org_apache_sling_installer_configuration_persist_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::getJobConsumermanagerWhitelist() const {
    return job_consumermanager_whitelist;
}
void
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::setJobConsumermanagerWhitelist(const OAIConfigNodePropertyArray &job_consumermanager_whitelist) {
    this->job_consumermanager_whitelist = job_consumermanager_whitelist;
    this->m_job_consumermanager_whitelist_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::getJobConsumermanagerBlacklist() const {
    return job_consumermanager_blacklist;
}
void
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::setJobConsumermanagerBlacklist(const OAIConfigNodePropertyArray &job_consumermanager_blacklist) {
    this->job_consumermanager_blacklist = job_consumermanager_blacklist;
    this->m_job_consumermanager_blacklist_isSet = true;
}


bool
OAIOrgApacheSlingEventImplJobsJobConsumerManagerProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(org_apache_sling_installer_configuration_persist.isSet()){ isObjectUpdated = true; break;}
    
        if(job_consumermanager_whitelist.isSet()){ isObjectUpdated = true; break;}
    
        if(job_consumermanager_blacklist.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

