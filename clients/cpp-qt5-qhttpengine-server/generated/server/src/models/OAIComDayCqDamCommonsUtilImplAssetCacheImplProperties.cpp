/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamCommonsUtilImplAssetCacheImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamCommonsUtilImplAssetCacheImplProperties::OAIComDayCqDamCommonsUtilImplAssetCacheImplProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqDamCommonsUtilImplAssetCacheImplProperties::OAIComDayCqDamCommonsUtilImplAssetCacheImplProperties() {
    this->init();
}

OAIComDayCqDamCommonsUtilImplAssetCacheImplProperties::~OAIComDayCqDamCommonsUtilImplAssetCacheImplProperties() {
    
}

void
OAIComDayCqDamCommonsUtilImplAssetCacheImplProperties::init() {
    m_large_file_min_isSet = false;
    m_cache_apply_isSet = false;
    m_mime_types_isSet = false;
}

void
OAIComDayCqDamCommonsUtilImplAssetCacheImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqDamCommonsUtilImplAssetCacheImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(large_file_min, json[QString("large.file.min")]);
    
    ::OpenAPI::fromJsonValue(cache_apply, json[QString("cache.apply")]);
    
    ::OpenAPI::fromJsonValue(mime_types, json[QString("mime.types")]);
    
}

QString
OAIComDayCqDamCommonsUtilImplAssetCacheImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamCommonsUtilImplAssetCacheImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(large_file_min.isSet()){
        obj.insert(QString("large.file.min"), ::OpenAPI::toJsonValue(large_file_min));
    }
	if(cache_apply.isSet()){
        obj.insert(QString("cache.apply"), ::OpenAPI::toJsonValue(cache_apply));
    }
	if(mime_types.isSet()){
        obj.insert(QString("mime.types"), ::OpenAPI::toJsonValue(mime_types));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIComDayCqDamCommonsUtilImplAssetCacheImplProperties::getLargeFileMin() const {
    return large_file_min;
}
void
OAIComDayCqDamCommonsUtilImplAssetCacheImplProperties::setLargeFileMin(const OAIConfigNodePropertyInteger &large_file_min) {
    this->large_file_min = large_file_min;
    this->m_large_file_min_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqDamCommonsUtilImplAssetCacheImplProperties::getCacheApply() const {
    return cache_apply;
}
void
OAIComDayCqDamCommonsUtilImplAssetCacheImplProperties::setCacheApply(const OAIConfigNodePropertyBoolean &cache_apply) {
    this->cache_apply = cache_apply;
    this->m_cache_apply_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqDamCommonsUtilImplAssetCacheImplProperties::getMimeTypes() const {
    return mime_types;
}
void
OAIComDayCqDamCommonsUtilImplAssetCacheImplProperties::setMimeTypes(const OAIConfigNodePropertyArray &mime_types) {
    this->mime_types = mime_types;
    this->m_mime_types_isSet = true;
}


bool
OAIComDayCqDamCommonsUtilImplAssetCacheImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(large_file_min.isSet()){ isObjectUpdated = true; break;}
    
        if(cache_apply.isSet()){ isObjectUpdated = true; break;}
    
        if(mime_types.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

