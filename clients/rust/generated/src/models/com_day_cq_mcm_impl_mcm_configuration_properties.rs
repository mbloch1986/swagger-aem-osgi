/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqMcmImplMcmConfigurationProperties {
  #[serde(rename = "experience.indirection")]
  experience_indirection: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "touchpoint.indirection")]
  touchpoint_indirection: Option<::models::ConfigNodePropertyArray>
}

impl ComDayCqMcmImplMcmConfigurationProperties {
  pub fn new() -> ComDayCqMcmImplMcmConfigurationProperties {
    ComDayCqMcmImplMcmConfigurationProperties {
      experience_indirection: None,
      touchpoint_indirection: None
    }
  }

  pub fn set_experience_indirection(&mut self, experience_indirection: ::models::ConfigNodePropertyArray) {
    self.experience_indirection = Some(experience_indirection);
  }

  pub fn with_experience_indirection(mut self, experience_indirection: ::models::ConfigNodePropertyArray) -> ComDayCqMcmImplMcmConfigurationProperties {
    self.experience_indirection = Some(experience_indirection);
    self
  }

  pub fn experience_indirection(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.experience_indirection.as_ref()
  }

  pub fn reset_experience_indirection(&mut self) {
    self.experience_indirection = None;
  }

  pub fn set_touchpoint_indirection(&mut self, touchpoint_indirection: ::models::ConfigNodePropertyArray) {
    self.touchpoint_indirection = Some(touchpoint_indirection);
  }

  pub fn with_touchpoint_indirection(mut self, touchpoint_indirection: ::models::ConfigNodePropertyArray) -> ComDayCqMcmImplMcmConfigurationProperties {
    self.touchpoint_indirection = Some(touchpoint_indirection);
    self
  }

  pub fn touchpoint_indirection(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.touchpoint_indirection.as_ref()
  }

  pub fn reset_touchpoint_indirection(&mut self) {
    self.touchpoint_indirection = None;
  }

}



