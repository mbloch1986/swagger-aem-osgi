<?php
/**
 * ComDayCommonsHttpclientProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComDayCommonsHttpclientProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComDayCommonsHttpclientProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comDayCommonsHttpclientProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'proxy_enabled' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'proxy_host' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'proxy_user' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'proxy_password' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'proxy_ntlm_host' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'proxy_ntlm_domain' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'proxy_exceptions' => '\OpenAPI\Client\Model\ConfigNodePropertyArray'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'proxy_enabled' => null,
        'proxy_host' => null,
        'proxy_user' => null,
        'proxy_password' => null,
        'proxy_ntlm_host' => null,
        'proxy_ntlm_domain' => null,
        'proxy_exceptions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'proxy_enabled' => 'proxy.enabled',
        'proxy_host' => 'proxy.host',
        'proxy_user' => 'proxy.user',
        'proxy_password' => 'proxy.password',
        'proxy_ntlm_host' => 'proxy.ntlm.host',
        'proxy_ntlm_domain' => 'proxy.ntlm.domain',
        'proxy_exceptions' => 'proxy.exceptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'proxy_enabled' => 'setProxyEnabled',
        'proxy_host' => 'setProxyHost',
        'proxy_user' => 'setProxyUser',
        'proxy_password' => 'setProxyPassword',
        'proxy_ntlm_host' => 'setProxyNtlmHost',
        'proxy_ntlm_domain' => 'setProxyNtlmDomain',
        'proxy_exceptions' => 'setProxyExceptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'proxy_enabled' => 'getProxyEnabled',
        'proxy_host' => 'getProxyHost',
        'proxy_user' => 'getProxyUser',
        'proxy_password' => 'getProxyPassword',
        'proxy_ntlm_host' => 'getProxyNtlmHost',
        'proxy_ntlm_domain' => 'getProxyNtlmDomain',
        'proxy_exceptions' => 'getProxyExceptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['proxy_enabled'] = isset($data['proxy_enabled']) ? $data['proxy_enabled'] : null;
        $this->container['proxy_host'] = isset($data['proxy_host']) ? $data['proxy_host'] : null;
        $this->container['proxy_user'] = isset($data['proxy_user']) ? $data['proxy_user'] : null;
        $this->container['proxy_password'] = isset($data['proxy_password']) ? $data['proxy_password'] : null;
        $this->container['proxy_ntlm_host'] = isset($data['proxy_ntlm_host']) ? $data['proxy_ntlm_host'] : null;
        $this->container['proxy_ntlm_domain'] = isset($data['proxy_ntlm_domain']) ? $data['proxy_ntlm_domain'] : null;
        $this->container['proxy_exceptions'] = isset($data['proxy_exceptions']) ? $data['proxy_exceptions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets proxy_enabled
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getProxyEnabled()
    {
        return $this->container['proxy_enabled'];
    }

    /**
     * Sets proxy_enabled
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $proxy_enabled proxy_enabled
     *
     * @return $this
     */
    public function setProxyEnabled($proxy_enabled)
    {
        $this->container['proxy_enabled'] = $proxy_enabled;

        return $this;
    }

    /**
     * Gets proxy_host
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getProxyHost()
    {
        return $this->container['proxy_host'];
    }

    /**
     * Sets proxy_host
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $proxy_host proxy_host
     *
     * @return $this
     */
    public function setProxyHost($proxy_host)
    {
        $this->container['proxy_host'] = $proxy_host;

        return $this;
    }

    /**
     * Gets proxy_user
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getProxyUser()
    {
        return $this->container['proxy_user'];
    }

    /**
     * Sets proxy_user
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $proxy_user proxy_user
     *
     * @return $this
     */
    public function setProxyUser($proxy_user)
    {
        $this->container['proxy_user'] = $proxy_user;

        return $this;
    }

    /**
     * Gets proxy_password
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getProxyPassword()
    {
        return $this->container['proxy_password'];
    }

    /**
     * Sets proxy_password
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $proxy_password proxy_password
     *
     * @return $this
     */
    public function setProxyPassword($proxy_password)
    {
        $this->container['proxy_password'] = $proxy_password;

        return $this;
    }

    /**
     * Gets proxy_ntlm_host
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getProxyNtlmHost()
    {
        return $this->container['proxy_ntlm_host'];
    }

    /**
     * Sets proxy_ntlm_host
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $proxy_ntlm_host proxy_ntlm_host
     *
     * @return $this
     */
    public function setProxyNtlmHost($proxy_ntlm_host)
    {
        $this->container['proxy_ntlm_host'] = $proxy_ntlm_host;

        return $this;
    }

    /**
     * Gets proxy_ntlm_domain
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getProxyNtlmDomain()
    {
        return $this->container['proxy_ntlm_domain'];
    }

    /**
     * Sets proxy_ntlm_domain
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $proxy_ntlm_domain proxy_ntlm_domain
     *
     * @return $this
     */
    public function setProxyNtlmDomain($proxy_ntlm_domain)
    {
        $this->container['proxy_ntlm_domain'] = $proxy_ntlm_domain;

        return $this;
    }

    /**
     * Gets proxy_exceptions
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getProxyExceptions()
    {
        return $this->container['proxy_exceptions'];
    }

    /**
     * Sets proxy_exceptions
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $proxy_exceptions proxy_exceptions
     *
     * @return $this
     */
    public function setProxyExceptions($proxy_exceptions)
    {
        $this->container['proxy_exceptions'] = $proxy_exceptions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


