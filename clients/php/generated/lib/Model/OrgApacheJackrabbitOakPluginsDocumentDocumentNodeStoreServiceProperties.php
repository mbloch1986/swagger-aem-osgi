<?php
/**
 * OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mongouri' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'db' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'socket_keep_alive' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'cache' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'node_cache_percentage' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'prev_doc_cache_percentage' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'children_cache_percentage' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'diff_cache_percentage' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cache_segment_count' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'cache_stack_move_distance' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'blob_cache_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'persistent_cache' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'journal_cache' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'custom_blob_store' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'journal_gc_interval' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'journal_gc_max_age' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'prefetch_external_changes' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'role' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'version_gc_max_age_in_secs' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'version_gc_expression' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'version_gc_time_limit_in_secs' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'blob_gc_max_age_in_secs' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'blob_track_snapshot_interval_in_secs' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'repository_home' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'max_replication_lag_in_secs' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'document_store_type' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'bundling_disabled' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'update_limit' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'persistent_cache_includes' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'lease_check_mode' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'mongouri' => null,
        'db' => null,
        'socket_keep_alive' => null,
        'cache' => null,
        'node_cache_percentage' => null,
        'prev_doc_cache_percentage' => null,
        'children_cache_percentage' => null,
        'diff_cache_percentage' => null,
        'cache_segment_count' => null,
        'cache_stack_move_distance' => null,
        'blob_cache_size' => null,
        'persistent_cache' => null,
        'journal_cache' => null,
        'custom_blob_store' => null,
        'journal_gc_interval' => null,
        'journal_gc_max_age' => null,
        'prefetch_external_changes' => null,
        'role' => null,
        'version_gc_max_age_in_secs' => null,
        'version_gc_expression' => null,
        'version_gc_time_limit_in_secs' => null,
        'blob_gc_max_age_in_secs' => null,
        'blob_track_snapshot_interval_in_secs' => null,
        'repository_home' => null,
        'max_replication_lag_in_secs' => null,
        'document_store_type' => null,
        'bundling_disabled' => null,
        'update_limit' => null,
        'persistent_cache_includes' => null,
        'lease_check_mode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mongouri' => 'mongouri',
        'db' => 'db',
        'socket_keep_alive' => 'socketKeepAlive',
        'cache' => 'cache',
        'node_cache_percentage' => 'nodeCachePercentage',
        'prev_doc_cache_percentage' => 'prevDocCachePercentage',
        'children_cache_percentage' => 'childrenCachePercentage',
        'diff_cache_percentage' => 'diffCachePercentage',
        'cache_segment_count' => 'cacheSegmentCount',
        'cache_stack_move_distance' => 'cacheStackMoveDistance',
        'blob_cache_size' => 'blobCacheSize',
        'persistent_cache' => 'persistentCache',
        'journal_cache' => 'journalCache',
        'custom_blob_store' => 'customBlobStore',
        'journal_gc_interval' => 'journalGCInterval',
        'journal_gc_max_age' => 'journalGCMaxAge',
        'prefetch_external_changes' => 'prefetchExternalChanges',
        'role' => 'role',
        'version_gc_max_age_in_secs' => 'versionGcMaxAgeInSecs',
        'version_gc_expression' => 'versionGCExpression',
        'version_gc_time_limit_in_secs' => 'versionGCTimeLimitInSecs',
        'blob_gc_max_age_in_secs' => 'blobGcMaxAgeInSecs',
        'blob_track_snapshot_interval_in_secs' => 'blobTrackSnapshotIntervalInSecs',
        'repository_home' => 'repository.home',
        'max_replication_lag_in_secs' => 'maxReplicationLagInSecs',
        'document_store_type' => 'documentStoreType',
        'bundling_disabled' => 'bundlingDisabled',
        'update_limit' => 'updateLimit',
        'persistent_cache_includes' => 'persistentCacheIncludes',
        'lease_check_mode' => 'leaseCheckMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mongouri' => 'setMongouri',
        'db' => 'setDb',
        'socket_keep_alive' => 'setSocketKeepAlive',
        'cache' => 'setCache',
        'node_cache_percentage' => 'setNodeCachePercentage',
        'prev_doc_cache_percentage' => 'setPrevDocCachePercentage',
        'children_cache_percentage' => 'setChildrenCachePercentage',
        'diff_cache_percentage' => 'setDiffCachePercentage',
        'cache_segment_count' => 'setCacheSegmentCount',
        'cache_stack_move_distance' => 'setCacheStackMoveDistance',
        'blob_cache_size' => 'setBlobCacheSize',
        'persistent_cache' => 'setPersistentCache',
        'journal_cache' => 'setJournalCache',
        'custom_blob_store' => 'setCustomBlobStore',
        'journal_gc_interval' => 'setJournalGcInterval',
        'journal_gc_max_age' => 'setJournalGcMaxAge',
        'prefetch_external_changes' => 'setPrefetchExternalChanges',
        'role' => 'setRole',
        'version_gc_max_age_in_secs' => 'setVersionGcMaxAgeInSecs',
        'version_gc_expression' => 'setVersionGcExpression',
        'version_gc_time_limit_in_secs' => 'setVersionGcTimeLimitInSecs',
        'blob_gc_max_age_in_secs' => 'setBlobGcMaxAgeInSecs',
        'blob_track_snapshot_interval_in_secs' => 'setBlobTrackSnapshotIntervalInSecs',
        'repository_home' => 'setRepositoryHome',
        'max_replication_lag_in_secs' => 'setMaxReplicationLagInSecs',
        'document_store_type' => 'setDocumentStoreType',
        'bundling_disabled' => 'setBundlingDisabled',
        'update_limit' => 'setUpdateLimit',
        'persistent_cache_includes' => 'setPersistentCacheIncludes',
        'lease_check_mode' => 'setLeaseCheckMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mongouri' => 'getMongouri',
        'db' => 'getDb',
        'socket_keep_alive' => 'getSocketKeepAlive',
        'cache' => 'getCache',
        'node_cache_percentage' => 'getNodeCachePercentage',
        'prev_doc_cache_percentage' => 'getPrevDocCachePercentage',
        'children_cache_percentage' => 'getChildrenCachePercentage',
        'diff_cache_percentage' => 'getDiffCachePercentage',
        'cache_segment_count' => 'getCacheSegmentCount',
        'cache_stack_move_distance' => 'getCacheStackMoveDistance',
        'blob_cache_size' => 'getBlobCacheSize',
        'persistent_cache' => 'getPersistentCache',
        'journal_cache' => 'getJournalCache',
        'custom_blob_store' => 'getCustomBlobStore',
        'journal_gc_interval' => 'getJournalGcInterval',
        'journal_gc_max_age' => 'getJournalGcMaxAge',
        'prefetch_external_changes' => 'getPrefetchExternalChanges',
        'role' => 'getRole',
        'version_gc_max_age_in_secs' => 'getVersionGcMaxAgeInSecs',
        'version_gc_expression' => 'getVersionGcExpression',
        'version_gc_time_limit_in_secs' => 'getVersionGcTimeLimitInSecs',
        'blob_gc_max_age_in_secs' => 'getBlobGcMaxAgeInSecs',
        'blob_track_snapshot_interval_in_secs' => 'getBlobTrackSnapshotIntervalInSecs',
        'repository_home' => 'getRepositoryHome',
        'max_replication_lag_in_secs' => 'getMaxReplicationLagInSecs',
        'document_store_type' => 'getDocumentStoreType',
        'bundling_disabled' => 'getBundlingDisabled',
        'update_limit' => 'getUpdateLimit',
        'persistent_cache_includes' => 'getPersistentCacheIncludes',
        'lease_check_mode' => 'getLeaseCheckMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mongouri'] = isset($data['mongouri']) ? $data['mongouri'] : null;
        $this->container['db'] = isset($data['db']) ? $data['db'] : null;
        $this->container['socket_keep_alive'] = isset($data['socket_keep_alive']) ? $data['socket_keep_alive'] : null;
        $this->container['cache'] = isset($data['cache']) ? $data['cache'] : null;
        $this->container['node_cache_percentage'] = isset($data['node_cache_percentage']) ? $data['node_cache_percentage'] : null;
        $this->container['prev_doc_cache_percentage'] = isset($data['prev_doc_cache_percentage']) ? $data['prev_doc_cache_percentage'] : null;
        $this->container['children_cache_percentage'] = isset($data['children_cache_percentage']) ? $data['children_cache_percentage'] : null;
        $this->container['diff_cache_percentage'] = isset($data['diff_cache_percentage']) ? $data['diff_cache_percentage'] : null;
        $this->container['cache_segment_count'] = isset($data['cache_segment_count']) ? $data['cache_segment_count'] : null;
        $this->container['cache_stack_move_distance'] = isset($data['cache_stack_move_distance']) ? $data['cache_stack_move_distance'] : null;
        $this->container['blob_cache_size'] = isset($data['blob_cache_size']) ? $data['blob_cache_size'] : null;
        $this->container['persistent_cache'] = isset($data['persistent_cache']) ? $data['persistent_cache'] : null;
        $this->container['journal_cache'] = isset($data['journal_cache']) ? $data['journal_cache'] : null;
        $this->container['custom_blob_store'] = isset($data['custom_blob_store']) ? $data['custom_blob_store'] : null;
        $this->container['journal_gc_interval'] = isset($data['journal_gc_interval']) ? $data['journal_gc_interval'] : null;
        $this->container['journal_gc_max_age'] = isset($data['journal_gc_max_age']) ? $data['journal_gc_max_age'] : null;
        $this->container['prefetch_external_changes'] = isset($data['prefetch_external_changes']) ? $data['prefetch_external_changes'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['version_gc_max_age_in_secs'] = isset($data['version_gc_max_age_in_secs']) ? $data['version_gc_max_age_in_secs'] : null;
        $this->container['version_gc_expression'] = isset($data['version_gc_expression']) ? $data['version_gc_expression'] : null;
        $this->container['version_gc_time_limit_in_secs'] = isset($data['version_gc_time_limit_in_secs']) ? $data['version_gc_time_limit_in_secs'] : null;
        $this->container['blob_gc_max_age_in_secs'] = isset($data['blob_gc_max_age_in_secs']) ? $data['blob_gc_max_age_in_secs'] : null;
        $this->container['blob_track_snapshot_interval_in_secs'] = isset($data['blob_track_snapshot_interval_in_secs']) ? $data['blob_track_snapshot_interval_in_secs'] : null;
        $this->container['repository_home'] = isset($data['repository_home']) ? $data['repository_home'] : null;
        $this->container['max_replication_lag_in_secs'] = isset($data['max_replication_lag_in_secs']) ? $data['max_replication_lag_in_secs'] : null;
        $this->container['document_store_type'] = isset($data['document_store_type']) ? $data['document_store_type'] : null;
        $this->container['bundling_disabled'] = isset($data['bundling_disabled']) ? $data['bundling_disabled'] : null;
        $this->container['update_limit'] = isset($data['update_limit']) ? $data['update_limit'] : null;
        $this->container['persistent_cache_includes'] = isset($data['persistent_cache_includes']) ? $data['persistent_cache_includes'] : null;
        $this->container['lease_check_mode'] = isset($data['lease_check_mode']) ? $data['lease_check_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mongouri
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getMongouri()
    {
        return $this->container['mongouri'];
    }

    /**
     * Sets mongouri
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $mongouri mongouri
     *
     * @return $this
     */
    public function setMongouri($mongouri)
    {
        $this->container['mongouri'] = $mongouri;

        return $this;
    }

    /**
     * Gets db
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getDb()
    {
        return $this->container['db'];
    }

    /**
     * Sets db
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $db db
     *
     * @return $this
     */
    public function setDb($db)
    {
        $this->container['db'] = $db;

        return $this;
    }

    /**
     * Gets socket_keep_alive
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getSocketKeepAlive()
    {
        return $this->container['socket_keep_alive'];
    }

    /**
     * Sets socket_keep_alive
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $socket_keep_alive socket_keep_alive
     *
     * @return $this
     */
    public function setSocketKeepAlive($socket_keep_alive)
    {
        $this->container['socket_keep_alive'] = $socket_keep_alive;

        return $this;
    }

    /**
     * Gets cache
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getCache()
    {
        return $this->container['cache'];
    }

    /**
     * Sets cache
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cache cache
     *
     * @return $this
     */
    public function setCache($cache)
    {
        $this->container['cache'] = $cache;

        return $this;
    }

    /**
     * Gets node_cache_percentage
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getNodeCachePercentage()
    {
        return $this->container['node_cache_percentage'];
    }

    /**
     * Sets node_cache_percentage
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $node_cache_percentage node_cache_percentage
     *
     * @return $this
     */
    public function setNodeCachePercentage($node_cache_percentage)
    {
        $this->container['node_cache_percentage'] = $node_cache_percentage;

        return $this;
    }

    /**
     * Gets prev_doc_cache_percentage
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getPrevDocCachePercentage()
    {
        return $this->container['prev_doc_cache_percentage'];
    }

    /**
     * Sets prev_doc_cache_percentage
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $prev_doc_cache_percentage prev_doc_cache_percentage
     *
     * @return $this
     */
    public function setPrevDocCachePercentage($prev_doc_cache_percentage)
    {
        $this->container['prev_doc_cache_percentage'] = $prev_doc_cache_percentage;

        return $this;
    }

    /**
     * Gets children_cache_percentage
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getChildrenCachePercentage()
    {
        return $this->container['children_cache_percentage'];
    }

    /**
     * Sets children_cache_percentage
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $children_cache_percentage children_cache_percentage
     *
     * @return $this
     */
    public function setChildrenCachePercentage($children_cache_percentage)
    {
        $this->container['children_cache_percentage'] = $children_cache_percentage;

        return $this;
    }

    /**
     * Gets diff_cache_percentage
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getDiffCachePercentage()
    {
        return $this->container['diff_cache_percentage'];
    }

    /**
     * Sets diff_cache_percentage
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $diff_cache_percentage diff_cache_percentage
     *
     * @return $this
     */
    public function setDiffCachePercentage($diff_cache_percentage)
    {
        $this->container['diff_cache_percentage'] = $diff_cache_percentage;

        return $this;
    }

    /**
     * Gets cache_segment_count
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getCacheSegmentCount()
    {
        return $this->container['cache_segment_count'];
    }

    /**
     * Sets cache_segment_count
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cache_segment_count cache_segment_count
     *
     * @return $this
     */
    public function setCacheSegmentCount($cache_segment_count)
    {
        $this->container['cache_segment_count'] = $cache_segment_count;

        return $this;
    }

    /**
     * Gets cache_stack_move_distance
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getCacheStackMoveDistance()
    {
        return $this->container['cache_stack_move_distance'];
    }

    /**
     * Sets cache_stack_move_distance
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $cache_stack_move_distance cache_stack_move_distance
     *
     * @return $this
     */
    public function setCacheStackMoveDistance($cache_stack_move_distance)
    {
        $this->container['cache_stack_move_distance'] = $cache_stack_move_distance;

        return $this;
    }

    /**
     * Gets blob_cache_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getBlobCacheSize()
    {
        return $this->container['blob_cache_size'];
    }

    /**
     * Sets blob_cache_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $blob_cache_size blob_cache_size
     *
     * @return $this
     */
    public function setBlobCacheSize($blob_cache_size)
    {
        $this->container['blob_cache_size'] = $blob_cache_size;

        return $this;
    }

    /**
     * Gets persistent_cache
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getPersistentCache()
    {
        return $this->container['persistent_cache'];
    }

    /**
     * Sets persistent_cache
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $persistent_cache persistent_cache
     *
     * @return $this
     */
    public function setPersistentCache($persistent_cache)
    {
        $this->container['persistent_cache'] = $persistent_cache;

        return $this;
    }

    /**
     * Gets journal_cache
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getJournalCache()
    {
        return $this->container['journal_cache'];
    }

    /**
     * Sets journal_cache
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $journal_cache journal_cache
     *
     * @return $this
     */
    public function setJournalCache($journal_cache)
    {
        $this->container['journal_cache'] = $journal_cache;

        return $this;
    }

    /**
     * Gets custom_blob_store
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getCustomBlobStore()
    {
        return $this->container['custom_blob_store'];
    }

    /**
     * Sets custom_blob_store
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $custom_blob_store custom_blob_store
     *
     * @return $this
     */
    public function setCustomBlobStore($custom_blob_store)
    {
        $this->container['custom_blob_store'] = $custom_blob_store;

        return $this;
    }

    /**
     * Gets journal_gc_interval
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getJournalGcInterval()
    {
        return $this->container['journal_gc_interval'];
    }

    /**
     * Sets journal_gc_interval
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $journal_gc_interval journal_gc_interval
     *
     * @return $this
     */
    public function setJournalGcInterval($journal_gc_interval)
    {
        $this->container['journal_gc_interval'] = $journal_gc_interval;

        return $this;
    }

    /**
     * Gets journal_gc_max_age
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getJournalGcMaxAge()
    {
        return $this->container['journal_gc_max_age'];
    }

    /**
     * Sets journal_gc_max_age
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $journal_gc_max_age journal_gc_max_age
     *
     * @return $this
     */
    public function setJournalGcMaxAge($journal_gc_max_age)
    {
        $this->container['journal_gc_max_age'] = $journal_gc_max_age;

        return $this;
    }

    /**
     * Gets prefetch_external_changes
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getPrefetchExternalChanges()
    {
        return $this->container['prefetch_external_changes'];
    }

    /**
     * Sets prefetch_external_changes
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $prefetch_external_changes prefetch_external_changes
     *
     * @return $this
     */
    public function setPrefetchExternalChanges($prefetch_external_changes)
    {
        $this->container['prefetch_external_changes'] = $prefetch_external_changes;

        return $this;
    }

    /**
     * Gets role
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $role role
     *
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets version_gc_max_age_in_secs
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getVersionGcMaxAgeInSecs()
    {
        return $this->container['version_gc_max_age_in_secs'];
    }

    /**
     * Sets version_gc_max_age_in_secs
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $version_gc_max_age_in_secs version_gc_max_age_in_secs
     *
     * @return $this
     */
    public function setVersionGcMaxAgeInSecs($version_gc_max_age_in_secs)
    {
        $this->container['version_gc_max_age_in_secs'] = $version_gc_max_age_in_secs;

        return $this;
    }

    /**
     * Gets version_gc_expression
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getVersionGcExpression()
    {
        return $this->container['version_gc_expression'];
    }

    /**
     * Sets version_gc_expression
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $version_gc_expression version_gc_expression
     *
     * @return $this
     */
    public function setVersionGcExpression($version_gc_expression)
    {
        $this->container['version_gc_expression'] = $version_gc_expression;

        return $this;
    }

    /**
     * Gets version_gc_time_limit_in_secs
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getVersionGcTimeLimitInSecs()
    {
        return $this->container['version_gc_time_limit_in_secs'];
    }

    /**
     * Sets version_gc_time_limit_in_secs
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $version_gc_time_limit_in_secs version_gc_time_limit_in_secs
     *
     * @return $this
     */
    public function setVersionGcTimeLimitInSecs($version_gc_time_limit_in_secs)
    {
        $this->container['version_gc_time_limit_in_secs'] = $version_gc_time_limit_in_secs;

        return $this;
    }

    /**
     * Gets blob_gc_max_age_in_secs
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getBlobGcMaxAgeInSecs()
    {
        return $this->container['blob_gc_max_age_in_secs'];
    }

    /**
     * Sets blob_gc_max_age_in_secs
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $blob_gc_max_age_in_secs blob_gc_max_age_in_secs
     *
     * @return $this
     */
    public function setBlobGcMaxAgeInSecs($blob_gc_max_age_in_secs)
    {
        $this->container['blob_gc_max_age_in_secs'] = $blob_gc_max_age_in_secs;

        return $this;
    }

    /**
     * Gets blob_track_snapshot_interval_in_secs
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getBlobTrackSnapshotIntervalInSecs()
    {
        return $this->container['blob_track_snapshot_interval_in_secs'];
    }

    /**
     * Sets blob_track_snapshot_interval_in_secs
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $blob_track_snapshot_interval_in_secs blob_track_snapshot_interval_in_secs
     *
     * @return $this
     */
    public function setBlobTrackSnapshotIntervalInSecs($blob_track_snapshot_interval_in_secs)
    {
        $this->container['blob_track_snapshot_interval_in_secs'] = $blob_track_snapshot_interval_in_secs;

        return $this;
    }

    /**
     * Gets repository_home
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getRepositoryHome()
    {
        return $this->container['repository_home'];
    }

    /**
     * Sets repository_home
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $repository_home repository_home
     *
     * @return $this
     */
    public function setRepositoryHome($repository_home)
    {
        $this->container['repository_home'] = $repository_home;

        return $this;
    }

    /**
     * Gets max_replication_lag_in_secs
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMaxReplicationLagInSecs()
    {
        return $this->container['max_replication_lag_in_secs'];
    }

    /**
     * Sets max_replication_lag_in_secs
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $max_replication_lag_in_secs max_replication_lag_in_secs
     *
     * @return $this
     */
    public function setMaxReplicationLagInSecs($max_replication_lag_in_secs)
    {
        $this->container['max_replication_lag_in_secs'] = $max_replication_lag_in_secs;

        return $this;
    }

    /**
     * Gets document_store_type
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getDocumentStoreType()
    {
        return $this->container['document_store_type'];
    }

    /**
     * Sets document_store_type
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $document_store_type document_store_type
     *
     * @return $this
     */
    public function setDocumentStoreType($document_store_type)
    {
        $this->container['document_store_type'] = $document_store_type;

        return $this;
    }

    /**
     * Gets bundling_disabled
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getBundlingDisabled()
    {
        return $this->container['bundling_disabled'];
    }

    /**
     * Sets bundling_disabled
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $bundling_disabled bundling_disabled
     *
     * @return $this
     */
    public function setBundlingDisabled($bundling_disabled)
    {
        $this->container['bundling_disabled'] = $bundling_disabled;

        return $this;
    }

    /**
     * Gets update_limit
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getUpdateLimit()
    {
        return $this->container['update_limit'];
    }

    /**
     * Sets update_limit
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $update_limit update_limit
     *
     * @return $this
     */
    public function setUpdateLimit($update_limit)
    {
        $this->container['update_limit'] = $update_limit;

        return $this;
    }

    /**
     * Gets persistent_cache_includes
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getPersistentCacheIncludes()
    {
        return $this->container['persistent_cache_includes'];
    }

    /**
     * Sets persistent_cache_includes
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $persistent_cache_includes persistent_cache_includes
     *
     * @return $this
     */
    public function setPersistentCacheIncludes($persistent_cache_includes)
    {
        $this->container['persistent_cache_includes'] = $persistent_cache_includes;

        return $this;
    }

    /**
     * Gets lease_check_mode
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getLeaseCheckMode()
    {
        return $this->container['lease_check_mode'];
    }

    /**
     * Sets lease_check_mode
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $lease_check_mode lease_check_mode
     *
     * @return $this
     */
    public function setLeaseCheckMode($lease_check_mode)
    {
        $this->container['lease_check_mode'] = $lease_check_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


