/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASOrgApacheHttpProxyconfiguratorPro
 */
public class OASOrgApacheHttpProxyconfiguratorPro implements OAS.MappedProperties {
    /**
     * Get proxyEnabled
     * @return proxyEnabled
     */
    public OASConfigNodePropertyBoolean proxyEnabled { get; set; }

    /**
     * Get proxyHost
     * @return proxyHost
     */
    public OASConfigNodePropertyString proxyHost { get; set; }

    /**
     * Get proxyPort
     * @return proxyPort
     */
    public OASConfigNodePropertyInteger proxyPort { get; set; }

    /**
     * Get proxyUser
     * @return proxyUser
     */
    public OASConfigNodePropertyString proxyUser { get; set; }

    /**
     * Get proxyPassword
     * @return proxyPassword
     */
    public OASConfigNodePropertyString proxyPassword { get; set; }

    /**
     * Get proxyExceptions
     * @return proxyExceptions
     */
    public OASConfigNodePropertyArray proxyExceptions { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'proxy.enabled' => 'proxyEnabled',
        'proxy.host' => 'proxyHost',
        'proxy.port' => 'proxyPort',
        'proxy.user' => 'proxyUser',
        'proxy.password' => 'proxyPassword',
        'proxy.exceptions' => 'proxyExceptions'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASOrgApacheHttpProxyconfiguratorPro getExample() {
        OASOrgApacheHttpProxyconfiguratorPro orgApacheHttpProxyconfiguratorProperties = new OASOrgApacheHttpProxyconfiguratorPro();
          orgApacheHttpProxyconfiguratorProperties.proxyEnabled = OASConfigNodePropertyBoolean.getExample();
          orgApacheHttpProxyconfiguratorProperties.proxyHost = OASConfigNodePropertyString.getExample();
          orgApacheHttpProxyconfiguratorProperties.proxyPort = OASConfigNodePropertyInteger.getExample();
          orgApacheHttpProxyconfiguratorProperties.proxyUser = OASConfigNodePropertyString.getExample();
          orgApacheHttpProxyconfiguratorProperties.proxyPassword = OASConfigNodePropertyString.getExample();
          orgApacheHttpProxyconfiguratorProperties.proxyExceptions = OASConfigNodePropertyArray.getExample();
        return orgApacheHttpProxyconfiguratorProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOrgApacheHttpProxyconfiguratorPro) {           
            OASOrgApacheHttpProxyconfiguratorPro orgApacheHttpProxyconfiguratorProperties = (OASOrgApacheHttpProxyconfiguratorPro) obj;
            return this.proxyEnabled == orgApacheHttpProxyconfiguratorProperties.proxyEnabled
                && this.proxyHost == orgApacheHttpProxyconfiguratorProperties.proxyHost
                && this.proxyPort == orgApacheHttpProxyconfiguratorProperties.proxyPort
                && this.proxyUser == orgApacheHttpProxyconfiguratorProperties.proxyUser
                && this.proxyPassword == orgApacheHttpProxyconfiguratorProperties.proxyPassword
                && this.proxyExceptions == orgApacheHttpProxyconfiguratorProperties.proxyExceptions;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (proxyEnabled == null ? 0 : System.hashCode(proxyEnabled));
        hashCode = (17 * hashCode) + (proxyHost == null ? 0 : System.hashCode(proxyHost));
        hashCode = (17 * hashCode) + (proxyPort == null ? 0 : System.hashCode(proxyPort));
        hashCode = (17 * hashCode) + (proxyUser == null ? 0 : System.hashCode(proxyUser));
        hashCode = (17 * hashCode) + (proxyPassword == null ? 0 : System.hashCode(proxyPassword));
        hashCode = (17 * hashCode) + (proxyExceptions == null ? 0 : System.hashCode(proxyExceptions));
        return hashCode;
    }
}

