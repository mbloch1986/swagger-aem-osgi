/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamCoreImplCacheCQBufferedImageCacheProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::OAIComDayCqDamCoreImplCacheCQBufferedImageCacheProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::OAIComDayCqDamCoreImplCacheCQBufferedImageCacheProperties() {
    this->init();
}

OAIComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::~OAIComDayCqDamCoreImplCacheCQBufferedImageCacheProperties() {
    
}

void
OAIComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::init() {
    m_cq_dam_image_cache_max_memory_isSet = false;
    m_cq_dam_image_cache_max_age_isSet = false;
    m_cq_dam_image_cache_max_dimension_isSet = false;
}

void
OAIComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(cq_dam_image_cache_max_memory, json[QString("cq.dam.image.cache.max.memory")]);
    
    ::OpenAPI::fromJsonValue(cq_dam_image_cache_max_age, json[QString("cq.dam.image.cache.max.age")]);
    
    ::OpenAPI::fromJsonValue(cq_dam_image_cache_max_dimension, json[QString("cq.dam.image.cache.max.dimension")]);
    
}

QString
OAIComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::asJsonObject() const {
    QJsonObject obj;
	if(cq_dam_image_cache_max_memory.isSet()){
        obj.insert(QString("cq.dam.image.cache.max.memory"), ::OpenAPI::toJsonValue(cq_dam_image_cache_max_memory));
    }
	if(cq_dam_image_cache_max_age.isSet()){
        obj.insert(QString("cq.dam.image.cache.max.age"), ::OpenAPI::toJsonValue(cq_dam_image_cache_max_age));
    }
	if(cq_dam_image_cache_max_dimension.isSet()){
        obj.insert(QString("cq.dam.image.cache.max.dimension"), ::OpenAPI::toJsonValue(cq_dam_image_cache_max_dimension));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::getCqDamImageCacheMaxMemory() const {
    return cq_dam_image_cache_max_memory;
}
void
OAIComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::setCqDamImageCacheMaxMemory(const OAIConfigNodePropertyInteger &cq_dam_image_cache_max_memory) {
    this->cq_dam_image_cache_max_memory = cq_dam_image_cache_max_memory;
    this->m_cq_dam_image_cache_max_memory_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::getCqDamImageCacheMaxAge() const {
    return cq_dam_image_cache_max_age;
}
void
OAIComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::setCqDamImageCacheMaxAge(const OAIConfigNodePropertyInteger &cq_dam_image_cache_max_age) {
    this->cq_dam_image_cache_max_age = cq_dam_image_cache_max_age;
    this->m_cq_dam_image_cache_max_age_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::getCqDamImageCacheMaxDimension() const {
    return cq_dam_image_cache_max_dimension;
}
void
OAIComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::setCqDamImageCacheMaxDimension(const OAIConfigNodePropertyString &cq_dam_image_cache_max_dimension) {
    this->cq_dam_image_cache_max_dimension = cq_dam_image_cache_max_dimension;
    this->m_cq_dam_image_cache_max_dimension_isSet = true;
}


bool
OAIComDayCqDamCoreImplCacheCQBufferedImageCacheProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(cq_dam_image_cache_max_memory.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_dam_image_cache_max_age.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_dam_image_cache_max_dimension.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

