/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyFloat.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties
    : public ModelBase
{
public:
    ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
    virtual ~ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getServiceRanking() const;
    bool serviceRankingIsSet() const;
    void unsetService_ranking();
    void setServiceRanking(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getGlobalSize() const;
    bool globalSizeIsSet() const;
    void unsetGlobal_size();
    void setGlobalSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxDiskUsage() const;
    bool maxDiskUsageIsSet() const;
    void unsetMax_disk_usage();
    void setMaxDiskUsage(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getPersistenceEnabled() const;
    bool persistenceEnabledIsSet() const;
    void unsetPersistence_enabled();
    void setPersistenceEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getThreadPoolMaxSize() const;
    bool threadPoolMaxSizeIsSet() const;
    void unsetThread_pool_max_size();
    void setThreadPoolMaxSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getScheduledThreadPoolMaxSize() const;
    bool scheduledThreadPoolMaxSizeIsSet() const;
    void unsetScheduled_thread_pool_max_size();
    void setScheduledThreadPoolMaxSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getGracefulShutdownTimeout() const;
    bool gracefulShutdownTimeoutIsSet() const;
    void unsetGraceful_shutdown_timeout();
    void setGracefulShutdownTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getQueues() const;
    bool queuesIsSet() const;
    void unsetQueues();
    void setQueues(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getTopics() const;
    bool topicsIsSet() const;
    void unsetTopics();
    void setTopics(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getAddressesMaxDeliveryAttempts() const;
    bool addressesMaxDeliveryAttemptsIsSet() const;
    void unsetAddresses_max_delivery_attempts();
    void setAddressesMaxDeliveryAttempts(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getAddressesExpiryDelay() const;
    bool addressesExpiryDelayIsSet() const;
    void unsetAddresses_expiry_delay();
    void setAddressesExpiryDelay(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getAddressesAddressFullMessagePolicy() const;
    bool addressesAddressFullMessagePolicyIsSet() const;
    void unsetAddresses_address_full_message_policy();
    void setAddressesAddressFullMessagePolicy(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getAddressesMaxSizeBytes() const;
    bool addressesMaxSizeBytesIsSet() const;
    void unsetAddresses_max_size_bytes();
    void setAddressesMaxSizeBytes(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getAddressesPageSizeBytes() const;
    bool addressesPageSizeBytesIsSet() const;
    void unsetAddresses_page_size_bytes();
    void setAddressesPageSizeBytes(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getAddressesPageCacheMaxSize() const;
    bool addressesPageCacheMaxSizeIsSet() const;
    void unsetAddresses_page_cache_max_size();
    void setAddressesPageCacheMaxSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getClusterUser() const;
    bool clusterUserIsSet() const;
    void unsetCluster_user();
    void setClusterUser(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getClusterPassword() const;
    bool clusterPasswordIsSet() const;
    void unsetCluster_password();
    void setClusterPassword(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterCallTimeout() const;
    bool clusterCallTimeoutIsSet() const;
    void unsetCluster_call_timeout();
    void setClusterCallTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterCallFailoverTimeout() const;
    bool clusterCallFailoverTimeoutIsSet() const;
    void unsetCluster_call_failover_timeout();
    void setClusterCallFailoverTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterClientFailureCheckPeriod() const;
    bool clusterClientFailureCheckPeriodIsSet() const;
    void unsetCluster_client_failure_check_period();
    void setClusterClientFailureCheckPeriod(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterNotificationAttempts() const;
    bool clusterNotificationAttemptsIsSet() const;
    void unsetCluster_notification_attempts();
    void setClusterNotificationAttempts(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterNotificationInterval() const;
    bool clusterNotificationIntervalIsSet() const;
    void unsetCluster_notification_interval();
    void setClusterNotificationInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getIdCacheSize() const;
    bool idCacheSizeIsSet() const;
    void unsetId_cache_size();
    void setIdCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterConfirmationWindowSize() const;
    bool clusterConfirmationWindowSizeIsSet() const;
    void unsetCluster_confirmation_window_size();
    void setClusterConfirmationWindowSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterConnectionTtl() const;
    bool clusterConnectionTtlIsSet() const;
    void unsetCluster_connection_ttl();
    void setClusterConnectionTtl(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getClusterDuplicateDetection() const;
    bool clusterDuplicateDetectionIsSet() const;
    void unsetCluster_duplicate_detection();
    void setClusterDuplicateDetection(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterInitialConnectAttempts() const;
    bool clusterInitialConnectAttemptsIsSet() const;
    void unsetCluster_initial_connect_attempts();
    void setClusterInitialConnectAttempts(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterMaxRetryInterval() const;
    bool clusterMaxRetryIntervalIsSet() const;
    void unsetCluster_max_retry_interval();
    void setClusterMaxRetryInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterMinLargeMessageSize() const;
    bool clusterMinLargeMessageSizeIsSet() const;
    void unsetCluster_min_large_message_size();
    void setClusterMinLargeMessageSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterProducerWindowSize() const;
    bool clusterProducerWindowSizeIsSet() const;
    void unsetCluster_producer_window_size();
    void setClusterProducerWindowSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterReconnectAttempts() const;
    bool clusterReconnectAttemptsIsSet() const;
    void unsetCluster_reconnect_attempts();
    void setClusterReconnectAttempts(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterRetryInterval() const;
    bool clusterRetryIntervalIsSet() const;
    void unsetCluster_retry_interval();
    void setClusterRetryInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyFloat> getClusterRetryIntervalMultiplier() const;
    bool clusterRetryIntervalMultiplierIsSet() const;
    void unsetCluster_retry_interval_multiplier();
    void setClusterRetryIntervalMultiplier(std::shared_ptr<ConfigNodePropertyFloat> value);

protected:
    std::shared_ptr<ConfigNodePropertyInteger> m_Service_ranking;
    bool m_Service_rankingIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Global_size;
    bool m_Global_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Max_disk_usage;
    bool m_Max_disk_usageIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Persistence_enabled;
    bool m_Persistence_enabledIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Thread_pool_max_size;
    bool m_Thread_pool_max_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Scheduled_thread_pool_max_size;
    bool m_Scheduled_thread_pool_max_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Graceful_shutdown_timeout;
    bool m_Graceful_shutdown_timeoutIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Queues;
    bool m_QueuesIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Topics;
    bool m_TopicsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Addresses_max_delivery_attempts;
    bool m_Addresses_max_delivery_attemptsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Addresses_expiry_delay;
    bool m_Addresses_expiry_delayIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Addresses_address_full_message_policy;
    bool m_Addresses_address_full_message_policyIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Addresses_max_size_bytes;
    bool m_Addresses_max_size_bytesIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Addresses_page_size_bytes;
    bool m_Addresses_page_size_bytesIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Addresses_page_cache_max_size;
    bool m_Addresses_page_cache_max_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Cluster_user;
    bool m_Cluster_userIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Cluster_password;
    bool m_Cluster_passwordIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_call_timeout;
    bool m_Cluster_call_timeoutIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_call_failover_timeout;
    bool m_Cluster_call_failover_timeoutIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_client_failure_check_period;
    bool m_Cluster_client_failure_check_periodIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_notification_attempts;
    bool m_Cluster_notification_attemptsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_notification_interval;
    bool m_Cluster_notification_intervalIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Id_cache_size;
    bool m_Id_cache_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_confirmation_window_size;
    bool m_Cluster_confirmation_window_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_connection_ttl;
    bool m_Cluster_connection_ttlIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Cluster_duplicate_detection;
    bool m_Cluster_duplicate_detectionIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_initial_connect_attempts;
    bool m_Cluster_initial_connect_attemptsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_max_retry_interval;
    bool m_Cluster_max_retry_intervalIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_min_large_message_size;
    bool m_Cluster_min_large_message_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_producer_window_size;
    bool m_Cluster_producer_window_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_reconnect_attempts;
    bool m_Cluster_reconnect_attemptsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_retry_interval;
    bool m_Cluster_retry_intervalIsSet;
    std::shared_ptr<ConfigNodePropertyFloat> m_Cluster_retry_interval_multiplier;
    bool m_Cluster_retry_interval_multiplierIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties_H_ */
