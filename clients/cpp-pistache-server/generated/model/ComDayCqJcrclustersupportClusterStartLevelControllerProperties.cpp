/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqJcrclustersupportClusterStartLevelControllerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqJcrclustersupportClusterStartLevelControllerProperties::ComDayCqJcrclustersupportClusterStartLevelControllerProperties()
{
    m_Cluster_level_enableIsSet = false;
    m_Cluster_master_levelIsSet = false;
    m_Cluster_slave_levelIsSet = false;
    
}

ComDayCqJcrclustersupportClusterStartLevelControllerProperties::~ComDayCqJcrclustersupportClusterStartLevelControllerProperties()
{
}

void ComDayCqJcrclustersupportClusterStartLevelControllerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqJcrclustersupportClusterStartLevelControllerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Cluster_level_enableIsSet)
    {
        val["cluster.level.enable"] = ModelBase::toJson(m_Cluster_level_enable);
    }
    if(m_Cluster_master_levelIsSet)
    {
        val["cluster.master.level"] = ModelBase::toJson(m_Cluster_master_level);
    }
    if(m_Cluster_slave_levelIsSet)
    {
        val["cluster.slave.level"] = ModelBase::toJson(m_Cluster_slave_level);
    }
    

    return val;
}

void ComDayCqJcrclustersupportClusterStartLevelControllerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("cluster.level.enable") != val.end())
    {
        if(!val["cluster.level.enable"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["cluster.level.enable"]);
            setClusterLevelEnable( newItem );
        }
        
    }
    if(val.find("cluster.master.level") != val.end())
    {
        if(!val["cluster.master.level"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cluster.master.level"]);
            setClusterMasterLevel( newItem );
        }
        
    }
    if(val.find("cluster.slave.level") != val.end())
    {
        if(!val["cluster.slave.level"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cluster.slave.level"]);
            setClusterSlaveLevel( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComDayCqJcrclustersupportClusterStartLevelControllerProperties::getClusterLevelEnable() const
{
    return m_Cluster_level_enable;
}
void ComDayCqJcrclustersupportClusterStartLevelControllerProperties::setClusterLevelEnable(ConfigNodePropertyBoolean const& value)
{
    m_Cluster_level_enable = value;
    m_Cluster_level_enableIsSet = true;
}
bool ComDayCqJcrclustersupportClusterStartLevelControllerProperties::clusterLevelEnableIsSet() const
{
    return m_Cluster_level_enableIsSet;
}
void ComDayCqJcrclustersupportClusterStartLevelControllerProperties::unsetCluster_level_enable()
{
    m_Cluster_level_enableIsSet = false;
}
ConfigNodePropertyInteger ComDayCqJcrclustersupportClusterStartLevelControllerProperties::getClusterMasterLevel() const
{
    return m_Cluster_master_level;
}
void ComDayCqJcrclustersupportClusterStartLevelControllerProperties::setClusterMasterLevel(ConfigNodePropertyInteger const& value)
{
    m_Cluster_master_level = value;
    m_Cluster_master_levelIsSet = true;
}
bool ComDayCqJcrclustersupportClusterStartLevelControllerProperties::clusterMasterLevelIsSet() const
{
    return m_Cluster_master_levelIsSet;
}
void ComDayCqJcrclustersupportClusterStartLevelControllerProperties::unsetCluster_master_level()
{
    m_Cluster_master_levelIsSet = false;
}
ConfigNodePropertyInteger ComDayCqJcrclustersupportClusterStartLevelControllerProperties::getClusterSlaveLevel() const
{
    return m_Cluster_slave_level;
}
void ComDayCqJcrclustersupportClusterStartLevelControllerProperties::setClusterSlaveLevel(ConfigNodePropertyInteger const& value)
{
    m_Cluster_slave_level = value;
    m_Cluster_slave_levelIsSet = true;
}
bool ComDayCqJcrclustersupportClusterStartLevelControllerProperties::clusterSlaveLevelIsSet() const
{
    return m_Cluster_slave_levelIsSet;
}
void ComDayCqJcrclustersupportClusterStartLevelControllerProperties::unsetCluster_slave_level()
{
    m_Cluster_slave_levelIsSet = false;
}

}
}
}
}

