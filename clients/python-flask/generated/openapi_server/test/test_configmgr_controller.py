# coding: utf-8

from __future__ import absolute_import

from flask import json
from six import BytesIO

from openapi_server.models.adaptive_form_and_interactive_communication_web_channel_configuration_info import AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo  # noqa: E501
from openapi_server.models.adaptive_form_and_interactive_communication_web_channel_theme_configur_info import AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo  # noqa: E501
from openapi_server.models.analytics_component_query_cache_service_info import AnalyticsComponentQueryCacheServiceInfo  # noqa: E501
from openapi_server.models.apache_sling_health_check_result_html_serializer_info import ApacheSlingHealthCheckResultHTMLSerializerInfo  # noqa: E501
from openapi_server.models.com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration_info import ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo  # noqa: E501
from openapi_server.models.com_adobe_aem_transaction_core_impl_transaction_recorder_info import ComAdobeAemTransactionCoreImplTransactionRecorderInfo  # noqa: E501
from openapi_server.models.com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc_info import ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo  # noqa: E501
from openapi_server.models.com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc_info import ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo  # noqa: E501
from openapi_server.models.com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl_info import ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo  # noqa: E501
from openapi_server.models.com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl_info import ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_account_api_account_management_service_info import ComAdobeCqAccountApiAccountManagementServiceInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_account_impl_account_management_servlet_info import ComAdobeCqAccountImplAccountManagementServletInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_address_impl_location_location_list_servlet_info import ComAdobeCqAddressImplLocationLocationListServletInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_audit_purge_dam_info import ComAdobeCqAuditPurgeDamInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_audit_purge_pages_info import ComAdobeCqAuditPurgePagesInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_audit_purge_replication_info import ComAdobeCqAuditPurgeReplicationInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter_info import ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl_info import ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_cdn_rewriter_impl_cdn_rewriter_info import ComAdobeCqCdnRewriterImplCDNRewriterInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle_info import ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_commerce_impl_asset_dynamic_image_handler_info import ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl_info import ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_commerce_impl_asset_static_image_handler_info import ComAdobeCqCommerceImplAssetStaticImageHandlerInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_commerce_impl_asset_video_handler_info import ComAdobeCqCommerceImplAssetVideoHandlerInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_commerce_impl_promotion_promotion_manager_impl_info import ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl_info import ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_commerce_pim_impl_page_event_listener_info import ComAdobeCqCommercePimImplPageEventListenerInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl_info import ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_contentinsight_impl_reporting_services_settings_provider_info import ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet_info import ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle_info import ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_dam_cfm_impl_component_component_config_impl_info import ComAdobeCqDamCfmImplComponentComponentConfigImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_dam_cfm_impl_conf_feature_config_impl_info import ComAdobeCqDamCfmImplConfFeatureConfigImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor_info import ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter_info import ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter_info import ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl_info import ComAdobeCqDamDmProcessImagePTiffManagerImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker_info import ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl_info import ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl_info import ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_dam_processor_nui_impl_nui_asset_processor_info import ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_dam_s7imaging_impl_is_image_server_component_info import ComAdobeCqDamS7imagingImplIsImageServerComponentInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet_info import ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_dam_webdav_impl_io_asset_io_handler_info import ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job_info import ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_dam_webdav_impl_io_special_files_handler_info import ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_deserfw_impl_deserialization_firewall_impl_info import ComAdobeCqDeserfwImplDeserializationFirewallImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_dtm_impl_service_dtm_web_service_impl_info import ComAdobeCqDtmImplServiceDTMWebServiceImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet_info import ComAdobeCqDtmImplServletsDTMDeployHookServletInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_dtm_reactor_impl_service_web_service_impl_info import ComAdobeCqDtmReactorImplServiceWebServiceImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_experiencelog_impl_experience_log_config_servlet_info import ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_hc_content_packages_health_check_info import ComAdobeCqHcContentPackagesHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_history_impl_history_request_filter_info import ComAdobeCqHistoryImplHistoryRequestFilterInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_history_impl_history_service_impl_info import ComAdobeCqHistoryImplHistoryServiceImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_inbox_impl_typeprovider_item_type_provider_info import ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_projects_impl_servlet_project_image_servlet_info import ComAdobeCqProjectsImplServletProjectImageServletInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_projects_purge_scheduler_info import ComAdobeCqProjectsPurgeSchedulerInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl_info import ComAdobeCqScheduledExporterImplScheduledExporterImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl_info import ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_screens_device_impl_device_service_info import ComAdobeCqScreensDeviceImplDeviceServiceInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_screens_device_registration_impl_registration_service_impl_info import ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_screens_impl_handler_channels_update_handler_info import ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job_info import ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl_info import ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_screens_impl_screens_channel_post_processor_info import ComAdobeCqScreensImplScreensChannelPostProcessorInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_info import ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider_info import ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_info import ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl_info import ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag_info import ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch_info import ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check_info import ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check_info import ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_security_hc_packages_impl_example_content_health_check_info import ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check_info import ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_accountverification_impl_account_management_config_im_info import ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_activitystreams_client_impl_social_activity_componen_info import ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co_info import ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler_info import ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten_info import ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s_info import ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre_info import ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i_info import ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_calendar_client_operationextensions_event_attachmen_info import ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_calendar_servlets_time_zone_servlet_info import ComAdobeCqSocialCalendarServletsTimeZoneServletInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event_info import ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se_info import ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati_info import ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c_info import ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos_info import ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_cors_cors_authentication_filter_info import ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider_info import ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl_info import ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener_info import ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider_info import ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp_info import ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp_info import ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_emailreply_impl_email_reply_importer_info import ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider_info import ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider_info import ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider_info import ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider_info import ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider_info import ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider_info import ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload_info import ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl_info import ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit_info import ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl_info import ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle_info import ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper_info import ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl_info import ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_content_fragments_services_impl_communities_fragmen_info import ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory_info import ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory_info import ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor_info import ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f_info import ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto_info import ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l_info import ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou_info import ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_enablement_services_impl_author_marker_impl_info import ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge_info import ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera_info import ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service_info import ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_forum_dispatcher_impl_flush_operations_info import ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_group_client_impl_community_group_collection_componen_info import ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_group_impl_group_service_impl_info import ComAdobeCqSocialGroupImplGroupServiceImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_handlebars_guava_template_cache_impl_info import ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s_info import ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser_info import ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_members_endpoints_impl_community_member_group_profile_info import ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o_info import ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_members_impl_community_member_group_profile_component_f_info import ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation_info import ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen_info import ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social_info import ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen_info import ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci_info import ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_notifications_impl_mentions_router_info import ComAdobeCqSocialNotificationsImplMentionsRouterInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_notifications_impl_notification_manager_impl_info import ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_notifications_impl_notifications_router_info import ComAdobeCqSocialNotificationsImplNotificationsRouterInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic_info import ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i_info import ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m_info import ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s_info import ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi_info import ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet_info import ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet_info import ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_scoring_impl_scoring_event_listener_info import ComAdobeCqSocialScoringImplScoringEventListenerInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl_info import ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_site_endpoints_impl_site_operation_service_info import ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_site_impl_analytics_component_configuration_service_im_info import ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_site_impl_site_configurator_impl_info import ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_srp_impl_social_solr_connector_info import ComAdobeCqSocialSrpImplSocialSolrConnectorInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_sync_impl_diff_changes_observer_info import ComAdobeCqSocialSyncImplDiffChangesObserverInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_sync_impl_group_sync_listener_impl_info import ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_sync_impl_publisher_sync_service_impl_info import ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_sync_impl_user_sync_listener_impl_info import ComAdobeCqSocialSyncImplUserSyncListenerImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_translation_impl_translation_service_config_manager_info import ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_translation_impl_ugc_language_detector_info import ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl_info import ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl_info import ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl_info import ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_ugcbase_impl_social_utils_impl_info import ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl_info import ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process_info import ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli_info import ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl_info import ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet_info import ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_social_user_impl_transport_http_to_publisher_info import ComAdobeCqSocialUserImplTransportHttpToPublisherInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact_info import ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup_info import ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup_info import ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service_info import ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task_info import ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service_info import ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service_info import ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_wcm_launches_impl_launches_event_handler_info import ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator_info import ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_wcm_style_internal_component_style_info_cache_impl_info import ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo  # noqa: E501
from openapi_server.models.com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl_info import ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo  # noqa: E501
from openapi_server.models.com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service_info import ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo  # noqa: E501
from openapi_server.models.com_adobe_fd_fp_config_forms_portal_scheduler_service_info import ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo  # noqa: E501
from openapi_server.models.com_adobe_forms_common_service_impl_default_data_provider_info import ComAdobeFormsCommonServiceImplDefaultDataProviderInfo  # noqa: E501
from openapi_server.models.com_adobe_forms_common_service_impl_forms_common_configuration_service_imp_info import ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo  # noqa: E501
from openapi_server.models.com_adobe_forms_common_servlet_temp_clean_up_task_info import ComAdobeFormsCommonServletTempCleanUpTaskInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_acp_platform_platform_servlet_info import ComAdobeGraniteAcpPlatformPlatformServletInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_activitystreams_impl_activity_manager_impl_info import ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_analyzer_base_system_status_servlet_info import ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet_info import ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_apicontroller_filter_resolver_hook_factory_info import ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_cert_impl_client_cert_auth_handler_info import ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension_info import ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl_info import ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator_info import ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_ims_impl_ims_provider_impl_info import ComAdobeGraniteAuthImsImplIMSProviderImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_ims_impl_ims_config_provider_impl_info import ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_ims_info import ComAdobeGraniteAuthImsInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_oauth_accesstoken_provider_info import ComAdobeGraniteAuthOauthAccesstokenProviderInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_oauth_impl_bearer_authentication_handler_info import ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_oauth_impl_default_token_validator_impl_info import ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_oauth_impl_facebook_provider_impl_info import ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_oauth_impl_github_provider_impl_info import ComAdobeGraniteAuthOauthImplGithubProviderImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_oauth_impl_granite_provider_info import ComAdobeGraniteAuthOauthImplGraniteProviderInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_info import ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal_info import ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler_info import ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_oauth_impl_twitter_provider_impl_info import ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_oauth_provider_info import ComAdobeGraniteAuthOauthProviderInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_requirement_impl_default_requirement_handler_info import ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_saml_saml_authentication_handler_info import ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_auth_sso_impl_sso_authentication_handler_info import ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_bundles_hc_impl_code_cache_health_check_info import ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check_info import ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check_info import ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check_info import ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_bundles_hc_impl_jobs_health_check_info import ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check_info import ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check_info import ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check_info import ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check_info import ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check_info import ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_comments_internal_comment_replication_content_filter_fac_info import ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_compatrouter_impl_compat_switching_service_impl_info import ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_compatrouter_impl_routing_config_info import ComAdobeGraniteCompatrouterImplRoutingConfigInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_compatrouter_impl_switch_mapping_config_info import ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving_info import ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_contexthub_impl_context_hub_impl_info import ComAdobeGraniteContexthubImplContextHubImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_cors_impl_cors_policy_impl_info import ComAdobeGraniteCorsImplCORSPolicyImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_csrf_impl_csrf_filter_info import ComAdobeGraniteCsrfImplCSRFFilterInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_csrf_impl_csrf_servlet_info import ComAdobeGraniteCsrfImplCSRFServletInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se_info import ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_distribution_core_impl_diff_diff_changes_observer_info import ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_distribution_core_impl_diff_diff_event_listener_info import ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_distribution_core_impl_distribution_to_replication_even_info import ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_distribution_core_impl_replication_adapters_replicat_info import ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_distribution_core_impl_replication_distribution_trans_info import ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_distribution_core_impl_transport_access_token_distribu_info import ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_frags_impl_check_http_header_flag_info import ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_frags_impl_random_feature_info import ComAdobeGraniteFragsImplRandomFeatureInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_httpcache_file_file_cache_store_info import ComAdobeGraniteHttpcacheFileFileCacheStoreInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_httpcache_impl_outer_cache_filter_info import ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_i18n_impl_bundle_pseudo_translations_info import ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_i18n_impl_preferences_locale_resolver_service_info import ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_infocollector_info_collector_info import ComAdobeGraniteInfocollectorInfoCollectorInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory_info import ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_license_impl_license_check_filter_info import ComAdobeGraniteLicenseImplLicenseCheckFilterInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_logging_impl_log_analyser_impl_info import ComAdobeGraniteLoggingImplLogAnalyserImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_logging_impl_log_error_health_check_info import ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task_info import ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task_info import ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_maintenance_crx_impl_revision_cleanup_task_info import ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_monitoring_impl_script_config_impl_info import ComAdobeGraniteMonitoringImplScriptConfigImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han_info import ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_oauth_server_impl_access_token_cleanup_task_info import ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet_info import ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet_info import ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet_info import ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet_info import ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_offloading_impl_offloading_configurator_info import ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_offloading_impl_offloading_job_cloner_info import ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_offloading_impl_offloading_job_offloader_info import ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_offloading_impl_transporter_offloading_agent_manager_info import ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_offloading_impl_transporter_offloading_default_transpo_info import ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_omnisearch_impl_core_omni_search_service_impl_info import ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_optout_impl_opt_out_service_impl_info import ComAdobeGraniteOptoutImplOptOutServiceImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_queries_impl_hc_async_index_health_check_info import ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_queries_impl_hc_large_index_health_check_info import ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_queries_impl_hc_queries_status_health_check_info import ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_queries_impl_hc_query_health_check_metrics_info import ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_queries_impl_hc_query_limits_health_check_info import ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_replication_hc_impl_replication_queue_health_check_info import ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_replication_hc_impl_replication_transport_users_health_c_info import ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check_info import ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c_info import ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_repository_hc_impl_continuous_rgc_health_check_info import ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che_info import ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_repository_hc_impl_default_logins_health_check_info import ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_repository_hc_impl_disk_space_health_check_info import ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_repository_hc_impl_observation_queue_length_health_check_info import ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_repository_impl_commit_stats_config_info import ComAdobeGraniteRepositoryImplCommitStatsConfigInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_repository_service_user_configuration_info import ComAdobeGraniteRepositoryServiceUserConfigurationInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im_info import ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_resourcestatus_impl_composite_status_type_info import ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_resourcestatus_impl_status_resource_provider_impl_info import ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_rest_assets_impl_asset_content_disposition_filter_info import ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl_info import ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_rest_impl_servlet_default_get_servlet_info import ComAdobeGraniteRestImplServletDefaultGETServletInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s_info import ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_security_user_user_properties_service_info import ComAdobeGraniteSecurityUserUserPropertiesServiceInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_socialgraph_impl_social_graph_factory_impl_info import ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl_info import ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory_info import ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_taskmanagement_impl_jcr_task_archive_service_info import ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task_info import ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor_info import ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_threaddump_thread_dump_collector_info import ComAdobeGraniteThreaddumpThreadDumpCollectorInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl_info import ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_translation_core_impl_translation_manager_impl_info import ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl_info import ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_workflow_console_frags_workflow_withdraw_feature_info import ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_workflow_console_publish_workflow_publish_event_service_info import ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_workflow_core_jcr_workflow_bucket_manager_info import ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_workflow_core_job_external_process_job_handler_info import ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_workflow_core_job_job_handler_info import ComAdobeGraniteWorkflowCoreJobJobHandlerInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum_info import ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_workflow_core_payload_map_cache_info import ComAdobeGraniteWorkflowCorePayloadMapCacheInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_workflow_core_payloadmap_payload_move_listener_info import ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_workflow_core_workflow_config_info import ComAdobeGraniteWorkflowCoreWorkflowConfigInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_workflow_core_workflow_session_factory_info import ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo  # noqa: E501
from openapi_server.models.com_adobe_granite_workflow_purge_scheduler_info import ComAdobeGraniteWorkflowPurgeSchedulerInfo  # noqa: E501
from openapi_server.models.com_adobe_octopus_ncomm_bootstrap_info import ComAdobeOctopusNcommBootstrapInfo  # noqa: E501
from openapi_server.models.com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s_info import ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo  # noqa: E501
from openapi_server.models.com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm_info import ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo  # noqa: E501
from openapi_server.models.com_day_commons_datasource_jdbcpool_jdbc_pool_service_info import ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo  # noqa: E501
from openapi_server.models.com_day_commons_httpclient_info import ComDayCommonsHttpclientInfo  # noqa: E501
from openapi_server.models.com_day_cq_analytics_impl_store_properties_change_listener_info import ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo  # noqa: E501
from openapi_server.models.com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte_info import ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo  # noqa: E501
from openapi_server.models.com_day_cq_analytics_sitecatalyst_impl_importer_report_importer_info import ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo  # noqa: E501
from openapi_server.models.com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory_info import ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo  # noqa: E501
from openapi_server.models.com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl_info import ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_analytics_testandtarget_impl_account_options_updater_info import ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo  # noqa: E501
from openapi_server.models.com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener_info import ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo  # noqa: E501
from openapi_server.models.com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener_info import ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo  # noqa: E501
from openapi_server.models.com_day_cq_analytics_testandtarget_impl_segment_importer_info import ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo  # noqa: E501
from openapi_server.models.com_day_cq_analytics_testandtarget_impl_service_web_service_impl_info import ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet_info import ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl_info import ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_auth_impl_cug_cug_support_impl_info import ComDayCqAuthImplCugCugSupportImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_auth_impl_login_selector_handler_info import ComDayCqAuthImplLoginSelectorHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_commons_impl_externalizer_impl_info import ComDayCqCommonsImplExternalizerImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_commons_servlets_root_mapping_servlet_info import ComDayCqCommonsServletsRootMappingServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke_info import ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo  # noqa: E501
from openapi_server.models.com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list_info import ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo  # noqa: E501
from openapi_server.models.com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist_info import ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo  # noqa: E501
from openapi_server.models.com_day_cq_contentsync_impl_content_sync_manager_impl_info import ComDayCqContentsyncImplContentSyncManagerImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_commons_handler_standard_image_handler_info import ComDayCqDamCommonsHandlerStandardImageHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_commons_metadata_xmp_filter_black_white_info import ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_commons_util_impl_asset_cache_impl_info import ComDayCqDamCommonsUtilImplAssetCacheImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config_info import ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_asset_move_listener_info import ComDayCqDamCoreImplAssetMoveListenerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_assethome_asset_home_page_configuration_info import ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet_info import ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_cache_cq_buffered_image_cache_info import ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_dam_change_event_listener_info import ComDayCqDamCoreImplDamChangeEventListenerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_dam_event_purge_service_info import ComDayCqDamCoreImplDamEventPurgeServiceInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_dam_event_recorder_impl_info import ComDayCqDamCoreImplDamEventRecorderImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_event_dam_event_audit_listener_info import ComDayCqDamCoreImplEventDamEventAuditListenerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_expiry_notification_job_impl_info import ComDayCqDamCoreImplExpiryNotificationJobImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat_info import ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_gfx_commons_gfx_renderer_info import ComDayCqDamCoreImplGfxCommonsGfxRendererInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_handler_eps_format_handler_info import ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_handler_indesign_format_handler_info import ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_handler_jpeg_handler_info import ComDayCqDamCoreImplHandlerJpegHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler_info import ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_jmx_asset_index_update_monitor_info import ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl_info import ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl_info import ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config_info import ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config_info import ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_lightbox_lightbox_servlet_info import ComDayCqDamCoreImplLightboxLightboxServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_metadata_editor_select_component_handler_info import ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper_info import ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl_info import ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_missing_metadata_notification_job_info import ComDayCqDamCoreImplMissingMetadataNotificationJobInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr_info import ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_process_text_extraction_process_info import ComDayCqDamCoreImplProcessTextExtractionProcessInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_rendition_maker_impl_info import ComDayCqDamCoreImplRenditionMakerImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_reports_report_export_service_info import ComDayCqDamCoreImplReportsReportExportServiceInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_reports_report_purge_service_info import ComDayCqDamCoreImplReportsReportPurgeServiceInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_servlet_asset_download_servlet_info import ComDayCqDamCoreImplServletAssetDownloadServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_servlet_asset_status_servlet_info import ComDayCqDamCoreImplServletAssetStatusServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet_info import ComDayCqDamCoreImplServletAssetXMPSearchServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_servlet_batch_metadata_servlet_info import ComDayCqDamCoreImplServletBatchMetadataServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_servlet_binary_provider_servlet_info import ComDayCqDamCoreImplServletBinaryProviderServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_servlet_collection_servlet_info import ComDayCqDamCoreImplServletCollectionServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_servlet_collections_servlet_info import ComDayCqDamCoreImplServletCollectionsServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_servlet_companion_servlet_info import ComDayCqDamCoreImplServletCompanionServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_servlet_create_asset_servlet_info import ComDayCqDamCoreImplServletCreateAssetServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter_info import ComDayCqDamCoreImplServletDamContentDispositionFilterInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_servlet_guid_lookup_filter_info import ComDayCqDamCoreImplServletGuidLookupFilterInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_servlet_health_check_servlet_info import ComDayCqDamCoreImplServletHealthCheckServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_servlet_metadata_get_servlet_info import ComDayCqDamCoreImplServletMetadataGetServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet_info import ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_servlet_resource_collection_servlet_info import ComDayCqDamCoreImplServletResourceCollectionServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl_info import ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_impl_unzip_unzip_config_info import ComDayCqDamCoreImplUnzipUnzipConfigInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_process_exif_tool_extract_metadata_process_info import ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_process_extract_metadata_process_info import ComDayCqDamCoreProcessExtractMetadataProcessInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_core_process_metadata_processor_process_info import ComDayCqDamCoreProcessMetadataProcessorProcessInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_handler_ffmpeg_locator_impl_info import ComDayCqDamHandlerFfmpegLocatorImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl_info import ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_handler_standard_pdf_pdf_handler_info import ComDayCqDamHandlerStandardPdfPdfHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_handler_standard_ps_post_script_handler_info import ComDayCqDamHandlerStandardPsPostScriptHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_handler_standard_psd_psd_handler_info import ComDayCqDamHandlerStandardPsdPsdHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_ids_impl_ids_job_processor_info import ComDayCqDamIdsImplIDSJobProcessorInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_ids_impl_ids_pool_manager_impl_info import ComDayCqDamIdsImplIDSPoolManagerImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_indd_impl_handler_indesign_xmp_handler_info import ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet_info import ComDayCqDamInddImplServletSnippetCreationServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_indd_process_indd_media_extract_process_info import ComDayCqDamInddProcessINDDMediaExtractProcessInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_performance_internal_asset_performance_data_handler_impl_info import ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_performance_internal_asset_performance_report_sync_job_info import ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro_info import ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even_info import ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner_info import ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_s7dam_common_post_servlets_set_create_handler_info import ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler_info import ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process_info import ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener_info import ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet_info import ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl_info import ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_scene7_impl_scene7_api_client_impl_info import ComDayCqDamScene7ImplScene7APIClientImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl_info import ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_scene7_impl_scene7_configuration_event_listener_info import ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener_info import ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl_info import ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_scene7_impl_scene7_upload_service_impl_info import ComDayCqDamScene7ImplScene7UploadServiceImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser_info import ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_stock_integration_impl_configuration_stock_configuration_info import ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo  # noqa: E501
from openapi_server.models.com_day_cq_dam_video_impl_servlet_video_test_servlet_info import ComDayCqDamVideoImplServletVideoTestServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_extwidget_servlets_image_sprite_servlet_info import ComDayCqExtwidgetServletsImageSpriteServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_image_internal_font_font_helper_info import ComDayCqImageInternalFontFontHelperInfo  # noqa: E501
from openapi_server.models.com_day_cq_jcrclustersupport_cluster_start_level_controller_info import ComDayCqJcrclustersupportClusterStartLevelControllerInfo  # noqa: E501
from openapi_server.models.com_day_cq_mailer_default_mail_service_info import ComDayCqMailerDefaultMailServiceInfo  # noqa: E501
from openapi_server.models.com_day_cq_mailer_impl_cq_mailing_service_info import ComDayCqMailerImplCqMailingServiceInfo  # noqa: E501
from openapi_server.models.com_day_cq_mailer_impl_email_cq_email_template_factory_info import ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo  # noqa: E501
from openapi_server.models.com_day_cq_mailer_impl_email_cq_retriever_template_factory_info import ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo  # noqa: E501
from openapi_server.models.com_day_cq_mcm_campaign_impl_integration_config_impl_info import ComDayCqMcmCampaignImplIntegrationConfigImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_mcm_campaign_importer_personalized_text_handler_factory_info import ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo  # noqa: E501
from openapi_server.models.com_day_cq_mcm_core_newsletter_newsletter_email_service_impl_info import ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_mcm_impl_mcm_configuration_info import ComDayCqMcmImplMCMConfigurationInfo  # noqa: E501
from openapi_server.models.com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen_info import ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo  # noqa: E501
from openapi_server.models.com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug_info import ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo  # noqa: E501
from openapi_server.models.com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component_info import ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo  # noqa: E501
from openapi_server.models.com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha_info import ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo  # noqa: E501
from openapi_server.models.com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h_info import ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo  # noqa: E501
from openapi_server.models.com_day_cq_notification_impl_notification_service_impl_info import ComDayCqNotificationImplNotificationServiceImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_personalization_impl_servlets_targeting_configuration_servlet_info import ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_polling_importer_impl_managed_poll_config_impl_info import ComDayCqPollingImporterImplManagedPollConfigImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_polling_importer_impl_managed_polling_importer_impl_info import ComDayCqPollingImporterImplManagedPollingImporterImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_polling_importer_impl_polling_importer_impl_info import ComDayCqPollingImporterImplPollingImporterImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_replication_audit_replication_event_listener_info import ComDayCqReplicationAuditReplicationEventListenerInfo  # noqa: E501
from openapi_server.models.com_day_cq_replication_content_static_content_builder_info import ComDayCqReplicationContentStaticContentBuilderInfo  # noqa: E501
from openapi_server.models.com_day_cq_replication_impl_agent_manager_impl_info import ComDayCqReplicationImplAgentManagerImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_replication_impl_content_durbo_binary_less_content_builder_info import ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo  # noqa: E501
from openapi_server.models.com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov_info import ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo  # noqa: E501
from openapi_server.models.com_day_cq_replication_impl_replication_content_factory_provider_impl_info import ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_replication_impl_replication_receiver_impl_info import ComDayCqReplicationImplReplicationReceiverImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_replication_impl_replicator_impl_info import ComDayCqReplicationImplReplicatorImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_replication_impl_reverse_replicator_info import ComDayCqReplicationImplReverseReplicatorInfo  # noqa: E501
from openapi_server.models.com_day_cq_replication_impl_transport_binary_less_transport_handler_info import ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_replication_impl_transport_http_info import ComDayCqReplicationImplTransportHttpInfo  # noqa: E501
from openapi_server.models.com_day_cq_reporting_impl_cache_cache_impl_info import ComDayCqReportingImplCacheCacheImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_reporting_impl_config_service_impl_info import ComDayCqReportingImplConfigServiceImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_reporting_impl_r_log_analyzer_info import ComDayCqReportingImplRLogAnalyzerInfo  # noqa: E501
from openapi_server.models.com_day_cq_rewriter_linkchecker_impl_link_checker_impl_info import ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_rewriter_linkchecker_impl_link_checker_task_info import ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo  # noqa: E501
from openapi_server.models.com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory_info import ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo  # noqa: E501
from openapi_server.models.com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl_info import ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_rewriter_processor_impl_html_parser_factory_info import ComDayCqRewriterProcessorImplHtmlParserFactoryInfo  # noqa: E501
from openapi_server.models.com_day_cq_search_impl_builder_query_builder_impl_info import ComDayCqSearchImplBuilderQueryBuilderImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_search_suggest_impl_suggestion_index_manager_impl_info import ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_searchpromote_impl_publish_search_promote_config_handler_info import ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_searchpromote_impl_search_promote_service_impl_info import ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_security_acl_setup_info import ComDayCqSecurityACLSetupInfo  # noqa: E501
from openapi_server.models.com_day_cq_statistics_impl_statistics_service_impl_info import ComDayCqStatisticsImplStatisticsServiceImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_tagging_impl_jcr_tag_manager_factory_impl_info import ComDayCqTaggingImplJcrTagManagerFactoryImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_tagging_impl_search_tag_predicate_evaluator_info import ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo  # noqa: E501
from openapi_server.models.com_day_cq_tagging_impl_tag_garbage_collector_info import ComDayCqTaggingImplTagGarbageCollectorInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_contentsync_impl_handler_pages_update_handler_info import ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor_info import ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl_info import ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_commands_wcm_command_servlet_info import ComDayCqWcmCoreImplCommandsWCMCommandServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl_info import ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_event_page_event_audit_listener_info import ComDayCqWcmCoreImplEventPageEventAuditListenerInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_event_page_post_processor_info import ComDayCqWcmCoreImplEventPagePostProcessorInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_event_repository_change_event_listener_info import ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_event_template_post_processor_info import ComDayCqWcmCoreImplEventTemplatePostProcessorInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_language_manager_impl_info import ComDayCqWcmCoreImplLanguageManagerImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl_info import ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_page_page_info_aggregator_impl_info import ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_page_page_manager_factory_impl_info import ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_references_content_content_reference_config_info import ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler_info import ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie_info import ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler_info import ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_servlets_find_replace_servlet_info import ComDayCqWcmCoreImplServletsFindReplaceServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_servlets_reference_search_servlet_info import ComDayCqWcmCoreImplServletsReferenceSearchServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_servlets_thumbnail_servlet_info import ComDayCqWcmCoreImplServletsThumbnailServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_utils_default_page_name_validator_info import ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_variants_page_variants_provider_impl_info import ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_version_manager_impl_info import ComDayCqWcmCoreImplVersionManagerImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_version_purge_task_info import ComDayCqWcmCoreImplVersionPurgeTaskInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_wcm_debug_filter_info import ComDayCqWcmCoreImplWCMDebugFilterInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_wcm_developer_mode_filter_info import ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_impl_warp_time_warp_filter_info import ComDayCqWcmCoreImplWarpTimeWarpFilterInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_mvt_mvt_statistics_impl_info import ComDayCqWcmCoreMvtMVTStatisticsImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_stats_page_view_statistics_impl_info import ComDayCqWcmCoreStatsPageViewStatisticsImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_core_wcm_request_filter_info import ComDayCqWcmCoreWCMRequestFilterInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_design_package_importer_info import ComDayCqWcmDesignimporterDesignPackageImporterInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_impl_canvas_builder_impl_info import ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler_info import ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl_info import ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl_info import ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone_info import ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon_info import ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han_info import ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle_info import ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand_info import ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen_info import ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler_info import ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t_info import ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle_info import ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle_info import ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h_info import ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone_info import ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand_info import ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl_info import ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component_info import ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen_info import ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl_info import ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet_info import ComDayCqWcmFoundationFormsImplFormChooserServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor_info import ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet_info import ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_foundation_forms_impl_mail_servlet_info import ComDayCqWcmFoundationFormsImplMailServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet_info import ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_foundation_impl_http_auth_handler_info import ComDayCqWcmFoundationImplHTTPAuthHandlerInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_foundation_impl_page_impressions_tracker_info import ComDayCqWcmFoundationImplPageImpressionsTrackerInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_foundation_impl_page_redirect_servlet_info import ComDayCqWcmFoundationImplPageRedirectServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist_info import ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl_info import ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory_info import ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter_info import ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_msm_impl_actions_content_copy_action_factory_info import ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_msm_impl_actions_content_delete_action_factory_info import ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_msm_impl_actions_content_update_action_factory_info import ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_msm_impl_actions_order_children_action_factory_info import ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_msm_impl_actions_page_move_action_factory_info import ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_msm_impl_actions_references_update_action_factory_info import ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_msm_impl_actions_version_copy_action_factory_info import ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_msm_impl_live_relationship_manager_impl_info import ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_msm_impl_rollout_manager_impl_info import ComDayCqWcmMsmImplRolloutManagerImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_msm_impl_servlets_audit_log_servlet_info import ComDayCqWcmMsmImplServletsAuditLogServletInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_notification_email_impl_email_channel_info import ComDayCqWcmNotificationEmailImplEmailChannelInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_notification_impl_notification_manager_impl_info import ComDayCqWcmNotificationImplNotificationManagerImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_scripting_impl_bvp_manager_info import ComDayCqWcmScriptingImplBVPManagerInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_undo_undo_config_info import ComDayCqWcmUndoUndoConfigInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_webservicesupport_impl_replication_event_listener_info import ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl_info import ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_wcm_workflow_impl_workflow_package_info_provider_info import ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo  # noqa: E501
from openapi_server.models.com_day_cq_widget_impl_html_library_manager_impl_info import ComDayCqWidgetImplHtmlLibraryManagerImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_widget_impl_widget_extension_provider_impl_info import ComDayCqWidgetImplWidgetExtensionProviderImplInfo  # noqa: E501
from openapi_server.models.com_day_cq_workflow_impl_email_e_mail_notification_service_info import ComDayCqWorkflowImplEmailEMailNotificationServiceInfo  # noqa: E501
from openapi_server.models.com_day_cq_workflow_impl_email_task_e_mail_notification_service_info import ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo  # noqa: E501
from openapi_server.models.com_day_crx_security_token_impl_impl_token_authentication_handler_info import ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo  # noqa: E501
from openapi_server.models.com_day_crx_security_token_impl_token_cleanup_task_info import ComDayCrxSecurityTokenImplTokenCleanupTaskInfo  # noqa: E501
from openapi_server.models.guide_localization_service_info import GuideLocalizationServiceInfo  # noqa: E501
from openapi_server.models.messaging_user_component_factory_info import MessagingUserComponentFactoryInfo  # noqa: E501
from openapi_server.models.org_apache_aries_jmx_framework_state_config_info import OrgApacheAriesJmxFrameworkStateConfigInfo  # noqa: E501
from openapi_server.models.org_apache_felix_eventadmin_impl_event_admin_info import OrgApacheFelixEventadminImplEventAdminInfo  # noqa: E501
from openapi_server.models.org_apache_felix_http_info import OrgApacheFelixHttpInfo  # noqa: E501
from openapi_server.models.org_apache_felix_http_sslfilter_ssl_filter_info import OrgApacheFelixHttpSslfilterSslFilterInfo  # noqa: E501
from openapi_server.models.org_apache_felix_jaas_configuration_factory_info import OrgApacheFelixJaasConfigurationFactoryInfo  # noqa: E501
from openapi_server.models.org_apache_felix_jaas_configuration_spi_info import OrgApacheFelixJaasConfigurationSpiInfo  # noqa: E501
from openapi_server.models.org_apache_felix_scr_scr_service_info import OrgApacheFelixScrScrServiceInfo  # noqa: E501
from openapi_server.models.org_apache_felix_systemready_impl_components_check_info import OrgApacheFelixSystemreadyImplComponentsCheckInfo  # noqa: E501
from openapi_server.models.org_apache_felix_systemready_impl_framework_start_check_info import OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo  # noqa: E501
from openapi_server.models.org_apache_felix_systemready_impl_services_check_info import OrgApacheFelixSystemreadyImplServicesCheckInfo  # noqa: E501
from openapi_server.models.org_apache_felix_systemready_impl_servlet_system_alive_servlet_info import OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo  # noqa: E501
from openapi_server.models.org_apache_felix_systemready_impl_servlet_system_ready_servlet_info import OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo  # noqa: E501
from openapi_server.models.org_apache_felix_systemready_system_ready_monitor_info import OrgApacheFelixSystemreadySystemReadyMonitorInfo  # noqa: E501
from openapi_server.models.org_apache_felix_webconsole_internal_servlet_osgi_manager_info import OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo  # noqa: E501
from openapi_server.models.org_apache_felix_webconsole_plugins_event_internal_plugin_servlet_info import OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo  # noqa: E501
from openapi_server.models.org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co_info import OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo  # noqa: E501
from openapi_server.models.org_apache_http_proxyconfigurator_info import OrgApacheHttpProxyconfiguratorInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider_info import OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store_info import OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_plugins_document_document_node_store_service_info import OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre_info import OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac_info import OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_plugins_index_async_indexer_service_info import OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv_info import OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co_info import OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers_info import OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration_info import OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf_info import OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid_info import OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se_info import OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory_info import OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_plugins_observation_change_collector_provider_info import OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_query_query_engine_settings_service_info import OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_security_authentication_authentication_config_info import OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi_info import OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_security_authentication_token_token_configura_info import OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_security_authorization_authorization_configur_info import OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_security_internal_security_provider_registrati_info import OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_security_user_random_authorizable_node_name_info import OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_security_user_user_configuration_impl_info import OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service_info import OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_segment_segment_node_store_factory_info import OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service_info import OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_segment_segment_node_store_service_info import OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_segment_standby_store_standby_store_service_info import OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de_info import OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex_info import OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr_info import OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi_info import OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu_info import OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable_info import OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_vault_packaging_impl_packaging_impl_info import OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo  # noqa: E501
from openapi_server.models.org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry_info import OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo  # noqa: E501
from openapi_server.models.org_apache_sling_auth_core_impl_logout_servlet_info import OrgApacheSlingAuthCoreImplLogoutServletInfo  # noqa: E501
from openapi_server.models.org_apache_sling_caconfig_impl_configuration_bindings_value_provider_info import OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo  # noqa: E501
from openapi_server.models.org_apache_sling_caconfig_impl_configuration_resolver_impl_info import OrgApacheSlingCaconfigImplConfigurationResolverImplInfo  # noqa: E501
from openapi_server.models.org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra_info import OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo  # noqa: E501
from openapi_server.models.org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra_info import OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo  # noqa: E501
from openapi_server.models.org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi_info import OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo  # noqa: E501
from openapi_server.models.org_apache_sling_caconfig_impl_override_system_property_configuration_ove_info import OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo  # noqa: E501
from openapi_server.models.org_apache_sling_caconfig_management_impl_configuration_management_setti_info import OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo  # noqa: E501
from openapi_server.models.org_apache_sling_caconfig_resource_impl_def_default_configuration_resour_info import OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo  # noqa: E501
from openapi_server.models.org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy_info import OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo  # noqa: E501
from openapi_server.models.org_apache_sling_commons_html_internal_tagsoup_html_parser_info import OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo  # noqa: E501
from openapi_server.models.org_apache_sling_commons_log_log_manager_factory_config_info import OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo  # noqa: E501
from openapi_server.models.org_apache_sling_commons_log_log_manager_factory_writer_info import OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo  # noqa: E501
from openapi_server.models.org_apache_sling_commons_log_log_manager_info import OrgApacheSlingCommonsLogLogManagerInfo  # noqa: E501
from openapi_server.models.org_apache_sling_commons_metrics_internal_log_reporter_info import OrgApacheSlingCommonsMetricsInternalLogReporterInfo  # noqa: E501
from openapi_server.models.org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter_info import OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo  # noqa: E501
from openapi_server.models.org_apache_sling_commons_mime_internal_mime_type_service_impl_info import OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo  # noqa: E501
from openapi_server.models.org_apache_sling_commons_scheduler_impl_quartz_scheduler_info import OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo  # noqa: E501
from openapi_server.models.org_apache_sling_commons_scheduler_impl_scheduler_health_check_info import OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo  # noqa: E501
from openapi_server.models.org_apache_sling_commons_threads_impl_default_thread_pool_factory_info import OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo  # noqa: E501
from openapi_server.models.org_apache_sling_datasource_data_source_factory_info import OrgApacheSlingDatasourceDataSourceFactoryInfo  # noqa: E501
from openapi_server.models.org_apache_sling_datasource_jndi_data_source_factory_info import OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo  # noqa: E501
from openapi_server.models.org_apache_sling_discovery_oak_config_info import OrgApacheSlingDiscoveryOakConfigInfo  # noqa: E501
from openapi_server.models.org_apache_sling_discovery_oak_synchronized_clocks_health_check_info import OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto_info import OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_agent_impl_privilege_distribution_request_a_info import OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory_info import OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto_info import OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor_info import OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory_info import OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_monitor_distribution_queue_health_check_info import OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_packaging_impl_exporter_agent_distributio_info import OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_packaging_impl_exporter_local_distributio_info import OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_packaging_impl_exporter_remote_distributi_info import OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_packaging_impl_importer_local_distributio_info import OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_packaging_impl_importer_remote_distributi_info import OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_packaging_impl_importer_repository_distri_info import OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_resources_impl_distribution_configuration_info import OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_resources_impl_distribution_service_resour_info import OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_serialization_impl_distribution_package_bu_info import OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_serialization_impl_vlt_vault_distribution_info import OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_transport_impl_user_credentials_distributi_info import OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_trigger_impl_distribution_event_distribute_info import OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger_info import OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi_info import OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig_info import OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr_info import OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo  # noqa: E501
from openapi_server.models.org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge_info import OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo  # noqa: E501
from openapi_server.models.org_apache_sling_engine_impl_auth_sling_authenticator_info import OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo  # noqa: E501
from openapi_server.models.org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter_info import OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo  # noqa: E501
from openapi_server.models.org_apache_sling_engine_impl_log_request_logger_info import OrgApacheSlingEngineImplLogRequestLoggerInfo  # noqa: E501
from openapi_server.models.org_apache_sling_engine_impl_log_request_logger_service_info import OrgApacheSlingEngineImplLogRequestLoggerServiceInfo  # noqa: E501
from openapi_server.models.org_apache_sling_engine_impl_sling_main_servlet_info import OrgApacheSlingEngineImplSlingMainServletInfo  # noqa: E501
from openapi_server.models.org_apache_sling_engine_parameters_info import OrgApacheSlingEngineParametersInfo  # noqa: E501
from openapi_server.models.org_apache_sling_event_impl_eventing_thread_pool_info import OrgApacheSlingEventImplEventingThreadPoolInfo  # noqa: E501
from openapi_server.models.org_apache_sling_event_impl_jobs_default_job_manager_info import OrgApacheSlingEventImplJobsDefaultJobManagerInfo  # noqa: E501
from openapi_server.models.org_apache_sling_event_impl_jobs_jcr_persistence_handler_info import OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo  # noqa: E501
from openapi_server.models.org_apache_sling_event_impl_jobs_job_consumer_manager_info import OrgApacheSlingEventImplJobsJobConsumerManagerInfo  # noqa: E501
from openapi_server.models.org_apache_sling_event_jobs_queue_configuration_info import OrgApacheSlingEventJobsQueueConfigurationInfo  # noqa: E501
from openapi_server.models.org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w_info import OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo  # noqa: E501
from openapi_server.models.org_apache_sling_featureflags_feature_info import OrgApacheSlingFeatureflagsFeatureInfo  # noqa: E501
from openapi_server.models.org_apache_sling_featureflags_impl_configured_feature_info import OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo  # noqa: E501
from openapi_server.models.org_apache_sling_hapi_impl_h_api_util_impl_info import OrgApacheSlingHapiImplHApiUtilImplInfo  # noqa: E501
from openapi_server.models.org_apache_sling_hc_core_impl_composite_health_check_info import OrgApacheSlingHcCoreImplCompositeHealthCheckInfo  # noqa: E501
from openapi_server.models.org_apache_sling_hc_core_impl_executor_health_check_executor_impl_info import OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo  # noqa: E501
from openapi_server.models.org_apache_sling_hc_core_impl_jmx_attribute_health_check_info import OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo  # noqa: E501
from openapi_server.models.org_apache_sling_hc_core_impl_scriptable_health_check_info import OrgApacheSlingHcCoreImplScriptableHealthCheckInfo  # noqa: E501
from openapi_server.models.org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet_info import OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo  # noqa: E501
from openapi_server.models.org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer_info import OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo  # noqa: E501
from openapi_server.models.org_apache_sling_i18n_impl_i18_n_filter_info import OrgApacheSlingI18nImplI18NFilterInfo  # noqa: E501
from openapi_server.models.org_apache_sling_i18n_impl_jcr_resource_bundle_provider_info import OrgApacheSlingI18nImplJcrResourceBundleProviderInfo  # noqa: E501
from openapi_server.models.org_apache_sling_installer_provider_jcr_impl_jcr_installer_info import OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo  # noqa: E501
from openapi_server.models.org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment_info import OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo  # noqa: E501
from openapi_server.models.org_apache_sling_jcr_base_internal_login_admin_whitelist_info import OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo  # noqa: E501
from openapi_server.models.org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet_info import OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo  # noqa: E501
from openapi_server.models.org_apache_sling_jcr_jackrabbit_server_jndi_registration_support_info import OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo  # noqa: E501
from openapi_server.models.org_apache_sling_jcr_jackrabbit_server_rmi_registration_support_info import OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo  # noqa: E501
from openapi_server.models.org_apache_sling_jcr_repoinit_impl_repository_initializer_info import OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo  # noqa: E501
from openapi_server.models.org_apache_sling_jcr_repoinit_repository_initializer_info import OrgApacheSlingJcrRepoinitRepositoryInitializerInfo  # noqa: E501
from openapi_server.models.org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl_info import OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo  # noqa: E501
from openapi_server.models.org_apache_sling_jcr_resource_internal_jcr_system_user_validator_info import OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo  # noqa: E501
from openapi_server.models.org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory_info import OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo  # noqa: E501
from openapi_server.models.org_apache_sling_jcr_webdav_impl_handler_default_handler_service_info import OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo  # noqa: E501
from openapi_server.models.org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic_info import OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo  # noqa: E501
from openapi_server.models.org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet_info import OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo  # noqa: E501
from openapi_server.models.org_apache_sling_jmx_provider_impl_jmx_resource_provider_info import OrgApacheSlingJmxProviderImplJMXResourceProviderInfo  # noqa: E501
from openapi_server.models.org_apache_sling_models_impl_model_adapter_factory_info import OrgApacheSlingModelsImplModelAdapterFactoryInfo  # noqa: E501
from openapi_server.models.org_apache_sling_models_jacksonexporter_impl_resource_module_provider_info import OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo  # noqa: E501
from openapi_server.models.org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto_info import OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo  # noqa: E501
from openapi_server.models.org_apache_sling_resourcemerger_impl_merged_resource_provider_factory_info import OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo  # noqa: E501
from openapi_server.models.org_apache_sling_resourcemerger_picker_overriding_info import OrgApacheSlingResourcemergerPickerOverridingInfo  # noqa: E501
from openapi_server.models.org_apache_sling_scripting_core_impl_script_cache_impl_info import OrgApacheSlingScriptingCoreImplScriptCacheImplInfo  # noqa: E501
from openapi_server.models.org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider_info import OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo  # noqa: E501
from openapi_server.models.org_apache_sling_scripting_java_impl_java_script_engine_factory_info import OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo  # noqa: E501
from openapi_server.models.org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa_info import OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo  # noqa: E501
from openapi_server.models.org_apache_sling_scripting_jsp_jsp_script_engine_factory_info import OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo  # noqa: E501
from openapi_server.models.org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov_info import OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo  # noqa: E501
from openapi_server.models.org_apache_sling_security_impl_content_disposition_filter_info import OrgApacheSlingSecurityImplContentDispositionFilterInfo  # noqa: E501
from openapi_server.models.org_apache_sling_security_impl_referrer_filter_info import OrgApacheSlingSecurityImplReferrerFilterInfo  # noqa: E501
from openapi_server.models.org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended_info import OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo  # noqa: E501
from openapi_server.models.org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_info import OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo  # noqa: E501
from openapi_server.models.org_apache_sling_servlets_get_default_get_servlet_info import OrgApacheSlingServletsGetDefaultGetServletInfo  # noqa: E501
from openapi_server.models.org_apache_sling_servlets_get_impl_version_version_info_servlet_info import OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo  # noqa: E501
from openapi_server.models.org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task_info import OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo  # noqa: E501
from openapi_server.models.org_apache_sling_servlets_post_impl_sling_post_servlet_info import OrgApacheSlingServletsPostImplSlingPostServletInfo  # noqa: E501
from openapi_server.models.org_apache_sling_servlets_resolver_sling_servlet_resolver_info import OrgApacheSlingServletsResolverSlingServletResolverInfo  # noqa: E501
from openapi_server.models.org_apache_sling_settings_impl_sling_settings_service_impl_info import OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo  # noqa: E501
from openapi_server.models.org_apache_sling_startupfilter_impl_startup_filter_impl_info import OrgApacheSlingStartupfilterImplStartupFilterImplInfo  # noqa: E501
from openapi_server.models.org_apache_sling_tenant_internal_tenant_provider_impl_info import OrgApacheSlingTenantInternalTenantProviderImplInfo  # noqa: E501
from openapi_server.models.org_apache_sling_tracer_internal_log_tracer_info import OrgApacheSlingTracerInternalLogTracerInfo  # noqa: E501
from openapi_server.models.org_apache_sling_xss_impl_xss_filter_impl_info import OrgApacheSlingXssImplXSSFilterImplInfo  # noqa: E501
from openapi_server.test import BaseTestCase


class TestConfigmgrController(BaseTestCase):
    """ConfigmgrController integration test stubs"""

    def test_adaptive_form_and_interactive_communication_web_channel_configuration(self):
        """Test case for adaptive_form_and_interactive_communication_web_channel_configuration

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('show_placeholder', True),
                        ('maximum_cache_entries', 56),
                        ('af_scripting_compatversion', 'af_scripting_compatversion_example'),
                        ('make_file_name_unique', True),
                        ('generating_compliant_data', True)]
        response = self.client.open(
            '//system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_adaptive_form_and_interactive_communication_web_channel_theme_configur(self):
        """Test case for adaptive_form_and_interactive_communication_web_channel_theme_configur

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('font_list', 'font_list_example')]
        response = self.client.open(
            '//system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_analytics_component_query_cache_service(self):
        """Test case for analytics_component_query_cache_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_analytics_component_query_cache_size', 56)]
        response = self.client.open(
            '//system/console/configMgr/Analytics Component Query Cache Service',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_apache_sling_health_check_result_html_serializer(self):
        """Test case for apache_sling_health_check_result_html_serializer

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('style_string', 'style_string_example')]
        response = self.client.open(
            '//system/console/configMgr/Apache Sling Health Check Result HTML Serializer',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration(self):
        """Test case for com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('forms_manager_config_include_ootb_templates', True),
                        ('forms_manager_config_include_deprecated_templates', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_aem_transaction_core_impl_transaction_recorder(self):
        """Test case for com_adobe_aem_transaction_core_impl_transaction_recorder

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('is_transaction_recording_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc(self):
        """Test case for com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_name', 'hc_name_example'),
                        ('hc_tags', 'hc_tags_example'),
                        ('hc_mbean_name', 'hc_mbean_name_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc(self):
        """Test case for com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_name', 'hc_name_example'),
                        ('hc_tags', 'hc_tags_example'),
                        ('hc_mbean_name', 'hc_mbean_name_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl(self):
        """Test case for com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('pre_upgrade_maintenance_tasks', 'pre_upgrade_maintenance_tasks_example'),
                        ('pre_upgrade_hc_tags', 'pre_upgrade_hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl(self):
        """Test case for com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('root_path', 'root_path_example'),
                        ('fix_inconsistencies', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_account_api_account_management_service(self):
        """Test case for com_adobe_cq_account_api_account_management_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_accountmanager_token_validity_period', 56),
                        ('cq_accountmanager_config_requestnewaccount_mail', 'cq_accountmanager_config_requestnewaccount_mail_example'),
                        ('cq_accountmanager_config_requestnewpwd_mail', 'cq_accountmanager_config_requestnewpwd_mail_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.account.api.AccountManagementService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_account_impl_account_management_servlet(self):
        """Test case for com_adobe_cq_account_impl_account_management_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_accountmanager_config_informnewaccount_mail', 'cq_accountmanager_config_informnewaccount_mail_example'),
                        ('cq_accountmanager_config_informnewpwd_mail', 'cq_accountmanager_config_informnewpwd_mail_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_address_impl_location_location_list_servlet(self):
        """Test case for com_adobe_cq_address_impl_location_location_list_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_address_location_default_max_results', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_audit_purge_dam(self):
        """Test case for com_adobe_cq_audit_purge_dam

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('auditlog_rule_name', 'auditlog_rule_name_example'),
                        ('auditlog_rule_contentpath', 'auditlog_rule_contentpath_example'),
                        ('auditlog_rule_minimumage', 56),
                        ('auditlog_rule_types', 'auditlog_rule_types_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.audit.purge.Dam',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_audit_purge_pages(self):
        """Test case for com_adobe_cq_audit_purge_pages

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('auditlog_rule_name', 'auditlog_rule_name_example'),
                        ('auditlog_rule_contentpath', 'auditlog_rule_contentpath_example'),
                        ('auditlog_rule_minimumage', 56),
                        ('auditlog_rule_types', 'auditlog_rule_types_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.audit.purge.Pages',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_audit_purge_replication(self):
        """Test case for com_adobe_cq_audit_purge_replication

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('auditlog_rule_name', 'auditlog_rule_name_example'),
                        ('auditlog_rule_contentpath', 'auditlog_rule_contentpath_example'),
                        ('auditlog_rule_minimumage', 56),
                        ('auditlog_rule_types', 'auditlog_rule_types_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.audit.purge.Replication',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter(self):
        """Test case for com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('keypair_id', 'keypair_id_example'),
                        ('keypair_alias', 'keypair_alias_example'),
                        ('cdnrewriter_attributes', 'cdnrewriter_attributes_example'),
                        ('cdn_rewriter_distribution_domain', 'cdn_rewriter_distribution_domain_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl(self):
        """Test case for com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cdn_config_distribution_domain', 'cdn_config_distribution_domain_example'),
                        ('cdn_config_enable_rewriting', True),
                        ('cdn_config_path_prefixes', 'cdn_config_path_prefixes_example'),
                        ('cdn_config_cdnttl', 56),
                        ('cdn_config_application_protocol', 'cdn_config_application_protocol_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_cdn_rewriter_impl_cdn_rewriter(self):
        """Test case for com_adobe_cq_cdn_rewriter_impl_cdn_rewriter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('cdnrewriter_attributes', 'cdnrewriter_attributes_example'),
                        ('cdn_rewriter_distribution_domain', 'cdn_rewriter_distribution_domain_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle(self):
        """Test case for com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('flush_agents', 'flush_agents_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_commerce_impl_asset_dynamic_image_handler(self):
        """Test case for com_adobe_cq_commerce_impl_asset_dynamic_image_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_commerce_asset_handler_active', True),
                        ('cq_commerce_asset_handler_name', 'cq_commerce_asset_handler_name_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl(self):
        """Test case for com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_commerce_asset_handler_fallback', 'cq_commerce_asset_handler_fallback_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_commerce_impl_asset_static_image_handler(self):
        """Test case for com_adobe_cq_commerce_impl_asset_static_image_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_commerce_asset_handler_active', True),
                        ('cq_commerce_asset_handler_name', 'cq_commerce_asset_handler_name_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_commerce_impl_asset_video_handler(self):
        """Test case for com_adobe_cq_commerce_impl_asset_video_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_commerce_asset_handler_active', True),
                        ('cq_commerce_asset_handler_name', 'cq_commerce_asset_handler_name_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_commerce_impl_promotion_promotion_manager_impl(self):
        """Test case for com_adobe_cq_commerce_impl_promotion_promotion_manager_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_commerce_promotion_root', 'cq_commerce_promotion_root_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl(self):
        """Test case for com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_commerce_cataloggenerator_bucketsize', 56),
                        ('cq_commerce_cataloggenerator_bucketname', 'cq_commerce_cataloggenerator_bucketname_example'),
                        ('cq_commerce_cataloggenerator_excludedtemplateproperties', 'cq_commerce_cataloggenerator_excludedtemplateproperties_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_commerce_pim_impl_page_event_listener(self):
        """Test case for com_adobe_cq_commerce_pim_impl_page_event_listener

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_commerce_pageeventlistener_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl(self):
        """Test case for com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('feed_generator_algorithm', 'feed_generator_algorithm_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_contentinsight_impl_reporting_services_settings_provider(self):
        """Test case for com_adobe_cq_contentinsight_impl_reporting_services_settings_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('reportingservices_url', 'reportingservices_url_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet(self):
        """Test case for com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('brightedge_url', 'brightedge_url_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle(self):
        """Test case for com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('reportingservices_proxy_whitelist', 'reportingservices_proxy_whitelist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_dam_cfm_impl_component_component_config_impl(self):
        """Test case for com_adobe_cq_dam_cfm_impl_component_component_config_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('dam_cfm_component_resource_type', 'dam_cfm_component_resource_type_example'),
                        ('dam_cfm_component_file_reference_prop', 'dam_cfm_component_file_reference_prop_example'),
                        ('dam_cfm_component_elements_prop', 'dam_cfm_component_elements_prop_example'),
                        ('dam_cfm_component_variation_prop', 'dam_cfm_component_variation_prop_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_dam_cfm_impl_conf_feature_config_impl(self):
        """Test case for com_adobe_cq_dam_cfm_impl_conf_feature_config_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('dam_cfm_resource_types', 'dam_cfm_resource_types_example'),
                        ('dam_cfm_reference_properties', 'dam_cfm_reference_properties_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor(self):
        """Test case for com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('pipeline_type', 'pipeline_type_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter(self):
        """Test case for com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('pipeline_type', 'pipeline_type_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter(self):
        """Test case for com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('pipeline_type', 'pipeline_type_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl(self):
        """Test case for com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('max_memory', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker(self):
        """Test case for com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('dmreplicateonmodify_enabled', True),
                        ('dmreplicateonmodify_forcesyncdeletes', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl(self):
        """Test case for com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('com_adobe_dam_mac_sync_client_so_timeout', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl(self):
        """Test case for com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths', 'com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths_example'),
                        ('com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions', True),
                        ('com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms', 56),
                        ('com_adobe_cq_dam_mac_sync_damsyncservice_platform', 'com_adobe_cq_dam_mac_sync_damsyncservice_platform_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_dam_processor_nui_impl_nui_asset_processor(self):
        """Test case for com_adobe_cq_dam_processor_nui_impl_nui_asset_processor

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('nui_enabled', True),
                        ('nui_service_url', 'nui_service_url_example'),
                        ('nui_api_key', 'nui_api_key_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_dam_s7imaging_impl_is_image_server_component(self):
        """Test case for com_adobe_cq_dam_s7imaging_impl_is_image_server_component

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('tcp_port', 'tcp_port_example'),
                        ('allow_remote_access', True),
                        ('max_render_rgn_pixels', 'max_render_rgn_pixels_example'),
                        ('max_message_size', 'max_message_size_example'),
                        ('random_access_url_timeout', 56),
                        ('worker_threads', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet(self):
        """Test case for com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cache_enable', True),
                        ('cache_root_paths', 'cache_root_paths_example'),
                        ('cache_max_size', 56),
                        ('cache_max_entries', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_dam_webdav_impl_io_asset_io_handler(self):
        """Test case for com_adobe_cq_dam_webdav_impl_io_asset_io_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('path_prefix', 'path_prefix_example'),
                        ('create_version', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job(self):
        """Test case for com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_webdav_version_linking_enable', True),
                        ('cq_dam_webdav_version_linking_scheduler_period', 56),
                        ('cq_dam_webdav_version_linking_staging_timeout', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_dam_webdav_impl_io_special_files_handler(self):
        """Test case for com_adobe_cq_dam_webdav_impl_io_special_files_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('com_day_cq_dam_core_impl_io_special_files_handler_filepatters', 'com_day_cq_dam_core_impl_io_special_files_handler_filepatters_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_deserfw_impl_deserialization_firewall_impl(self):
        """Test case for com_adobe_cq_deserfw_impl_deserialization_firewall_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('firewall_deserialization_whitelist', 'firewall_deserialization_whitelist_example'),
                        ('firewall_deserialization_blacklist', 'firewall_deserialization_blacklist_example'),
                        ('firewall_deserialization_diagnostics', 'firewall_deserialization_diagnostics_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_dtm_impl_service_dtm_web_service_impl(self):
        """Test case for com_adobe_cq_dtm_impl_service_dtm_web_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('connection_timeout', 56),
                        ('socket_timeout', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet(self):
        """Test case for com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('dtm_staging_ip_whitelist', 'dtm_staging_ip_whitelist_example'),
                        ('dtm_production_ip_whitelist', 'dtm_production_ip_whitelist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_dtm_reactor_impl_service_web_service_impl(self):
        """Test case for com_adobe_cq_dtm_reactor_impl_service_web_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('endpoint_uri', 'endpoint_uri_example'),
                        ('connection_timeout', 56),
                        ('socket_timeout', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_experiencelog_impl_experience_log_config_servlet(self):
        """Test case for com_adobe_cq_experiencelog_impl_experience_log_config_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enabled', True),
                        ('disabled_for_groups', 'disabled_for_groups_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_hc_content_packages_health_check(self):
        """Test case for com_adobe_cq_hc_content_packages_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_name', 'hc_name_example'),
                        ('hc_tags', 'hc_tags_example'),
                        ('hc_mbean_name', 'hc_mbean_name_example'),
                        ('package_names', 'package_names_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_history_impl_history_request_filter(self):
        """Test case for com_adobe_cq_history_impl_history_request_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('history_request_filter_excluded_selectors', 'history_request_filter_excluded_selectors_example'),
                        ('history_request_filter_excluded_extensions', 'history_request_filter_excluded_extensions_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_history_impl_history_service_impl(self):
        """Test case for com_adobe_cq_history_impl_history_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('history_service_resource_types', 'history_service_resource_types_example'),
                        ('history_service_path_filter', 'history_service_path_filter_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_inbox_impl_typeprovider_item_type_provider(self):
        """Test case for com_adobe_cq_inbox_impl_typeprovider_item_type_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('inbox_impl_typeprovider_registrypaths', 'inbox_impl_typeprovider_registrypaths_example'),
                        ('inbox_impl_typeprovider_legacypaths', 'inbox_impl_typeprovider_legacypaths_example'),
                        ('inbox_impl_typeprovider_defaulturl_failureitem', 'inbox_impl_typeprovider_defaulturl_failureitem_example'),
                        ('inbox_impl_typeprovider_defaulturl_workitem', 'inbox_impl_typeprovider_defaulturl_workitem_example'),
                        ('inbox_impl_typeprovider_defaulturl_task', 'inbox_impl_typeprovider_defaulturl_task_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_projects_impl_servlet_project_image_servlet(self):
        """Test case for com_adobe_cq_projects_impl_servlet_project_image_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('image_quality', 'image_quality_example'),
                        ('image_supported_resolutions', 'image_supported_resolutions_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_projects_purge_scheduler(self):
        """Test case for com_adobe_cq_projects_purge_scheduler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scheduledpurge_name', 'scheduledpurge_name_example'),
                        ('scheduledpurge_purge_active', True),
                        ('scheduledpurge_templates', 'scheduledpurge_templates_example'),
                        ('scheduledpurge_purge_groups', True),
                        ('scheduledpurge_purge_assets', True),
                        ('scheduledpurge_terminate_running_workflows', True),
                        ('scheduledpurge_daysold', 56),
                        ('scheduledpurge_save_threshold', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.projects.purge.Scheduler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl(self):
        """Test case for com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('include_paths', 'include_paths_example'),
                        ('exporter_user', 'exporter_user_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl(self):
        """Test case for com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('com_adobe_cq_screens_analytics_impl_url', 'com_adobe_cq_screens_analytics_impl_url_example'),
                        ('com_adobe_cq_screens_analytics_impl_apikey', 'com_adobe_cq_screens_analytics_impl_apikey_example'),
                        ('com_adobe_cq_screens_analytics_impl_project', 'com_adobe_cq_screens_analytics_impl_project_example'),
                        ('com_adobe_cq_screens_analytics_impl_environment', 'com_adobe_cq_screens_analytics_impl_environment_example'),
                        ('com_adobe_cq_screens_analytics_impl_send_frequency', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_screens_device_impl_device_service(self):
        """Test case for com_adobe_cq_screens_device_impl_device_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('com_adobe_aem_screens_player_pingfrequency', 56),
                        ('com_adobe_aem_screens_device_pasword_specialchars', 'com_adobe_aem_screens_device_pasword_specialchars_example'),
                        ('com_adobe_aem_screens_device_pasword_minlowercasechars', 56),
                        ('com_adobe_aem_screens_device_pasword_minuppercasechars', 56),
                        ('com_adobe_aem_screens_device_pasword_minnumberchars', 56),
                        ('com_adobe_aem_screens_device_pasword_minspecialchars', 56),
                        ('com_adobe_aem_screens_device_pasword_minlength', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_screens_device_registration_impl_registration_service_impl(self):
        """Test case for com_adobe_cq_screens_device_registration_impl_registration_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('device_registration_timeout', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_screens_impl_handler_channels_update_handler(self):
        """Test case for com_adobe_cq_screens_impl_handler_channels_update_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_pagesupdatehandler_imageresourcetypes', 'cq_pagesupdatehandler_imageresourcetypes_example'),
                        ('cq_pagesupdatehandler_productresourcetypes', 'cq_pagesupdatehandler_productresourcetypes_example'),
                        ('cq_pagesupdatehandler_videoresourcetypes', 'cq_pagesupdatehandler_videoresourcetypes_example'),
                        ('cq_pagesupdatehandler_dynamicsequenceresourcetypes', 'cq_pagesupdatehandler_dynamicsequenceresourcetypes_example'),
                        ('cq_pagesupdatehandler_previewmodepaths', 'cq_pagesupdatehandler_previewmodepaths_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job(self):
        """Test case for com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scheduler_expression', 'scheduler_expression_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl(self):
        """Test case for com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('com_adobe_aem_screens_impl_remote_request_timeout', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_screens_impl_screens_channel_post_processor(self):
        """Test case for com_adobe_cq_screens_impl_screens_channel_post_processor

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('screens_channels_properties_to_remove', 'screens_channels_properties_to_remove_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl(self):
        """Test case for com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path', 'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path_example'),
                        ('com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency', 'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency_example'),
                        ('com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout', 56),
                        ('com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients', 'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients_example'),
                        ('com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver', 'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver_example'),
                        ('com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport', 56),
                        ('com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls', True),
                        ('com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username', 'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username_example'),
                        ('com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password', 'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider(self):
        """Test case for com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('global_size', 56),
                        ('max_disk_usage', 56),
                        ('persistence_enabled', True),
                        ('thread_pool_max_size', 56),
                        ('scheduled_thread_pool_max_size', 56),
                        ('graceful_shutdown_timeout', 56),
                        ('queues', 'queues_example'),
                        ('topics', 'topics_example'),
                        ('addresses_max_delivery_attempts', 56),
                        ('addresses_expiry_delay', 56),
                        ('addresses_address_full_message_policy', 'addresses_address_full_message_policy_example'),
                        ('addresses_max_size_bytes', 56),
                        ('addresses_page_size_bytes', 56),
                        ('addresses_page_cache_max_size', 56),
                        ('cluster_user', 'cluster_user_example'),
                        ('cluster_password', 'cluster_password_example'),
                        ('cluster_call_timeout', 56),
                        ('cluster_call_failover_timeout', 56),
                        ('cluster_client_failure_check_period', 56),
                        ('cluster_notification_attempts', 56),
                        ('cluster_notification_interval', 56),
                        ('id_cache_size', 56),
                        ('cluster_confirmation_window_size', 56),
                        ('cluster_connection_ttl', 56),
                        ('cluster_duplicate_detection', True),
                        ('cluster_initial_connect_attempts', 56),
                        ('cluster_max_retry_interval', 56),
                        ('cluster_min_large_message_size', 56),
                        ('cluster_producer_window_size', 56),
                        ('cluster_reconnect_attempts', 56),
                        ('cluster_retry_interval', 56),
                        ('cluster_retry_interval_multiplier', 3.4)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl(self):
        """Test case for com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_project_path', 'com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_project_path_example'),
                        ('com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_schedule_frequency', 'com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_schedule_frequency_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl(self):
        """Test case for com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('disable_smart_sync', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag(self):
        """Test case for com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enable_data_triggered_content', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch(self):
        """Test case for com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check(self):
        """Test case for com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check(self):
        """Test case for com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example'),
                        ('dispatcher_address', 'dispatcher_address_example'),
                        ('dispatcher_filter_allowed', 'dispatcher_filter_allowed_example'),
                        ('dispatcher_filter_blocked', 'dispatcher_filter_blocked_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_security_hc_packages_impl_example_content_health_check(self):
        """Test case for com_adobe_cq_security_hc_packages_impl_example_content_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check(self):
        """Test case for com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example'),
                        ('webserver_address', 'webserver_address_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_accountverification_impl_account_management_config_im(self):
        """Test case for com_adobe_cq_social_accountverification_impl_account_management_config_im

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enable', True),
                        ('ttl1', 56),
                        ('ttl2', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_activitystreams_client_impl_social_activity_componen(self):
        """Test case for com_adobe_cq_social_activitystreams_client_impl_social_activity_componen

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('priority', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co(self):
        """Test case for com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('priority', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler(self):
        """Test case for com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('event_topics', 'event_topics_example'),
                        ('event_filter', 'event_filter_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten(self):
        """Test case for com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('accepted', True),
                        ('ranked', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s(self):
        """Test case for com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('ranking', 56),
                        ('enable', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre(self):
        """Test case for com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('stream_path', 'stream_path_example'),
                        ('stream_name', 'stream_name_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i(self):
        """Test case for com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('max_retry', 56),
                        ('field_whitelist', 'field_whitelist_example'),
                        ('attachment_type_blacklist', 'attachment_type_blacklist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_calendar_client_operationextensions_event_attachmen(self):
        """Test case for com_adobe_cq_social_calendar_client_operationextensions_event_attachmen

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('attachment_type_blacklist', 'attachment_type_blacklist_example'),
                        ('extension_order', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_calendar_servlets_time_zone_servlet(self):
        """Test case for com_adobe_cq_social_calendar_servlets_time_zone_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('timezones_expirytime', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event(self):
        """Test case for com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('ranking', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se(self):
        """Test case for com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('field_whitelist', 'field_whitelist_example'),
                        ('attachment_type_blacklist', 'attachment_type_blacklist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati(self):
        """Test case for com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('field_whitelist', 'field_whitelist_example'),
                        ('attachment_type_blacklist', 'attachment_type_blacklist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c(self):
        """Test case for com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('num_user_limit', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos(self):
        """Test case for com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enable_scheduled_posts_search', True),
                        ('number_of_minutes', 56),
                        ('max_search_limit', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_cors_cors_authentication_filter(self):
        """Test case for com_adobe_cq_social_commons_cors_cors_authentication_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cors_enabling', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider(self):
        """Test case for com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('priority_order', 56),
                        ('reply_email_patterns', 'reply_email_patterns_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl(self):
        """Test case for com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('context_path', 'context_path_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener(self):
        """Test case for com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('event_topics', 'event_topics_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider(self):
        """Test case for com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('priority_order', 56),
                        ('reply_email_patterns', 'reply_email_patterns_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp(self):
        """Test case for com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('pattern_time', 'pattern_time_example'),
                        ('pattern_newline', 'pattern_newline_example'),
                        ('pattern_day_of_month', 'pattern_day_of_month_example'),
                        ('pattern_month', 'pattern_month_example'),
                        ('pattern_year', 'pattern_year_example'),
                        ('pattern_date', 'pattern_date_example'),
                        ('pattern_date_time', 'pattern_date_time_example'),
                        ('pattern_email', 'pattern_email_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp(self):
        """Test case for com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('email_name', 'email_name_example'),
                        ('email_create_post_from_reply', True),
                        ('email_add_comment_id_to', 'email_add_comment_id_to_example'),
                        ('email_subject_maximum_length', 56),
                        ('email_reply_to_address', 'email_reply_to_address_example'),
                        ('email_reply_to_delimiter', 'email_reply_to_delimiter_example'),
                        ('email_tracker_id_prefix_in_subject', 'email_tracker_id_prefix_in_subject_example'),
                        ('email_tracker_id_prefix_in_body', 'email_tracker_id_prefix_in_body_example'),
                        ('email_as_html', True),
                        ('email_default_user_name', 'email_default_user_name_example'),
                        ('email_templates_root_path', 'email_templates_root_path_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_emailreply_impl_email_reply_importer(self):
        """Test case for com_adobe_cq_social_commons_emailreply_impl_email_reply_importer

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('connect_protocol', 'connect_protocol_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider(self):
        """Test case for com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('priority_order', 56),
                        ('reply_email_patterns', 'reply_email_patterns_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider(self):
        """Test case for com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('priority_order', 56),
                        ('reply_email_patterns', 'reply_email_patterns_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider(self):
        """Test case for com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('priority_order', 56),
                        ('reply_email_patterns', 'reply_email_patterns_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider(self):
        """Test case for com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('priority_order', 56),
                        ('reply_email_patterns', 'reply_email_patterns_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider(self):
        """Test case for com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('reply_email_patterns', 'reply_email_patterns_example'),
                        ('priority_order', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider(self):
        """Test case for com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('priority_order', 56),
                        ('reply_email_patterns', 'reply_email_patterns_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload(self):
        """Test case for com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('number_of_days', 56),
                        ('age_of_file', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl(self):
        """Test case for com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('event_topics', 'event_topics_example'),
                        ('event_filter', 'event_filter_example'),
                        ('verbs', 'verbs_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit(self):
        """Test case for com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enable', True),
                        ('ugc_limit', 56),
                        ('ugc_limit_duration', 56),
                        ('domains', 'domains_example'),
                        ('to_list', 'to_list_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl(self):
        """Test case for com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('oauth_provider_id', 'oauth_provider_id_example'),
                        ('oauth_cloud_config_root', 'oauth_cloud_config_root_example'),
                        ('provider_config_root', 'provider_config_root_example'),
                        ('provider_config_create_tags_enabled', True),
                        ('provider_config_user_folder', 'provider_config_user_folder_example'),
                        ('provider_config_facebook_fetch_fields', True),
                        ('provider_config_facebook_fields', 'provider_config_facebook_fields_example'),
                        ('provider_config_refresh_userdata_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle(self):
        """Test case for com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('path', 'path_example'),
                        ('service_ranking', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper(self):
        """Test case for com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('facebook', 'facebook_example'),
                        ('twitter', 'twitter_example'),
                        ('provider_config_user_folder', 'provider_config_user_folder_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl(self):
        """Test case for com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('oauth_provider_id', 'oauth_provider_id_example'),
                        ('oauth_cloud_config_root', 'oauth_cloud_config_root_example'),
                        ('provider_config_root', 'provider_config_root_example'),
                        ('provider_config_user_folder', 'provider_config_user_folder_example'),
                        ('provider_config_twitter_enable_params', True),
                        ('provider_config_twitter_params', 'provider_config_twitter_params_example'),
                        ('provider_config_refresh_userdata_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_content_fragments_services_impl_communities_fragmen(self):
        """Test case for com_adobe_cq_social_content_fragments_services_impl_communities_fragmen

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_social_content_fragments_services_enabled', True),
                        ('cq_social_content_fragments_services_wait_time_seconds', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory(self):
        """Test case for com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('version_id', 'version_id_example'),
                        ('cache_on', True),
                        ('concurrency_level', 56),
                        ('cache_start_size', 56),
                        ('cache_ttl', 56),
                        ('cache_size', 56),
                        ('time_limit', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory(self):
        """Test case for com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('solr_zk_timeout', 'solr_zk_timeout_example'),
                        ('solr_commit', 'solr_commit_example'),
                        ('cache_on', True),
                        ('concurrency_level', 56),
                        ('cache_start_size', 56),
                        ('cache_ttl', 56),
                        ('cache_size', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor(self):
        """Test case for com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('solr_zk_timeout', 'solr_zk_timeout_example'),
                        ('solr_commit', 'solr_commit_example'),
                        ('cache_on', True),
                        ('concurrency_level', 56),
                        ('cache_start_size', 56),
                        ('cache_ttl', 56),
                        ('cache_size', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f(self):
        """Test case for com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('is_member_check', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto(self):
        """Test case for com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('is_member_check', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l(self):
        """Test case for com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('field_whitelist', 'field_whitelist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou(self):
        """Test case for com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('field_whitelist', 'field_whitelist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_enablement_services_impl_author_marker_impl(self):
        """Test case for com_adobe_cq_social_enablement_services_impl_author_marker_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge(self):
        """Test case for com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_servlet_selectors', 'sling_servlet_selectors_example'),
                        ('sling_servlet_extensions', 'sling_servlet_extensions_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera(self):
        """Test case for com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('field_whitelist', 'field_whitelist_example'),
                        ('attachment_type_blacklist', 'attachment_type_blacklist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service(self):
        """Test case for com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('field_whitelist', 'field_whitelist_example'),
                        ('attachment_type_blacklist', 'attachment_type_blacklist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_forum_dispatcher_impl_flush_operations(self):
        """Test case for com_adobe_cq_social_forum_dispatcher_impl_flush_operations

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('extension_order', 56),
                        ('flush_forumontopic', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_group_client_impl_community_group_collection_componen(self):
        """Test case for com_adobe_cq_social_group_client_impl_community_group_collection_componen

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('group_listing_pagination_enable', True),
                        ('group_listing_lazyloading_enable', True),
                        ('page_size', 56),
                        ('priority', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_group_impl_group_service_impl(self):
        """Test case for com_adobe_cq_social_group_impl_group_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('max_wait_time', 56),
                        ('min_wait_between_retries', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_handlebars_guava_template_cache_impl(self):
        """Test case for com_adobe_cq_social_handlebars_guava_template_cache_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('parameter_guava_cache_enabled', True),
                        ('parameter_guava_cache_params', 'parameter_guava_cache_params_example'),
                        ('parameter_guava_cache_reload', True),
                        ('service_ranking', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s(self):
        """Test case for com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('field_whitelist', 'field_whitelist_example'),
                        ('attachment_type_blacklist', 'attachment_type_blacklist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser(self):
        """Test case for com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('field_whitelist', 'field_whitelist_example'),
                        ('attachment_type_blacklist', 'attachment_type_blacklist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_members_endpoints_impl_community_member_group_profile(self):
        """Test case for com_adobe_cq_social_members_endpoints_impl_community_member_group_profile

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('field_whitelist', 'field_whitelist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o(self):
        """Test case for com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('field_whitelist', 'field_whitelist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_members_impl_community_member_group_profile_component_f(self):
        """Test case for com_adobe_cq_social_members_impl_community_member_group_profile_component_f

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('everyone_limit', 56),
                        ('priority', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation(self):
        """Test case for com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('message_properties', 'message_properties_example'),
                        ('message_box_size_limit', 56),
                        ('message_count_limit', 56),
                        ('notify_failure', True),
                        ('failure_message_from', 'failure_message_from_example'),
                        ('failure_template_path', 'failure_template_path_example'),
                        ('max_retries', 56),
                        ('min_wait_between_retries', 56),
                        ('count_update_pool_size', 56),
                        ('inbox_path', 'inbox_path_example'),
                        ('sentitems_path', 'sentitems_path_example'),
                        ('support_attachments', True),
                        ('support_group_messaging', True),
                        ('max_total_recipients', 56),
                        ('batch_size', 56),
                        ('max_total_attachment_size', 56),
                        ('attachment_type_blacklist', 'attachment_type_blacklist_example'),
                        ('allowed_attachment_types', 'allowed_attachment_types_example'),
                        ('service_selector', 'service_selector_example'),
                        ('field_whitelist', 'field_whitelist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen(self):
        """Test case for com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('resource_type_filters', 'resource_type_filters_example'),
                        ('priority', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social(self):
        """Test case for com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('priority', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen(self):
        """Test case for com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('priority', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci(self):
        """Test case for com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('resource_type_filters', 'resource_type_filters_example'),
                        ('priority', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_notifications_impl_mentions_router(self):
        """Test case for com_adobe_cq_social_notifications_impl_mentions_router

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('event_topics', 'event_topics_example'),
                        ('event_filter', 'event_filter_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_notifications_impl_notification_manager_impl(self):
        """Test case for com_adobe_cq_social_notifications_impl_notification_manager_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('max_unread_notification_count', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_notifications_impl_notifications_router(self):
        """Test case for com_adobe_cq_social_notifications_impl_notifications_router

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('event_topics', 'event_topics_example'),
                        ('event_filter', 'event_filter_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic(self):
        """Test case for com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('field_whitelist', 'field_whitelist_example'),
                        ('attachment_type_blacklist', 'attachment_type_blacklist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i(self):
        """Test case for com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_social_reporting_analytics_polling_importer_interval', 56),
                        ('cq_social_reporting_analytics_polling_importer_page_size', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m(self):
        """Test case for com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('report_fetch_delay', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s(self):
        """Test case for com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_social_console_analytics_sites_mapping', 'cq_social_console_analytics_sites_mapping_example'),
                        ('priority', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi(self):
        """Test case for com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('field_whitelist', 'field_whitelist_example'),
                        ('attachment_type_blacklist', 'attachment_type_blacklist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet(self):
        """Test case for com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_servlet_selectors', 'sling_servlet_selectors_example'),
                        ('sling_servlet_extensions', 'sling_servlet_extensions_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet(self):
        """Test case for com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_servlet_selectors', 'sling_servlet_selectors_example'),
                        ('sling_servlet_extensions', 'sling_servlet_extensions_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_scoring_impl_scoring_event_listener(self):
        """Test case for com_adobe_cq_social_scoring_impl_scoring_event_listener

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('event_topics', 'event_topics_example'),
                        ('event_filter', 'event_filter_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl(self):
        """Test case for com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enable_fallback', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_site_endpoints_impl_site_operation_service(self):
        """Test case for com_adobe_cq_social_site_endpoints_impl_site_operation_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('field_whitelist', 'field_whitelist_example'),
                        ('site_path_filters', 'site_path_filters_example'),
                        ('site_package_group', 'site_package_group_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_site_impl_analytics_component_configuration_service_im(self):
        """Test case for com_adobe_cq_social_site_impl_analytics_component_configuration_service_im

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_social_console_analytics_components', 'cq_social_console_analytics_components_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_site_impl_site_configurator_impl(self):
        """Test case for com_adobe_cq_social_site_impl_site_configurator_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('components_using_tags', 'components_using_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_srp_impl_social_solr_connector(self):
        """Test case for com_adobe_cq_social_srp_impl_social_solr_connector

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('srp_type', 'srp_type_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_sync_impl_diff_changes_observer(self):
        """Test case for com_adobe_cq_social_sync_impl_diff_changes_observer

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enabled', True),
                        ('agent_name', 'agent_name_example'),
                        ('diff_path', 'diff_path_example'),
                        ('property_names', 'property_names_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_sync_impl_group_sync_listener_impl(self):
        """Test case for com_adobe_cq_social_sync_impl_group_sync_listener_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('nodetypes', 'nodetypes_example'),
                        ('ignorableprops', 'ignorableprops_example'),
                        ('ignorablenodes', 'ignorablenodes_example'),
                        ('enabled', True),
                        ('distfolders', 'distfolders_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_sync_impl_publisher_sync_service_impl(self):
        """Test case for com_adobe_cq_social_sync_impl_publisher_sync_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('active_run_modes', 'active_run_modes_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_sync_impl_user_sync_listener_impl(self):
        """Test case for com_adobe_cq_social_sync_impl_user_sync_listener_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('nodetypes', 'nodetypes_example'),
                        ('ignorableprops', 'ignorableprops_example'),
                        ('ignorablenodes', 'ignorablenodes_example'),
                        ('enabled', True),
                        ('distfolders', 'distfolders_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_translation_impl_translation_service_config_manager(self):
        """Test case for com_adobe_cq_social_translation_impl_translation_service_config_manager

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('translate_language', 'translate_language_example'),
                        ('translate_display', 'translate_display_example'),
                        ('translate_attribution', True),
                        ('translate_caching', 'translate_caching_example'),
                        ('translate_smart_rendering', 'translate_smart_rendering_example'),
                        ('translate_caching_duration', 'translate_caching_duration_example'),
                        ('translate_session_save_interval', 'translate_session_save_interval_example'),
                        ('translate_session_save_batch_limit', 'translate_session_save_batch_limit_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_translation_impl_ugc_language_detector(self):
        """Test case for com_adobe_cq_social_translation_impl_ugc_language_detector

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('event_topics', 'event_topics_example'),
                        ('event_filter', 'event_filter_example'),
                        ('translate_listener_type', 'translate_listener_type_example'),
                        ('translate_property_list', 'translate_property_list_example'),
                        ('pool_size', 56),
                        ('max_pool_size', 56),
                        ('queue_size', 56),
                        ('keep_alive_time', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl(self):
        """Test case for com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('thread_pool_size', 56),
                        ('delay_time', 56),
                        ('worker_sleep_time', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl(self):
        """Test case for com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('pool_size', 56),
                        ('max_pool_size', 56),
                        ('queue_size', 56),
                        ('keep_alive_time', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl(self):
        """Test case for com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('is_primary_publisher', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_ugcbase_impl_social_utils_impl(self):
        """Test case for com_adobe_cq_social_ugcbase_impl_social_utils_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('legacy_cloud_ugc_path_mapping', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl(self):
        """Test case for com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('automoderation_sequence', 'automoderation_sequence_example'),
                        ('automoderation_onfailurestop', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process(self):
        """Test case for com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('watchwords_positive', 'watchwords_positive_example'),
                        ('watchwords_negative', 'watchwords_negative_example'),
                        ('watchwords_path', 'watchwords_path_example'),
                        ('sentiment_path', 'sentiment_path_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli(self):
        """Test case for com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('default_attachment_type_blacklist', 'default_attachment_type_blacklist_example'),
                        ('baseline_attachment_type_blacklist', 'baseline_attachment_type_blacklist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl(self):
        """Test case for com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('parameter_whitelist', 'parameter_whitelist_example'),
                        ('parameter_whitelist_prefixes', 'parameter_whitelist_prefixes_example'),
                        ('binary_parameter_whitelist', 'binary_parameter_whitelist_example'),
                        ('modifier_whitelist', 'modifier_whitelist_example'),
                        ('operation_whitelist', 'operation_whitelist_example'),
                        ('operation_whitelist_prefixes', 'operation_whitelist_prefixes_example'),
                        ('typehint_whitelist', 'typehint_whitelist_example'),
                        ('resourcetype_whitelist', 'resourcetype_whitelist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet(self):
        """Test case for com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_servlet_extensions', 'sling_servlet_extensions_example'),
                        ('sling_servlet_paths', 'sling_servlet_paths_example'),
                        ('sling_servlet_methods', 'sling_servlet_methods_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_social_user_impl_transport_http_to_publisher(self):
        """Test case for com_adobe_cq_social_user_impl_transport_http_to_publisher

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enable', True),
                        ('agent_configuration', 'agent_configuration_example'),
                        ('context_path', 'context_path_example'),
                        ('disabled_cipher_suites', 'disabled_cipher_suites_example'),
                        ('enabled_cipher_suites', 'enabled_cipher_suites_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact(self):
        """Test case for com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('resource_types', 'resource_types_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup(self):
        """Test case for com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('delete_path_regexps', 'delete_path_regexps_example'),
                        ('delete_sql2_query', 'delete_sql2_query_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup(self):
        """Test case for com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('delete_name_regexps', 'delete_name_regexps_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service(self):
        """Test case for com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('threshold', 56),
                        ('job_topic_name', 'job_topic_name_example'),
                        ('email_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task(self):
        """Test case for com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scheduler_expression', 'scheduler_expression_example'),
                        ('job_purge_threshold', 56),
                        ('job_purge_max_jobs', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service(self):
        """Test case for com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('threshold', 56),
                        ('job_topic_name', 'job_topic_name_example'),
                        ('email_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service(self):
        """Test case for com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('threshold', 56),
                        ('job_topic_name', 'job_topic_name_example'),
                        ('email_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_wcm_launches_impl_launches_event_handler(self):
        """Test case for com_adobe_cq_wcm_launches_impl_launches_event_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('event_filter', 'event_filter_example'),
                        ('launches_eventhandler_threadpool_maxsize', 56),
                        ('launches_eventhandler_threadpool_priority', 'launches_eventhandler_threadpool_priority_example'),
                        ('launches_eventhandler_updatelastmodification', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator(self):
        """Test case for com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_wcm_qrcode_servlet_whitelist', 'cq_wcm_qrcode_servlet_whitelist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_wcm_style_internal_component_style_info_cache_impl(self):
        """Test case for com_adobe_cq_wcm_style_internal_component_style_info_cache_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('size', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl(self):
        """Test case for com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sync_translation_state_scheduling_format', 'sync_translation_state_scheduling_format_example'),
                        ('scheduling_repeat_translation_scheduling_format', 'scheduling_repeat_translation_scheduling_format_example'),
                        ('sync_translation_state_lock_timeout_in_minutes', 'sync_translation_state_lock_timeout_in_minutes_example'),
                        ('export_format', 'export_format_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service(self):
        """Test case for com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('portal_outboxes', 'portal_outboxes_example'),
                        ('draft_data_service', 'draft_data_service_example'),
                        ('draft_metadata_service', 'draft_metadata_service_example'),
                        ('submit_data_service', 'submit_data_service_example'),
                        ('submit_metadata_service', 'submit_metadata_service_example'),
                        ('pending_sign_data_service', 'pending_sign_data_service_example'),
                        ('pending_sign_metadata_service', 'pending_sign_metadata_service_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_fd_fp_config_forms_portal_scheduler_service(self):
        """Test case for com_adobe_fd_fp_config_forms_portal_scheduler_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('formportal_interval', 'formportal_interval_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_forms_common_service_impl_default_data_provider(self):
        """Test case for com_adobe_forms_common_service_impl_default_data_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('alloweddata_file_locations', 'alloweddata_file_locations_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_forms_common_service_impl_forms_common_configuration_service_imp(self):
        """Test case for com_adobe_forms_common_service_impl_forms_common_configuration_service_imp

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('temp_storage_config', 'temp_storage_config_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_forms_common_servlet_temp_clean_up_task(self):
        """Test case for com_adobe_forms_common_servlet_temp_clean_up_task

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scheduler_expression', 'scheduler_expression_example'),
                        ('duration_for_temporary_storage', 'duration_for_temporary_storage_example'),
                        ('duration_for_anonymous_storage', 'duration_for_anonymous_storage_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_acp_platform_platform_servlet(self):
        """Test case for com_adobe_granite_acp_platform_platform_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('query_limit', 56),
                        ('file_type_extension_map', 'file_type_extension_map_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_activitystreams_impl_activity_manager_impl(self):
        """Test case for com_adobe_granite_activitystreams_impl_activity_manager_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('aggregate_relationships', 'aggregate_relationships_example'),
                        ('aggregate_descend_virtual', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_analyzer_base_system_status_servlet(self):
        """Test case for com_adobe_granite_analyzer_base_system_status_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('disabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet(self):
        """Test case for com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('disabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_apicontroller_filter_resolver_hook_factory(self):
        """Test case for com_adobe_granite_apicontroller_filter_resolver_hook_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('com_adobe_cq_cdn_cdn_rewriter', 'com_adobe_cq_cdn_cdn_rewriter_example'),
                        ('com_adobe_cq_cloud_config_components', 'com_adobe_cq_cloud_config_components_example'),
                        ('com_adobe_cq_cloud_config_core', 'com_adobe_cq_cloud_config_core_example'),
                        ('com_adobe_cq_cloud_config_ui', 'com_adobe_cq_cloud_config_ui_example'),
                        ('com_adobe_cq_com_adobe_cq_editor', 'com_adobe_cq_com_adobe_cq_editor_example'),
                        ('com_adobe_cq_com_adobe_cq_projects_core', 'com_adobe_cq_com_adobe_cq_projects_core_example'),
                        ('com_adobe_cq_com_adobe_cq_projects_wcm_core', 'com_adobe_cq_com_adobe_cq_projects_wcm_core_example'),
                        ('com_adobe_cq_com_adobe_cq_ui_commons', 'com_adobe_cq_com_adobe_cq_ui_commons_example'),
                        ('com_adobe_cq_com_adobe_cq_wcm_style', 'com_adobe_cq_com_adobe_cq_wcm_style_example'),
                        ('com_adobe_cq_cq_activitymap_integration', 'com_adobe_cq_cq_activitymap_integration_example'),
                        ('com_adobe_cq_cq_contexthub_commons', 'com_adobe_cq_cq_contexthub_commons_example'),
                        ('com_adobe_cq_cq_dtm', 'com_adobe_cq_cq_dtm_example'),
                        ('com_adobe_cq_cq_healthcheck', 'com_adobe_cq_cq_healthcheck_example'),
                        ('com_adobe_cq_cq_multisite_targeting', 'com_adobe_cq_cq_multisite_targeting_example'),
                        ('com_adobe_cq_cq_pre_upgrade_cleanup', 'com_adobe_cq_cq_pre_upgrade_cleanup_example'),
                        ('com_adobe_cq_cq_product_info_provider', 'com_adobe_cq_cq_product_info_provider_example'),
                        ('com_adobe_cq_cq_rest_sites', 'com_adobe_cq_cq_rest_sites_example'),
                        ('com_adobe_cq_cq_security_hc', 'com_adobe_cq_cq_security_hc_example'),
                        ('com_adobe_cq_dam_cq_dam_svg_handler', 'com_adobe_cq_dam_cq_dam_svg_handler_example'),
                        ('com_adobe_cq_dam_cq_scene7_imaging', 'com_adobe_cq_dam_cq_scene7_imaging_example'),
                        ('com_adobe_cq_dtm_reactor_core', 'com_adobe_cq_dtm_reactor_core_example'),
                        ('com_adobe_cq_dtm_reactor_ui', 'com_adobe_cq_dtm_reactor_ui_example'),
                        ('com_adobe_cq_exp_jspel_resolver', 'com_adobe_cq_exp_jspel_resolver_example'),
                        ('com_adobe_cq_inbox_cq_inbox', 'com_adobe_cq_inbox_cq_inbox_example'),
                        ('com_adobe_cq_json_schema_parser', 'com_adobe_cq_json_schema_parser_example'),
                        ('com_adobe_cq_media_cq_media_publishing_dps_fp_core', 'com_adobe_cq_media_cq_media_publishing_dps_fp_core_example'),
                        ('com_adobe_cq_mobile_cq_mobile_caas', 'com_adobe_cq_mobile_cq_mobile_caas_example'),
                        ('com_adobe_cq_mobile_cq_mobile_index_builder', 'com_adobe_cq_mobile_cq_mobile_index_builder_example'),
                        ('com_adobe_cq_mobile_cq_mobile_phonegap_build', 'com_adobe_cq_mobile_cq_mobile_phonegap_build_example'),
                        ('com_adobe_cq_myspell', 'com_adobe_cq_myspell_example'),
                        ('com_adobe_cq_sample_we_retail_core', 'com_adobe_cq_sample_we_retail_core_example'),
                        ('com_adobe_cq_screens_com_adobe_cq_screens_dcc', 'com_adobe_cq_screens_com_adobe_cq_screens_dcc_example'),
                        ('com_adobe_cq_screens_com_adobe_cq_screens_mq_core', 'com_adobe_cq_screens_com_adobe_cq_screens_mq_core_example'),
                        ('com_adobe_cq_social_cq_social_as_provider', 'com_adobe_cq_social_cq_social_as_provider_example'),
                        ('com_adobe_cq_social_cq_social_badging_basic_impl', 'com_adobe_cq_social_cq_social_badging_basic_impl_example'),
                        ('com_adobe_cq_social_cq_social_badging_impl', 'com_adobe_cq_social_cq_social_badging_impl_example'),
                        ('com_adobe_cq_social_cq_social_calendar_impl', 'com_adobe_cq_social_cq_social_calendar_impl_example'),
                        ('com_adobe_cq_social_cq_social_content_fragments_impl', 'com_adobe_cq_social_cq_social_content_fragments_impl_example'),
                        ('com_adobe_cq_social_cq_social_enablement_impl', 'com_adobe_cq_social_cq_social_enablement_impl_example'),
                        ('com_adobe_cq_social_cq_social_graph_impl', 'com_adobe_cq_social_cq_social_graph_impl_example'),
                        ('com_adobe_cq_social_cq_social_ideation_impl', 'com_adobe_cq_social_cq_social_ideation_impl_example'),
                        ('com_adobe_cq_social_cq_social_jcr_provider', 'com_adobe_cq_social_cq_social_jcr_provider_example'),
                        ('com_adobe_cq_social_cq_social_members_impl', 'com_adobe_cq_social_cq_social_members_impl_example'),
                        ('com_adobe_cq_social_cq_social_ms_provider', 'com_adobe_cq_social_cq_social_ms_provider_example'),
                        ('com_adobe_cq_social_cq_social_notifications_channels_web', 'com_adobe_cq_social_cq_social_notifications_channels_web_example'),
                        ('com_adobe_cq_social_cq_social_notifications_impl', 'com_adobe_cq_social_cq_social_notifications_impl_example'),
                        ('com_adobe_cq_social_cq_social_rdb_provider', 'com_adobe_cq_social_cq_social_rdb_provider_example'),
                        ('com_adobe_cq_social_cq_social_scf_impl', 'com_adobe_cq_social_cq_social_scf_impl_example'),
                        ('com_adobe_cq_social_cq_social_scoring_basic_impl', 'com_adobe_cq_social_cq_social_scoring_basic_impl_example'),
                        ('com_adobe_cq_social_cq_social_scoring_impl', 'com_adobe_cq_social_cq_social_scoring_impl_example'),
                        ('com_adobe_cq_social_cq_social_serviceusers_impl', 'com_adobe_cq_social_cq_social_serviceusers_impl_example'),
                        ('com_adobe_cq_social_cq_social_srp_impl', 'com_adobe_cq_social_cq_social_srp_impl_example'),
                        ('com_adobe_cq_social_cq_social_ugcbase_impl', 'com_adobe_cq_social_cq_social_ugcbase_impl_example'),
                        ('com_adobe_dam_cq_dam_cfm_impl', 'com_adobe_dam_cq_dam_cfm_impl_example'),
                        ('com_adobe_forms_foundation_forms_foundation_base', 'com_adobe_forms_foundation_forms_foundation_base_example'),
                        ('com_adobe_granite_apicontroller', 'com_adobe_granite_apicontroller_example'),
                        ('com_adobe_granite_asset_core', 'com_adobe_granite_asset_core_example'),
                        ('com_adobe_granite_auth_sso', 'com_adobe_granite_auth_sso_example'),
                        ('com_adobe_granite_bundles_hc_impl', 'com_adobe_granite_bundles_hc_impl_example'),
                        ('com_adobe_granite_compat_router', 'com_adobe_granite_compat_router_example'),
                        ('com_adobe_granite_conf', 'com_adobe_granite_conf_example'),
                        ('com_adobe_granite_conf_ui_core', 'com_adobe_granite_conf_ui_core_example'),
                        ('com_adobe_granite_cors', 'com_adobe_granite_cors_example'),
                        ('com_adobe_granite_crx_explorer', 'com_adobe_granite_crx_explorer_example'),
                        ('com_adobe_granite_crxde_lite', 'com_adobe_granite_crxde_lite_example'),
                        ('com_adobe_granite_crypto_config', 'com_adobe_granite_crypto_config_example'),
                        ('com_adobe_granite_crypto_extension', 'com_adobe_granite_crypto_extension_example'),
                        ('com_adobe_granite_crypto_file', 'com_adobe_granite_crypto_file_example'),
                        ('com_adobe_granite_crypto_jcr', 'com_adobe_granite_crypto_jcr_example'),
                        ('com_adobe_granite_csrf', 'com_adobe_granite_csrf_example'),
                        ('com_adobe_granite_distribution_core', 'com_adobe_granite_distribution_core_example'),
                        ('com_adobe_granite_dropwizard_metrics', 'com_adobe_granite_dropwizard_metrics_example'),
                        ('com_adobe_granite_frags_impl', 'com_adobe_granite_frags_impl_example'),
                        ('com_adobe_granite_gibson', 'com_adobe_granite_gibson_example'),
                        ('com_adobe_granite_infocollector', 'com_adobe_granite_infocollector_example'),
                        ('com_adobe_granite_installer_factory_packages', 'com_adobe_granite_installer_factory_packages_example'),
                        ('com_adobe_granite_jetty_ssl', 'com_adobe_granite_jetty_ssl_example'),
                        ('com_adobe_granite_jobs_async', 'com_adobe_granite_jobs_async_example'),
                        ('com_adobe_granite_maintenance_oak', 'com_adobe_granite_maintenance_oak_example'),
                        ('com_adobe_granite_monitoring_core', 'com_adobe_granite_monitoring_core_example'),
                        ('com_adobe_granite_queries', 'com_adobe_granite_queries_example'),
                        ('com_adobe_granite_replication_hc_impl', 'com_adobe_granite_replication_hc_impl_example'),
                        ('com_adobe_granite_repository_checker', 'com_adobe_granite_repository_checker_example'),
                        ('com_adobe_granite_repository_hc_impl', 'com_adobe_granite_repository_hc_impl_example'),
                        ('com_adobe_granite_rest_assets', 'com_adobe_granite_rest_assets_example'),
                        ('com_adobe_granite_security_ui', 'com_adobe_granite_security_ui_example'),
                        ('com_adobe_granite_startup', 'com_adobe_granite_startup_example'),
                        ('com_adobe_granite_tagsoup', 'com_adobe_granite_tagsoup_example'),
                        ('com_adobe_granite_taskmanagement_core', 'com_adobe_granite_taskmanagement_core_example'),
                        ('com_adobe_granite_taskmanagement_workflow', 'com_adobe_granite_taskmanagement_workflow_example'),
                        ('com_adobe_granite_ui_clientlibs_compiler_less', 'com_adobe_granite_ui_clientlibs_compiler_less_example'),
                        ('com_adobe_granite_ui_clientlibs_processor_gcc', 'com_adobe_granite_ui_clientlibs_processor_gcc_example'),
                        ('com_adobe_granite_webconsole_plugins', 'com_adobe_granite_webconsole_plugins_example'),
                        ('com_adobe_granite_workflow_console', 'com_adobe_granite_workflow_console_example'),
                        ('com_adobe_xmp_worker_files_native_fragment_linux', 'com_adobe_xmp_worker_files_native_fragment_linux_example'),
                        ('com_adobe_xmp_worker_files_native_fragment_macosx', 'com_adobe_xmp_worker_files_native_fragment_macosx_example'),
                        ('com_adobe_xmp_worker_files_native_fragment_win', 'com_adobe_xmp_worker_files_native_fragment_win_example'),
                        ('com_day_commons_osgi_wrapper_simple_jndi', 'com_day_commons_osgi_wrapper_simple_jndi_example'),
                        ('com_day_cq_cq_authhandler', 'com_day_cq_cq_authhandler_example'),
                        ('com_day_cq_cq_compat_configupdate', 'com_day_cq_cq_compat_configupdate_example'),
                        ('com_day_cq_cq_licensebranding', 'com_day_cq_cq_licensebranding_example'),
                        ('com_day_cq_cq_notifcation_impl', 'com_day_cq_cq_notifcation_impl_example'),
                        ('com_day_cq_cq_replication_audit', 'com_day_cq_cq_replication_audit_example'),
                        ('com_day_cq_cq_search_ext', 'com_day_cq_cq_search_ext_example'),
                        ('com_day_cq_dam_cq_dam_annotation_print', 'com_day_cq_dam_cq_dam_annotation_print_example'),
                        ('com_day_cq_dam_cq_dam_asset_usage', 'com_day_cq_dam_cq_dam_asset_usage_example'),
                        ('com_day_cq_dam_cq_dam_s7dam', 'com_day_cq_dam_cq_dam_s7dam_example'),
                        ('com_day_cq_dam_cq_dam_similaritysearch', 'com_day_cq_dam_cq_dam_similaritysearch_example'),
                        ('com_day_cq_dam_dam_webdav_support', 'com_day_cq_dam_dam_webdav_support_example'),
                        ('com_day_cq_pre_upgrade_tasks', 'com_day_cq_pre_upgrade_tasks_example'),
                        ('com_day_cq_replication_extensions', 'com_day_cq_replication_extensions_example'),
                        ('com_day_cq_wcm_cq_msm_core', 'com_day_cq_wcm_cq_msm_core_example'),
                        ('com_day_cq_wcm_cq_wcm_translation', 'com_day_cq_wcm_cq_wcm_translation_example'),
                        ('day_commons_jrawio', 'day_commons_jrawio_example'),
                        ('org_apache_aries_jmx_whiteboard', 'org_apache_aries_jmx_whiteboard_example'),
                        ('org_apache_felix_http_sslfilter', 'org_apache_felix_http_sslfilter_example'),
                        ('org_apache_felix_org_apache_felix_threaddump', 'org_apache_felix_org_apache_felix_threaddump_example'),
                        ('org_apache_felix_webconsole_plugins_ds', 'org_apache_felix_webconsole_plugins_ds_example'),
                        ('org_apache_felix_webconsole_plugins_event', 'org_apache_felix_webconsole_plugins_event_example'),
                        ('org_apache_felix_webconsole_plugins_memoryusage', 'org_apache_felix_webconsole_plugins_memoryusage_example'),
                        ('org_apache_felix_webconsole_plugins_packageadmin', 'org_apache_felix_webconsole_plugins_packageadmin_example'),
                        ('org_apache_jackrabbit_oak_auth_ldap', 'org_apache_jackrabbit_oak_auth_ldap_example'),
                        ('org_apache_jackrabbit_oak_segment_tar', 'org_apache_jackrabbit_oak_segment_tar_example'),
                        ('org_apache_jackrabbit_oak_solr_osgi', 'org_apache_jackrabbit_oak_solr_osgi_example'),
                        ('org_apache_sling_bundleresource_impl', 'org_apache_sling_bundleresource_impl_example'),
                        ('org_apache_sling_commons_fsclassloader', 'org_apache_sling_commons_fsclassloader_example'),
                        ('org_apache_sling_commons_log_webconsole', 'org_apache_sling_commons_log_webconsole_example'),
                        ('org_apache_sling_datasource', 'org_apache_sling_datasource_example'),
                        ('org_apache_sling_discovery_base', 'org_apache_sling_discovery_base_example'),
                        ('org_apache_sling_discovery_oak', 'org_apache_sling_discovery_oak_example'),
                        ('org_apache_sling_discovery_support', 'org_apache_sling_discovery_support_example'),
                        ('org_apache_sling_distribution_api', 'org_apache_sling_distribution_api_example'),
                        ('org_apache_sling_distribution_core', 'org_apache_sling_distribution_core_example'),
                        ('org_apache_sling_extensions_webconsolesecurityprovider', 'org_apache_sling_extensions_webconsolesecurityprovider_example'),
                        ('org_apache_sling_hc_webconsole', 'org_apache_sling_hc_webconsole_example'),
                        ('org_apache_sling_installer_console', 'org_apache_sling_installer_console_example'),
                        ('org_apache_sling_installer_provider_file', 'org_apache_sling_installer_provider_file_example'),
                        ('org_apache_sling_installer_provider_jcr', 'org_apache_sling_installer_provider_jcr_example'),
                        ('org_apache_sling_jcr_davex', 'org_apache_sling_jcr_davex_example'),
                        ('org_apache_sling_jcr_resourcesecurity', 'org_apache_sling_jcr_resourcesecurity_example'),
                        ('org_apache_sling_jmx_provider', 'org_apache_sling_jmx_provider_example'),
                        ('org_apache_sling_launchpad_installer', 'org_apache_sling_launchpad_installer_example'),
                        ('org_apache_sling_models_impl', 'org_apache_sling_models_impl_example'),
                        ('org_apache_sling_repoinit_parser', 'org_apache_sling_repoinit_parser_example'),
                        ('org_apache_sling_resource_inventory', 'org_apache_sling_resource_inventory_example'),
                        ('org_apache_sling_resourceresolver', 'org_apache_sling_resourceresolver_example'),
                        ('org_apache_sling_scripting_javascript', 'org_apache_sling_scripting_javascript_example'),
                        ('org_apache_sling_scripting_jst', 'org_apache_sling_scripting_jst_example'),
                        ('org_apache_sling_scripting_sightly_js_provider', 'org_apache_sling_scripting_sightly_js_provider_example'),
                        ('org_apache_sling_scripting_sightly_models_provider', 'org_apache_sling_scripting_sightly_models_provider_example'),
                        ('org_apache_sling_security', 'org_apache_sling_security_example'),
                        ('org_apache_sling_servlets_compat', 'org_apache_sling_servlets_compat_example'),
                        ('org_apache_sling_servlets_get', 'org_apache_sling_servlets_get_example'),
                        ('org_apache_sling_startupfilter_disabler', 'org_apache_sling_startupfilter_disabler_example'),
                        ('org_apache_sling_tracer', 'org_apache_sling_tracer_example'),
                        ('we_retail_client_app_core', 'we_retail_client_app_core_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_cert_impl_client_cert_auth_handler(self):
        """Test case for com_adobe_granite_auth_cert_impl_client_cert_auth_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('path', 'path_example'),
                        ('service_ranking', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_ims(self):
        """Test case for com_adobe_granite_auth_ims

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('configid', 'configid_example'),
                        ('scope', 'scope_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.ims',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension(self):
        """Test case for com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('oauth_provider_id', 'oauth_provider_id_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl(self):
        """Test case for com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('auth_ims_client_secret', 'auth_ims_client_secret_example'),
                        ('customizer_type', 'customizer_type_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_ims_impl_ims_config_provider_impl(self):
        """Test case for com_adobe_granite_auth_ims_impl_ims_config_provider_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('oauth_configmanager_ims_configid', 'oauth_configmanager_ims_configid_example'),
                        ('ims_owning_entity', 'ims_owning_entity_example'),
                        ('aem_instance_id', 'aem_instance_id_example'),
                        ('ims_service_code', 'ims_service_code_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator(self):
        """Test case for com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('oauth_provider_id', 'oauth_provider_id_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_ims_impl_ims_provider_impl(self):
        """Test case for com_adobe_granite_auth_ims_impl_ims_provider_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('oauth_provider_id', 'oauth_provider_id_example'),
                        ('oauth_provider_ims_authorization_url', 'oauth_provider_ims_authorization_url_example'),
                        ('oauth_provider_ims_token_url', 'oauth_provider_ims_token_url_example'),
                        ('oauth_provider_ims_profile_url', 'oauth_provider_ims_profile_url_example'),
                        ('oauth_provider_ims_extended_details_urls', 'oauth_provider_ims_extended_details_urls_example'),
                        ('oauth_provider_ims_validate_token_url', 'oauth_provider_ims_validate_token_url_example'),
                        ('oauth_provider_ims_session_property', 'oauth_provider_ims_session_property_example'),
                        ('oauth_provider_ims_service_token_client_id', 'oauth_provider_ims_service_token_client_id_example'),
                        ('oauth_provider_ims_service_token_client_secret', 'oauth_provider_ims_service_token_client_secret_example'),
                        ('oauth_provider_ims_service_token', 'oauth_provider_ims_service_token_example'),
                        ('ims_org_ref', 'ims_org_ref_example'),
                        ('ims_group_mapping', 'ims_group_mapping_example'),
                        ('oauth_provider_ims_only_license_group', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_oauth_accesstoken_provider(self):
        """Test case for com_adobe_granite_auth_oauth_accesstoken_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('auth_token_provider_title', 'auth_token_provider_title_example'),
                        ('auth_token_provider_default_claims', 'auth_token_provider_default_claims_example'),
                        ('auth_token_provider_endpoint', 'auth_token_provider_endpoint_example'),
                        ('auth_access_token_request', 'auth_access_token_request_example'),
                        ('auth_token_provider_keypair_alias', 'auth_token_provider_keypair_alias_example'),
                        ('auth_token_provider_conn_timeout', 56),
                        ('auth_token_provider_so_timeout', 56),
                        ('auth_token_provider_client_id', 'auth_token_provider_client_id_example'),
                        ('auth_token_provider_scope', 'auth_token_provider_scope_example'),
                        ('auth_token_provider_reuse_access_token', True),
                        ('auth_token_provider_relaxed_ssl', True),
                        ('token_request_customizer_type', 'token_request_customizer_type_example'),
                        ('auth_token_validator_type', 'auth_token_validator_type_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_oauth_impl_bearer_authentication_handler(self):
        """Test case for com_adobe_granite_auth_oauth_impl_bearer_authentication_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('path', 'path_example'),
                        ('oauth_client_ids_allowed', 'oauth_client_ids_allowed_example'),
                        ('auth_bearer_sync_ims', True),
                        ('auth_token_request_parameter', 'auth_token_request_parameter_example'),
                        ('oauth_bearer_configid', 'oauth_bearer_configid_example'),
                        ('oauth_jwt_support', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_oauth_impl_default_token_validator_impl(self):
        """Test case for com_adobe_granite_auth_oauth_impl_default_token_validator_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('auth_token_validator_type', 'auth_token_validator_type_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_oauth_impl_facebook_provider_impl(self):
        """Test case for com_adobe_granite_auth_oauth_impl_facebook_provider_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('oauth_provider_id', 'oauth_provider_id_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_oauth_impl_github_provider_impl(self):
        """Test case for com_adobe_granite_auth_oauth_impl_github_provider_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('oauth_provider_id', 'oauth_provider_id_example'),
                        ('oauth_provider_github_authorization_url', 'oauth_provider_github_authorization_url_example'),
                        ('oauth_provider_github_token_url', 'oauth_provider_github_token_url_example'),
                        ('oauth_provider_github_profile_url', 'oauth_provider_github_profile_url_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_oauth_impl_granite_provider(self):
        """Test case for com_adobe_granite_auth_oauth_impl_granite_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('oauth_provider_id', 'oauth_provider_id_example'),
                        ('oauth_provider_granite_authorization_url', 'oauth_provider_granite_authorization_url_example'),
                        ('oauth_provider_granite_token_url', 'oauth_provider_granite_token_url_example'),
                        ('oauth_provider_granite_profile_url', 'oauth_provider_granite_profile_url_example'),
                        ('oauth_provider_granite_extended_details_urls', 'oauth_provider_granite_extended_details_urls_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_oauth_impl_helper_provider_config_manager(self):
        """Test case for com_adobe_granite_auth_oauth_impl_helper_provider_config_manager

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('oauth_cookie_login_timeout', 'oauth_cookie_login_timeout_example'),
                        ('oauth_cookie_max_age', 'oauth_cookie_max_age_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal(self):
        """Test case for com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('oauth_cookie_login_timeout', 'oauth_cookie_login_timeout_example'),
                        ('oauth_cookie_max_age', 'oauth_cookie_max_age_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler(self):
        """Test case for com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('path', 'path_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_oauth_impl_twitter_provider_impl(self):
        """Test case for com_adobe_granite_auth_oauth_impl_twitter_provider_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('oauth_provider_id', 'oauth_provider_id_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_oauth_provider(self):
        """Test case for com_adobe_granite_auth_oauth_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('oauth_config_id', 'oauth_config_id_example'),
                        ('oauth_client_id', 'oauth_client_id_example'),
                        ('oauth_client_secret', 'oauth_client_secret_example'),
                        ('oauth_scope', 'oauth_scope_example'),
                        ('oauth_config_provider_id', 'oauth_config_provider_id_example'),
                        ('oauth_create_users', True),
                        ('oauth_userid_property', 'oauth_userid_property_example'),
                        ('force_strict_username_matching', True),
                        ('oauth_encode_userids', True),
                        ('oauth_hash_userids', True),
                        ('oauth_call_back_url', 'oauth_call_back_url_example'),
                        ('oauth_access_token_persist', True),
                        ('oauth_access_token_persist_cookie', True),
                        ('oauth_csrf_state_protection', True),
                        ('oauth_redirect_request_params', True),
                        ('oauth_config_siblings_allow', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.oauth.provider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_requirement_impl_default_requirement_handler(self):
        """Test case for com_adobe_granite_auth_requirement_impl_default_requirement_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('supported_paths', 'supported_paths_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_saml_saml_authentication_handler(self):
        """Test case for com_adobe_granite_auth_saml_saml_authentication_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('path', 'path_example'),
                        ('service_ranking', 56),
                        ('idp_url', 'idp_url_example'),
                        ('idp_cert_alias', 'idp_cert_alias_example'),
                        ('idp_http_redirect', True),
                        ('service_provider_entity_id', 'service_provider_entity_id_example'),
                        ('assertion_consumer_service_url', 'assertion_consumer_service_url_example'),
                        ('sp_private_key_alias', 'sp_private_key_alias_example'),
                        ('key_store_password', 'key_store_password_example'),
                        ('default_redirect_url', 'default_redirect_url_example'),
                        ('user_id_attribute', 'user_id_attribute_example'),
                        ('use_encryption', True),
                        ('create_user', True),
                        ('user_intermediate_path', 'user_intermediate_path_example'),
                        ('add_group_memberships', True),
                        ('group_membership_attribute', 'group_membership_attribute_example'),
                        ('default_groups', 'default_groups_example'),
                        ('name_id_format', 'name_id_format_example'),
                        ('synchronize_attributes', 'synchronize_attributes_example'),
                        ('handle_logout', True),
                        ('logout_url', 'logout_url_example'),
                        ('clock_tolerance', 56),
                        ('digest_method', 'digest_method_example'),
                        ('signature_method', 'signature_method_example'),
                        ('identity_sync_type', 'identity_sync_type_example'),
                        ('idp_identifier', 'idp_identifier_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_auth_sso_impl_sso_authentication_handler(self):
        """Test case for com_adobe_granite_auth_sso_impl_sso_authentication_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('path', 'path_example'),
                        ('service_ranking', 56),
                        ('jaas_control_flag', 'jaas_control_flag_example'),
                        ('jaas_realm_name', 'jaas_realm_name_example'),
                        ('jaas_ranking', 56),
                        ('headers', 'headers_example'),
                        ('cookies', 'cookies_example'),
                        ('parameters', 'parameters_example'),
                        ('usermap', 'usermap_example'),
                        ('format', 'format_example'),
                        ('trusted_credentials_attribute', 'trusted_credentials_attribute_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_bundles_hc_impl_code_cache_health_check(self):
        """Test case for com_adobe_granite_bundles_hc_impl_code_cache_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example'),
                        ('minimum_code_cache_size', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check(self):
        """Test case for com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check(self):
        """Test case for com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check(self):
        """Test case for com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example'),
                        ('ignored_bundles', 'ignored_bundles_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_bundles_hc_impl_jobs_health_check(self):
        """Test case for com_adobe_granite_bundles_hc_impl_jobs_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example'),
                        ('max_queued_jobs', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check(self):
        """Test case for com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check(self):
        """Test case for com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check(self):
        """Test case for com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check(self):
        """Test case for com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check(self):
        """Test case for com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_comments_internal_comment_replication_content_filter_fac(self):
        """Test case for com_adobe_granite_comments_internal_comment_replication_content_filter_fac

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('replicate_comment_resource_types', 'replicate_comment_resource_types_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_compatrouter_impl_compat_switching_service_impl(self):
        """Test case for com_adobe_granite_compatrouter_impl_compat_switching_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('compatgroups', 'compatgroups_example'),
                        ('enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_compatrouter_impl_routing_config(self):
        """Test case for com_adobe_granite_compatrouter_impl_routing_config

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('id', 'id_example'),
                        ('compat_path', 'compat_path_example'),
                        ('new_path', 'new_path_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_compatrouter_impl_switch_mapping_config(self):
        """Test case for com_adobe_granite_compatrouter_impl_switch_mapping_config

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('group', 'group_example'),
                        ('ids', 'ids_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving(self):
        """Test case for com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enabled', True),
                        ('fallback_paths', 'fallback_paths_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_contexthub_impl_context_hub_impl(self):
        """Test case for com_adobe_granite_contexthub_impl_context_hub_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('com_adobe_granite_contexthub_silent_mode', True),
                        ('com_adobe_granite_contexthub_show_ui', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_cors_impl_cors_policy_impl(self):
        """Test case for com_adobe_granite_cors_impl_cors_policy_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('alloworigin', 'alloworigin_example'),
                        ('alloworiginregexp', 'alloworiginregexp_example'),
                        ('allowedpaths', 'allowedpaths_example'),
                        ('exposedheaders', 'exposedheaders_example'),
                        ('maxage', 56),
                        ('supportedheaders', 'supportedheaders_example'),
                        ('supportedmethods', 'supportedmethods_example'),
                        ('supportscredentials', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_csrf_impl_csrf_filter(self):
        """Test case for com_adobe_granite_csrf_impl_csrf_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('filter_methods', 'filter_methods_example'),
                        ('filter_enable_safe_user_agents', True),
                        ('filter_safe_user_agents', 'filter_safe_user_agents_example'),
                        ('filter_excluded_paths', 'filter_excluded_paths_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_csrf_impl_csrf_servlet(self):
        """Test case for com_adobe_granite_csrf_impl_csrf_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('csrf_token_expires_in', 56),
                        ('sling_auth_requirements', 'sling_auth_requirements_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se(self):
        """Test case for com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('username', 'username_example'),
                        ('encrypted_password', 'encrypted_password_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_distribution_core_impl_diff_diff_changes_observer(self):
        """Test case for com_adobe_granite_distribution_core_impl_diff_diff_changes_observer

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enabled', True),
                        ('agent_name', 'agent_name_example'),
                        ('diff_path', 'diff_path_example'),
                        ('observed_path', 'observed_path_example'),
                        ('service_name', 'service_name_example'),
                        ('property_names', 'property_names_example'),
                        ('distribution_delay', 56),
                        ('service_user_target', 'service_user_target_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_distribution_core_impl_diff_diff_event_listener(self):
        """Test case for com_adobe_granite_distribution_core_impl_diff_diff_event_listener

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('diff_path', 'diff_path_example'),
                        ('service_name', 'service_name_example'),
                        ('service_user_target', 'service_user_target_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_distribution_core_impl_distribution_to_replication_even(self):
        """Test case for com_adobe_granite_distribution_core_impl_distribution_to_replication_even

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('importer_name', 'importer_name_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_distribution_core_impl_replication_adapters_replicat(self):
        """Test case for com_adobe_granite_distribution_core_impl_replication_adapters_replicat

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('provider_name', 'provider_name_example'),
                        ('forward_requests', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_distribution_core_impl_replication_distribution_trans(self):
        """Test case for com_adobe_granite_distribution_core_impl_replication_distribution_trans

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('forward_requests', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_distribution_core_impl_transport_access_token_distribu(self):
        """Test case for com_adobe_granite_distribution_core_impl_transport_access_token_distribu

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('service_name', 'service_name_example'),
                        ('user_id', 'user_id_example'),
                        ('access_token_provider_target', 'access_token_provider_target_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_frags_impl_check_http_header_flag(self):
        """Test case for com_adobe_granite_frags_impl_check_http_header_flag

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('feature_name', 'feature_name_example'),
                        ('feature_description', 'feature_description_example'),
                        ('http_header_name', 'http_header_name_example'),
                        ('http_header_valuepattern', 'http_header_valuepattern_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_frags_impl_random_feature(self):
        """Test case for com_adobe_granite_frags_impl_random_feature

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('feature_name', 'feature_name_example'),
                        ('feature_description', 'feature_description_example'),
                        ('active_percentage', 'active_percentage_example'),
                        ('cookie_name', 'cookie_name_example'),
                        ('cookie_max_age', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_httpcache_file_file_cache_store(self):
        """Test case for com_adobe_granite_httpcache_file_file_cache_store

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('com_adobe_granite_httpcache_file_document_root', 'com_adobe_granite_httpcache_file_document_root_example'),
                        ('com_adobe_granite_httpcache_file_include_host', 'com_adobe_granite_httpcache_file_include_host_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_httpcache_impl_outer_cache_filter(self):
        """Test case for com_adobe_granite_httpcache_impl_outer_cache_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('com_adobe_granite_httpcache_url_paths', 'com_adobe_granite_httpcache_url_paths_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_i18n_impl_bundle_pseudo_translations(self):
        """Test case for com_adobe_granite_i18n_impl_bundle_pseudo_translations

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('pseudo_patterns', 'pseudo_patterns_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_i18n_impl_preferences_locale_resolver_service(self):
        """Test case for com_adobe_granite_i18n_impl_preferences_locale_resolver_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('security_preferences_name', 'security_preferences_name_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_infocollector_info_collector(self):
        """Test case for com_adobe_granite_infocollector_info_collector

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('granite_infocollector_include_thread_dumps', True),
                        ('granite_infocollector_include_heap_dump', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.infocollector.InfoCollector',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory(self):
        """Test case for com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('com_adobe_granite_jetty_ssl_port', 56),
                        ('com_adobe_granite_jetty_ssl_keystore_user', 'com_adobe_granite_jetty_ssl_keystore_user_example'),
                        ('com_adobe_granite_jetty_ssl_keystore_password', 'com_adobe_granite_jetty_ssl_keystore_password_example'),
                        ('com_adobe_granite_jetty_ssl_ciphersuites_excluded', 'com_adobe_granite_jetty_ssl_ciphersuites_excluded_example'),
                        ('com_adobe_granite_jetty_ssl_ciphersuites_included', 'com_adobe_granite_jetty_ssl_ciphersuites_included_example'),
                        ('com_adobe_granite_jetty_ssl_client_certificate', 'com_adobe_granite_jetty_ssl_client_certificate_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_license_impl_license_check_filter(self):
        """Test case for com_adobe_granite_license_impl_license_check_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('check_internval', 56),
                        ('exclude_ids', 'exclude_ids_example'),
                        ('encrypt_ping', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_logging_impl_log_analyser_impl(self):
        """Test case for com_adobe_granite_logging_impl_log_analyser_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('messages_queue_size', 56),
                        ('logger_config', 'logger_config_example'),
                        ('messages_size', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_logging_impl_log_error_health_check(self):
        """Test case for com_adobe_granite_logging_impl_log_error_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task(self):
        """Test case for com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('granite_maintenance_mandatory', True),
                        ('job_topics', 'job_topics_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task(self):
        """Test case for com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('job_topics', 'job_topics_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_maintenance_crx_impl_revision_cleanup_task(self):
        """Test case for com_adobe_granite_maintenance_crx_impl_revision_cleanup_task

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('full_gc_days', 'full_gc_days_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_monitoring_impl_script_config_impl(self):
        """Test case for com_adobe_granite_monitoring_impl_script_config_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('script_filename', 'script_filename_example'),
                        ('script_display', 'script_display_example'),
                        ('script_path', 'script_path_example'),
                        ('script_platform', 'script_platform_example'),
                        ('interval', 56),
                        ('jmxdomain', 'jmxdomain_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han(self):
        """Test case for com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('path', 'path_example'),
                        ('jaas_control_flag', 'jaas_control_flag_example'),
                        ('jaas_realm_name', 'jaas_realm_name_example'),
                        ('jaas_ranking', 56),
                        ('oauth_offline_validation', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_oauth_server_impl_access_token_cleanup_task(self):
        """Test case for com_adobe_granite_oauth_server_impl_access_token_cleanup_task

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scheduler_expression', 'scheduler_expression_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet(self):
        """Test case for com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('oauth_client_revocation_active', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet(self):
        """Test case for com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_servlet_paths', 'sling_servlet_paths_example'),
                        ('oauth_revocation_active', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet(self):
        """Test case for com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('oauth_issuer', 'oauth_issuer_example'),
                        ('oauth_access_token_expires_in', 'oauth_access_token_expires_in_example'),
                        ('osgi_http_whiteboard_servlet_pattern', 'osgi_http_whiteboard_servlet_pattern_example'),
                        ('osgi_http_whiteboard_context_select', 'osgi_http_whiteboard_context_select_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet(self):
        """Test case for com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('oauth_token_revocation_active', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_offloading_impl_offloading_configurator(self):
        """Test case for com_adobe_granite_offloading_impl_offloading_configurator

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('offloading_transporter', 'offloading_transporter_example'),
                        ('offloading_cleanup_payload', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_offloading_impl_offloading_job_cloner(self):
        """Test case for com_adobe_granite_offloading_impl_offloading_job_cloner

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('offloading_jobcloner_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_offloading_impl_offloading_job_offloader(self):
        """Test case for com_adobe_granite_offloading_impl_offloading_job_offloader

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('offloading_offloader_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_offloading_impl_transporter_offloading_agent_manager(self):
        """Test case for com_adobe_granite_offloading_impl_transporter_offloading_agent_manager

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('offloading_agentmanager_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_offloading_impl_transporter_offloading_default_transpo(self):
        """Test case for com_adobe_granite_offloading_impl_transporter_offloading_default_transpo

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('default_transport_agent_to_worker_prefix', 'default_transport_agent_to_worker_prefix_example'),
                        ('default_transport_agent_to_master_prefix', 'default_transport_agent_to_master_prefix_example'),
                        ('default_transport_input_package', 'default_transport_input_package_example'),
                        ('default_transport_output_package', 'default_transport_output_package_example'),
                        ('default_transport_replication_synchronous', True),
                        ('default_transport_contentpackage', True),
                        ('offloading_transporter_default_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_omnisearch_impl_core_omni_search_service_impl(self):
        """Test case for com_adobe_granite_omnisearch_impl_core_omni_search_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('omnisearch_suggestion_requiretext_min', 56),
                        ('omnisearch_suggestion_spellcheck_require', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_optout_impl_opt_out_service_impl(self):
        """Test case for com_adobe_granite_optout_impl_opt_out_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('optout_cookies', 'optout_cookies_example'),
                        ('optout_headers', 'optout_headers_example'),
                        ('optout_whitelist_cookies', 'optout_whitelist_cookies_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_queries_impl_hc_async_index_health_check(self):
        """Test case for com_adobe_granite_queries_impl_hc_async_index_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('indexing_critical_threshold', 56),
                        ('indexing_warn_threshold', 56),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_queries_impl_hc_large_index_health_check(self):
        """Test case for com_adobe_granite_queries_impl_hc_large_index_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('large_index_critical_threshold', 56),
                        ('large_index_warn_threshold', 56),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_queries_impl_hc_queries_status_health_check(self):
        """Test case for com_adobe_granite_queries_impl_hc_queries_status_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_queries_impl_hc_query_health_check_metrics(self):
        """Test case for com_adobe_granite_queries_impl_hc_query_health_check_metrics

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('get_period', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_queries_impl_hc_query_limits_health_check(self):
        """Test case for com_adobe_granite_queries_impl_hc_query_limits_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_replication_hc_impl_replication_queue_health_check(self):
        """Test case for com_adobe_granite_replication_hc_impl_replication_queue_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('number_of_retries_allowed', 56),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_replication_hc_impl_replication_transport_users_health_c(self):
        """Test case for com_adobe_granite_replication_hc_impl_replication_transport_users_health_c

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check(self):
        """Test case for com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c(self):
        """Test case for com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example'),
                        ('exclude_search_path', 'exclude_search_path_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_repository_hc_impl_continuous_rgc_health_check(self):
        """Test case for com_adobe_granite_repository_hc_impl_continuous_rgc_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che(self):
        """Test case for com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_repository_hc_impl_default_logins_health_check(self):
        """Test case for com_adobe_granite_repository_hc_impl_default_logins_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example'),
                        ('account_logins', 'account_logins_example'),
                        ('console_logins', 'console_logins_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_repository_hc_impl_disk_space_health_check(self):
        """Test case for com_adobe_granite_repository_hc_impl_disk_space_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example'),
                        ('disk_space_warn_threshold', 56),
                        ('disk_space_error_threshold', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_repository_hc_impl_observation_queue_length_health_check(self):
        """Test case for com_adobe_granite_repository_hc_impl_observation_queue_length_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_repository_impl_commit_stats_config(self):
        """Test case for com_adobe_granite_repository_impl_commit_stats_config

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enabled', True),
                        ('interval_seconds', 56),
                        ('commits_per_interval_threshold', 56),
                        ('max_location_length', 56),
                        ('max_details_shown', 56),
                        ('min_details_percentage', 56),
                        ('thread_matchers', 'thread_matchers_example'),
                        ('max_greedy_depth', 56),
                        ('greedy_stack_matchers', 'greedy_stack_matchers_example'),
                        ('stack_filters', 'stack_filters_example'),
                        ('stack_matchers', 'stack_matchers_example'),
                        ('stack_categorizers', 'stack_categorizers_example'),
                        ('stack_shorteners', 'stack_shorteners_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_repository_service_user_configuration(self):
        """Test case for com_adobe_granite_repository_service_user_configuration

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('serviceusers_simple_subject_population', True),
                        ('serviceusers_list', 'serviceusers_list_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im(self):
        """Test case for com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_resourcestatus_impl_composite_status_type(self):
        """Test case for com_adobe_granite_resourcestatus_impl_composite_status_type

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('types', 'types_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_resourcestatus_impl_status_resource_provider_impl(self):
        """Test case for com_adobe_granite_resourcestatus_impl_status_resource_provider_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('provider_root', 'provider_root_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_rest_assets_impl_asset_content_disposition_filter(self):
        """Test case for com_adobe_granite_rest_assets_impl_asset_content_disposition_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('mime_allow_empty', True),
                        ('mime_allowed', 'mime_allowed_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl(self):
        """Test case for com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('provider_roots', 'provider_roots_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_rest_impl_servlet_default_get_servlet(self):
        """Test case for com_adobe_granite_rest_impl_servlet_default_get_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('default_limit', 56),
                        ('use_absolute_uri', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s(self):
        """Test case for com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_tags', 'hc_tags_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_security_user_user_properties_service(self):
        """Test case for com_adobe_granite_security_user_user_properties_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('adapter_condition', 'adapter_condition_example'),
                        ('granite_userproperties_nodetypes', 'granite_userproperties_nodetypes_example'),
                        ('granite_userproperties_resourcetypes', 'granite_userproperties_resourcetypes_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_socialgraph_impl_social_graph_factory_impl(self):
        """Test case for com_adobe_granite_socialgraph_impl_social_graph_factory_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('group2member_relationship_outgoing', 'group2member_relationship_outgoing_example'),
                        ('group2member_excluded_outgoing', 'group2member_excluded_outgoing_example'),
                        ('group2member_relationship_incoming', 'group2member_relationship_incoming_example'),
                        ('group2member_excluded_incoming', 'group2member_excluded_incoming_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl(self):
        """Test case for com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scheduler_expression', 'scheduler_expression_example'),
                        ('jmx_objectname', 'jmx_objectname_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory(self):
        """Test case for com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('adapter_condition', 'adapter_condition_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_taskmanagement_impl_jcr_task_archive_service(self):
        """Test case for com_adobe_granite_taskmanagement_impl_jcr_task_archive_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('archiving_enabled', True),
                        ('scheduler_expression', 'scheduler_expression_example'),
                        ('archive_since_days_completed', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task(self):
        """Test case for com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('purge_completed', True),
                        ('completed_age', 56),
                        ('purge_active', True),
                        ('active_age', 56),
                        ('save_threshold', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor(self):
        """Test case for com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('adapter_condition', 'adapter_condition_example'),
                        ('taskmanager_admingroups', 'taskmanager_admingroups_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_threaddump_thread_dump_collector(self):
        """Test case for com_adobe_granite_threaddump_thread_dump_collector

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scheduler_period', 56),
                        ('scheduler_run_on', 'scheduler_run_on_example'),
                        ('granite_threaddump_enabled', True),
                        ('granite_threaddump_dumps_per_file', 56),
                        ('granite_threaddump_enable_gzip_compression', True),
                        ('granite_threaddump_enable_directories_compression', True),
                        ('granite_threaddump_enable_j_stack', True),
                        ('granite_threaddump_max_backup_days', 56),
                        ('granite_threaddump_backup_clean_trigger', 'granite_threaddump_backup_clean_trigger_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl(self):
        """Test case for com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('translation_factory', 'translation_factory_example'),
                        ('default_connector_label', 'default_connector_label_example'),
                        ('default_connector_attribution', 'default_connector_attribution_example'),
                        ('default_connector_workspace_id', 'default_connector_workspace_id_example'),
                        ('default_connector_subscription_key', 'default_connector_subscription_key_example'),
                        ('language_map_location', 'language_map_location_example'),
                        ('category_map_location', 'category_map_location_example'),
                        ('retry_attempts', 56),
                        ('timeout_count', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_translation_core_impl_translation_manager_impl(self):
        """Test case for com_adobe_granite_translation_core_impl_translation_manager_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('default_connector_name', 'default_connector_name_example'),
                        ('default_category', 'default_category_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl(self):
        """Test case for com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('htmllibmanager_timing', True),
                        ('htmllibmanager_debug_init_js', 'htmllibmanager_debug_init_js_example'),
                        ('htmllibmanager_minify', True),
                        ('htmllibmanager_debug', True),
                        ('htmllibmanager_gzip', True),
                        ('htmllibmanager_max_data_uri_size', 56),
                        ('htmllibmanager_maxage', 56),
                        ('htmllibmanager_force_cq_url_info', True),
                        ('htmllibmanager_defaultthemename', 'htmllibmanager_defaultthemename_example'),
                        ('htmllibmanager_defaultuserthemename', 'htmllibmanager_defaultuserthemename_example'),
                        ('htmllibmanager_clientmanager', 'htmllibmanager_clientmanager_example'),
                        ('htmllibmanager_path_list', 'htmllibmanager_path_list_example'),
                        ('htmllibmanager_excluded_path_list', 'htmllibmanager_excluded_path_list_example'),
                        ('htmllibmanager_processor_js', 'htmllibmanager_processor_js_example'),
                        ('htmllibmanager_processor_css', 'htmllibmanager_processor_css_example'),
                        ('htmllibmanager_longcache_patterns', 'htmllibmanager_longcache_patterns_example'),
                        ('htmllibmanager_longcache_format', 'htmllibmanager_longcache_format_example'),
                        ('htmllibmanager_use_file_system_output_cache', True),
                        ('htmllibmanager_file_system_output_cache_location', 'htmllibmanager_file_system_output_cache_location_example'),
                        ('htmllibmanager_disable_replacement', 'htmllibmanager_disable_replacement_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_workflow_console_frags_workflow_withdraw_feature(self):
        """Test case for com_adobe_granite_workflow_console_frags_workflow_withdraw_feature

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_workflow_console_publish_workflow_publish_event_service(self):
        """Test case for com_adobe_granite_workflow_console_publish_workflow_publish_event_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('granite_workflow_workflow_publish_event_service_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_workflow_core_jcr_workflow_bucket_manager(self):
        """Test case for com_adobe_granite_workflow_core_jcr_workflow_bucket_manager

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('bucket_size', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_workflow_core_job_external_process_job_handler(self):
        """Test case for com_adobe_granite_workflow_core_job_external_process_job_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('default_timeout', 56),
                        ('max_timeout', 56),
                        ('default_period', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_workflow_core_job_job_handler(self):
        """Test case for com_adobe_granite_workflow_core_job_job_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('job_topics', 'job_topics_example'),
                        ('allow_self_process_termination', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum(self):
        """Test case for com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('job_topics', 'job_topics_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_workflow_core_payload_map_cache(self):
        """Test case for com_adobe_granite_workflow_core_payload_map_cache

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('get_system_workflow_models', 'get_system_workflow_models_example'),
                        ('get_package_root_path', 'get_package_root_path_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_workflow_core_payloadmap_payload_move_listener(self):
        """Test case for com_adobe_granite_workflow_core_payloadmap_payload_move_listener

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('payload_move_white_list', 'payload_move_white_list_example'),
                        ('payload_move_handle_from_workflow_process', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_workflow_core_workflow_config(self):
        """Test case for com_adobe_granite_workflow_core_workflow_config

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_workflow_config_workflow_packages_root_path', 'cq_workflow_config_workflow_packages_root_path_example'),
                        ('cq_workflow_config_workflow_process_legacy_mode', True),
                        ('cq_workflow_config_allow_locking', True)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_workflow_core_workflow_session_factory(self):
        """Test case for com_adobe_granite_workflow_core_workflow_session_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('granite_workflowinbox_sort_property_name', 'granite_workflowinbox_sort_property_name_example'),
                        ('granite_workflowinbox_sort_order', 'granite_workflowinbox_sort_order_example'),
                        ('cq_workflow_job_retry', 56),
                        ('cq_workflow_superuser', 'cq_workflow_superuser_example'),
                        ('granite_workflow_inbox_query_size', 56),
                        ('granite_workflow_admin_user_group_filter', True),
                        ('granite_workflow_enforce_workitem_assignee_permissions', True),
                        ('granite_workflow_enforce_workflow_initiator_permissions', True),
                        ('granite_workflow_inject_tenant_id_in_job_topics', True),
                        ('granite_workflow_max_purge_save_threshold', 56),
                        ('granite_workflow_max_purge_query_count', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_granite_workflow_purge_scheduler(self):
        """Test case for com_adobe_granite_workflow_purge_scheduler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scheduledpurge_name', 'scheduledpurge_name_example'),
                        ('scheduledpurge_workflow_status', 'scheduledpurge_workflow_status_example'),
                        ('scheduledpurge_model_ids', 'scheduledpurge_model_ids_example'),
                        ('scheduledpurge_daysold', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_octopus_ncomm_bootstrap(self):
        """Test case for com_adobe_octopus_ncomm_bootstrap

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('max_connections', 56),
                        ('max_requests', 56),
                        ('request_timeout', 56),
                        ('request_retries', 56),
                        ('launch_timeout', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.octopus.ncomm.bootstrap',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s(self):
        """Test case for com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('communities_integration_livefyre_sling_event_filter', 'communities_integration_livefyre_sling_event_filter_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm(self):
        """Test case for com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('max_connections', 'max_connections_example'),
                        ('max_requests', 'max_requests_example'),
                        ('request_timeout', 'request_timeout_example'),
                        ('log_dir', 'log_dir_example')]
        response = self.client.open(
            '//system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_commons_datasource_jdbcpool_jdbc_pool_service(self):
        """Test case for com_day_commons_datasource_jdbcpool_jdbc_pool_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('jdbc_driver_class', 'jdbc_driver_class_example'),
                        ('jdbc_connection_uri', 'jdbc_connection_uri_example'),
                        ('jdbc_username', 'jdbc_username_example'),
                        ('jdbc_password', 'jdbc_password_example'),
                        ('jdbc_validation_query', 'jdbc_validation_query_example'),
                        ('default_readonly', True),
                        ('default_autocommit', True),
                        ('pool_size', 56),
                        ('pool_max_wait_msec', 56),
                        ('datasource_name', 'datasource_name_example'),
                        ('datasource_svc_properties', 'datasource_svc_properties_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_commons_httpclient(self):
        """Test case for com_day_commons_httpclient

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('proxy_enabled', True),
                        ('proxy_host', 'proxy_host_example'),
                        ('proxy_user', 'proxy_user_example'),
                        ('proxy_password', 'proxy_password_example'),
                        ('proxy_ntlm_host', 'proxy_ntlm_host_example'),
                        ('proxy_ntlm_domain', 'proxy_ntlm_domain_example'),
                        ('proxy_exceptions', 'proxy_exceptions_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.commons.httpclient',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_analytics_impl_store_properties_change_listener(self):
        """Test case for com_day_cq_analytics_impl_store_properties_change_listener

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_store_listener_additional_store_paths', 'cq_store_listener_additional_store_paths_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte(self):
        """Test case for com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('allowed_paths', 'allowed_paths_example'),
                        ('cq_analytics_saint_exporter_pagesize', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_analytics_sitecatalyst_impl_importer_report_importer(self):
        """Test case for com_day_cq_analytics_sitecatalyst_impl_importer_report_importer

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('report_fetch_attempts', 56),
                        ('report_fetch_delay', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory(self):
        """Test case for com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_analytics_adapterfactory_contextstores', 'cq_analytics_adapterfactory_contextstores_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl(self):
        """Test case for com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_analytics_sitecatalyst_service_datacenter_url', 'cq_analytics_sitecatalyst_service_datacenter_url_example'),
                        ('devhostnamepatterns', 'devhostnamepatterns_example'),
                        ('connection_timeout', 56),
                        ('socket_timeout', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_analytics_testandtarget_impl_account_options_updater(self):
        """Test case for com_day_cq_analytics_testandtarget_impl_account_options_updater

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_analytics_testandtarget_accountoptionsupdater_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener(self):
        """Test case for com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_analytics_testandtarget_deleteauthoractivitylistener_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener(self):
        """Test case for com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_analytics_testandtarget_pushauthorcampaignpagelistener_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_analytics_testandtarget_impl_segment_importer(self):
        """Test case for com_day_cq_analytics_testandtarget_impl_segment_importer

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_analytics_testandtarget_segmentimporter_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_analytics_testandtarget_impl_service_web_service_impl(self):
        """Test case for com_day_cq_analytics_testandtarget_impl_service_web_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('endpoint_uri', 'endpoint_uri_example'),
                        ('connection_timeout', 56),
                        ('socket_timeout', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet(self):
        """Test case for com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('testandtarget_endpoint_url', 'testandtarget_endpoint_url_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl(self):
        """Test case for com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_analytics_testandtarget_api_url', 'cq_analytics_testandtarget_api_url_example'),
                        ('cq_analytics_testandtarget_timeout', 56),
                        ('cq_analytics_testandtarget_sockettimeout', 56),
                        ('cq_analytics_testandtarget_recommendations_url_replace', 'cq_analytics_testandtarget_recommendations_url_replace_example'),
                        ('cq_analytics_testandtarget_recommendations_url_replacewith', 'cq_analytics_testandtarget_recommendations_url_replacewith_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_auth_impl_cug_cug_support_impl(self):
        """Test case for com_day_cq_auth_impl_cug_cug_support_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cug_exempted_principals', 'cug_exempted_principals_example'),
                        ('cug_enabled', True),
                        ('cug_principals_regex', 'cug_principals_regex_example'),
                        ('cug_principals_replacement', 'cug_principals_replacement_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_auth_impl_login_selector_handler(self):
        """Test case for com_day_cq_auth_impl_login_selector_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('path', 'path_example'),
                        ('service_ranking', 56),
                        ('auth_loginselector_mappings', 'auth_loginselector_mappings_example'),
                        ('auth_loginselector_changepw_mappings', 'auth_loginselector_changepw_mappings_example'),
                        ('auth_loginselector_defaultloginpage', 'auth_loginselector_defaultloginpage_example'),
                        ('auth_loginselector_defaultchangepwpage', 'auth_loginselector_defaultchangepwpage_example'),
                        ('auth_loginselector_handle', 'auth_loginselector_handle_example'),
                        ('auth_loginselector_handle_all_extensions', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_commons_impl_externalizer_impl(self):
        """Test case for com_day_cq_commons_impl_externalizer_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('externalizer_domains', 'externalizer_domains_example'),
                        ('externalizer_host', 'externalizer_host_example'),
                        ('externalizer_contextpath', 'externalizer_contextpath_example'),
                        ('externalizer_encodedpath', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_commons_servlets_root_mapping_servlet(self):
        """Test case for com_day_cq_commons_servlets_root_mapping_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('rootmapping_target', 'rootmapping_target_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke(self):
        """Test case for com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('codeupgradetasks', 'codeupgradetasks_example'),
                        ('codeupgradetaskfilters', 'codeupgradetaskfilters_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list(self):
        """Test case for com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('upgrade_task_ignore_list', 'upgrade_task_ignore_list_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist(self):
        """Test case for com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('effective_bundle_list_path', 'effective_bundle_list_path_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_contentsync_impl_content_sync_manager_impl(self):
        """Test case for com_day_cq_contentsync_impl_content_sync_manager_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('contentsync_fallback_authorizable', 'contentsync_fallback_authorizable_example'),
                        ('contentsync_fallback_updateuser', 'contentsync_fallback_updateuser_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_commons_handler_standard_image_handler(self):
        """Test case for com_day_cq_dam_commons_handler_standard_image_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('large_file_threshold', 56),
                        ('large_comment_threshold', 56),
                        ('cq_dam_enable_ext_meta_extraction', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_commons_metadata_xmp_filter_black_white(self):
        """Test case for com_day_cq_dam_commons_metadata_xmp_filter_black_white

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('xmp_filter_apply_whitelist', True),
                        ('xmp_filter_whitelist', 'xmp_filter_whitelist_example'),
                        ('xmp_filter_apply_blacklist', True),
                        ('xmp_filter_blacklist', 'xmp_filter_blacklist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_commons_util_impl_asset_cache_impl(self):
        """Test case for com_day_cq_dam_commons_util_impl_asset_cache_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('large_file_min', 56),
                        ('cache_apply', True),
                        ('mime_types', 'mime_types_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config(self):
        """Test case for com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_config_annotation_pdf_document_width', 56),
                        ('cq_dam_config_annotation_pdf_document_height', 56),
                        ('cq_dam_config_annotation_pdf_document_padding_horizontal', 56),
                        ('cq_dam_config_annotation_pdf_document_padding_vertical', 56),
                        ('cq_dam_config_annotation_pdf_font_size', 56),
                        ('cq_dam_config_annotation_pdf_font_color', 'cq_dam_config_annotation_pdf_font_color_example'),
                        ('cq_dam_config_annotation_pdf_font_family', 'cq_dam_config_annotation_pdf_font_family_example'),
                        ('cq_dam_config_annotation_pdf_font_light', 'cq_dam_config_annotation_pdf_font_light_example'),
                        ('cq_dam_config_annotation_pdf_margin_text_image', 56),
                        ('cq_dam_config_annotation_pdf_min_image_height', 56),
                        ('cq_dam_config_annotation_pdf_review_status_width', 56),
                        ('cq_dam_config_annotation_pdf_review_status_color_approved', 'cq_dam_config_annotation_pdf_review_status_color_approved_example'),
                        ('cq_dam_config_annotation_pdf_review_status_color_rejected', 'cq_dam_config_annotation_pdf_review_status_color_rejected_example'),
                        ('cq_dam_config_annotation_pdf_review_status_color_changes_requested', 'cq_dam_config_annotation_pdf_review_status_color_changes_requested_example'),
                        ('cq_dam_config_annotation_pdf_annotation_marker_width', 56),
                        ('cq_dam_config_annotation_pdf_asset_minheight', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_asset_move_listener(self):
        """Test case for com_day_cq_dam_core_impl_asset_move_listener

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_assethome_asset_home_page_configuration(self):
        """Test case for com_day_cq_dam_core_impl_assethome_asset_home_page_configuration

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('is_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet(self):
        """Test case for com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_adhoc_asset_share_prezip_maxcontentsize', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_cache_cq_buffered_image_cache(self):
        """Test case for com_day_cq_dam_core_impl_cache_cq_buffered_image_cache

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_image_cache_max_memory', 56),
                        ('cq_dam_image_cache_max_age', 56),
                        ('cq_dam_image_cache_max_dimension', 'cq_dam_image_cache_max_dimension_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_dam_change_event_listener(self):
        """Test case for com_day_cq_dam_core_impl_dam_change_event_listener

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('changeeventlistener_observed_paths', 'changeeventlistener_observed_paths_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_dam_event_purge_service(self):
        """Test case for com_day_cq_dam_core_impl_dam_event_purge_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scheduler_expression', 'scheduler_expression_example'),
                        ('max_saved_activities', 56),
                        ('save_interval', 56),
                        ('enable_activity_purge', True),
                        ('event_types', 'event_types_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_dam_event_recorder_impl(self):
        """Test case for com_day_cq_dam_core_impl_dam_event_recorder_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('event_filter', 'event_filter_example'),
                        ('event_queue_length', 56),
                        ('eventrecorder_enabled', True),
                        ('eventrecorder_blacklist', 'eventrecorder_blacklist_example'),
                        ('eventrecorder_eventtypes', 'eventrecorder_eventtypes_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_event_dam_event_audit_listener(self):
        """Test case for com_day_cq_dam_core_impl_event_dam_event_audit_listener

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('event_filter', 'event_filter_example'),
                        ('enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_expiry_notification_job_impl(self):
        """Test case for com_day_cq_dam_core_impl_expiry_notification_job_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_expiry_notification_scheduler_istimebased', True),
                        ('cq_dam_expiry_notification_scheduler_timebased_rule', 'cq_dam_expiry_notification_scheduler_timebased_rule_example'),
                        ('cq_dam_expiry_notification_scheduler_period_rule', 56),
                        ('send_email', True),
                        ('asset_expired_limit', 56),
                        ('prior_notification_seconds', 56),
                        ('cq_dam_expiry_notification_url_protocol', 'cq_dam_expiry_notification_url_protocol_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat(self):
        """Test case for com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('is_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_gfx_commons_gfx_renderer(self):
        """Test case for com_day_cq_dam_core_impl_gfx_commons_gfx_renderer

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('skip_bufferedcache', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_handler_eps_format_handler(self):
        """Test case for com_day_cq_dam_core_impl_handler_eps_format_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('mimetype', 'mimetype_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_handler_indesign_format_handler(self):
        """Test case for com_day_cq_dam_core_impl_handler_indesign_format_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('mimetype', 'mimetype_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_handler_jpeg_handler(self):
        """Test case for com_day_cq_dam_core_impl_handler_jpeg_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_enable_ext_meta_extraction', True),
                        ('large_file_threshold', 56),
                        ('large_comment_threshold', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler(self):
        """Test case for com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('xmphandler_cq_formats', 'xmphandler_cq_formats_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_jmx_asset_index_update_monitor(self):
        """Test case for com_day_cq_dam_core_impl_jmx_asset_index_update_monitor

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('jmx_objectname', 'jmx_objectname_example'),
                        ('property_measure_enabled', True),
                        ('property_name', 'property_name_example'),
                        ('property_max_wait_ms', 56),
                        ('property_max_rate', 3.4),
                        ('fulltext_measure_enabled', True),
                        ('fulltext_name', 'fulltext_name_example'),
                        ('fulltext_max_wait_ms', 56),
                        ('fulltext_max_rate', 3.4)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl(self):
        """Test case for com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('jmx_objectname', 'jmx_objectname_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl(self):
        """Test case for com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('jmx_objectname', 'jmx_objectname_example'),
                        ('active', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config(self):
        """Test case for com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('operation', 'operation_example'),
                        ('email_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config(self):
        """Test case for com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('operation', 'operation_example'),
                        ('operation_icon', 'operation_icon_example'),
                        ('topic_name', 'topic_name_example'),
                        ('email_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_lightbox_lightbox_servlet(self):
        """Test case for com_day_cq_dam_core_impl_lightbox_lightbox_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_servlet_paths', 'sling_servlet_paths_example'),
                        ('sling_servlet_methods', 'sling_servlet_methods_example'),
                        ('cq_dam_enable_anonymous', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_metadata_editor_select_component_handler(self):
        """Test case for com_day_cq_dam_core_impl_metadata_editor_select_component_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('granitedata', 'granitedata_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper(self):
        """Test case for com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_allow_all_mime', True),
                        ('cq_dam_allowed_asset_mimes', 'cq_dam_allowed_asset_mimes_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl(self):
        """Test case for com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_detect_asset_mime_from_content', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_missing_metadata_notification_job(self):
        """Test case for com_day_cq_dam_core_impl_missing_metadata_notification_job

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_missingmetadata_notification_scheduler_istimebased', True),
                        ('cq_dam_missingmetadata_notification_scheduler_timebased_rule', 'cq_dam_missingmetadata_notification_scheduler_timebased_rule_example'),
                        ('cq_dam_missingmetadata_notification_scheduler_period_rule', 56),
                        ('cq_dam_missingmetadata_notification_recipient', 'cq_dam_missingmetadata_notification_recipient_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr(self):
        """Test case for com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('process_label', 'process_label_example'),
                        ('notify_on_complete', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_process_text_extraction_process(self):
        """Test case for com_day_cq_dam_core_impl_process_text_extraction_process

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('mime_types', 'mime_types_example'),
                        ('max_extract', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_rendition_maker_impl(self):
        """Test case for com_day_cq_dam_core_impl_rendition_maker_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('xmp_propagate', True),
                        ('xmp_excludes', 'xmp_excludes_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_reports_report_export_service(self):
        """Test case for com_day_cq_dam_core_impl_reports_report_export_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('query_batch_size', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_reports_report_purge_service(self):
        """Test case for com_day_cq_dam_core_impl_reports_report_purge_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scheduler_expression', 'scheduler_expression_example'),
                        ('max_saved_reports', 56),
                        ('time_duration', 56),
                        ('enable_report_purge', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_servlet_asset_download_servlet(self):
        """Test case for com_day_cq_dam_core_impl_servlet_asset_download_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_servlet_asset_status_servlet(self):
        """Test case for com_day_cq_dam_core_impl_servlet_asset_status_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_batch_status_maxassets', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet(self):
        """Test case for com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_batch_indesign_maxassets', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_servlet_batch_metadata_servlet(self):
        """Test case for com_day_cq_dam_core_impl_servlet_batch_metadata_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_batch_metadata_asset_default', 'cq_dam_batch_metadata_asset_default_example'),
                        ('cq_dam_batch_metadata_collection_default', 'cq_dam_batch_metadata_collection_default_example'),
                        ('cq_dam_batch_metadata_maxresources', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_servlet_binary_provider_servlet(self):
        """Test case for com_day_cq_dam_core_impl_servlet_binary_provider_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_servlet_resource_types', 'sling_servlet_resource_types_example'),
                        ('sling_servlet_methods', 'sling_servlet_methods_example'),
                        ('cq_dam_drm_enable', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_servlet_collection_servlet(self):
        """Test case for com_day_cq_dam_core_impl_servlet_collection_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_batch_collection_properties', 'cq_dam_batch_collection_properties_example'),
                        ('cq_dam_batch_collection_maxcollections', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_servlet_collections_servlet(self):
        """Test case for com_day_cq_dam_core_impl_servlet_collections_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_batch_collections_properties', 'cq_dam_batch_collections_properties_example'),
                        ('cq_dam_batch_collections_limit', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_servlet_companion_servlet(self):
        """Test case for com_day_cq_dam_core_impl_servlet_companion_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('more_info', 'more_info_example'),
                        ('mntoverlaydamguicontentassetsmoreinfo_htmlpath', 'mntoverlaydamguicontentassetsmoreinfo_htmlpath_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_servlet_create_asset_servlet(self):
        """Test case for com_day_cq_dam_core_impl_servlet_create_asset_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('detect_duplicate', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter(self):
        """Test case for com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_mime_type_blacklist', 'cq_mime_type_blacklist_example'),
                        ('cq_dam_empty_mime', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_servlet_guid_lookup_filter(self):
        """Test case for com_day_cq_dam_core_impl_servlet_guid_lookup_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_core_guidlookupfilter_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_servlet_health_check_servlet(self):
        """Test case for com_day_cq_dam_core_impl_servlet_health_check_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_sync_workflow_id', 'cq_dam_sync_workflow_id_example'),
                        ('cq_dam_sync_folder_types', 'cq_dam_sync_folder_types_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_servlet_metadata_get_servlet(self):
        """Test case for com_day_cq_dam_core_impl_servlet_metadata_get_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_servlet_resource_types', 'sling_servlet_resource_types_example'),
                        ('sling_servlet_methods', 'sling_servlet_methods_example'),
                        ('sling_servlet_extensions', 'sling_servlet_extensions_example'),
                        ('sling_servlet_selectors', 'sling_servlet_selectors_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet(self):
        """Test case for com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_drm_enable', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_servlet_resource_collection_servlet(self):
        """Test case for com_day_cq_dam_core_impl_servlet_resource_collection_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_servlet_resource_types', 'sling_servlet_resource_types_example'),
                        ('sling_servlet_methods', 'sling_servlet_methods_example'),
                        ('sling_servlet_selectors', 'sling_servlet_selectors_example'),
                        ('download_config', 'download_config_example'),
                        ('view_selector', 'view_selector_example'),
                        ('send_email', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl(self):
        """Test case for com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('create_preview_enabled', True),
                        ('update_preview_enabled', True),
                        ('queue_size', 56),
                        ('folder_preview_rendition_regex', 'folder_preview_rendition_regex_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_impl_unzip_unzip_config(self):
        """Test case for com_day_cq_dam_core_impl_unzip_unzip_config

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_config_unzip_maxuncompressedsize', 56),
                        ('cq_dam_config_unzip_encoding', 'cq_dam_config_unzip_encoding_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_process_exif_tool_extract_metadata_process(self):
        """Test case for com_day_cq_dam_core_process_exif_tool_extract_metadata_process

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('process_label', 'process_label_example'),
                        ('cq_dam_enable_sha1', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_process_extract_metadata_process(self):
        """Test case for com_day_cq_dam_core_process_extract_metadata_process

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('process_label', 'process_label_example'),
                        ('cq_dam_enable_sha1', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_core_process_metadata_processor_process(self):
        """Test case for com_day_cq_dam_core_process_metadata_processor_process

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('process_label', 'process_label_example'),
                        ('cq_dam_enable_sha1', True),
                        ('cq_dam_metadata_xssprotected_properties', 'cq_dam_metadata_xssprotected_properties_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_handler_ffmpeg_locator_impl(self):
        """Test case for com_day_cq_dam_handler_ffmpeg_locator_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('executable_searchpath', 'executable_searchpath_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl(self):
        """Test case for com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('event_filter', 'event_filter_example'),
                        ('fontmgr_system_font_dir', 'fontmgr_system_font_dir_example'),
                        ('fontmgr_adobe_font_dir', 'fontmgr_adobe_font_dir_example'),
                        ('fontmgr_customer_font_dir', 'fontmgr_customer_font_dir_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_handler_standard_pdf_pdf_handler(self):
        """Test case for com_day_cq_dam_handler_standard_pdf_pdf_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('raster_annotation', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_handler_standard_ps_post_script_handler(self):
        """Test case for com_day_cq_dam_handler_standard_ps_post_script_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('raster_annotation', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_handler_standard_psd_psd_handler(self):
        """Test case for com_day_cq_dam_handler_standard_psd_psd_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('large_file_threshold', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_ids_impl_ids_job_processor(self):
        """Test case for com_day_cq_dam_ids_impl_ids_job_processor

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enable_multisession', True),
                        ('ids_cc_enable', True),
                        ('enable_retry', True),
                        ('enable_retry_scripterror', True),
                        ('externalizer_domain_cqhost', 'externalizer_domain_cqhost_example'),
                        ('externalizer_domain_http', 'externalizer_domain_http_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_ids_impl_ids_pool_manager_impl(self):
        """Test case for com_day_cq_dam_ids_impl_ids_pool_manager_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('max_errors_to_blacklist', 56),
                        ('retry_interval_to_whitelist', 56),
                        ('connect_timeout', 56),
                        ('socket_timeout', 56),
                        ('process_label', 'process_label_example'),
                        ('connection_use_max', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_indd_impl_handler_indesign_xmp_handler(self):
        """Test case for com_day_cq_dam_indd_impl_handler_indesign_xmp_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('process_label', 'process_label_example'),
                        ('extract_pages', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet(self):
        """Test case for com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('snippetcreation_maxcollections', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_indd_process_indd_media_extract_process(self):
        """Test case for com_day_cq_dam_indd_process_indd_media_extract_process

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('process_label', 'process_label_example'),
                        ('cq_dam_indd_pages_regex', 'cq_dam_indd_pages_regex_example'),
                        ('ids_job_decoupled', True),
                        ('ids_job_workflow_model', 'ids_job_workflow_model_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_performance_internal_asset_performance_data_handler_impl(self):
        """Test case for com_day_cq_dam_performance_internal_asset_performance_data_handler_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('batch_commit_size', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_performance_internal_asset_performance_report_sync_job(self):
        """Test case for com_day_cq_dam_performance_internal_asset_performance_report_sync_job

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scheduler_expression', 'scheduler_expression_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro(self):
        """Test case for com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('delete_zip_file', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even(self):
        """Test case for com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_s7dam_dynamicmediaconfigeventlistener_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner(self):
        """Test case for com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scheduler_expression', 'scheduler_expression_example'),
                        ('scheduler_concurrent', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_s7dam_common_post_servlets_set_create_handler(self):
        """Test case for com_day_cq_dam_s7dam_common_post_servlets_set_create_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_post_operation', 'sling_post_operation_example'),
                        ('sling_servlet_methods', 'sling_servlet_methods_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler(self):
        """Test case for com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_post_operation', 'sling_post_operation_example'),
                        ('sling_servlet_methods', 'sling_servlet_methods_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process(self):
        """Test case for com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('process_label', 'process_label_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener(self):
        """Test case for com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_s7dam_damchangeeventlistener_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet(self):
        """Test case for com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_servlet_paths', 'sling_servlet_paths_example'),
                        ('sling_servlet_methods', 'sling_servlet_methods_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl(self):
        """Test case for com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name', 56),
                        ('cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name', 56),
                        ('cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name', 56),
                        ('cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name', 56),
                        ('cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name', 56),
                        ('cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name', 56),
                        ('cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_scene7_impl_scene7_api_client_impl(self):
        """Test case for com_day_cq_dam_scene7_impl_scene7_api_client_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_scene7_apiclient_recordsperpage_nofilter_name', 56),
                        ('cq_dam_scene7_apiclient_recordsperpage_withfilter_name', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl(self):
        """Test case for com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_scene7_assetmimetypeservice_mapping', 'cq_dam_scene7_assetmimetypeservice_mapping_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_scene7_impl_scene7_configuration_event_listener(self):
        """Test case for com_day_cq_dam_scene7_impl_scene7_configuration_event_listener

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_scene7_configurationeventlistener_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener(self):
        """Test case for com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_scene7_damchangeeventlistener_enabled', True),
                        ('cq_dam_scene7_damchangeeventlistener_observed_paths', 'cq_dam_scene7_damchangeeventlistener_observed_paths_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl(self):
        """Test case for com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scene7_flash_templates_rti', 'scene7_flash_templates_rti_example'),
                        ('scene7_flash_templates_rsi', 'scene7_flash_templates_rsi_example'),
                        ('scene7_flash_templates_rb', 'scene7_flash_templates_rb_example'),
                        ('scene7_flash_templates_rurl', 'scene7_flash_templates_rurl_example'),
                        ('scene7_flash_template_url_format_parameter', 'scene7_flash_template_url_format_parameter_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_scene7_impl_scene7_upload_service_impl(self):
        """Test case for com_day_cq_dam_scene7_impl_scene7_upload_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_dam_scene7_uploadservice_activejobtimeout_label', 56),
                        ('cq_dam_scene7_uploadservice_connectionmaxperroute_label', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser(self):
        """Test case for com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('get_cache_expiration_unit', 'get_cache_expiration_unit_example'),
                        ('get_cache_expiration_value', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_stock_integration_impl_configuration_stock_configuration(self):
        """Test case for com_day_cq_dam_stock_integration_impl_configuration_stock_configuration

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('locale', 'locale_example'),
                        ('ims_config', 'ims_config_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_dam_video_impl_servlet_video_test_servlet(self):
        """Test case for com_day_cq_dam_video_impl_servlet_video_test_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_extwidget_servlets_image_sprite_servlet(self):
        """Test case for com_day_cq_extwidget_servlets_image_sprite_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('max_width', 56),
                        ('max_height', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_image_internal_font_font_helper(self):
        """Test case for com_day_cq_image_internal_font_font_helper

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('fontpath', 'fontpath_example'),
                        ('oversampling_factor', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.image.internal.font.FontHelper',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_jcrclustersupport_cluster_start_level_controller(self):
        """Test case for com_day_cq_jcrclustersupport_cluster_start_level_controller

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cluster_level_enable', True),
                        ('cluster_master_level', 56),
                        ('cluster_slave_level', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_mailer_default_mail_service(self):
        """Test case for com_day_cq_mailer_default_mail_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('smtp_host', 'smtp_host_example'),
                        ('smtp_port', 56),
                        ('smtp_user', 'smtp_user_example'),
                        ('smtp_password', 'smtp_password_example'),
                        ('from_address', 'from_address_example'),
                        ('smtp_ssl', True),
                        ('smtp_starttls', True),
                        ('debug_email', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.mailer.DefaultMailService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_mailer_impl_cq_mailing_service(self):
        """Test case for com_day_cq_mailer_impl_cq_mailing_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('max_recipient_count', 'max_recipient_count_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.mailer.impl.CqMailingService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_mailer_impl_email_cq_email_template_factory(self):
        """Test case for com_day_cq_mailer_impl_email_cq_email_template_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('mailer_email_charset', 'mailer_email_charset_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_mailer_impl_email_cq_retriever_template_factory(self):
        """Test case for com_day_cq_mailer_impl_email_cq_retriever_template_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('mailer_email_embed', True),
                        ('mailer_email_charset', 'mailer_email_charset_example'),
                        ('mailer_email_retriever_user_id', 'mailer_email_retriever_user_id_example'),
                        ('mailer_email_retriever_user_pwd', 'mailer_email_retriever_user_pwd_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_mcm_campaign_impl_integration_config_impl(self):
        """Test case for com_day_cq_mcm_campaign_impl_integration_config_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('aem_mcm_campaign_form_constraints', 'aem_mcm_campaign_form_constraints_example'),
                        ('aem_mcm_campaign_public_url', 'aem_mcm_campaign_public_url_example'),
                        ('aem_mcm_campaign_relaxed_ssl', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_mcm_campaign_importer_personalized_text_handler_factory(self):
        """Test case for com_day_cq_mcm_campaign_importer_personalized_text_handler_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_mcm_core_newsletter_newsletter_email_service_impl(self):
        """Test case for com_day_cq_mcm_core_newsletter_newsletter_email_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('from_address', 'from_address_example'),
                        ('sender_host', 'sender_host_example'),
                        ('max_bounce_count', 'max_bounce_count_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_mcm_impl_mcm_configuration(self):
        """Test case for com_day_cq_mcm_impl_mcm_configuration

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('experience_indirection', 'experience_indirection_example'),
                        ('touchpoint_indirection', 'touchpoint_indirection_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen(self):
        """Test case for com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example'),
                        ('component_resource_type', 'component_resource_type_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug(self):
        """Test case for com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example'),
                        ('component_resource_type', 'component_resource_type_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component(self):
        """Test case for com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha(self):
        """Test case for com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h(self):
        """Test case for com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example'),
                        ('component_resource_type', 'component_resource_type_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_notification_impl_notification_service_impl(self):
        """Test case for com_day_cq_notification_impl_notification_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('event_filter', 'event_filter_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_personalization_impl_servlets_targeting_configuration_servlet(self):
        """Test case for com_day_cq_personalization_impl_servlets_targeting_configuration_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('forcelocation', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_polling_importer_impl_managed_poll_config_impl(self):
        """Test case for com_day_cq_polling_importer_impl_managed_poll_config_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('id', 'id_example'),
                        ('enabled', True),
                        ('reference', True),
                        ('interval', 56),
                        ('expression', 'expression_example'),
                        ('source', 'source_example'),
                        ('target', 'target_example'),
                        ('login', 'login_example'),
                        ('password', 'password_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_polling_importer_impl_managed_polling_importer_impl(self):
        """Test case for com_day_cq_polling_importer_impl_managed_polling_importer_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('importer_user', 'importer_user_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_polling_importer_impl_polling_importer_impl(self):
        """Test case for com_day_cq_polling_importer_impl_polling_importer_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('importer_min_interval', 56),
                        ('importer_user', 'importer_user_example'),
                        ('exclude_paths', 'exclude_paths_example'),
                        ('include_paths', 'include_paths_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_replication_audit_replication_event_listener(self):
        """Test case for com_day_cq_replication_audit_replication_event_listener

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_replication_content_static_content_builder(self):
        """Test case for com_day_cq_replication_content_static_content_builder

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('host', 'host_example'),
                        ('port', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_replication_impl_agent_manager_impl(self):
        """Test case for com_day_cq_replication_impl_agent_manager_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('job_topics', 'job_topics_example'),
                        ('service_user_target', 'service_user_target_example'),
                        ('agent_provider_target', 'agent_provider_target_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_replication_impl_content_durbo_binary_less_content_builder(self):
        """Test case for com_day_cq_replication_impl_content_durbo_binary_less_content_builder

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('binary_threshold', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov(self):
        """Test case for com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('preserve_hierarchy_nodes', True),
                        ('ignore_versioning', True),
                        ('import_acl', True),
                        ('save_threshold', 56),
                        ('preserve_user_paths', True),
                        ('preserve_uuid', True),
                        ('preserve_uuid_nodetypes', 'preserve_uuid_nodetypes_example'),
                        ('preserve_uuid_subtrees', 'preserve_uuid_subtrees_example'),
                        ('auto_commit', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_replication_impl_replication_content_factory_provider_impl(self):
        """Test case for com_day_cq_replication_impl_replication_content_factory_provider_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('replication_content_use_file_storage', True),
                        ('replication_content_max_commit_attempts', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_replication_impl_replication_receiver_impl(self):
        """Test case for com_day_cq_replication_impl_replication_receiver_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('receiver_tmpfile_threshold', 56),
                        ('receiver_packages_use_install', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_replication_impl_replicator_impl(self):
        """Test case for com_day_cq_replication_impl_replicator_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('distribute_events', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_replication_impl_reverse_replicator(self):
        """Test case for com_day_cq_replication_impl_reverse_replicator

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scheduler_period', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_replication_impl_transport_binary_less_transport_handler(self):
        """Test case for com_day_cq_replication_impl_transport_binary_less_transport_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('disabled_cipher_suites', 'disabled_cipher_suites_example'),
                        ('enabled_cipher_suites', 'enabled_cipher_suites_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_replication_impl_transport_http(self):
        """Test case for com_day_cq_replication_impl_transport_http

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('disabled_cipher_suites', 'disabled_cipher_suites_example'),
                        ('enabled_cipher_suites', 'enabled_cipher_suites_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.replication.impl.transport.Http',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_reporting_impl_cache_cache_impl(self):
        """Test case for com_day_cq_reporting_impl_cache_cache_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('repcache_enable', True),
                        ('repcache_ttl', 56),
                        ('repcache_max', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_reporting_impl_config_service_impl(self):
        """Test case for com_day_cq_reporting_impl_config_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('repconf_timezone', 'repconf_timezone_example'),
                        ('repconf_locale', 'repconf_locale_example'),
                        ('repconf_snapshots', 'repconf_snapshots_example'),
                        ('repconf_repdir', 'repconf_repdir_example'),
                        ('repconf_hourofday', 56),
                        ('repconf_minofhour', 56),
                        ('repconf_maxrows', 56),
                        ('repconf_fakedata', True),
                        ('repconf_snapshotuser', 'repconf_snapshotuser_example'),
                        ('repconf_enforcesnapshotuser', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_reporting_impl_r_log_analyzer(self):
        """Test case for com_day_cq_reporting_impl_r_log_analyzer

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('request_log_output', 'request_log_output_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_rewriter_linkchecker_impl_link_checker_impl(self):
        """Test case for com_day_cq_rewriter_linkchecker_impl_link_checker_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scheduler_period', 56),
                        ('scheduler_concurrent', True),
                        ('service_bad_link_tolerance_interval', 56),
                        ('service_check_override_patterns', 'service_check_override_patterns_example'),
                        ('service_cache_broken_internal_links', True),
                        ('service_special_link_prefix', 'service_special_link_prefix_example'),
                        ('service_special_link_patterns', 'service_special_link_patterns_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_rewriter_linkchecker_impl_link_checker_task(self):
        """Test case for com_day_cq_rewriter_linkchecker_impl_link_checker_task

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scheduler_period', 56),
                        ('scheduler_concurrent', True),
                        ('good_link_test_interval', 56),
                        ('bad_link_test_interval', 56),
                        ('link_unused_interval', 56),
                        ('connection_timeout', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory(self):
        """Test case for com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('linkcheckertransformer_disable_rewriting', True),
                        ('linkcheckertransformer_disable_checking', True),
                        ('linkcheckertransformer_map_cache_size', 56),
                        ('linkcheckertransformer_strict_extension_check', True),
                        ('linkcheckertransformer_strip_htmlt_extension', True),
                        ('linkcheckertransformer_rewrite_elements', 'linkcheckertransformer_rewrite_elements_example'),
                        ('linkcheckertransformer_strip_extension_path_blacklist', 'linkcheckertransformer_strip_extension_path_blacklist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl(self):
        """Test case for com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_max_links_per_host', 56),
                        ('service_save_external_link_references', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_rewriter_processor_impl_html_parser_factory(self):
        """Test case for com_day_cq_rewriter_processor_impl_html_parser_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('htmlparser_process_tags', 'htmlparser_process_tags_example'),
                        ('htmlparser_preserve_camel_case', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_search_impl_builder_query_builder_impl(self):
        """Test case for com_day_cq_search_impl_builder_query_builder_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('excerpt_properties', 'excerpt_properties_example'),
                        ('cache_max_entries', 56),
                        ('cache_entry_lifetime', 56),
                        ('xpath_union', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_search_suggest_impl_suggestion_index_manager_impl(self):
        """Test case for com_day_cq_search_suggest_impl_suggestion_index_manager_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('path_builder_target', 'path_builder_target_example'),
                        ('suggest_basepath', 'suggest_basepath_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_searchpromote_impl_publish_search_promote_config_handler(self):
        """Test case for com_day_cq_searchpromote_impl_publish_search_promote_config_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_searchpromote_confighandler_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_searchpromote_impl_search_promote_service_impl(self):
        """Test case for com_day_cq_searchpromote_impl_search_promote_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_searchpromote_configuration_server_uri', 'cq_searchpromote_configuration_server_uri_example'),
                        ('cq_searchpromote_configuration_environment', 'cq_searchpromote_configuration_environment_example'),
                        ('connection_timeout', 56),
                        ('socket_timeout', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_security_acl_setup(self):
        """Test case for com_day_cq_security_acl_setup

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_aclsetup_rules', 'cq_aclsetup_rules_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.security.ACLSetup',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_statistics_impl_statistics_service_impl(self):
        """Test case for com_day_cq_statistics_impl_statistics_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scheduler_period', 56),
                        ('scheduler_concurrent', True),
                        ('path', 'path_example'),
                        ('workspace', 'workspace_example'),
                        ('keywords_path', 'keywords_path_example'),
                        ('async_entries', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_tagging_impl_jcr_tag_manager_factory_impl(self):
        """Test case for com_day_cq_tagging_impl_jcr_tag_manager_factory_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('validation_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_tagging_impl_search_tag_predicate_evaluator(self):
        """Test case for com_day_cq_tagging_impl_search_tag_predicate_evaluator

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('ignore_path', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_tagging_impl_tag_garbage_collector(self):
        """Test case for com_day_cq_tagging_impl_tag_garbage_collector

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scheduler_expression', 'scheduler_expression_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_contentsync_impl_handler_pages_update_handler(self):
        """Test case for com_day_cq_wcm_contentsync_impl_handler_pages_update_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_pagesupdatehandler_imageresourcetypes', 'cq_pagesupdatehandler_imageresourcetypes_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor(self):
        """Test case for com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_contentsync_pathrewritertransformer_mapping_links', 'cq_contentsync_pathrewritertransformer_mapping_links_example'),
                        ('cq_contentsync_pathrewritertransformer_mapping_clientlibs', 'cq_contentsync_pathrewritertransformer_mapping_clientlibs_example'),
                        ('cq_contentsync_pathrewritertransformer_mapping_images', 'cq_contentsync_pathrewritertransformer_mapping_images_example'),
                        ('cq_contentsync_pathrewritertransformer_attribute_pattern', 'cq_contentsync_pathrewritertransformer_attribute_pattern_example'),
                        ('cq_contentsync_pathrewritertransformer_clientlibrary_pattern', 'cq_contentsync_pathrewritertransformer_clientlibrary_pattern_example'),
                        ('cq_contentsync_pathrewritertransformer_clientlibrary_replace', 'cq_contentsync_pathrewritertransformer_clientlibrary_replace_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl(self):
        """Test case for com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('authoring_ui_mode_service_default', 'authoring_ui_mode_service_default_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_commands_wcm_command_servlet(self):
        """Test case for com_day_cq_wcm_core_impl_commands_wcm_command_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('wcmcommandservlet_delete_whitelist', 'wcmcommandservlet_delete_whitelist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl(self):
        """Test case for com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('dim_default_mode', 'dim_default_mode_example'),
                        ('dim_appcache_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_event_page_event_audit_listener(self):
        """Test case for com_day_cq_wcm_core_impl_event_page_event_audit_listener

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('configured', 'configured_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_event_page_post_processor(self):
        """Test case for com_day_cq_wcm_core_impl_event_page_post_processor

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('paths', 'paths_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_event_repository_change_event_listener(self):
        """Test case for com_day_cq_wcm_core_impl_event_repository_change_event_listener

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('paths', 'paths_example'),
                        ('excluded_paths', 'excluded_paths_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_event_template_post_processor(self):
        """Test case for com_day_cq_wcm_core_impl_event_template_post_processor

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('paths', 'paths_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_language_manager_impl(self):
        """Test case for com_day_cq_wcm_core_impl_language_manager_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('langmgr_list_path', 'langmgr_list_path_example'),
                        ('langmgr_country_default', 'langmgr_country_default_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl(self):
        """Test case for com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('link_expired_prefix', 'link_expired_prefix_example'),
                        ('link_expired_remove', True),
                        ('link_expired_suffix', 'link_expired_suffix_example'),
                        ('link_invalid_prefix', 'link_invalid_prefix_example'),
                        ('link_invalid_remove', True),
                        ('link_invalid_suffix', 'link_invalid_suffix_example'),
                        ('link_predated_prefix', 'link_predated_prefix_example'),
                        ('link_predated_remove', True),
                        ('link_predated_suffix', 'link_predated_suffix_example'),
                        ('link_wcmmodes', 'link_wcmmodes_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_page_page_info_aggregator_impl(self):
        """Test case for com_day_cq_wcm_core_impl_page_page_info_aggregator_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('page_info_provider_property_regex_default', 'page_info_provider_property_regex_default_example'),
                        ('page_info_provider_property_name', 'page_info_provider_property_name_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_page_page_manager_factory_impl(self):
        """Test case for com_day_cq_wcm_core_impl_page_page_manager_factory_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('illegal_char_mapping', 'illegal_char_mapping_example'),
                        ('page_sub_tree_activation_check', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_references_content_content_reference_config(self):
        """Test case for com_day_cq_wcm_core_impl_references_content_content_reference_config

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('content_reference_config_resource_types', 'content_reference_config_resource_types_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler(self):
        """Test case for com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('dam_showexpired', True),
                        ('dam_showhidden', True),
                        ('tag_title_search', True),
                        ('guess_total', 'guess_total_example'),
                        ('dam_expiry_property', 'dam_expiry_property_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie(self):
        """Test case for com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('item_resource_types', 'item_resource_types_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler(self):
        """Test case for com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('guess_total', 'guess_total_example'),
                        ('tag_title_search', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_servlets_find_replace_servlet(self):
        """Test case for com_day_cq_wcm_core_impl_servlets_find_replace_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scope', 'scope_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_servlets_reference_search_servlet(self):
        """Test case for com_day_cq_wcm_core_impl_servlets_reference_search_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('referencesearchservlet_max_references_per_page', 56),
                        ('referencesearchservlet_max_pages', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_servlets_thumbnail_servlet(self):
        """Test case for com_day_cq_wcm_core_impl_servlets_thumbnail_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('workspace', 'workspace_example'),
                        ('dimensions', 'dimensions_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_utils_default_page_name_validator(self):
        """Test case for com_day_cq_wcm_core_impl_utils_default_page_name_validator

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('non_valid_chars', 'non_valid_chars_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_variants_page_variants_provider_impl(self):
        """Test case for com_day_cq_wcm_core_impl_variants_page_variants_provider_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('default_externalizer_domain', 'default_externalizer_domain_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_version_manager_impl(self):
        """Test case for com_day_cq_wcm_core_impl_version_manager_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('versionmanager_create_version_on_activation', True),
                        ('versionmanager_purging_enabled', True),
                        ('versionmanager_purge_paths', 'versionmanager_purge_paths_example'),
                        ('versionmanager_iv_paths', 'versionmanager_iv_paths_example'),
                        ('versionmanager_max_age_days', 56),
                        ('versionmanager_max_number_versions', 56),
                        ('versionmanager_min_number_versions', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_version_purge_task(self):
        """Test case for com_day_cq_wcm_core_impl_version_purge_task

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('versionpurge_paths', 'versionpurge_paths_example'),
                        ('versionpurge_recursive', True),
                        ('versionpurge_max_versions', 56),
                        ('versionpurge_min_versions', 56),
                        ('versionpurge_max_age_days', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_warp_time_warp_filter(self):
        """Test case for com_day_cq_wcm_core_impl_warp_time_warp_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('filter_order', 'filter_order_example'),
                        ('filter_scope', 'filter_scope_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_wcm_debug_filter(self):
        """Test case for com_day_cq_wcm_core_impl_wcm_debug_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('wcmdbgfilter_enabled', True),
                        ('wcmdbgfilter_jsp_debug', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_impl_wcm_developer_mode_filter(self):
        """Test case for com_day_cq_wcm_core_impl_wcm_developer_mode_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('wcmdevmodefilter_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_mvt_mvt_statistics_impl(self):
        """Test case for com_day_cq_wcm_core_mvt_mvt_statistics_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('mvtstatistics_trackingurl', 'mvtstatistics_trackingurl_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_stats_page_view_statistics_impl(self):
        """Test case for com_day_cq_wcm_core_stats_page_view_statistics_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('pageviewstatistics_trackingurl', 'pageviewstatistics_trackingurl_example'),
                        ('pageviewstatistics_trackingscript_enabled', 'pageviewstatistics_trackingscript_enabled_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_core_wcm_request_filter(self):
        """Test case for com_day_cq_wcm_core_wcm_request_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('wcmfilter_mode', 'wcmfilter_mode_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_design_package_importer(self):
        """Test case for com_day_cq_wcm_designimporter_design_package_importer

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('extract_filter', 'extract_filter_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_impl_canvas_builder_impl(self):
        """Test case for com_day_cq_wcm_designimporter_impl_canvas_builder_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('filepattern', 'filepattern_example'),
                        ('build_page_nodes', True),
                        ('build_client_libs', True),
                        ('build_canvas_component', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler(self):
        """Test case for com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('min_thread_pool_size', 56),
                        ('max_thread_pool_size', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl(self):
        """Test case for com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('search_pattern', 'search_pattern_example'),
                        ('replace_pattern', 'replace_pattern_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl(self):
        """Test case for com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('filepattern', 'filepattern_example'),
                        ('device_groups', 'device_groups_example'),
                        ('build_page_nodes', True),
                        ('build_client_libs', True),
                        ('build_canvas_component', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone(self):
        """Test case for com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon(self):
        """Test case for com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han(self):
        """Test case for com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle(self):
        """Test case for com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand(self):
        """Test case for com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen(self):
        """Test case for com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example'),
                        ('component_resource_type', 'component_resource_type_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler(self):
        """Test case for com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t(self):
        """Test case for com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle(self):
        """Test case for com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle(self):
        """Test case for com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h(self):
        """Test case for com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone(self):
        """Test case for com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example'),
                        ('component_resource_type', 'component_resource_type_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand(self):
        """Test case for com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl(self):
        """Test case for com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component(self):
        """Test case for com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example'),
                        ('component_resource_type', 'component_resource_type_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen(self):
        """Test case for com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example'),
                        ('component_resource_type', 'component_resource_type_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl(self):
        """Test case for com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('tagpattern', 'tagpattern_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet(self):
        """Test case for com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_name', 'service_name_example'),
                        ('sling_servlet_resource_types', 'sling_servlet_resource_types_example'),
                        ('sling_servlet_selectors', 'sling_servlet_selectors_example'),
                        ('sling_servlet_methods', 'sling_servlet_methods_example'),
                        ('forms_formchooserservlet_advansesearch_require', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor(self):
        """Test case for com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('forms_formparagraphpostprocessor_enabled', True),
                        ('forms_formparagraphpostprocessor_formresourcetypes', 'forms_formparagraphpostprocessor_formresourcetypes_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet(self):
        """Test case for com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name_whitelist', 'name_whitelist_example'),
                        ('allow_expressions', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_foundation_forms_impl_mail_servlet(self):
        """Test case for com_day_cq_wcm_foundation_forms_impl_mail_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_servlet_resource_types', 'sling_servlet_resource_types_example'),
                        ('sling_servlet_selectors', 'sling_servlet_selectors_example'),
                        ('resource_whitelist', 'resource_whitelist_example'),
                        ('resource_blacklist', 'resource_blacklist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet(self):
        """Test case for com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('adapt_supported_widths', 'adapt_supported_widths_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_foundation_impl_http_auth_handler(self):
        """Test case for com_day_cq_wcm_foundation_impl_http_auth_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('path', 'path_example'),
                        ('auth_http_nologin', True),
                        ('auth_http_realm', 'auth_http_realm_example'),
                        ('auth_default_loginpage', 'auth_default_loginpage_example'),
                        ('auth_cred_form', 'auth_cred_form_example'),
                        ('auth_cred_utf8', 'auth_cred_utf8_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_foundation_impl_page_impressions_tracker(self):
        """Test case for com_day_cq_wcm_foundation_impl_page_impressions_tracker

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_auth_requirements', 'sling_auth_requirements_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_foundation_impl_page_redirect_servlet(self):
        """Test case for com_day_cq_wcm_foundation_impl_page_redirect_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('excluded_resource_types', 'excluded_resource_types_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist(self):
        """Test case for com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('default_attachment_type_blacklist', 'default_attachment_type_blacklist_example'),
                        ('baseline_attachment_type_blacklist', 'baseline_attachment_type_blacklist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl(self):
        """Test case for com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('parameter_whitelist', 'parameter_whitelist_example'),
                        ('parameter_whitelist_prefixes', 'parameter_whitelist_prefixes_example'),
                        ('binary_parameter_whitelist', 'binary_parameter_whitelist_example'),
                        ('modifier_whitelist', 'modifier_whitelist_example'),
                        ('operation_whitelist', 'operation_whitelist_example'),
                        ('operation_whitelist_prefixes', 'operation_whitelist_prefixes_example'),
                        ('typehint_whitelist', 'typehint_whitelist_example'),
                        ('resourcetype_whitelist', 'resourcetype_whitelist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory(self):
        """Test case for com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('device_info_transformer_enabled', True),
                        ('device_info_transformer_css_style', 'device_info_transformer_css_style_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter(self):
        """Test case for com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('redirect_enabled', True),
                        ('redirect_stats_enabled', True),
                        ('redirect_extensions', 'redirect_extensions_example'),
                        ('redirect_paths', 'redirect_paths_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_msm_impl_actions_content_copy_action_factory(self):
        """Test case for com_day_cq_wcm_msm_impl_actions_content_copy_action_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_wcm_msm_action_excludednodetypes', 'cq_wcm_msm_action_excludednodetypes_example'),
                        ('cq_wcm_msm_action_excludedparagraphitems', 'cq_wcm_msm_action_excludedparagraphitems_example'),
                        ('cq_wcm_msm_action_excludedprops', 'cq_wcm_msm_action_excludedprops_example'),
                        ('contentcopyaction_order_style', 'contentcopyaction_order_style_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_msm_impl_actions_content_delete_action_factory(self):
        """Test case for com_day_cq_wcm_msm_impl_actions_content_delete_action_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_wcm_msm_action_excludednodetypes', 'cq_wcm_msm_action_excludednodetypes_example'),
                        ('cq_wcm_msm_action_excludedparagraphitems', 'cq_wcm_msm_action_excludedparagraphitems_example'),
                        ('cq_wcm_msm_action_excludedprops', 'cq_wcm_msm_action_excludedprops_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_msm_impl_actions_content_update_action_factory(self):
        """Test case for com_day_cq_wcm_msm_impl_actions_content_update_action_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_wcm_msm_action_excludednodetypes', 'cq_wcm_msm_action_excludednodetypes_example'),
                        ('cq_wcm_msm_action_excludedparagraphitems', 'cq_wcm_msm_action_excludedparagraphitems_example'),
                        ('cq_wcm_msm_action_excludedprops', 'cq_wcm_msm_action_excludedprops_example'),
                        ('cq_wcm_msm_action_ignored_mixin', 'cq_wcm_msm_action_ignored_mixin_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_msm_impl_actions_order_children_action_factory(self):
        """Test case for com_day_cq_wcm_msm_impl_actions_order_children_action_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_wcm_msm_action_excludednodetypes', 'cq_wcm_msm_action_excludednodetypes_example'),
                        ('cq_wcm_msm_action_excludedparagraphitems', 'cq_wcm_msm_action_excludedparagraphitems_example'),
                        ('cq_wcm_msm_action_excludedprops', 'cq_wcm_msm_action_excludedprops_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_msm_impl_actions_page_move_action_factory(self):
        """Test case for com_day_cq_wcm_msm_impl_actions_page_move_action_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_wcm_msm_action_excludednodetypes', 'cq_wcm_msm_action_excludednodetypes_example'),
                        ('cq_wcm_msm_action_excludedparagraphitems', 'cq_wcm_msm_action_excludedparagraphitems_example'),
                        ('cq_wcm_msm_action_excludedprops', 'cq_wcm_msm_action_excludedprops_example'),
                        ('cq_wcm_msm_impl_actions_pagemove_prop_reference_update', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_msm_impl_actions_references_update_action_factory(self):
        """Test case for com_day_cq_wcm_msm_impl_actions_references_update_action_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_wcm_msm_action_excludednodetypes', 'cq_wcm_msm_action_excludednodetypes_example'),
                        ('cq_wcm_msm_action_excludedparagraphitems', 'cq_wcm_msm_action_excludedparagraphitems_example'),
                        ('cq_wcm_msm_action_excludedprops', 'cq_wcm_msm_action_excludedprops_example'),
                        ('cq_wcm_msm_impl_action_referencesupdate_prop_update_nested', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_msm_impl_actions_version_copy_action_factory(self):
        """Test case for com_day_cq_wcm_msm_impl_actions_version_copy_action_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_wcm_msm_action_excludednodetypes', 'cq_wcm_msm_action_excludednodetypes_example'),
                        ('cq_wcm_msm_action_excludedparagraphitems', 'cq_wcm_msm_action_excludedparagraphitems_example'),
                        ('cq_wcm_msm_action_excludedprops', 'cq_wcm_msm_action_excludedprops_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_msm_impl_live_relationship_manager_impl(self):
        """Test case for com_day_cq_wcm_msm_impl_live_relationship_manager_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('liverelationshipmgr_relationsconfig_default', 'liverelationshipmgr_relationsconfig_default_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_msm_impl_rollout_manager_impl(self):
        """Test case for com_day_cq_wcm_msm_impl_rollout_manager_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('event_filter', 'event_filter_example'),
                        ('rolloutmgr_excludedprops_default', 'rolloutmgr_excludedprops_default_example'),
                        ('rolloutmgr_excludedparagraphprops_default', 'rolloutmgr_excludedparagraphprops_default_example'),
                        ('rolloutmgr_excludednodetypes_default', 'rolloutmgr_excludednodetypes_default_example'),
                        ('rolloutmgr_threadpool_maxsize', 56),
                        ('rolloutmgr_threadpool_maxshutdowntime', 56),
                        ('rolloutmgr_threadpool_priority', 'rolloutmgr_threadpool_priority_example'),
                        ('rolloutmgr_commit_size', 56),
                        ('rolloutmgr_conflicthandling_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_msm_impl_servlets_audit_log_servlet(self):
        """Test case for com_day_cq_wcm_msm_impl_servlets_audit_log_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('auditlogservlet_default_events_count', 56),
                        ('auditlogservlet_default_path', 'auditlogservlet_default_path_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_notification_email_impl_email_channel(self):
        """Test case for com_day_cq_wcm_notification_email_impl_email_channel

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('email_from', 'email_from_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_notification_impl_notification_manager_impl(self):
        """Test case for com_day_cq_wcm_notification_impl_notification_manager_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('event_topics', 'event_topics_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_scripting_impl_bvp_manager(self):
        """Test case for com_day_cq_wcm_scripting_impl_bvp_manager

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('com_day_cq_wcm_scripting_bvp_script_engines', 'com_day_cq_wcm_scripting_bvp_script_engines_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_undo_undo_config(self):
        """Test case for com_day_cq_wcm_undo_undo_config

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cq_wcm_undo_enabled', True),
                        ('cq_wcm_undo_path', 'cq_wcm_undo_path_example'),
                        ('cq_wcm_undo_validity', 56),
                        ('cq_wcm_undo_steps', 56),
                        ('cq_wcm_undo_persistence', 'cq_wcm_undo_persistence_example'),
                        ('cq_wcm_undo_persistence_mode', True),
                        ('cq_wcm_undo_markermode', 'cq_wcm_undo_markermode_example'),
                        ('cq_wcm_undo_whitelist', 'cq_wcm_undo_whitelist_example'),
                        ('cq_wcm_undo_blacklist', 'cq_wcm_undo_blacklist_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.undo.UndoConfig',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_webservicesupport_impl_replication_event_listener(self):
        """Test case for com_day_cq_wcm_webservicesupport_impl_replication_event_listener

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('flush_agents', 'flush_agents_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl(self):
        """Test case for com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('event_filter', 'event_filter_example'),
                        ('min_thread_pool_size', 56),
                        ('max_thread_pool_size', 56),
                        ('cq_wcm_workflow_terminate_on_activate', True),
                        ('cq_wcm_worklfow_terminate_exclusion_list', 'cq_wcm_worklfow_terminate_exclusion_list_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_wcm_workflow_impl_workflow_package_info_provider(self):
        """Test case for com_day_cq_wcm_workflow_impl_workflow_package_info_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('workflowpackageinfoprovider_filter', 'workflowpackageinfoprovider_filter_example'),
                        ('workflowpackageinfoprovider_filter_rootpath', 'workflowpackageinfoprovider_filter_rootpath_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_widget_impl_html_library_manager_impl(self):
        """Test case for com_day_cq_widget_impl_html_library_manager_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('htmllibmanager_clientmanager', 'htmllibmanager_clientmanager_example'),
                        ('htmllibmanager_debug', True),
                        ('htmllibmanager_debug_console', True),
                        ('htmllibmanager_debug_init_js', 'htmllibmanager_debug_init_js_example'),
                        ('htmllibmanager_defaultthemename', 'htmllibmanager_defaultthemename_example'),
                        ('htmllibmanager_defaultuserthemename', 'htmllibmanager_defaultuserthemename_example'),
                        ('htmllibmanager_firebuglite_path', 'htmllibmanager_firebuglite_path_example'),
                        ('htmllibmanager_force_cq_url_info', True),
                        ('htmllibmanager_gzip', True),
                        ('htmllibmanager_maxage', 56),
                        ('htmllibmanager_max_data_uri_size', 56),
                        ('htmllibmanager_minify', True),
                        ('htmllibmanager_path_list', 'htmllibmanager_path_list_example'),
                        ('htmllibmanager_timing', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_widget_impl_widget_extension_provider_impl(self):
        """Test case for com_day_cq_widget_impl_widget_extension_provider_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('extendable_widgets', 'extendable_widgets_example'),
                        ('widgetextensionprovider_debug', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_workflow_impl_email_e_mail_notification_service(self):
        """Test case for com_day_cq_workflow_impl_email_e_mail_notification_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('from_address', 'from_address_example'),
                        ('host_prefix', 'host_prefix_example'),
                        ('notify_onabort', True),
                        ('notify_oncomplete', True),
                        ('notify_oncontainercomplete', True),
                        ('notify_useronly', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_cq_workflow_impl_email_task_e_mail_notification_service(self):
        """Test case for com_day_cq_workflow_impl_email_task_e_mail_notification_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('notify_onupdate', True),
                        ('notify_oncomplete', True)]
        response = self.client.open(
            '//system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_crx_security_token_impl_impl_token_authentication_handler(self):
        """Test case for com_day_crx_security_token_impl_impl_token_authentication_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('path', 'path_example'),
                        ('token_required_attr', 'token_required_attr_example'),
                        ('token_alternate_url', 'token_alternate_url_example'),
                        ('token_encapsulated', True),
                        ('skip_token_refresh', 'skip_token_refresh_example')]
        response = self.client.open(
            '//system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_com_day_crx_security_token_impl_token_cleanup_task(self):
        """Test case for com_day_crx_security_token_impl_token_cleanup_task

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enable_token_cleanup_task', True),
                        ('scheduler_expression', 'scheduler_expression_example'),
                        ('batch_size', 56)]
        response = self.client.open(
            '//system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_guide_localization_service(self):
        """Test case for guide_localization_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('supported_locales', 'supported_locales_example'),
                        ('localizable_properties', 'localizable_properties_example')]
        response = self.client.open(
            '//system/console/configMgr/Guide Localization Service',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_messaging_user_component_factory(self):
        """Test case for messaging_user_component_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('priority', 56)]
        response = self.client.open(
            '//system/console/configMgr/MessagingUserComponentFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_aries_jmx_framework_state_config(self):
        """Test case for org_apache_aries_jmx_framework_state_config

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('attribute_change_notification_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.aries.jmx.framework.StateConfig',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_felix_eventadmin_impl_event_admin(self):
        """Test case for org_apache_felix_eventadmin_impl_event_admin

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('org_apache_felix_eventadmin_thread_pool_size', 56),
                        ('org_apache_felix_eventadmin_async_to_sync_thread_ratio', 3.4),
                        ('org_apache_felix_eventadmin_timeout', 56),
                        ('org_apache_felix_eventadmin_require_topic', True),
                        ('org_apache_felix_eventadmin_ignore_timeout', 'org_apache_felix_eventadmin_ignore_timeout_example'),
                        ('org_apache_felix_eventadmin_ignore_topic', 'org_apache_felix_eventadmin_ignore_topic_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_felix_http(self):
        """Test case for org_apache_felix_http

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('org_apache_felix_http_host', 'org_apache_felix_http_host_example'),
                        ('org_apache_felix_http_enable', True),
                        ('org_osgi_service_http_port', 56),
                        ('org_apache_felix_http_timeout', 56),
                        ('org_apache_felix_https_enable', True),
                        ('org_osgi_service_http_port_secure', 56),
                        ('org_apache_felix_https_keystore', 'org_apache_felix_https_keystore_example'),
                        ('org_apache_felix_https_keystore_password', 'org_apache_felix_https_keystore_password_example'),
                        ('org_apache_felix_https_keystore_key_password', 'org_apache_felix_https_keystore_key_password_example'),
                        ('org_apache_felix_https_truststore', 'org_apache_felix_https_truststore_example'),
                        ('org_apache_felix_https_truststore_password', 'org_apache_felix_https_truststore_password_example'),
                        ('org_apache_felix_https_clientcertificate', 'org_apache_felix_https_clientcertificate_example'),
                        ('org_apache_felix_http_context_path', 'org_apache_felix_http_context_path_example'),
                        ('org_apache_felix_http_mbeans', True),
                        ('org_apache_felix_http_session_timeout', 56),
                        ('org_apache_felix_http_jetty_threadpool_max', 56),
                        ('org_apache_felix_http_jetty_acceptors', 56),
                        ('org_apache_felix_http_jetty_selectors', 56),
                        ('org_apache_felix_http_jetty_header_buffer_size', 56),
                        ('org_apache_felix_http_jetty_request_buffer_size', 56),
                        ('org_apache_felix_http_jetty_response_buffer_size', 56),
                        ('org_apache_felix_http_jetty_max_form_size', 56),
                        ('org_apache_felix_http_path_exclusions', 'org_apache_felix_http_path_exclusions_example'),
                        ('org_apache_felix_https_jetty_ciphersuites_excluded', 'org_apache_felix_https_jetty_ciphersuites_excluded_example'),
                        ('org_apache_felix_https_jetty_ciphersuites_included', 'org_apache_felix_https_jetty_ciphersuites_included_example'),
                        ('org_apache_felix_http_jetty_send_server_header', True),
                        ('org_apache_felix_https_jetty_protocols_included', 'org_apache_felix_https_jetty_protocols_included_example'),
                        ('org_apache_felix_https_jetty_protocols_excluded', 'org_apache_felix_https_jetty_protocols_excluded_example'),
                        ('org_apache_felix_proxy_load_balancer_connection_enable', True),
                        ('org_apache_felix_https_jetty_renegotiate_allowed', True),
                        ('org_apache_felix_https_jetty_session_cookie_http_only', True),
                        ('org_apache_felix_https_jetty_session_cookie_secure', True),
                        ('org_eclipse_jetty_servlet_session_id_path_parameter_name', 'org_eclipse_jetty_servlet_session_id_path_parameter_name_example'),
                        ('org_eclipse_jetty_servlet_checking_remote_session_id_encoding', True),
                        ('org_eclipse_jetty_servlet_session_cookie', 'org_eclipse_jetty_servlet_session_cookie_example'),
                        ('org_eclipse_jetty_servlet_session_domain', 'org_eclipse_jetty_servlet_session_domain_example'),
                        ('org_eclipse_jetty_servlet_session_path', 'org_eclipse_jetty_servlet_session_path_example'),
                        ('org_eclipse_jetty_servlet_max_age', 56),
                        ('org_apache_felix_http_name', 'org_apache_felix_http_name_example'),
                        ('org_apache_felix_jetty_gziphandler_enable', True),
                        ('org_apache_felix_jetty_gzip_min_gzip_size', 56),
                        ('org_apache_felix_jetty_gzip_compression_level', 56),
                        ('org_apache_felix_jetty_gzip_inflate_buffer_size', 56),
                        ('org_apache_felix_jetty_gzip_sync_flush', True),
                        ('org_apache_felix_jetty_gzip_excluded_user_agents', 'org_apache_felix_jetty_gzip_excluded_user_agents_example'),
                        ('org_apache_felix_jetty_gzip_included_methods', 'org_apache_felix_jetty_gzip_included_methods_example'),
                        ('org_apache_felix_jetty_gzip_excluded_methods', 'org_apache_felix_jetty_gzip_excluded_methods_example'),
                        ('org_apache_felix_jetty_gzip_included_paths', 'org_apache_felix_jetty_gzip_included_paths_example'),
                        ('org_apache_felix_jetty_gzip_excluded_paths', 'org_apache_felix_jetty_gzip_excluded_paths_example'),
                        ('org_apache_felix_jetty_gzip_included_mime_types', 'org_apache_felix_jetty_gzip_included_mime_types_example'),
                        ('org_apache_felix_jetty_gzip_excluded_mime_types', 'org_apache_felix_jetty_gzip_excluded_mime_types_example'),
                        ('org_apache_felix_http_session_invalidate', True),
                        ('org_apache_felix_http_session_uniqueid', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.felix.http',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_felix_http_sslfilter_ssl_filter(self):
        """Test case for org_apache_felix_http_sslfilter_ssl_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('ssl_forward_header', 'ssl_forward_header_example'),
                        ('ssl_forward_value', 'ssl_forward_value_example'),
                        ('ssl_forward_cert_header', 'ssl_forward_cert_header_example'),
                        ('rewrite_absolute_urls', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_felix_jaas_configuration_factory(self):
        """Test case for org_apache_felix_jaas_configuration_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('jaas_control_flag', 'jaas_control_flag_example'),
                        ('jaas_ranking', 56),
                        ('jaas_realm_name', 'jaas_realm_name_example'),
                        ('jaas_classname', 'jaas_classname_example'),
                        ('jaas_options', 'jaas_options_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.felix.jaas.Configuration.factory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_felix_jaas_configuration_spi(self):
        """Test case for org_apache_felix_jaas_configuration_spi

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('jaas_default_realm_name', 'jaas_default_realm_name_example'),
                        ('jaas_config_provider_name', 'jaas_config_provider_name_example'),
                        ('jaas_global_config_policy', 'jaas_global_config_policy_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_felix_scr_scr_service(self):
        """Test case for org_apache_felix_scr_scr_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('ds_loglevel', 56),
                        ('ds_factory_enabled', True),
                        ('ds_delayed_keep_instances', True),
                        ('ds_lock_timeout_milliseconds', 56),
                        ('ds_stop_timeout_milliseconds', 56),
                        ('ds_global_extender', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.felix.scr.ScrService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_felix_systemready_impl_components_check(self):
        """Test case for org_apache_felix_systemready_impl_components_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('components_list', 'components_list_example'),
                        ('type', 'type_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_felix_systemready_impl_framework_start_check(self):
        """Test case for org_apache_felix_systemready_impl_framework_start_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('timeout', 56),
                        ('target_start_level', 56),
                        ('target_start_level_prop_name', 'target_start_level_prop_name_example'),
                        ('type', 'type_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_felix_systemready_impl_services_check(self):
        """Test case for org_apache_felix_systemready_impl_services_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('services_list', 'services_list_example'),
                        ('type', 'type_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_felix_systemready_impl_servlet_system_alive_servlet(self):
        """Test case for org_apache_felix_systemready_impl_servlet_system_alive_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('osgi_http_whiteboard_servlet_pattern', 'osgi_http_whiteboard_servlet_pattern_example'),
                        ('osgi_http_whiteboard_context_select', 'osgi_http_whiteboard_context_select_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_felix_systemready_impl_servlet_system_ready_servlet(self):
        """Test case for org_apache_felix_systemready_impl_servlet_system_ready_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('osgi_http_whiteboard_servlet_pattern', 'osgi_http_whiteboard_servlet_pattern_example'),
                        ('osgi_http_whiteboard_context_select', 'osgi_http_whiteboard_context_select_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_felix_systemready_system_ready_monitor(self):
        """Test case for org_apache_felix_systemready_system_ready_monitor

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('poll_interval', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_felix_webconsole_internal_servlet_osgi_manager(self):
        """Test case for org_apache_felix_webconsole_internal_servlet_osgi_manager

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('manager_root', 'manager_root_example'),
                        ('http_service_filter', 'http_service_filter_example'),
                        ('default_render', 'default_render_example'),
                        ('realm', 'realm_example'),
                        ('username', 'username_example'),
                        ('password', 'password_example'),
                        ('category', 'category_example'),
                        ('locale', 'locale_example'),
                        ('loglevel', 56),
                        ('plugins', 'plugins_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_felix_webconsole_plugins_event_internal_plugin_servlet(self):
        """Test case for org_apache_felix_webconsole_plugins_event_internal_plugin_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('max_size', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co(self):
        """Test case for org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('felix_memoryusage_dump_threshold', 56),
                        ('felix_memoryusage_dump_interval', 56),
                        ('felix_memoryusage_dump_location', 'felix_memoryusage_dump_location_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_http_proxyconfigurator(self):
        """Test case for org_apache_http_proxyconfigurator

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('proxy_enabled', True),
                        ('proxy_host', 'proxy_host_example'),
                        ('proxy_port', 56),
                        ('proxy_user', 'proxy_user_example'),
                        ('proxy_password', 'proxy_password_example'),
                        ('proxy_exceptions', 'proxy_exceptions_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.http.proxyconfigurator',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider(self):
        """Test case for org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('dir', 'dir_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store(self):
        """Test case for org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('path', 'path_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_plugins_document_document_node_store_service(self):
        """Test case for org_apache_jackrabbit_oak_plugins_document_document_node_store_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('mongouri', 'mongouri_example'),
                        ('db', 'db_example'),
                        ('socket_keep_alive', True),
                        ('cache', 56),
                        ('node_cache_percentage', 56),
                        ('prev_doc_cache_percentage', 56),
                        ('children_cache_percentage', 56),
                        ('diff_cache_percentage', 56),
                        ('cache_segment_count', 56),
                        ('cache_stack_move_distance', 56),
                        ('blob_cache_size', 56),
                        ('persistent_cache', 'persistent_cache_example'),
                        ('journal_cache', 'journal_cache_example'),
                        ('custom_blob_store', True),
                        ('journal_gc_interval', 56),
                        ('journal_gc_max_age', 56),
                        ('prefetch_external_changes', True),
                        ('role', 'role_example'),
                        ('version_gc_max_age_in_secs', 56),
                        ('version_gc_expression', 'version_gc_expression_example'),
                        ('version_gc_time_limit_in_secs', 56),
                        ('blob_gc_max_age_in_secs', 56),
                        ('blob_track_snapshot_interval_in_secs', 56),
                        ('repository_home', 'repository_home_example'),
                        ('max_replication_lag_in_secs', 56),
                        ('document_store_type', 'document_store_type_example'),
                        ('bundling_disabled', True),
                        ('update_limit', 56),
                        ('persistent_cache_includes', 'persistent_cache_includes_example'),
                        ('lease_check_mode', 'lease_check_mode_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre(self):
        """Test case for org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('persistent_cache_includes', 'persistent_cache_includes_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac(self):
        """Test case for org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('included_paths', 'included_paths_example'),
                        ('enable_async_observer', True),
                        ('observer_queue_size', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_plugins_index_async_indexer_service(self):
        """Test case for org_apache_jackrabbit_oak_plugins_index_async_indexer_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('async_configs', 'async_configs_example'),
                        ('lease_time_out_minutes', 56),
                        ('failing_index_timeout_seconds', 56),
                        ('error_warn_interval_seconds', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv(self):
        """Test case for org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('disabled', True),
                        ('debug', True),
                        ('local_index_dir', 'local_index_dir_example'),
                        ('enable_open_index_async', True),
                        ('thread_pool_size', 56),
                        ('prefetch_index_files', True),
                        ('extracted_text_cache_size_in_mb', 56),
                        ('extracted_text_cache_expiry_in_secs', 56),
                        ('always_use_pre_extracted_cache', True),
                        ('boolean_clause_limit', 56),
                        ('enable_hybrid_indexing', True),
                        ('hybrid_queue_size', 56),
                        ('disable_stored_index_definition', True),
                        ('deleted_blobs_collection_enabled', True),
                        ('prop_index_cleaner_interval_in_secs', 56),
                        ('enable_single_blob_index_files', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co(self):
        """Test case for org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('solr_home_path', 'solr_home_path_example'),
                        ('solr_core_name', 'solr_core_name_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers(self):
        """Test case for org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration(self):
        """Test case for org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('path_desc_field', 'path_desc_field_example'),
                        ('path_child_field', 'path_child_field_example'),
                        ('path_parent_field', 'path_parent_field_example'),
                        ('path_exact_field', 'path_exact_field_example'),
                        ('catch_all_field', 'catch_all_field_example'),
                        ('collapsed_path_field', 'collapsed_path_field_example'),
                        ('path_depth_field', 'path_depth_field_example'),
                        ('commit_policy', 'commit_policy_example'),
                        ('rows', 56),
                        ('path_restrictions', True),
                        ('property_restrictions', True),
                        ('primarytypes_restrictions', True),
                        ('ignored_properties', 'ignored_properties_example'),
                        ('used_properties', 'used_properties_example'),
                        ('type_mappings', 'type_mappings_example'),
                        ('property_mappings', 'property_mappings_example'),
                        ('collapse_jcrcontent_nodes', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf(self):
        """Test case for org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('solr_http_url', 'solr_http_url_example'),
                        ('solr_zk_host', 'solr_zk_host_example'),
                        ('solr_collection', 'solr_collection_example'),
                        ('solr_socket_timeout', 56),
                        ('solr_connection_timeout', 56),
                        ('solr_shards_no', 56),
                        ('solr_replication_factor', 56),
                        ('solr_conf_dir', 'solr_conf_dir_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid(self):
        """Test case for org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('query_aggregation', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se(self):
        """Test case for org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('server_type', 'server_type_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory(self):
        """Test case for org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('provider_type', 'provider_type_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_plugins_observation_change_collector_provider(self):
        """Test case for org_apache_jackrabbit_oak_plugins_observation_change_collector_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('max_items', 56),
                        ('max_path_depth', 56),
                        ('enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_query_query_engine_settings_service(self):
        """Test case for org_apache_jackrabbit_oak_query_query_engine_settings_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('query_limit_in_memory', 56),
                        ('query_limit_reads', 56),
                        ('query_fail_traversal', True),
                        ('fast_query_size', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_security_authentication_authentication_config(self):
        """Test case for org_apache_jackrabbit_oak_security_authentication_authentication_config

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('org_apache_jackrabbit_oak_authentication_app_name', 'org_apache_jackrabbit_oak_authentication_app_name_example'),
                        ('org_apache_jackrabbit_oak_authentication_config_spi_name', 'org_apache_jackrabbit_oak_authentication_config_spi_name_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi(self):
        """Test case for org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('provider_name', 'provider_name_example'),
                        ('host_name', 'host_name_example'),
                        ('host_port', 56),
                        ('host_ssl', True),
                        ('host_tls', True),
                        ('host_no_cert_check', True),
                        ('bind_dn', 'bind_dn_example'),
                        ('bind_password', 'bind_password_example'),
                        ('search_timeout', 'search_timeout_example'),
                        ('admin_pool_max_active', 56),
                        ('admin_pool_lookup_on_validate', True),
                        ('user_pool_max_active', 56),
                        ('user_pool_lookup_on_validate', True),
                        ('user_base_dn', 'user_base_dn_example'),
                        ('user_objectclass', 'user_objectclass_example'),
                        ('user_id_attribute', 'user_id_attribute_example'),
                        ('user_extra_filter', 'user_extra_filter_example'),
                        ('user_make_dn_path', True),
                        ('group_base_dn', 'group_base_dn_example'),
                        ('group_objectclass', 'group_objectclass_example'),
                        ('group_name_attribute', 'group_name_attribute_example'),
                        ('group_extra_filter', 'group_extra_filter_example'),
                        ('group_make_dn_path', True),
                        ('group_member_attribute', 'group_member_attribute_example'),
                        ('use_uid_for_ext_id', True),
                        ('customattributes', 'customattributes_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_security_authentication_token_token_configura(self):
        """Test case for org_apache_jackrabbit_oak_security_authentication_token_token_configura

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('token_expiration', 'token_expiration_example'),
                        ('token_length', 'token_length_example'),
                        ('token_refresh', True),
                        ('token_cleanup_threshold', 56),
                        ('password_hash_algorithm', 'password_hash_algorithm_example'),
                        ('password_hash_iterations', 56),
                        ('password_salt_size', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_security_authorization_authorization_configur(self):
        """Test case for org_apache_jackrabbit_oak_security_authorization_authorization_configur

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('permissions_jr2', 'permissions_jr2_example'),
                        ('import_behavior', 'import_behavior_example'),
                        ('read_paths', 'read_paths_example'),
                        ('administrative_principals', 'administrative_principals_example'),
                        ('configuration_ranking', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_security_internal_security_provider_registrati(self):
        """Test case for org_apache_jackrabbit_oak_security_internal_security_provider_registrati

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('required_service_pids', 'required_service_pids_example'),
                        ('authorization_composition_type', 'authorization_composition_type_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_security_user_random_authorizable_node_name(self):
        """Test case for org_apache_jackrabbit_oak_security_user_random_authorizable_node_name

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('length', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_security_user_user_configuration_impl(self):
        """Test case for org_apache_jackrabbit_oak_security_user_user_configuration_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('users_path', 'users_path_example'),
                        ('groups_path', 'groups_path_example'),
                        ('system_relative_path', 'system_relative_path_example'),
                        ('default_depth', 56),
                        ('import_behavior', 'import_behavior_example'),
                        ('password_hash_algorithm', 'password_hash_algorithm_example'),
                        ('password_hash_iterations', 56),
                        ('password_salt_size', 56),
                        ('omit_admin_pw', True),
                        ('support_auto_save', True),
                        ('password_max_age', 56),
                        ('initial_password_change', True),
                        ('password_history_size', 56),
                        ('password_expiry_for_admin', True),
                        ('cache_expiration', 56),
                        ('enable_rfc7613_usercase_mapped_profile', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service(self):
        """Test case for org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('account_name', 'account_name_example'),
                        ('container_name', 'container_name_example'),
                        ('access_key', 'access_key_example'),
                        ('root_path', 'root_path_example'),
                        ('connection_url', 'connection_url_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_segment_segment_node_store_factory(self):
        """Test case for org_apache_jackrabbit_oak_segment_segment_node_store_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('repository_home', 'repository_home_example'),
                        ('tarmk_mode', 'tarmk_mode_example'),
                        ('tarmk_size', 56),
                        ('segment_cache_size', 56),
                        ('string_cache_size', 56),
                        ('template_cache_size', 56),
                        ('string_deduplication_cache_size', 56),
                        ('template_deduplication_cache_size', 56),
                        ('node_deduplication_cache_size', 56),
                        ('pause_compaction', True),
                        ('compaction_retry_count', 56),
                        ('compaction_force_timeout', 56),
                        ('compaction_size_delta_estimation', 56),
                        ('compaction_disable_estimation', True),
                        ('compaction_retained_generations', 56),
                        ('compaction_memory_threshold', 56),
                        ('compaction_progress_log', 56),
                        ('standby', True),
                        ('custom_blob_store', True),
                        ('custom_segment_store', True),
                        ('split_persistence', True),
                        ('repository_backup_dir', 'repository_backup_dir_example'),
                        ('blob_gc_max_age_in_secs', 56),
                        ('blob_track_snapshot_interval_in_secs', 56),
                        ('role', 'role_example'),
                        ('register_descriptors', True),
                        ('dispatch_changes', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service(self):
        """Test case for org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('commits_tracker_writer_groups', 'commits_tracker_writer_groups_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_segment_segment_node_store_service(self):
        """Test case for org_apache_jackrabbit_oak_segment_segment_node_store_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('repository_home', 'repository_home_example'),
                        ('tarmk_mode', 'tarmk_mode_example'),
                        ('tarmk_size', 56),
                        ('segment_cache_size', 56),
                        ('string_cache_size', 56),
                        ('template_cache_size', 56),
                        ('string_deduplication_cache_size', 56),
                        ('template_deduplication_cache_size', 56),
                        ('node_deduplication_cache_size', 56),
                        ('pause_compaction', True),
                        ('compaction_retry_count', 56),
                        ('compaction_force_timeout', 56),
                        ('compaction_size_delta_estimation', 56),
                        ('compaction_disable_estimation', True),
                        ('compaction_retained_generations', 56),
                        ('compaction_memory_threshold', 56),
                        ('compaction_progress_log', 56),
                        ('standby', True),
                        ('custom_blob_store', True),
                        ('custom_segment_store', True),
                        ('split_persistence', True),
                        ('repository_backup_dir', 'repository_backup_dir_example'),
                        ('blob_gc_max_age_in_secs', 56),
                        ('blob_track_snapshot_interval_in_secs', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_segment_standby_store_standby_store_service(self):
        """Test case for org_apache_jackrabbit_oak_segment_standby_store_standby_store_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('org_apache_sling_installer_configuration_persist', True),
                        ('mode', 'mode_example'),
                        ('port', 56),
                        ('primary_host', 'primary_host_example'),
                        ('interval', 56),
                        ('primary_allowed_client_ip_ranges', 'primary_allowed_client_ip_ranges_example'),
                        ('secure', True),
                        ('standby_readtimeout', 56),
                        ('standby_autoclean', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de(self):
        """Test case for org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('handler_name', 'handler_name_example'),
                        ('user_expiration_time', 'user_expiration_time_example'),
                        ('user_auto_membership', 'user_auto_membership_example'),
                        ('user_property_mapping', 'user_property_mapping_example'),
                        ('user_path_prefix', 'user_path_prefix_example'),
                        ('user_membership_exp_time', 'user_membership_exp_time_example'),
                        ('user_membership_nesting_depth', 56),
                        ('user_dynamic_membership', True),
                        ('user_disable_missing', True),
                        ('group_expiration_time', 'group_expiration_time_example'),
                        ('group_auto_membership', 'group_auto_membership_example'),
                        ('group_property_mapping', 'group_property_mapping_example'),
                        ('group_path_prefix', 'group_path_prefix_example'),
                        ('enable_rfc7613_usercase_mapped_profile', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex(self):
        """Test case for org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('jaas_ranking', 56),
                        ('jaas_control_flag', 'jaas_control_flag_example'),
                        ('jaas_realm_name', 'jaas_realm_name_example'),
                        ('idp_name', 'idp_name_example'),
                        ('sync_handler_name', 'sync_handler_name_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr(self):
        """Test case for org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('protect_external_id', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi(self):
        """Test case for org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('cug_supported_paths', 'cug_supported_paths_example'),
                        ('cug_enabled', True),
                        ('configuration_ranking', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu(self):
        """Test case for org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('principal_names', 'principal_names_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable(self):
        """Test case for org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enabled_actions', 'enabled_actions_example'),
                        ('user_privilege_names', 'user_privilege_names_example'),
                        ('group_privilege_names', 'group_privilege_names_example'),
                        ('constraint', 'constraint_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_vault_packaging_impl_packaging_impl(self):
        """Test case for org_apache_jackrabbit_vault_packaging_impl_packaging_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('package_roots', 'package_roots_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry(self):
        """Test case for org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('home_path', 'home_path_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_auth_core_impl_logout_servlet(self):
        """Test case for org_apache_sling_auth_core_impl_logout_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_servlet_methods', 'sling_servlet_methods_example'),
                        ('sling_servlet_paths', 'sling_servlet_paths_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_caconfig_impl_configuration_bindings_value_provider(self):
        """Test case for org_apache_sling_caconfig_impl_configuration_bindings_value_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_caconfig_impl_configuration_resolver_impl(self):
        """Test case for org_apache_sling_caconfig_impl_configuration_resolver_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('config_bucket_names', 'config_bucket_names_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra(self):
        """Test case for org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enabled', True),
                        ('config_property_inheritance_property_names', 'config_property_inheritance_property_names_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra(self):
        """Test case for org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi(self):
        """Test case for org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('description', 'description_example'),
                        ('overrides', 'overrides_example'),
                        ('enabled', True),
                        ('service_ranking', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_caconfig_impl_override_system_property_configuration_ove(self):
        """Test case for org_apache_sling_caconfig_impl_override_system_property_configuration_ove

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enabled', True),
                        ('service_ranking', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_caconfig_management_impl_configuration_management_setti(self):
        """Test case for org_apache_sling_caconfig_management_impl_configuration_management_setti

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('ignore_property_name_regex', 'ignore_property_name_regex_example'),
                        ('config_collection_properties_resource_names', 'config_collection_properties_resource_names_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_caconfig_resource_impl_def_default_configuration_resour(self):
        """Test case for org_apache_sling_caconfig_resource_impl_def_default_configuration_resour

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enabled', True),
                        ('config_path', 'config_path_example'),
                        ('fallback_paths', 'fallback_paths_example'),
                        ('config_collection_inheritance_property_names', 'config_collection_inheritance_property_names_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy(self):
        """Test case for org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('enabled', True),
                        ('config_ref_resource_names', 'config_ref_resource_names_example'),
                        ('config_ref_property_names', 'config_ref_property_names_example'),
                        ('service_ranking', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_commons_html_internal_tagsoup_html_parser(self):
        """Test case for org_apache_sling_commons_html_internal_tagsoup_html_parser

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('parser_features', 'parser_features_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_commons_log_log_manager(self):
        """Test case for org_apache_sling_commons_log_log_manager

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('org_apache_sling_commons_log_level', 'org_apache_sling_commons_log_level_example'),
                        ('org_apache_sling_commons_log_file', 'org_apache_sling_commons_log_file_example'),
                        ('org_apache_sling_commons_log_file_number', 56),
                        ('org_apache_sling_commons_log_file_size', 'org_apache_sling_commons_log_file_size_example'),
                        ('org_apache_sling_commons_log_pattern', 'org_apache_sling_commons_log_pattern_example'),
                        ('org_apache_sling_commons_log_configuration_file', 'org_apache_sling_commons_log_configuration_file_example'),
                        ('org_apache_sling_commons_log_packaging_data_enabled', True),
                        ('org_apache_sling_commons_log_max_caller_data_depth', 56),
                        ('org_apache_sling_commons_log_max_old_file_count_in_dump', 56),
                        ('org_apache_sling_commons_log_num_of_lines', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.commons.log.LogManager',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_commons_log_log_manager_factory_config(self):
        """Test case for org_apache_sling_commons_log_log_manager_factory_config

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('org_apache_sling_commons_log_level', 'org_apache_sling_commons_log_level_example'),
                        ('org_apache_sling_commons_log_file', 'org_apache_sling_commons_log_file_example'),
                        ('org_apache_sling_commons_log_pattern', 'org_apache_sling_commons_log_pattern_example'),
                        ('org_apache_sling_commons_log_names', 'org_apache_sling_commons_log_names_example'),
                        ('org_apache_sling_commons_log_additiv', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_commons_log_log_manager_factory_writer(self):
        """Test case for org_apache_sling_commons_log_log_manager_factory_writer

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('org_apache_sling_commons_log_file', 'org_apache_sling_commons_log_file_example'),
                        ('org_apache_sling_commons_log_file_number', 56),
                        ('org_apache_sling_commons_log_file_size', 'org_apache_sling_commons_log_file_size_example'),
                        ('org_apache_sling_commons_log_file_buffered', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_commons_metrics_internal_log_reporter(self):
        """Test case for org_apache_sling_commons_metrics_internal_log_reporter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('period', 56),
                        ('time_unit', 'time_unit_example'),
                        ('level', 'level_example'),
                        ('logger_name', 'logger_name_example'),
                        ('prefix', 'prefix_example'),
                        ('pattern', 'pattern_example'),
                        ('registry_name', 'registry_name_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter(self):
        """Test case for org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('datasources', 'datasources_example'),
                        ('step', 56),
                        ('archives', 'archives_example'),
                        ('path', 'path_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_commons_mime_internal_mime_type_service_impl(self):
        """Test case for org_apache_sling_commons_mime_internal_mime_type_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('mime_types', 'mime_types_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_commons_scheduler_impl_quartz_scheduler(self):
        """Test case for org_apache_sling_commons_scheduler_impl_quartz_scheduler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('pool_name', 'pool_name_example'),
                        ('allowed_pool_names', 'allowed_pool_names_example'),
                        ('scheduler_useleaderforsingle', True),
                        ('metrics_filters', 'metrics_filters_example'),
                        ('slow_threshold_millis', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_commons_scheduler_impl_scheduler_health_check(self):
        """Test case for org_apache_sling_commons_scheduler_impl_scheduler_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('max_quartz_job_duration_acceptable', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_commons_threads_impl_default_thread_pool_factory(self):
        """Test case for org_apache_sling_commons_threads_impl_default_thread_pool_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('min_pool_size', 56),
                        ('max_pool_size', 56),
                        ('queue_size', 56),
                        ('max_thread_age', 56),
                        ('keep_alive_time', 56),
                        ('block_policy', 'block_policy_example'),
                        ('shutdown_graceful', True),
                        ('daemon', True),
                        ('shutdown_wait_time', 56),
                        ('priority', 'priority_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_datasource_data_source_factory(self):
        """Test case for org_apache_sling_datasource_data_source_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('datasource_name', 'datasource_name_example'),
                        ('datasource_svc_prop_name', 'datasource_svc_prop_name_example'),
                        ('driver_class_name', 'driver_class_name_example'),
                        ('url', 'url_example'),
                        ('username', 'username_example'),
                        ('password', 'password_example'),
                        ('default_auto_commit', 'default_auto_commit_example'),
                        ('default_read_only', 'default_read_only_example'),
                        ('default_transaction_isolation', 'default_transaction_isolation_example'),
                        ('default_catalog', 'default_catalog_example'),
                        ('max_active', 56),
                        ('max_idle', 56),
                        ('min_idle', 56),
                        ('initial_size', 56),
                        ('max_wait', 56),
                        ('max_age', 56),
                        ('test_on_borrow', True),
                        ('test_on_return', True),
                        ('test_while_idle', True),
                        ('validation_query', 'validation_query_example'),
                        ('validation_query_timeout', 56),
                        ('time_between_eviction_runs_millis', 56),
                        ('min_evictable_idle_time_millis', 56),
                        ('connection_properties', 'connection_properties_example'),
                        ('init_sql', 'init_sql_example'),
                        ('jdbc_interceptors', 'jdbc_interceptors_example'),
                        ('validation_interval', 56),
                        ('log_validation_errors', True),
                        ('datasource_svc_properties', 'datasource_svc_properties_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.datasource.DataSourceFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_datasource_jndi_data_source_factory(self):
        """Test case for org_apache_sling_datasource_jndi_data_source_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('datasource_name', 'datasource_name_example'),
                        ('datasource_svc_prop_name', 'datasource_svc_prop_name_example'),
                        ('datasource_jndi_name', 'datasource_jndi_name_example'),
                        ('jndi_properties', 'jndi_properties_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_discovery_oak_config(self):
        """Test case for org_apache_sling_discovery_oak_config

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('connector_ping_timeout', 56),
                        ('connector_ping_interval', 56),
                        ('discovery_lite_check_interval', 56),
                        ('cluster_sync_service_timeout', 56),
                        ('cluster_sync_service_interval', 56),
                        ('enable_sync_token', True),
                        ('min_event_delay', 56),
                        ('socket_connect_timeout', 56),
                        ('so_timeout', 56),
                        ('topology_connector_urls', 'topology_connector_urls_example'),
                        ('topology_connector_whitelist', 'topology_connector_whitelist_example'),
                        ('auto_stop_local_loop_enabled', True),
                        ('gzip_connector_requests_enabled', True),
                        ('hmac_enabled', True),
                        ('enable_encryption', True),
                        ('shared_key', 'shared_key_example'),
                        ('hmac_shared_key_ttl', 56),
                        ('backoff_standby_factor', 'backoff_standby_factor_example'),
                        ('backoff_stable_factor', 'backoff_stable_factor_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.discovery.oak.Config',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_discovery_oak_synchronized_clocks_health_check(self):
        """Test case for org_apache_sling_discovery_oak_synchronized_clocks_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_name', 'hc_name_example'),
                        ('hc_tags', 'hc_tags_example'),
                        ('hc_mbean_name', 'hc_mbean_name_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto(self):
        """Test case for org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('title', 'title_example'),
                        ('details', 'details_example'),
                        ('enabled', True),
                        ('service_name', 'service_name_example'),
                        ('log_level', 'log_level_example'),
                        ('allowed_roots', 'allowed_roots_example'),
                        ('queue_processing_enabled', True),
                        ('package_importer_endpoints', 'package_importer_endpoints_example'),
                        ('passive_queues', 'passive_queues_example'),
                        ('priority_queues', 'priority_queues_example'),
                        ('retry_strategy', 'retry_strategy_example'),
                        ('retry_attempts', 56),
                        ('request_authorization_strategy_target', 'request_authorization_strategy_target_example'),
                        ('transport_secret_provider_target', 'transport_secret_provider_target_example'),
                        ('package_builder_target', 'package_builder_target_example'),
                        ('triggers_target', 'triggers_target_example'),
                        ('queue_provider', 'queue_provider_example'),
                        ('async_delivery', True),
                        ('http_conn_timeout', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_agent_impl_privilege_distribution_request_a(self):
        """Test case for org_apache_sling_distribution_agent_impl_privilege_distribution_request_a

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('jcr_privilege', 'jcr_privilege_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory(self):
        """Test case for org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('title', 'title_example'),
                        ('details', 'details_example'),
                        ('enabled', True),
                        ('service_name', 'service_name_example'),
                        ('log_level', 'log_level_example'),
                        ('allowed_roots', 'allowed_roots_example'),
                        ('request_authorization_strategy_target', 'request_authorization_strategy_target_example'),
                        ('queue_provider_factory_target', 'queue_provider_factory_target_example'),
                        ('package_builder_target', 'package_builder_target_example'),
                        ('triggers_target', 'triggers_target_example'),
                        ('priority_queues', 'priority_queues_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto(self):
        """Test case for org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('title', 'title_example'),
                        ('details', 'details_example'),
                        ('enabled', True),
                        ('service_name', 'service_name_example'),
                        ('log_level', 'log_level_example'),
                        ('queue_processing_enabled', True),
                        ('package_exporter_endpoints', 'package_exporter_endpoints_example'),
                        ('pull_items', 56),
                        ('http_conn_timeout', 56),
                        ('request_authorization_strategy_target', 'request_authorization_strategy_target_example'),
                        ('transport_secret_provider_target', 'transport_secret_provider_target_example'),
                        ('package_builder_target', 'package_builder_target_example'),
                        ('triggers_target', 'triggers_target_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor(self):
        """Test case for org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('title', 'title_example'),
                        ('details', 'details_example'),
                        ('enabled', True),
                        ('service_name', 'service_name_example'),
                        ('log_level', 'log_level_example'),
                        ('queue_processing_enabled', True),
                        ('package_exporter_target', 'package_exporter_target_example'),
                        ('package_importer_target', 'package_importer_target_example'),
                        ('request_authorization_strategy_target', 'request_authorization_strategy_target_example'),
                        ('triggers_target', 'triggers_target_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory(self):
        """Test case for org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('title', 'title_example'),
                        ('details', 'details_example'),
                        ('enabled', True),
                        ('service_name', 'service_name_example'),
                        ('log_level', 'log_level_example'),
                        ('queue_processing_enabled', True),
                        ('passive_queues', 'passive_queues_example'),
                        ('package_exporter_endpoints', 'package_exporter_endpoints_example'),
                        ('package_importer_endpoints', 'package_importer_endpoints_example'),
                        ('retry_strategy', 'retry_strategy_example'),
                        ('retry_attempts', 56),
                        ('pull_items', 56),
                        ('http_conn_timeout', 56),
                        ('request_authorization_strategy_target', 'request_authorization_strategy_target_example'),
                        ('transport_secret_provider_target', 'transport_secret_provider_target_example'),
                        ('package_builder_target', 'package_builder_target_example'),
                        ('triggers_target', 'triggers_target_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_monitor_distribution_queue_health_check(self):
        """Test case for org_apache_sling_distribution_monitor_distribution_queue_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_name', 'hc_name_example'),
                        ('hc_tags', 'hc_tags_example'),
                        ('hc_mbean_name', 'hc_mbean_name_example'),
                        ('number_of_retries_allowed', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_packaging_impl_exporter_agent_distributio(self):
        """Test case for org_apache_sling_distribution_packaging_impl_exporter_agent_distributio

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('queue', 'queue_example'),
                        ('drop_invalid_items', True),
                        ('agent_target', 'agent_target_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_packaging_impl_exporter_local_distributio(self):
        """Test case for org_apache_sling_distribution_packaging_impl_exporter_local_distributio

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('package_builder_target', 'package_builder_target_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_packaging_impl_exporter_remote_distributi(self):
        """Test case for org_apache_sling_distribution_packaging_impl_exporter_remote_distributi

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('endpoints', 'endpoints_example'),
                        ('pull_items', 56),
                        ('package_builder_target', 'package_builder_target_example'),
                        ('transport_secret_provider_target', 'transport_secret_provider_target_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_packaging_impl_importer_local_distributio(self):
        """Test case for org_apache_sling_distribution_packaging_impl_importer_local_distributio

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('package_builder_target', 'package_builder_target_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_packaging_impl_importer_remote_distributi(self):
        """Test case for org_apache_sling_distribution_packaging_impl_importer_remote_distributi

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('endpoints', 'endpoints_example'),
                        ('transport_secret_provider_target', 'transport_secret_provider_target_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_packaging_impl_importer_repository_distri(self):
        """Test case for org_apache_sling_distribution_packaging_impl_importer_repository_distri

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('service_name', 'service_name_example'),
                        ('path', 'path_example'),
                        ('privilege_name', 'privilege_name_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_resources_impl_distribution_configuration(self):
        """Test case for org_apache_sling_distribution_resources_impl_distribution_configuration

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('provider_roots', 'provider_roots_example'),
                        ('kind', 'kind_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_resources_impl_distribution_service_resour(self):
        """Test case for org_apache_sling_distribution_resources_impl_distribution_service_resour

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('provider_roots', 'provider_roots_example'),
                        ('kind', 'kind_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_serialization_impl_distribution_package_bu(self):
        """Test case for org_apache_sling_distribution_serialization_impl_distribution_package_bu

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('type', 'type_example'),
                        ('format_target', 'format_target_example'),
                        ('temp_fs_folder', 'temp_fs_folder_example'),
                        ('file_threshold', 56),
                        ('memory_unit', 'memory_unit_example'),
                        ('use_off_heap_memory', True),
                        ('digest_algorithm', 'digest_algorithm_example'),
                        ('monitoring_queue_size', 56),
                        ('cleanup_delay', 56),
                        ('package_filters', 'package_filters_example'),
                        ('property_filters', 'property_filters_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_serialization_impl_vlt_vault_distribution(self):
        """Test case for org_apache_sling_distribution_serialization_impl_vlt_vault_distribution

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('type', 'type_example'),
                        ('import_mode', 'import_mode_example'),
                        ('acl_handling', 'acl_handling_example'),
                        ('package_roots', 'package_roots_example'),
                        ('package_filters', 'package_filters_example'),
                        ('property_filters', 'property_filters_example'),
                        ('temp_fs_folder', 'temp_fs_folder_example'),
                        ('use_binary_references', True),
                        ('auto_save_threshold', 56),
                        ('cleanup_delay', 56),
                        ('file_threshold', 56),
                        ('mega_bytes', 'mega_bytes_example'),
                        ('use_off_heap_memory', True),
                        ('digest_algorithm', 'digest_algorithm_example'),
                        ('monitoring_queue_size', 56),
                        ('paths_mapping', 'paths_mapping_example'),
                        ('strict_import', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_transport_impl_user_credentials_distributi(self):
        """Test case for org_apache_sling_distribution_transport_impl_user_credentials_distributi

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('username', 'username_example'),
                        ('password', 'password_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_trigger_impl_distribution_event_distribute(self):
        """Test case for org_apache_sling_distribution_trigger_impl_distribution_event_distribute

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('path', 'path_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger(self):
        """Test case for org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('path', 'path_example'),
                        ('ignored_paths_patterns', 'ignored_paths_patterns_example'),
                        ('service_name', 'service_name_example'),
                        ('deep', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi(self):
        """Test case for org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('path', 'path_example'),
                        ('service_name', 'service_name_example'),
                        ('nuggets_path', 'nuggets_path_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig(self):
        """Test case for org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('endpoint', 'endpoint_example'),
                        ('transport_secret_provider_target', 'transport_secret_provider_target_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr(self):
        """Test case for org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('path', 'path_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge(self):
        """Test case for org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('path', 'path_example'),
                        ('seconds', 'seconds_example'),
                        ('service_name', 'service_name_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_engine_impl_auth_sling_authenticator(self):
        """Test case for org_apache_sling_engine_impl_auth_sling_authenticator

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('osgi_http_whiteboard_context_select', 'osgi_http_whiteboard_context_select_example'),
                        ('osgi_http_whiteboard_listener', 'osgi_http_whiteboard_listener_example'),
                        ('auth_sudo_cookie', 'auth_sudo_cookie_example'),
                        ('auth_sudo_parameter', 'auth_sudo_parameter_example'),
                        ('auth_annonymous', True),
                        ('sling_auth_requirements', 'sling_auth_requirements_example'),
                        ('sling_auth_anonymous_user', 'sling_auth_anonymous_user_example'),
                        ('sling_auth_anonymous_password', 'sling_auth_anonymous_password_example'),
                        ('auth_http', 'auth_http_example'),
                        ('auth_http_realm', 'auth_http_realm_example'),
                        ('auth_uri_suffix', 'auth_uri_suffix_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter(self):
        """Test case for org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('extensions', 'extensions_example'),
                        ('min_duration_ms', 56),
                        ('max_duration_ms', 56),
                        ('compact_log_format', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_engine_impl_log_request_logger(self):
        """Test case for org_apache_sling_engine_impl_log_request_logger

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('request_log_output', 'request_log_output_example'),
                        ('request_log_outputtype', 56),
                        ('request_log_enabled', True),
                        ('access_log_output', 'access_log_output_example'),
                        ('access_log_outputtype', 56),
                        ('access_log_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_engine_impl_log_request_logger_service(self):
        """Test case for org_apache_sling_engine_impl_log_request_logger_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('request_log_service_format', 'request_log_service_format_example'),
                        ('request_log_service_output', 'request_log_service_output_example'),
                        ('request_log_service_outputtype', 56),
                        ('request_log_service_onentry', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_engine_impl_sling_main_servlet(self):
        """Test case for org_apache_sling_engine_impl_sling_main_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_max_calls', 56),
                        ('sling_max_inclusions', 56),
                        ('sling_trace_allow', True),
                        ('sling_max_record_requests', 56),
                        ('sling_store_pattern_requests', 'sling_store_pattern_requests_example'),
                        ('sling_serverinfo', 'sling_serverinfo_example'),
                        ('sling_additional_response_headers', 'sling_additional_response_headers_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_engine_parameters(self):
        """Test case for org_apache_sling_engine_parameters

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_default_parameter_encoding', 'sling_default_parameter_encoding_example'),
                        ('sling_default_max_parameters', 56),
                        ('file_location', 'file_location_example'),
                        ('file_threshold', 56),
                        ('file_max', 56),
                        ('request_max', 56),
                        ('sling_default_parameter_check_for_additional_container_parameters', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.engine.parameters',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_event_impl_eventing_thread_pool(self):
        """Test case for org_apache_sling_event_impl_eventing_thread_pool

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('min_pool_size', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_event_impl_jobs_default_job_manager(self):
        """Test case for org_apache_sling_event_impl_jobs_default_job_manager

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('queue_priority', 'queue_priority_example'),
                        ('queue_retries', 56),
                        ('queue_retrydelay', 56),
                        ('queue_maxparallel', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_event_impl_jobs_jcr_persistence_handler(self):
        """Test case for org_apache_sling_event_impl_jobs_jcr_persistence_handler

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('job_consumermanager_disable_distribution', True),
                        ('startup_delay', 56),
                        ('cleanup_period', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_event_impl_jobs_job_consumer_manager(self):
        """Test case for org_apache_sling_event_impl_jobs_job_consumer_manager

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('org_apache_sling_installer_configuration_persist', True),
                        ('job_consumermanager_whitelist', 'job_consumermanager_whitelist_example'),
                        ('job_consumermanager_blacklist', 'job_consumermanager_blacklist_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_event_jobs_queue_configuration(self):
        """Test case for org_apache_sling_event_jobs_queue_configuration

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('queue_name', 'queue_name_example'),
                        ('queue_topics', 'queue_topics_example'),
                        ('queue_type', 'queue_type_example'),
                        ('queue_priority', 'queue_priority_example'),
                        ('queue_retries', 56),
                        ('queue_retrydelay', 56),
                        ('queue_maxparallel', 3.4),
                        ('queue_keep_jobs', True),
                        ('queue_prefer_run_on_creation_instance', True),
                        ('queue_thread_pool_size', 56),
                        ('service_ranking', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w(self):
        """Test case for org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('users', 'users_example'),
                        ('groups', 'groups_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_featureflags_feature(self):
        """Test case for org_apache_sling_featureflags_feature

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('description', 'description_example'),
                        ('enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.featureflags.Feature',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_featureflags_impl_configured_feature(self):
        """Test case for org_apache_sling_featureflags_impl_configured_feature

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('name', 'name_example'),
                        ('description', 'description_example'),
                        ('enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_hapi_impl_h_api_util_impl(self):
        """Test case for org_apache_sling_hapi_impl_h_api_util_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('org_apache_sling_hapi_tools_resourcetype', 'org_apache_sling_hapi_tools_resourcetype_example'),
                        ('org_apache_sling_hapi_tools_collectionresourcetype', 'org_apache_sling_hapi_tools_collectionresourcetype_example'),
                        ('org_apache_sling_hapi_tools_searchpaths', 'org_apache_sling_hapi_tools_searchpaths_example'),
                        ('org_apache_sling_hapi_tools_externalurl', 'org_apache_sling_hapi_tools_externalurl_example'),
                        ('org_apache_sling_hapi_tools_enabled', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_hc_core_impl_composite_health_check(self):
        """Test case for org_apache_sling_hc_core_impl_composite_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_name', 'hc_name_example'),
                        ('hc_tags', 'hc_tags_example'),
                        ('hc_mbean_name', 'hc_mbean_name_example'),
                        ('filter_tags', 'filter_tags_example'),
                        ('filter_combine_tags_with_or', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_hc_core_impl_executor_health_check_executor_impl(self):
        """Test case for org_apache_sling_hc_core_impl_executor_health_check_executor_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('timeout_in_ms', 56),
                        ('long_running_future_threshold_for_critical_ms', 56),
                        ('result_cache_ttl_in_ms', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_hc_core_impl_jmx_attribute_health_check(self):
        """Test case for org_apache_sling_hc_core_impl_jmx_attribute_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_name', 'hc_name_example'),
                        ('hc_tags', 'hc_tags_example'),
                        ('hc_mbean_name', 'hc_mbean_name_example'),
                        ('mbean_name', 'mbean_name_example'),
                        ('attribute_name', 'attribute_name_example'),
                        ('attribute_value_constraint', 'attribute_value_constraint_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_hc_core_impl_scriptable_health_check(self):
        """Test case for org_apache_sling_hc_core_impl_scriptable_health_check

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('hc_name', 'hc_name_example'),
                        ('hc_tags', 'hc_tags_example'),
                        ('hc_mbean_name', 'hc_mbean_name_example'),
                        ('expression', 'expression_example'),
                        ('language_extension', 'language_extension_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet(self):
        """Test case for org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('servlet_path', 'servlet_path_example'),
                        ('disabled', True),
                        ('cors_access_control_allow_origin', 'cors_access_control_allow_origin_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer(self):
        """Test case for org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('total_width', 56),
                        ('col_width_name', 56),
                        ('col_width_result', 56),
                        ('col_width_timing', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_i18n_impl_i18_n_filter(self):
        """Test case for org_apache_sling_i18n_impl_i18_n_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('sling_filter_scope', 'sling_filter_scope_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_i18n_impl_jcr_resource_bundle_provider(self):
        """Test case for org_apache_sling_i18n_impl_jcr_resource_bundle_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('locale_default', 'locale_default_example'),
                        ('preload_bundles', True),
                        ('invalidation_delay', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_installer_provider_jcr_impl_jcr_installer(self):
        """Test case for org_apache_sling_installer_provider_jcr_impl_jcr_installer

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('handler_schemes', 'handler_schemes_example'),
                        ('sling_jcrinstall_folder_name_regexp', 'sling_jcrinstall_folder_name_regexp_example'),
                        ('sling_jcrinstall_folder_max_depth', 56),
                        ('sling_jcrinstall_search_path', 'sling_jcrinstall_search_path_example'),
                        ('sling_jcrinstall_new_config_path', 'sling_jcrinstall_new_config_path_example'),
                        ('sling_jcrinstall_signal_path', 'sling_jcrinstall_signal_path_example'),
                        ('sling_jcrinstall_enable_writeback', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_jcr_base_internal_login_admin_whitelist(self):
        """Test case for org_apache_sling_jcr_base_internal_login_admin_whitelist

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('whitelist_bypass', True),
                        ('whitelist_bundles_regexp', 'whitelist_bundles_regexp_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment(self):
        """Test case for org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('whitelist_name', 'whitelist_name_example'),
                        ('whitelist_bundles', 'whitelist_bundles_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet(self):
        """Test case for org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('alias', 'alias_example'),
                        ('dav_create_absolute_uri', True),
                        ('dav_protectedhandlers', 'dav_protectedhandlers_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_jcr_jackrabbit_server_jndi_registration_support(self):
        """Test case for org_apache_sling_jcr_jackrabbit_server_jndi_registration_support

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('java_naming_factory_initial', 'java_naming_factory_initial_example'),
                        ('java_naming_provider_url', 'java_naming_provider_url_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_jcr_jackrabbit_server_rmi_registration_support(self):
        """Test case for org_apache_sling_jcr_jackrabbit_server_rmi_registration_support

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('port', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_jcr_repoinit_impl_repository_initializer(self):
        """Test case for org_apache_sling_jcr_repoinit_impl_repository_initializer

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('references', 'references_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_jcr_repoinit_repository_initializer(self):
        """Test case for org_apache_sling_jcr_repoinit_repository_initializer

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('references', 'references_example'),
                        ('scripts', 'scripts_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl(self):
        """Test case for org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('resource_resolver_searchpath', 'resource_resolver_searchpath_example'),
                        ('resource_resolver_manglenamespaces', True),
                        ('resource_resolver_allow_direct', True),
                        ('resource_resolver_required_providers', 'resource_resolver_required_providers_example'),
                        ('resource_resolver_required_providernames', 'resource_resolver_required_providernames_example'),
                        ('resource_resolver_virtual', 'resource_resolver_virtual_example'),
                        ('resource_resolver_mapping', 'resource_resolver_mapping_example'),
                        ('resource_resolver_map_location', 'resource_resolver_map_location_example'),
                        ('resource_resolver_map_observation', 'resource_resolver_map_observation_example'),
                        ('resource_resolver_default_vanity_redirect_status', 56),
                        ('resource_resolver_enable_vanitypath', True),
                        ('resource_resolver_vanitypath_max_entries', 56),
                        ('resource_resolver_vanitypath_max_entries_startup', True),
                        ('resource_resolver_vanitypath_bloomfilter_max_bytes', 56),
                        ('resource_resolver_optimize_alias_resolution', True),
                        ('resource_resolver_vanitypath_whitelist', 'resource_resolver_vanitypath_whitelist_example'),
                        ('resource_resolver_vanitypath_blacklist', 'resource_resolver_vanitypath_blacklist_example'),
                        ('resource_resolver_vanity_precedence', True),
                        ('resource_resolver_providerhandling_paranoid', True),
                        ('resource_resolver_log_closing', True),
                        ('resource_resolver_log_unclosed', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_jcr_resource_internal_jcr_system_user_validator(self):
        """Test case for org_apache_sling_jcr_resource_internal_jcr_system_user_validator

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('allow_only_system_user', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory(self):
        """Test case for org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('path', 'path_example'),
                        ('checkpath_prefix', 'checkpath_prefix_example'),
                        ('jcr_path', 'jcr_path_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_jcr_webdav_impl_handler_default_handler_service(self):
        """Test case for org_apache_sling_jcr_webdav_impl_handler_default_handler_service

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('type_collections', 'type_collections_example'),
                        ('type_noncollections', 'type_noncollections_example'),
                        ('type_content', 'type_content_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic(self):
        """Test case for org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet(self):
        """Test case for org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('dav_root', 'dav_root_example'),
                        ('dav_create_absolute_uri', True),
                        ('dav_realm', 'dav_realm_example'),
                        ('collection_types', 'collection_types_example'),
                        ('filter_prefixes', 'filter_prefixes_example'),
                        ('filter_types', 'filter_types_example'),
                        ('filter_uris', 'filter_uris_example'),
                        ('type_collections', 'type_collections_example'),
                        ('type_noncollections', 'type_noncollections_example'),
                        ('type_content', 'type_content_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_jmx_provider_impl_jmx_resource_provider(self):
        """Test case for org_apache_sling_jmx_provider_impl_jmx_resource_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('provider_roots', 'provider_roots_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_models_impl_model_adapter_factory(self):
        """Test case for org_apache_sling_models_impl_model_adapter_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('osgi_http_whiteboard_listener', 'osgi_http_whiteboard_listener_example'),
                        ('osgi_http_whiteboard_context_select', 'osgi_http_whiteboard_context_select_example'),
                        ('max_recursion_depth', 56),
                        ('cleanup_job_period', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_models_jacksonexporter_impl_resource_module_provider(self):
        """Test case for org_apache_sling_models_jacksonexporter_impl_resource_module_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('max_recursion_levels', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto(self):
        """Test case for org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('felix_inventory_printer_name', 'felix_inventory_printer_name_example'),
                        ('felix_inventory_printer_title', 'felix_inventory_printer_title_example'),
                        ('path', 'path_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_resourcemerger_impl_merged_resource_provider_factory(self):
        """Test case for org_apache_sling_resourcemerger_impl_merged_resource_provider_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('merge_root', 'merge_root_example'),
                        ('merge_read_only', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_resourcemerger_picker_overriding(self):
        """Test case for org_apache_sling_resourcemerger_picker_overriding

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('merge_root', 'merge_root_example'),
                        ('merge_read_only', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_scripting_core_impl_script_cache_impl(self):
        """Test case for org_apache_sling_scripting_core_impl_script_cache_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('org_apache_sling_scripting_cache_size', 56),
                        ('org_apache_sling_scripting_cache_additional_extensions', 'org_apache_sling_scripting_cache_additional_extensions_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider(self):
        """Test case for org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('log_stacktrace_onclose', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_scripting_java_impl_java_script_engine_factory(self):
        """Test case for org_apache_sling_scripting_java_impl_java_script_engine_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('java_classdebuginfo', True),
                        ('java_java_encoding', 'java_java_encoding_example'),
                        ('java_compiler_source_vm', 'java_compiler_source_vm_example'),
                        ('java_compiler_target_vm', 'java_compiler_target_vm_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa(self):
        """Test case for org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('org_apache_sling_scripting_javascript_rhino_opt_level', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_scripting_jsp_jsp_script_engine_factory(self):
        """Test case for org_apache_sling_scripting_jsp_jsp_script_engine_factory

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('jasper_compiler_target_vm', 'jasper_compiler_target_vm_example'),
                        ('jasper_compiler_source_vm', 'jasper_compiler_source_vm_example'),
                        ('jasper_classdebuginfo', True),
                        ('jasper_enable_pooling', True),
                        ('jasper_ie_class_id', 'jasper_ie_class_id_example'),
                        ('jasper_gen_string_as_char_array', True),
                        ('jasper_keepgenerated', True),
                        ('jasper_mappedfile', True),
                        ('jasper_trim_spaces', True),
                        ('jasper_display_source_fragments', True),
                        ('default_is_session', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov(self):
        """Test case for org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('org_apache_sling_scripting_sightly_js_bindings', 'org_apache_sling_scripting_sightly_js_bindings_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_security_impl_content_disposition_filter(self):
        """Test case for org_apache_sling_security_impl_content_disposition_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_content_disposition_paths', 'sling_content_disposition_paths_example'),
                        ('sling_content_disposition_excluded_paths', 'sling_content_disposition_excluded_paths_example'),
                        ('sling_content_disposition_all_paths', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_security_impl_referrer_filter(self):
        """Test case for org_apache_sling_security_impl_referrer_filter

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('allow_empty', True),
                        ('allow_hosts', 'allow_hosts_example'),
                        ('allow_hosts_regexp', 'allow_hosts_regexp_example'),
                        ('filter_methods', 'filter_methods_example'),
                        ('exclude_agents_regexp', 'exclude_agents_regexp_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_serviceusermapping_impl_service_user_mapper_impl(self):
        """Test case for org_apache_sling_serviceusermapping_impl_service_user_mapper_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('user_mapping', 'user_mapping_example'),
                        ('user_default', 'user_default_example'),
                        ('user_enable_default_mapping', True),
                        ('require_validation', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended(self):
        """Test case for org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('service_ranking', 56),
                        ('user_mapping', 'user_mapping_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_servlets_get_default_get_servlet(self):
        """Test case for org_apache_sling_servlets_get_default_get_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('aliases', 'aliases_example'),
                        ('index', True),
                        ('index_files', 'index_files_example'),
                        ('enable_html', True),
                        ('enable_json', True),
                        ('enable_txt', True),
                        ('enable_xml', True),
                        ('json_maximumresults', 56),
                        ('ecma_suport', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_servlets_get_impl_version_version_info_servlet(self):
        """Test case for org_apache_sling_servlets_get_impl_version_version_info_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_servlet_selectors', 'sling_servlet_selectors_example'),
                        ('ecma_suport', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task(self):
        """Test case for org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('scheduler_expression', 'scheduler_expression_example'),
                        ('scheduler_concurrent', True),
                        ('chunk_cleanup_age', 56)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_servlets_post_impl_sling_post_servlet(self):
        """Test case for org_apache_sling_servlets_post_impl_sling_post_servlet

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('servlet_post_date_formats', 'servlet_post_date_formats_example'),
                        ('servlet_post_node_name_hints', 'servlet_post_node_name_hints_example'),
                        ('servlet_post_node_name_max_length', 56),
                        ('servlet_post_checkin_new_versionable_nodes', True),
                        ('servlet_post_auto_checkout', True),
                        ('servlet_post_auto_checkin', True),
                        ('servlet_post_ignore_pattern', 'servlet_post_ignore_pattern_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_servlets_resolver_sling_servlet_resolver(self):
        """Test case for org_apache_sling_servlets_resolver_sling_servlet_resolver

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('servletresolver_servlet_root', 'servletresolver_servlet_root_example'),
                        ('servletresolver_cache_size', 56),
                        ('servletresolver_paths', 'servletresolver_paths_example'),
                        ('servletresolver_default_extensions', 'servletresolver_default_extensions_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_settings_impl_sling_settings_service_impl(self):
        """Test case for org_apache_sling_settings_impl_sling_settings_service_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('sling_name', 'sling_name_example'),
                        ('sling_description', 'sling_description_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_startupfilter_impl_startup_filter_impl(self):
        """Test case for org_apache_sling_startupfilter_impl_startup_filter_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('active_by_default', True),
                        ('default_message', 'default_message_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_tenant_internal_tenant_provider_impl(self):
        """Test case for org_apache_sling_tenant_internal_tenant_provider_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('tenant_root', 'tenant_root_example'),
                        ('tenant_path_matcher', 'tenant_path_matcher_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_tracer_internal_log_tracer(self):
        """Test case for org_apache_sling_tracer_internal_log_tracer

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('tracer_sets', 'tracer_sets_example'),
                        ('enabled', True),
                        ('servlet_enabled', True),
                        ('recording_cache_size_in_mb', 56),
                        ('recording_cache_duration_in_secs', 56),
                        ('recording_compression_enabled', True),
                        ('gzip_response', True)]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.tracer.internal.LogTracer',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_org_apache_sling_xss_impl_xss_filter_impl(self):
        """Test case for org_apache_sling_xss_impl_xss_filter_impl

        
        """
        query_string = [('post', True),
                        ('apply', True),
                        ('delete', True),
                        ('action', 'action_example'),
                        ('location', 'location_example'),
                        ('propertylist', 'propertylist_example'),
                        ('policy_path', 'policy_path_example')]
        response = self.client.open(
            '//system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl',
            method='POST',
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))


if __name__ == '__main__':
    import unittest
    unittest.main()
