/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmCoreImplWarpTimeWarpFilterProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmCoreImplWarpTimeWarpFilterProperties::OAIComDayCqWcmCoreImplWarpTimeWarpFilterProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqWcmCoreImplWarpTimeWarpFilterProperties::OAIComDayCqWcmCoreImplWarpTimeWarpFilterProperties() {
    init();
}

OAIComDayCqWcmCoreImplWarpTimeWarpFilterProperties::~OAIComDayCqWcmCoreImplWarpTimeWarpFilterProperties() {
    this->cleanup();
}

void
OAIComDayCqWcmCoreImplWarpTimeWarpFilterProperties::init() {
    filter_order = new OAIConfigNodePropertyString();
    m_filter_order_isSet = false;
    filter_scope = new OAIConfigNodePropertyString();
    m_filter_scope_isSet = false;
}

void
OAIComDayCqWcmCoreImplWarpTimeWarpFilterProperties::cleanup() {
    if(filter_order != nullptr) { 
        delete filter_order;
    }
    if(filter_scope != nullptr) { 
        delete filter_scope;
    }
}

OAIComDayCqWcmCoreImplWarpTimeWarpFilterProperties*
OAIComDayCqWcmCoreImplWarpTimeWarpFilterProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqWcmCoreImplWarpTimeWarpFilterProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&filter_order, pJson["filter.order"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&filter_scope, pJson["filter.scope"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComDayCqWcmCoreImplWarpTimeWarpFilterProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmCoreImplWarpTimeWarpFilterProperties::asJsonObject() {
    QJsonObject obj;
    if((filter_order != nullptr) && (filter_order->isSet())){
        toJsonValue(QString("filter.order"), filter_order, obj, QString("OAIConfigNodePropertyString"));
    }
    if((filter_scope != nullptr) && (filter_scope->isSet())){
        toJsonValue(QString("filter.scope"), filter_scope, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCqWcmCoreImplWarpTimeWarpFilterProperties::getFilterOrder() {
    return filter_order;
}
void
OAIComDayCqWcmCoreImplWarpTimeWarpFilterProperties::setFilterOrder(OAIConfigNodePropertyString* filter_order) {
    this->filter_order = filter_order;
    this->m_filter_order_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqWcmCoreImplWarpTimeWarpFilterProperties::getFilterScope() {
    return filter_scope;
}
void
OAIComDayCqWcmCoreImplWarpTimeWarpFilterProperties::setFilterScope(OAIConfigNodePropertyString* filter_scope) {
    this->filter_scope = filter_scope;
    this->m_filter_scope_isSet = true;
}


bool
OAIComDayCqWcmCoreImplWarpTimeWarpFilterProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(filter_order != nullptr && filter_order->isSet()){ isObjectUpdated = true; break;}
        if(filter_scope != nullptr && filter_scope->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

