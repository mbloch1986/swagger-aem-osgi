/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties :  IEquatable<ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties" /> class.
        /// </summary>
        /// <param name="facebook">facebook.</param>
        /// <param name="twitter">twitter.</param>
        /// <param name="providerConfigUserFolder">providerConfigUserFolder.</param>
        public ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties(ConfigNodePropertyArray facebook = default(ConfigNodePropertyArray), ConfigNodePropertyArray twitter = default(ConfigNodePropertyArray), ConfigNodePropertyString providerConfigUserFolder = default(ConfigNodePropertyString))
        {
            this.Facebook = facebook;
            this.Twitter = twitter;
            this.ProviderConfigUserFolder = providerConfigUserFolder;
        }
        
        /// <summary>
        /// Gets or Sets Facebook
        /// </summary>
        [DataMember(Name="facebook", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Facebook { get; set; }

        /// <summary>
        /// Gets or Sets Twitter
        /// </summary>
        [DataMember(Name="twitter", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Twitter { get; set; }

        /// <summary>
        /// Gets or Sets ProviderConfigUserFolder
        /// </summary>
        [DataMember(Name="provider.config.user.folder", EmitDefaultValue=false)]
        public ConfigNodePropertyString ProviderConfigUserFolder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties {\n");
            sb.Append("  Facebook: ").Append(Facebook).Append("\n");
            sb.Append("  Twitter: ").Append(Twitter).Append("\n");
            sb.Append("  ProviderConfigUserFolder: ").Append(ProviderConfigUserFolder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Facebook == input.Facebook ||
                    (this.Facebook != null &&
                    this.Facebook.Equals(input.Facebook))
                ) && 
                (
                    this.Twitter == input.Twitter ||
                    (this.Twitter != null &&
                    this.Twitter.Equals(input.Twitter))
                ) && 
                (
                    this.ProviderConfigUserFolder == input.ProviderConfigUserFolder ||
                    (this.ProviderConfigUserFolder != null &&
                    this.ProviderConfigUserFolder.Equals(input.ProviderConfigUserFolder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Facebook != null)
                    hashCode = hashCode * 59 + this.Facebook.GetHashCode();
                if (this.Twitter != null)
                    hashCode = hashCode * 59 + this.Twitter.GetHashCode();
                if (this.ProviderConfigUserFolder != null)
                    hashCode = hashCode * 59 + this.ProviderConfigUserFolder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
