/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheHttpProxyconfiguratorProperties {
  #[serde(rename = "proxy.enabled")]
  proxy_enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "proxy.host")]
  proxy_host: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "proxy.port")]
  proxy_port: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "proxy.user")]
  proxy_user: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "proxy.password")]
  proxy_password: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "proxy.exceptions")]
  proxy_exceptions: Option<::models::ConfigNodePropertyArray>
}

impl OrgApacheHttpProxyconfiguratorProperties {
  pub fn new() -> OrgApacheHttpProxyconfiguratorProperties {
    OrgApacheHttpProxyconfiguratorProperties {
      proxy_enabled: None,
      proxy_host: None,
      proxy_port: None,
      proxy_user: None,
      proxy_password: None,
      proxy_exceptions: None
    }
  }

  pub fn set_proxy_enabled(&mut self, proxy_enabled: ::models::ConfigNodePropertyBoolean) {
    self.proxy_enabled = Some(proxy_enabled);
  }

  pub fn with_proxy_enabled(mut self, proxy_enabled: ::models::ConfigNodePropertyBoolean) -> OrgApacheHttpProxyconfiguratorProperties {
    self.proxy_enabled = Some(proxy_enabled);
    self
  }

  pub fn proxy_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.proxy_enabled.as_ref()
  }

  pub fn reset_proxy_enabled(&mut self) {
    self.proxy_enabled = None;
  }

  pub fn set_proxy_host(&mut self, proxy_host: ::models::ConfigNodePropertyString) {
    self.proxy_host = Some(proxy_host);
  }

  pub fn with_proxy_host(mut self, proxy_host: ::models::ConfigNodePropertyString) -> OrgApacheHttpProxyconfiguratorProperties {
    self.proxy_host = Some(proxy_host);
    self
  }

  pub fn proxy_host(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.proxy_host.as_ref()
  }

  pub fn reset_proxy_host(&mut self) {
    self.proxy_host = None;
  }

  pub fn set_proxy_port(&mut self, proxy_port: ::models::ConfigNodePropertyInteger) {
    self.proxy_port = Some(proxy_port);
  }

  pub fn with_proxy_port(mut self, proxy_port: ::models::ConfigNodePropertyInteger) -> OrgApacheHttpProxyconfiguratorProperties {
    self.proxy_port = Some(proxy_port);
    self
  }

  pub fn proxy_port(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.proxy_port.as_ref()
  }

  pub fn reset_proxy_port(&mut self) {
    self.proxy_port = None;
  }

  pub fn set_proxy_user(&mut self, proxy_user: ::models::ConfigNodePropertyString) {
    self.proxy_user = Some(proxy_user);
  }

  pub fn with_proxy_user(mut self, proxy_user: ::models::ConfigNodePropertyString) -> OrgApacheHttpProxyconfiguratorProperties {
    self.proxy_user = Some(proxy_user);
    self
  }

  pub fn proxy_user(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.proxy_user.as_ref()
  }

  pub fn reset_proxy_user(&mut self) {
    self.proxy_user = None;
  }

  pub fn set_proxy_password(&mut self, proxy_password: ::models::ConfigNodePropertyString) {
    self.proxy_password = Some(proxy_password);
  }

  pub fn with_proxy_password(mut self, proxy_password: ::models::ConfigNodePropertyString) -> OrgApacheHttpProxyconfiguratorProperties {
    self.proxy_password = Some(proxy_password);
    self
  }

  pub fn proxy_password(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.proxy_password.as_ref()
  }

  pub fn reset_proxy_password(&mut self) {
    self.proxy_password = None;
  }

  pub fn set_proxy_exceptions(&mut self, proxy_exceptions: ::models::ConfigNodePropertyArray) {
    self.proxy_exceptions = Some(proxy_exceptions);
  }

  pub fn with_proxy_exceptions(mut self, proxy_exceptions: ::models::ConfigNodePropertyArray) -> OrgApacheHttpProxyconfiguratorProperties {
    self.proxy_exceptions = Some(proxy_exceptions);
    self
  }

  pub fn proxy_exceptions(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.proxy_exceptions.as_ref()
  }

  pub fn reset_proxy_exceptions(&mut self) {
    self.proxy_exceptions = None;
  }

}



