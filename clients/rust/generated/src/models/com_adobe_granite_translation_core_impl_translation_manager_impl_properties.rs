/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties {
  #[serde(rename = "defaultConnectorName")]
  default_connector_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "defaultCategory")]
  default_category: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties {
  pub fn new() -> ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties {
    ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties {
      default_connector_name: None,
      default_category: None
    }
  }

  pub fn set_default_connector_name(&mut self, default_connector_name: ::models::ConfigNodePropertyString) {
    self.default_connector_name = Some(default_connector_name);
  }

  pub fn with_default_connector_name(mut self, default_connector_name: ::models::ConfigNodePropertyString) -> ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties {
    self.default_connector_name = Some(default_connector_name);
    self
  }

  pub fn default_connector_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.default_connector_name.as_ref()
  }

  pub fn reset_default_connector_name(&mut self) {
    self.default_connector_name = None;
  }

  pub fn set_default_category(&mut self, default_category: ::models::ConfigNodePropertyString) {
    self.default_category = Some(default_category);
  }

  pub fn with_default_category(mut self, default_category: ::models::ConfigNodePropertyString) -> ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties {
    self.default_category = Some(default_category);
    self
  }

  pub fn default_category(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.default_category.as_ref()
  }

  pub fn reset_default_category(&mut self) {
    self.default_category = None;
  }

}



