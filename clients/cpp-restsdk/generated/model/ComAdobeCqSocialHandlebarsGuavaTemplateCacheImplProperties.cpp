/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties()
{
    m_Parameter_guava_cache_enabledIsSet = false;
    m_Parameter_guava_cache_paramsIsSet = false;
    m_Parameter_guava_cache_reloadIsSet = false;
    m_Service_rankingIsSet = false;
}

ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::~ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties()
{
}

void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Parameter_guava_cache_enabledIsSet)
    {
        val[utility::conversions::to_string_t("parameter.guava.cache.enabled")] = ModelBase::toJson(m_Parameter_guava_cache_enabled);
    }
    if(m_Parameter_guava_cache_paramsIsSet)
    {
        val[utility::conversions::to_string_t("parameter.guava.cache.params")] = ModelBase::toJson(m_Parameter_guava_cache_params);
    }
    if(m_Parameter_guava_cache_reloadIsSet)
    {
        val[utility::conversions::to_string_t("parameter.guava.cache.reload")] = ModelBase::toJson(m_Parameter_guava_cache_reload);
    }
    if(m_Service_rankingIsSet)
    {
        val[utility::conversions::to_string_t("service.ranking")] = ModelBase::toJson(m_Service_ranking);
    }

    return val;
}

void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("parameter.guava.cache.enabled")))
    {
        if(!val[utility::conversions::to_string_t("parameter.guava.cache.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("parameter.guava.cache.enabled")]);
            setParameterGuavaCacheEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameter.guava.cache.params")))
    {
        if(!val[utility::conversions::to_string_t("parameter.guava.cache.params")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("parameter.guava.cache.params")]);
            setParameterGuavaCacheParams( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameter.guava.cache.reload")))
    {
        if(!val[utility::conversions::to_string_t("parameter.guava.cache.reload")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("parameter.guava.cache.reload")]);
            setParameterGuavaCacheReload( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("service.ranking")))
    {
        if(!val[utility::conversions::to_string_t("service.ranking")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("service.ranking")]);
            setServiceRanking( newItem );
        }
    }
}

void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Parameter_guava_cache_enabledIsSet)
    {
        if (m_Parameter_guava_cache_enabled.get())
        {
            m_Parameter_guava_cache_enabled->toMultipart(multipart, utility::conversions::to_string_t("parameter.guava.cache.enabled."));
        }
    }
    if(m_Parameter_guava_cache_paramsIsSet)
    {
        if (m_Parameter_guava_cache_params.get())
        {
            m_Parameter_guava_cache_params->toMultipart(multipart, utility::conversions::to_string_t("parameter.guava.cache.params."));
        }
    }
    if(m_Parameter_guava_cache_reloadIsSet)
    {
        if (m_Parameter_guava_cache_reload.get())
        {
            m_Parameter_guava_cache_reload->toMultipart(multipart, utility::conversions::to_string_t("parameter.guava.cache.reload."));
        }
    }
    if(m_Service_rankingIsSet)
    {
        if (m_Service_ranking.get())
        {
            m_Service_ranking->toMultipart(multipart, utility::conversions::to_string_t("service.ranking."));
        }
    }
}

void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("parameter.guava.cache.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("parameter.guava.cache.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("parameter.guava.cache.enabled."));
            setParameterGuavaCacheEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameter.guava.cache.params")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("parameter.guava.cache.params")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("parameter.guava.cache.params."));
            setParameterGuavaCacheParams( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameter.guava.cache.reload")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("parameter.guava.cache.reload")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("parameter.guava.cache.reload."));
            setParameterGuavaCacheReload( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("service.ranking")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("service.ranking")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("service.ranking."));
            setServiceRanking( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::getParameterGuavaCacheEnabled() const
{
    return m_Parameter_guava_cache_enabled;
}


void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::setParameterGuavaCacheEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Parameter_guava_cache_enabled = value;
    m_Parameter_guava_cache_enabledIsSet = true;
}
bool ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::parameterGuavaCacheEnabledIsSet() const
{
    return m_Parameter_guava_cache_enabledIsSet;
}

void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::unsetParameter_guava_cache_enabled()
{
    m_Parameter_guava_cache_enabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::getParameterGuavaCacheParams() const
{
    return m_Parameter_guava_cache_params;
}


void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::setParameterGuavaCacheParams(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Parameter_guava_cache_params = value;
    m_Parameter_guava_cache_paramsIsSet = true;
}
bool ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::parameterGuavaCacheParamsIsSet() const
{
    return m_Parameter_guava_cache_paramsIsSet;
}

void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::unsetParameter_guava_cache_params()
{
    m_Parameter_guava_cache_paramsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::getParameterGuavaCacheReload() const
{
    return m_Parameter_guava_cache_reload;
}


void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::setParameterGuavaCacheReload(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Parameter_guava_cache_reload = value;
    m_Parameter_guava_cache_reloadIsSet = true;
}
bool ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::parameterGuavaCacheReloadIsSet() const
{
    return m_Parameter_guava_cache_reloadIsSet;
}

void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::unsetParameter_guava_cache_reload()
{
    m_Parameter_guava_cache_reloadIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::getServiceRanking() const
{
    return m_Service_ranking;
}


void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::setServiceRanking(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}
bool ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}

void ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}

}
}
}
}

