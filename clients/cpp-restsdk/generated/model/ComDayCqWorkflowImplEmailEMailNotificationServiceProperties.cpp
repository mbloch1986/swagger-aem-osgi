/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqWorkflowImplEmailEMailNotificationServiceProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::ComDayCqWorkflowImplEmailEMailNotificationServiceProperties()
{
    m_From_addressIsSet = false;
    m_Host_prefixIsSet = false;
    m_Notify_onabortIsSet = false;
    m_Notify_oncompleteIsSet = false;
    m_Notify_oncontainercompleteIsSet = false;
    m_Notify_useronlyIsSet = false;
}

ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::~ComDayCqWorkflowImplEmailEMailNotificationServiceProperties()
{
}

void ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_From_addressIsSet)
    {
        val[utility::conversions::to_string_t("from.address")] = ModelBase::toJson(m_From_address);
    }
    if(m_Host_prefixIsSet)
    {
        val[utility::conversions::to_string_t("host.prefix")] = ModelBase::toJson(m_Host_prefix);
    }
    if(m_Notify_onabortIsSet)
    {
        val[utility::conversions::to_string_t("notify.onabort")] = ModelBase::toJson(m_Notify_onabort);
    }
    if(m_Notify_oncompleteIsSet)
    {
        val[utility::conversions::to_string_t("notify.oncomplete")] = ModelBase::toJson(m_Notify_oncomplete);
    }
    if(m_Notify_oncontainercompleteIsSet)
    {
        val[utility::conversions::to_string_t("notify.oncontainercomplete")] = ModelBase::toJson(m_Notify_oncontainercomplete);
    }
    if(m_Notify_useronlyIsSet)
    {
        val[utility::conversions::to_string_t("notify.useronly")] = ModelBase::toJson(m_Notify_useronly);
    }

    return val;
}

void ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("from.address")))
    {
        if(!val[utility::conversions::to_string_t("from.address")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("from.address")]);
            setFromAddress( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("host.prefix")))
    {
        if(!val[utility::conversions::to_string_t("host.prefix")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("host.prefix")]);
            setHostPrefix( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("notify.onabort")))
    {
        if(!val[utility::conversions::to_string_t("notify.onabort")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("notify.onabort")]);
            setNotifyOnabort( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("notify.oncomplete")))
    {
        if(!val[utility::conversions::to_string_t("notify.oncomplete")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("notify.oncomplete")]);
            setNotifyOncomplete( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("notify.oncontainercomplete")))
    {
        if(!val[utility::conversions::to_string_t("notify.oncontainercomplete")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("notify.oncontainercomplete")]);
            setNotifyOncontainercomplete( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("notify.useronly")))
    {
        if(!val[utility::conversions::to_string_t("notify.useronly")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("notify.useronly")]);
            setNotifyUseronly( newItem );
        }
    }
}

void ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_From_addressIsSet)
    {
        if (m_From_address.get())
        {
            m_From_address->toMultipart(multipart, utility::conversions::to_string_t("from.address."));
        }
    }
    if(m_Host_prefixIsSet)
    {
        if (m_Host_prefix.get())
        {
            m_Host_prefix->toMultipart(multipart, utility::conversions::to_string_t("host.prefix."));
        }
    }
    if(m_Notify_onabortIsSet)
    {
        if (m_Notify_onabort.get())
        {
            m_Notify_onabort->toMultipart(multipart, utility::conversions::to_string_t("notify.onabort."));
        }
    }
    if(m_Notify_oncompleteIsSet)
    {
        if (m_Notify_oncomplete.get())
        {
            m_Notify_oncomplete->toMultipart(multipart, utility::conversions::to_string_t("notify.oncomplete."));
        }
    }
    if(m_Notify_oncontainercompleteIsSet)
    {
        if (m_Notify_oncontainercomplete.get())
        {
            m_Notify_oncontainercomplete->toMultipart(multipart, utility::conversions::to_string_t("notify.oncontainercomplete."));
        }
    }
    if(m_Notify_useronlyIsSet)
    {
        if (m_Notify_useronly.get())
        {
            m_Notify_useronly->toMultipart(multipart, utility::conversions::to_string_t("notify.useronly."));
        }
    }
}

void ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("from.address")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("from.address")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("from.address."));
            setFromAddress( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("host.prefix")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("host.prefix")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("host.prefix."));
            setHostPrefix( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notify.onabort")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("notify.onabort")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("notify.onabort."));
            setNotifyOnabort( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notify.oncomplete")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("notify.oncomplete")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("notify.oncomplete."));
            setNotifyOncomplete( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notify.oncontainercomplete")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("notify.oncontainercomplete")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("notify.oncontainercomplete."));
            setNotifyOncontainercomplete( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notify.useronly")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("notify.useronly")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("notify.useronly."));
            setNotifyUseronly( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::getFromAddress() const
{
    return m_From_address;
}


void ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::setFromAddress(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_From_address = value;
    m_From_addressIsSet = true;
}
bool ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::fromAddressIsSet() const
{
    return m_From_addressIsSet;
}

void ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::unsetFrom_address()
{
    m_From_addressIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::getHostPrefix() const
{
    return m_Host_prefix;
}


void ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::setHostPrefix(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Host_prefix = value;
    m_Host_prefixIsSet = true;
}
bool ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::hostPrefixIsSet() const
{
    return m_Host_prefixIsSet;
}

void ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::unsetHost_prefix()
{
    m_Host_prefixIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::getNotifyOnabort() const
{
    return m_Notify_onabort;
}


void ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::setNotifyOnabort(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Notify_onabort = value;
    m_Notify_onabortIsSet = true;
}
bool ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::notifyOnabortIsSet() const
{
    return m_Notify_onabortIsSet;
}

void ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::unsetNotify_onabort()
{
    m_Notify_onabortIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::getNotifyOncomplete() const
{
    return m_Notify_oncomplete;
}


void ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::setNotifyOncomplete(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Notify_oncomplete = value;
    m_Notify_oncompleteIsSet = true;
}
bool ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::notifyOncompleteIsSet() const
{
    return m_Notify_oncompleteIsSet;
}

void ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::unsetNotify_oncomplete()
{
    m_Notify_oncompleteIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::getNotifyOncontainercomplete() const
{
    return m_Notify_oncontainercomplete;
}


void ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::setNotifyOncontainercomplete(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Notify_oncontainercomplete = value;
    m_Notify_oncontainercompleteIsSet = true;
}
bool ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::notifyOncontainercompleteIsSet() const
{
    return m_Notify_oncontainercompleteIsSet;
}

void ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::unsetNotify_oncontainercomplete()
{
    m_Notify_oncontainercompleteIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::getNotifyUseronly() const
{
    return m_Notify_useronly;
}


void ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::setNotifyUseronly(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Notify_useronly = value;
    m_Notify_useronlyIsSet = true;
}
bool ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::notifyUseronlyIsSet() const
{
    return m_Notify_useronlyIsSet;
}

void ComDayCqWorkflowImplEmailEMailNotificationServiceProperties::unsetNotify_useronly()
{
    m_Notify_useronlyIsSet = false;
}

}
}
}
}

