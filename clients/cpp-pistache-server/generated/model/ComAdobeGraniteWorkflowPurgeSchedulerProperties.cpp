/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteWorkflowPurgeSchedulerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteWorkflowPurgeSchedulerProperties::ComAdobeGraniteWorkflowPurgeSchedulerProperties()
{
    m_Scheduledpurge_nameIsSet = false;
    m_Scheduledpurge_workflowStatusIsSet = false;
    m_Scheduledpurge_modelIdsIsSet = false;
    m_Scheduledpurge_daysoldIsSet = false;
    
}

ComAdobeGraniteWorkflowPurgeSchedulerProperties::~ComAdobeGraniteWorkflowPurgeSchedulerProperties()
{
}

void ComAdobeGraniteWorkflowPurgeSchedulerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteWorkflowPurgeSchedulerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Scheduledpurge_nameIsSet)
    {
        val["scheduledpurge.name"] = ModelBase::toJson(m_Scheduledpurge_name);
    }
    if(m_Scheduledpurge_workflowStatusIsSet)
    {
        val["scheduledpurge.workflowStatus"] = ModelBase::toJson(m_Scheduledpurge_workflowStatus);
    }
    if(m_Scheduledpurge_modelIdsIsSet)
    {
        val["scheduledpurge.modelIds"] = ModelBase::toJson(m_Scheduledpurge_modelIds);
    }
    if(m_Scheduledpurge_daysoldIsSet)
    {
        val["scheduledpurge.daysold"] = ModelBase::toJson(m_Scheduledpurge_daysold);
    }
    

    return val;
}

void ComAdobeGraniteWorkflowPurgeSchedulerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("scheduledpurge.name") != val.end())
    {
        if(!val["scheduledpurge.name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["scheduledpurge.name"]);
            setScheduledpurgeName( newItem );
        }
        
    }
    if(val.find("scheduledpurge.workflowStatus") != val.end())
    {
        if(!val["scheduledpurge.workflowStatus"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["scheduledpurge.workflowStatus"]);
            setScheduledpurgeWorkflowStatus( newItem );
        }
        
    }
    if(val.find("scheduledpurge.modelIds") != val.end())
    {
        if(!val["scheduledpurge.modelIds"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["scheduledpurge.modelIds"]);
            setScheduledpurgeModelIds( newItem );
        }
        
    }
    if(val.find("scheduledpurge.daysold") != val.end())
    {
        if(!val["scheduledpurge.daysold"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["scheduledpurge.daysold"]);
            setScheduledpurgeDaysold( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeGraniteWorkflowPurgeSchedulerProperties::getScheduledpurgeName() const
{
    return m_Scheduledpurge_name;
}
void ComAdobeGraniteWorkflowPurgeSchedulerProperties::setScheduledpurgeName(ConfigNodePropertyString const& value)
{
    m_Scheduledpurge_name = value;
    m_Scheduledpurge_nameIsSet = true;
}
bool ComAdobeGraniteWorkflowPurgeSchedulerProperties::scheduledpurgeNameIsSet() const
{
    return m_Scheduledpurge_nameIsSet;
}
void ComAdobeGraniteWorkflowPurgeSchedulerProperties::unsetScheduledpurge_name()
{
    m_Scheduledpurge_nameIsSet = false;
}
ConfigNodePropertyDropDown ComAdobeGraniteWorkflowPurgeSchedulerProperties::getScheduledpurgeWorkflowStatus() const
{
    return m_Scheduledpurge_workflowStatus;
}
void ComAdobeGraniteWorkflowPurgeSchedulerProperties::setScheduledpurgeWorkflowStatus(ConfigNodePropertyDropDown const& value)
{
    m_Scheduledpurge_workflowStatus = value;
    m_Scheduledpurge_workflowStatusIsSet = true;
}
bool ComAdobeGraniteWorkflowPurgeSchedulerProperties::scheduledpurgeWorkflowStatusIsSet() const
{
    return m_Scheduledpurge_workflowStatusIsSet;
}
void ComAdobeGraniteWorkflowPurgeSchedulerProperties::unsetScheduledpurge_workflowStatus()
{
    m_Scheduledpurge_workflowStatusIsSet = false;
}
ConfigNodePropertyArray ComAdobeGraniteWorkflowPurgeSchedulerProperties::getScheduledpurgeModelIds() const
{
    return m_Scheduledpurge_modelIds;
}
void ComAdobeGraniteWorkflowPurgeSchedulerProperties::setScheduledpurgeModelIds(ConfigNodePropertyArray const& value)
{
    m_Scheduledpurge_modelIds = value;
    m_Scheduledpurge_modelIdsIsSet = true;
}
bool ComAdobeGraniteWorkflowPurgeSchedulerProperties::scheduledpurgeModelIdsIsSet() const
{
    return m_Scheduledpurge_modelIdsIsSet;
}
void ComAdobeGraniteWorkflowPurgeSchedulerProperties::unsetScheduledpurge_modelIds()
{
    m_Scheduledpurge_modelIdsIsSet = false;
}
ConfigNodePropertyInteger ComAdobeGraniteWorkflowPurgeSchedulerProperties::getScheduledpurgeDaysold() const
{
    return m_Scheduledpurge_daysold;
}
void ComAdobeGraniteWorkflowPurgeSchedulerProperties::setScheduledpurgeDaysold(ConfigNodePropertyInteger const& value)
{
    m_Scheduledpurge_daysold = value;
    m_Scheduledpurge_daysoldIsSet = true;
}
bool ComAdobeGraniteWorkflowPurgeSchedulerProperties::scheduledpurgeDaysoldIsSet() const
{
    return m_Scheduledpurge_daysoldIsSet;
}
void ComAdobeGraniteWorkflowPurgeSchedulerProperties::unsetScheduledpurge_daysold()
{
    m_Scheduledpurge_daysoldIsSet = false;
}

}
}
}
}

