/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties
    : public ModelBase
{
public:
    ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties();
    virtual ~ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCqDamConfigAnnotationPdfDocumentWidth() const;
    bool cqDamConfigAnnotationPdfDocumentWidthIsSet() const;
    void unsetCq_dam_config_annotation_pdf_document_width();
    void setCqDamConfigAnnotationPdfDocumentWidth(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCqDamConfigAnnotationPdfDocumentHeight() const;
    bool cqDamConfigAnnotationPdfDocumentHeightIsSet() const;
    void unsetCq_dam_config_annotation_pdf_document_height();
    void setCqDamConfigAnnotationPdfDocumentHeight(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCqDamConfigAnnotationPdfDocumentPaddingHorizontal() const;
    bool cqDamConfigAnnotationPdfDocumentPaddingHorizontalIsSet() const;
    void unsetCq_dam_config_annotation_pdf_document_padding_horizontal();
    void setCqDamConfigAnnotationPdfDocumentPaddingHorizontal(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCqDamConfigAnnotationPdfDocumentPaddingVertical() const;
    bool cqDamConfigAnnotationPdfDocumentPaddingVerticalIsSet() const;
    void unsetCq_dam_config_annotation_pdf_document_padding_vertical();
    void setCqDamConfigAnnotationPdfDocumentPaddingVertical(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCqDamConfigAnnotationPdfFontSize() const;
    bool cqDamConfigAnnotationPdfFontSizeIsSet() const;
    void unsetCq_dam_config_annotation_pdf_font_size();
    void setCqDamConfigAnnotationPdfFontSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getCqDamConfigAnnotationPdfFontColor() const;
    bool cqDamConfigAnnotationPdfFontColorIsSet() const;
    void unsetCq_dam_config_annotation_pdf_font_color();
    void setCqDamConfigAnnotationPdfFontColor(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getCqDamConfigAnnotationPdfFontFamily() const;
    bool cqDamConfigAnnotationPdfFontFamilyIsSet() const;
    void unsetCq_dam_config_annotation_pdf_font_family();
    void setCqDamConfigAnnotationPdfFontFamily(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getCqDamConfigAnnotationPdfFontLight() const;
    bool cqDamConfigAnnotationPdfFontLightIsSet() const;
    void unsetCq_dam_config_annotation_pdf_font_light();
    void setCqDamConfigAnnotationPdfFontLight(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCqDamConfigAnnotationPdfMarginTextImage() const;
    bool cqDamConfigAnnotationPdfMarginTextImageIsSet() const;
    void unsetCq_dam_config_annotation_pdf_marginTextImage();
    void setCqDamConfigAnnotationPdfMarginTextImage(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCqDamConfigAnnotationPdfMinImageHeight() const;
    bool cqDamConfigAnnotationPdfMinImageHeightIsSet() const;
    void unsetCq_dam_config_annotation_pdf_minImageHeight();
    void setCqDamConfigAnnotationPdfMinImageHeight(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCqDamConfigAnnotationPdfReviewStatusWidth() const;
    bool cqDamConfigAnnotationPdfReviewStatusWidthIsSet() const;
    void unsetCq_dam_config_annotation_pdf_reviewStatus_width();
    void setCqDamConfigAnnotationPdfReviewStatusWidth(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getCqDamConfigAnnotationPdfReviewStatusColorApproved() const;
    bool cqDamConfigAnnotationPdfReviewStatusColorApprovedIsSet() const;
    void unsetCq_dam_config_annotation_pdf_reviewStatus_color_approved();
    void setCqDamConfigAnnotationPdfReviewStatusColorApproved(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getCqDamConfigAnnotationPdfReviewStatusColorRejected() const;
    bool cqDamConfigAnnotationPdfReviewStatusColorRejectedIsSet() const;
    void unsetCq_dam_config_annotation_pdf_reviewStatus_color_rejected();
    void setCqDamConfigAnnotationPdfReviewStatusColorRejected(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getCqDamConfigAnnotationPdfReviewStatusColorChangesRequested() const;
    bool cqDamConfigAnnotationPdfReviewStatusColorChangesRequestedIsSet() const;
    void unsetCq_dam_config_annotation_pdf_reviewStatus_color_changesRequested();
    void setCqDamConfigAnnotationPdfReviewStatusColorChangesRequested(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCqDamConfigAnnotationPdfAnnotationMarkerWidth() const;
    bool cqDamConfigAnnotationPdfAnnotationMarkerWidthIsSet() const;
    void unsetCq_dam_config_annotation_pdf_annotationMarker_width();
    void setCqDamConfigAnnotationPdfAnnotationMarkerWidth(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCqDamConfigAnnotationPdfAssetMinheight() const;
    bool cqDamConfigAnnotationPdfAssetMinheightIsSet() const;
    void unsetCq_dam_config_annotation_pdf_asset_minheight();
    void setCqDamConfigAnnotationPdfAssetMinheight(std::shared_ptr<ConfigNodePropertyInteger> value);

protected:
    std::shared_ptr<ConfigNodePropertyInteger> m_Cq_dam_config_annotation_pdf_document_width;
    bool m_Cq_dam_config_annotation_pdf_document_widthIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cq_dam_config_annotation_pdf_document_height;
    bool m_Cq_dam_config_annotation_pdf_document_heightIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cq_dam_config_annotation_pdf_document_padding_horizontal;
    bool m_Cq_dam_config_annotation_pdf_document_padding_horizontalIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cq_dam_config_annotation_pdf_document_padding_vertical;
    bool m_Cq_dam_config_annotation_pdf_document_padding_verticalIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cq_dam_config_annotation_pdf_font_size;
    bool m_Cq_dam_config_annotation_pdf_font_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Cq_dam_config_annotation_pdf_font_color;
    bool m_Cq_dam_config_annotation_pdf_font_colorIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Cq_dam_config_annotation_pdf_font_family;
    bool m_Cq_dam_config_annotation_pdf_font_familyIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Cq_dam_config_annotation_pdf_font_light;
    bool m_Cq_dam_config_annotation_pdf_font_lightIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cq_dam_config_annotation_pdf_marginTextImage;
    bool m_Cq_dam_config_annotation_pdf_marginTextImageIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cq_dam_config_annotation_pdf_minImageHeight;
    bool m_Cq_dam_config_annotation_pdf_minImageHeightIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cq_dam_config_annotation_pdf_reviewStatus_width;
    bool m_Cq_dam_config_annotation_pdf_reviewStatus_widthIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Cq_dam_config_annotation_pdf_reviewStatus_color_approved;
    bool m_Cq_dam_config_annotation_pdf_reviewStatus_color_approvedIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Cq_dam_config_annotation_pdf_reviewStatus_color_rejected;
    bool m_Cq_dam_config_annotation_pdf_reviewStatus_color_rejectedIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Cq_dam_config_annotation_pdf_reviewStatus_color_changesRequested;
    bool m_Cq_dam_config_annotation_pdf_reviewStatus_color_changesRequestedIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cq_dam_config_annotation_pdf_annotationMarker_width;
    bool m_Cq_dam_config_annotation_pdf_annotationMarker_widthIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cq_dam_config_annotation_pdf_asset_minheight;
    bool m_Cq_dam_config_annotation_pdf_asset_minheightIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties_H_ */
