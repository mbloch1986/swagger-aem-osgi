/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties() {
    init();
}

OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::~OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::init() {
    datasource_name = new OAIConfigNodePropertyString();
    m_datasource_name_isSet = false;
    datasource_svc_prop_name = new OAIConfigNodePropertyString();
    m_datasource_svc_prop_name_isSet = false;
    datasource_jndi_name = new OAIConfigNodePropertyString();
    m_datasource_jndi_name_isSet = false;
    jndi_properties = new OAIConfigNodePropertyArray();
    m_jndi_properties_isSet = false;
}

void
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::cleanup() {
    if(datasource_name != nullptr) { 
        delete datasource_name;
    }
    if(datasource_svc_prop_name != nullptr) { 
        delete datasource_svc_prop_name;
    }
    if(datasource_jndi_name != nullptr) { 
        delete datasource_jndi_name;
    }
    if(jndi_properties != nullptr) { 
        delete jndi_properties;
    }
}

OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties*
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&datasource_name, pJson["datasource.name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&datasource_svc_prop_name, pJson["datasource.svc.prop.name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&datasource_jndi_name, pJson["datasource.jndi.name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&jndi_properties, pJson["jndi.properties"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::asJsonObject() {
    QJsonObject obj;
    if((datasource_name != nullptr) && (datasource_name->isSet())){
        toJsonValue(QString("datasource.name"), datasource_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((datasource_svc_prop_name != nullptr) && (datasource_svc_prop_name->isSet())){
        toJsonValue(QString("datasource.svc.prop.name"), datasource_svc_prop_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((datasource_jndi_name != nullptr) && (datasource_jndi_name->isSet())){
        toJsonValue(QString("datasource.jndi.name"), datasource_jndi_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((jndi_properties != nullptr) && (jndi_properties->isSet())){
        toJsonValue(QString("jndi.properties"), jndi_properties, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::getDatasourceName() {
    return datasource_name;
}
void
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::setDatasourceName(OAIConfigNodePropertyString* datasource_name) {
    this->datasource_name = datasource_name;
    this->m_datasource_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::getDatasourceSvcPropName() {
    return datasource_svc_prop_name;
}
void
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::setDatasourceSvcPropName(OAIConfigNodePropertyString* datasource_svc_prop_name) {
    this->datasource_svc_prop_name = datasource_svc_prop_name;
    this->m_datasource_svc_prop_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::getDatasourceJndiName() {
    return datasource_jndi_name;
}
void
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::setDatasourceJndiName(OAIConfigNodePropertyString* datasource_jndi_name) {
    this->datasource_jndi_name = datasource_jndi_name;
    this->m_datasource_jndi_name_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::getJndiProperties() {
    return jndi_properties;
}
void
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::setJndiProperties(OAIConfigNodePropertyArray* jndi_properties) {
    this->jndi_properties = jndi_properties;
    this->m_jndi_properties_isSet = true;
}


bool
OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(datasource_name != nullptr && datasource_name->isSet()){ isObjectUpdated = true; break;}
        if(datasource_svc_prop_name != nullptr && datasource_svc_prop_name->isSet()){ isObjectUpdated = true; break;}
        if(datasource_jndi_name != nullptr && datasource_jndi_name->isSet()){ isObjectUpdated = true; break;}
        if(jndi_properties != nullptr && jndi_properties->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

