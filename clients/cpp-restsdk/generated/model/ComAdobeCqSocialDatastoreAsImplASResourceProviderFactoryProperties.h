/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties
    : public ModelBase
{
public:
    ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties();
    virtual ~ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getVersionId() const;
    bool versionIdIsSet() const;
    void unsetVersion_id();
    void setVersionId(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getCacheOn() const;
    bool cacheOnIsSet() const;
    void unsetCache_on();
    void setCacheOn(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getConcurrencyLevel() const;
    bool concurrencyLevelIsSet() const;
    void unsetConcurrency_level();
    void setConcurrencyLevel(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCacheStartSize() const;
    bool cacheStartSizeIsSet() const;
    void unsetCache_start_size();
    void setCacheStartSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCacheTtl() const;
    bool cacheTtlIsSet() const;
    void unsetCache_ttl();
    void setCacheTtl(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCacheSize() const;
    bool cacheSizeIsSet() const;
    void unsetCache_size();
    void setCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getTimeLimit() const;
    bool timeLimitIsSet() const;
    void unsetTime_limit();
    void setTimeLimit(std::shared_ptr<ConfigNodePropertyInteger> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Version_id;
    bool m_Version_idIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Cache_on;
    bool m_Cache_onIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Concurrency_level;
    bool m_Concurrency_levelIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cache_start_size;
    bool m_Cache_start_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cache_ttl;
    bool m_Cache_ttlIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cache_size;
    bool m_Cache_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Time_limit;
    bool m_Time_limitIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties_H_ */
