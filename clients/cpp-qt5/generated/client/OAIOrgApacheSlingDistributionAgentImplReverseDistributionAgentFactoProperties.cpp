/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties() {
    init();
}

OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::~OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::init() {
    name = new OAIConfigNodePropertyString();
    m_name_isSet = false;
    title = new OAIConfigNodePropertyString();
    m_title_isSet = false;
    details = new OAIConfigNodePropertyString();
    m_details_isSet = false;
    enabled = new OAIConfigNodePropertyBoolean();
    m_enabled_isSet = false;
    service_name = new OAIConfigNodePropertyString();
    m_service_name_isSet = false;
    log_level = new OAIConfigNodePropertyDropDown();
    m_log_level_isSet = false;
    queue_processing_enabled = new OAIConfigNodePropertyBoolean();
    m_queue_processing_enabled_isSet = false;
    package_exporter_endpoints = new OAIConfigNodePropertyArray();
    m_package_exporter_endpoints_isSet = false;
    pull_items = new OAIConfigNodePropertyInteger();
    m_pull_items_isSet = false;
    http_conn_timeout = new OAIConfigNodePropertyInteger();
    m_http_conn_timeout_isSet = false;
    request_authorization_strategy_target = new OAIConfigNodePropertyString();
    m_request_authorization_strategy_target_isSet = false;
    transport_secret_provider_target = new OAIConfigNodePropertyString();
    m_transport_secret_provider_target_isSet = false;
    package_builder_target = new OAIConfigNodePropertyString();
    m_package_builder_target_isSet = false;
    triggers_target = new OAIConfigNodePropertyString();
    m_triggers_target_isSet = false;
}

void
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::cleanup() {
    if(name != nullptr) { 
        delete name;
    }
    if(title != nullptr) { 
        delete title;
    }
    if(details != nullptr) { 
        delete details;
    }
    if(enabled != nullptr) { 
        delete enabled;
    }
    if(service_name != nullptr) { 
        delete service_name;
    }
    if(log_level != nullptr) { 
        delete log_level;
    }
    if(queue_processing_enabled != nullptr) { 
        delete queue_processing_enabled;
    }
    if(package_exporter_endpoints != nullptr) { 
        delete package_exporter_endpoints;
    }
    if(pull_items != nullptr) { 
        delete pull_items;
    }
    if(http_conn_timeout != nullptr) { 
        delete http_conn_timeout;
    }
    if(request_authorization_strategy_target != nullptr) { 
        delete request_authorization_strategy_target;
    }
    if(transport_secret_provider_target != nullptr) { 
        delete transport_secret_provider_target;
    }
    if(package_builder_target != nullptr) { 
        delete package_builder_target;
    }
    if(triggers_target != nullptr) { 
        delete triggers_target;
    }
}

OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties*
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&name, pJson["name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&title, pJson["title"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&details, pJson["details"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&enabled, pJson["enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&service_name, pJson["serviceName"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&log_level, pJson["log.level"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&queue_processing_enabled, pJson["queue.processing.enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&package_exporter_endpoints, pJson["packageExporter.endpoints"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&pull_items, pJson["pull.items"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&http_conn_timeout, pJson["http.conn.timeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&request_authorization_strategy_target, pJson["requestAuthorizationStrategy.target"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&transport_secret_provider_target, pJson["transportSecretProvider.target"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&package_builder_target, pJson["packageBuilder.target"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&triggers_target, pJson["triggers.target"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::asJsonObject() {
    QJsonObject obj;
    if((name != nullptr) && (name->isSet())){
        toJsonValue(QString("name"), name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((title != nullptr) && (title->isSet())){
        toJsonValue(QString("title"), title, obj, QString("OAIConfigNodePropertyString"));
    }
    if((details != nullptr) && (details->isSet())){
        toJsonValue(QString("details"), details, obj, QString("OAIConfigNodePropertyString"));
    }
    if((enabled != nullptr) && (enabled->isSet())){
        toJsonValue(QString("enabled"), enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((service_name != nullptr) && (service_name->isSet())){
        toJsonValue(QString("serviceName"), service_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((log_level != nullptr) && (log_level->isSet())){
        toJsonValue(QString("log.level"), log_level, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((queue_processing_enabled != nullptr) && (queue_processing_enabled->isSet())){
        toJsonValue(QString("queue.processing.enabled"), queue_processing_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((package_exporter_endpoints != nullptr) && (package_exporter_endpoints->isSet())){
        toJsonValue(QString("packageExporter.endpoints"), package_exporter_endpoints, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((pull_items != nullptr) && (pull_items->isSet())){
        toJsonValue(QString("pull.items"), pull_items, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((http_conn_timeout != nullptr) && (http_conn_timeout->isSet())){
        toJsonValue(QString("http.conn.timeout"), http_conn_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((request_authorization_strategy_target != nullptr) && (request_authorization_strategy_target->isSet())){
        toJsonValue(QString("requestAuthorizationStrategy.target"), request_authorization_strategy_target, obj, QString("OAIConfigNodePropertyString"));
    }
    if((transport_secret_provider_target != nullptr) && (transport_secret_provider_target->isSet())){
        toJsonValue(QString("transportSecretProvider.target"), transport_secret_provider_target, obj, QString("OAIConfigNodePropertyString"));
    }
    if((package_builder_target != nullptr) && (package_builder_target->isSet())){
        toJsonValue(QString("packageBuilder.target"), package_builder_target, obj, QString("OAIConfigNodePropertyString"));
    }
    if((triggers_target != nullptr) && (triggers_target->isSet())){
        toJsonValue(QString("triggers.target"), triggers_target, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getName() {
    return name;
}
void
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setName(OAIConfigNodePropertyString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getTitle() {
    return title;
}
void
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setTitle(OAIConfigNodePropertyString* title) {
    this->title = title;
    this->m_title_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getDetails() {
    return details;
}
void
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setDetails(OAIConfigNodePropertyString* details) {
    this->details = details;
    this->m_details_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getEnabled() {
    return enabled;
}
void
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setEnabled(OAIConfigNodePropertyBoolean* enabled) {
    this->enabled = enabled;
    this->m_enabled_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getServiceName() {
    return service_name;
}
void
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setServiceName(OAIConfigNodePropertyString* service_name) {
    this->service_name = service_name;
    this->m_service_name_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getLogLevel() {
    return log_level;
}
void
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setLogLevel(OAIConfigNodePropertyDropDown* log_level) {
    this->log_level = log_level;
    this->m_log_level_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getQueueProcessingEnabled() {
    return queue_processing_enabled;
}
void
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setQueueProcessingEnabled(OAIConfigNodePropertyBoolean* queue_processing_enabled) {
    this->queue_processing_enabled = queue_processing_enabled;
    this->m_queue_processing_enabled_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getPackageExporterEndpoints() {
    return package_exporter_endpoints;
}
void
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setPackageExporterEndpoints(OAIConfigNodePropertyArray* package_exporter_endpoints) {
    this->package_exporter_endpoints = package_exporter_endpoints;
    this->m_package_exporter_endpoints_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getPullItems() {
    return pull_items;
}
void
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setPullItems(OAIConfigNodePropertyInteger* pull_items) {
    this->pull_items = pull_items;
    this->m_pull_items_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getHttpConnTimeout() {
    return http_conn_timeout;
}
void
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setHttpConnTimeout(OAIConfigNodePropertyInteger* http_conn_timeout) {
    this->http_conn_timeout = http_conn_timeout;
    this->m_http_conn_timeout_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getRequestAuthorizationStrategyTarget() {
    return request_authorization_strategy_target;
}
void
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setRequestAuthorizationStrategyTarget(OAIConfigNodePropertyString* request_authorization_strategy_target) {
    this->request_authorization_strategy_target = request_authorization_strategy_target;
    this->m_request_authorization_strategy_target_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getTransportSecretProviderTarget() {
    return transport_secret_provider_target;
}
void
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setTransportSecretProviderTarget(OAIConfigNodePropertyString* transport_secret_provider_target) {
    this->transport_secret_provider_target = transport_secret_provider_target;
    this->m_transport_secret_provider_target_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getPackageBuilderTarget() {
    return package_builder_target;
}
void
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setPackageBuilderTarget(OAIConfigNodePropertyString* package_builder_target) {
    this->package_builder_target = package_builder_target;
    this->m_package_builder_target_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::getTriggersTarget() {
    return triggers_target;
}
void
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::setTriggersTarget(OAIConfigNodePropertyString* triggers_target) {
    this->triggers_target = triggers_target;
    this->m_triggers_target_isSet = true;
}


bool
OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(name != nullptr && name->isSet()){ isObjectUpdated = true; break;}
        if(title != nullptr && title->isSet()){ isObjectUpdated = true; break;}
        if(details != nullptr && details->isSet()){ isObjectUpdated = true; break;}
        if(enabled != nullptr && enabled->isSet()){ isObjectUpdated = true; break;}
        if(service_name != nullptr && service_name->isSet()){ isObjectUpdated = true; break;}
        if(log_level != nullptr && log_level->isSet()){ isObjectUpdated = true; break;}
        if(queue_processing_enabled != nullptr && queue_processing_enabled->isSet()){ isObjectUpdated = true; break;}
        if(package_exporter_endpoints != nullptr && package_exporter_endpoints->isSet()){ isObjectUpdated = true; break;}
        if(pull_items != nullptr && pull_items->isSet()){ isObjectUpdated = true; break;}
        if(http_conn_timeout != nullptr && http_conn_timeout->isSet()){ isObjectUpdated = true; break;}
        if(request_authorization_strategy_target != nullptr && request_authorization_strategy_target->isSet()){ isObjectUpdated = true; break;}
        if(transport_secret_provider_target != nullptr && transport_secret_provider_target->isSet()){ isObjectUpdated = true; break;}
        if(package_builder_target != nullptr && package_builder_target->isSet()){ isObjectUpdated = true; break;}
        if(triggers_target != nullptr && triggers_target->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

