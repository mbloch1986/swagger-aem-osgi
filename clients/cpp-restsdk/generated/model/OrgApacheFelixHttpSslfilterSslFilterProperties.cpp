/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheFelixHttpSslfilterSslFilterProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheFelixHttpSslfilterSslFilterProperties::OrgApacheFelixHttpSslfilterSslFilterProperties()
{
    m_Ssl_forward_headerIsSet = false;
    m_Ssl_forward_valueIsSet = false;
    m_Ssl_forward_cert_headerIsSet = false;
    m_Rewrite_absolute_urlsIsSet = false;
}

OrgApacheFelixHttpSslfilterSslFilterProperties::~OrgApacheFelixHttpSslfilterSslFilterProperties()
{
}

void OrgApacheFelixHttpSslfilterSslFilterProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheFelixHttpSslfilterSslFilterProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Ssl_forward_headerIsSet)
    {
        val[utility::conversions::to_string_t("ssl-forward.header")] = ModelBase::toJson(m_Ssl_forward_header);
    }
    if(m_Ssl_forward_valueIsSet)
    {
        val[utility::conversions::to_string_t("ssl-forward.value")] = ModelBase::toJson(m_Ssl_forward_value);
    }
    if(m_Ssl_forward_cert_headerIsSet)
    {
        val[utility::conversions::to_string_t("ssl-forward-cert.header")] = ModelBase::toJson(m_Ssl_forward_cert_header);
    }
    if(m_Rewrite_absolute_urlsIsSet)
    {
        val[utility::conversions::to_string_t("rewrite.absolute.urls")] = ModelBase::toJson(m_Rewrite_absolute_urls);
    }

    return val;
}

void OrgApacheFelixHttpSslfilterSslFilterProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("ssl-forward.header")))
    {
        if(!val[utility::conversions::to_string_t("ssl-forward.header")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("ssl-forward.header")]);
            setSslForwardHeader( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ssl-forward.value")))
    {
        if(!val[utility::conversions::to_string_t("ssl-forward.value")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("ssl-forward.value")]);
            setSslForwardValue( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ssl-forward-cert.header")))
    {
        if(!val[utility::conversions::to_string_t("ssl-forward-cert.header")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("ssl-forward-cert.header")]);
            setSslForwardCertHeader( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rewrite.absolute.urls")))
    {
        if(!val[utility::conversions::to_string_t("rewrite.absolute.urls")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("rewrite.absolute.urls")]);
            setRewriteAbsoluteUrls( newItem );
        }
    }
}

void OrgApacheFelixHttpSslfilterSslFilterProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Ssl_forward_headerIsSet)
    {
        if (m_Ssl_forward_header.get())
        {
            m_Ssl_forward_header->toMultipart(multipart, utility::conversions::to_string_t("ssl-forward.header."));
        }
    }
    if(m_Ssl_forward_valueIsSet)
    {
        if (m_Ssl_forward_value.get())
        {
            m_Ssl_forward_value->toMultipart(multipart, utility::conversions::to_string_t("ssl-forward.value."));
        }
    }
    if(m_Ssl_forward_cert_headerIsSet)
    {
        if (m_Ssl_forward_cert_header.get())
        {
            m_Ssl_forward_cert_header->toMultipart(multipart, utility::conversions::to_string_t("ssl-forward-cert.header."));
        }
    }
    if(m_Rewrite_absolute_urlsIsSet)
    {
        if (m_Rewrite_absolute_urls.get())
        {
            m_Rewrite_absolute_urls->toMultipart(multipart, utility::conversions::to_string_t("rewrite.absolute.urls."));
        }
    }
}

void OrgApacheFelixHttpSslfilterSslFilterProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("ssl-forward.header")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ssl-forward.header")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ssl-forward.header."));
            setSslForwardHeader( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ssl-forward.value")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ssl-forward.value")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ssl-forward.value."));
            setSslForwardValue( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ssl-forward-cert.header")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ssl-forward-cert.header")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ssl-forward-cert.header."));
            setSslForwardCertHeader( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rewrite.absolute.urls")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("rewrite.absolute.urls")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("rewrite.absolute.urls."));
            setRewriteAbsoluteUrls( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixHttpSslfilterSslFilterProperties::getSslForwardHeader() const
{
    return m_Ssl_forward_header;
}


void OrgApacheFelixHttpSslfilterSslFilterProperties::setSslForwardHeader(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Ssl_forward_header = value;
    m_Ssl_forward_headerIsSet = true;
}
bool OrgApacheFelixHttpSslfilterSslFilterProperties::sslForwardHeaderIsSet() const
{
    return m_Ssl_forward_headerIsSet;
}

void OrgApacheFelixHttpSslfilterSslFilterProperties::unsetSsl_forward_header()
{
    m_Ssl_forward_headerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixHttpSslfilterSslFilterProperties::getSslForwardValue() const
{
    return m_Ssl_forward_value;
}


void OrgApacheFelixHttpSslfilterSslFilterProperties::setSslForwardValue(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Ssl_forward_value = value;
    m_Ssl_forward_valueIsSet = true;
}
bool OrgApacheFelixHttpSslfilterSslFilterProperties::sslForwardValueIsSet() const
{
    return m_Ssl_forward_valueIsSet;
}

void OrgApacheFelixHttpSslfilterSslFilterProperties::unsetSsl_forward_value()
{
    m_Ssl_forward_valueIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixHttpSslfilterSslFilterProperties::getSslForwardCertHeader() const
{
    return m_Ssl_forward_cert_header;
}


void OrgApacheFelixHttpSslfilterSslFilterProperties::setSslForwardCertHeader(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Ssl_forward_cert_header = value;
    m_Ssl_forward_cert_headerIsSet = true;
}
bool OrgApacheFelixHttpSslfilterSslFilterProperties::sslForwardCertHeaderIsSet() const
{
    return m_Ssl_forward_cert_headerIsSet;
}

void OrgApacheFelixHttpSslfilterSslFilterProperties::unsetSsl_forward_cert_header()
{
    m_Ssl_forward_cert_headerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheFelixHttpSslfilterSslFilterProperties::getRewriteAbsoluteUrls() const
{
    return m_Rewrite_absolute_urls;
}


void OrgApacheFelixHttpSslfilterSslFilterProperties::setRewriteAbsoluteUrls(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Rewrite_absolute_urls = value;
    m_Rewrite_absolute_urlsIsSet = true;
}
bool OrgApacheFelixHttpSslfilterSslFilterProperties::rewriteAbsoluteUrlsIsSet() const
{
    return m_Rewrite_absolute_urlsIsSet;
}

void OrgApacheFelixHttpSslfilterSslFilterProperties::unsetRewrite_absolute_urls()
{
    m_Rewrite_absolute_urlsIsSet = false;
}

}
}
}
}

