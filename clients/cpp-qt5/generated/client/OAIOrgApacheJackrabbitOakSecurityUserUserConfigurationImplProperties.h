/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.h
 *
 * 
 */

#ifndef OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties_H_
#define OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyDropDown.h"
#include "OAIOAIConfigNodePropertyInteger.h"
#include "OAIOAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties: public OAIObject {
public:
    OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties();
    OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties(QString json);
    ~OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyString* getUsersPath();
    void setUsersPath(OAIConfigNodePropertyString* users_path);

    OAIConfigNodePropertyString* getGroupsPath();
    void setGroupsPath(OAIConfigNodePropertyString* groups_path);

    OAIConfigNodePropertyString* getSystemRelativePath();
    void setSystemRelativePath(OAIConfigNodePropertyString* system_relative_path);

    OAIConfigNodePropertyInteger* getDefaultDepth();
    void setDefaultDepth(OAIConfigNodePropertyInteger* default_depth);

    OAIConfigNodePropertyDropDown* getImportBehavior();
    void setImportBehavior(OAIConfigNodePropertyDropDown* import_behavior);

    OAIConfigNodePropertyString* getPasswordHashAlgorithm();
    void setPasswordHashAlgorithm(OAIConfigNodePropertyString* password_hash_algorithm);

    OAIConfigNodePropertyInteger* getPasswordHashIterations();
    void setPasswordHashIterations(OAIConfigNodePropertyInteger* password_hash_iterations);

    OAIConfigNodePropertyInteger* getPasswordSaltSize();
    void setPasswordSaltSize(OAIConfigNodePropertyInteger* password_salt_size);

    OAIConfigNodePropertyBoolean* getOmitAdminPw();
    void setOmitAdminPw(OAIConfigNodePropertyBoolean* omit_admin_pw);

    OAIConfigNodePropertyBoolean* getSupportAutoSave();
    void setSupportAutoSave(OAIConfigNodePropertyBoolean* support_auto_save);

    OAIConfigNodePropertyInteger* getPasswordMaxAge();
    void setPasswordMaxAge(OAIConfigNodePropertyInteger* password_max_age);

    OAIConfigNodePropertyBoolean* getInitialPasswordChange();
    void setInitialPasswordChange(OAIConfigNodePropertyBoolean* initial_password_change);

    OAIConfigNodePropertyInteger* getPasswordHistorySize();
    void setPasswordHistorySize(OAIConfigNodePropertyInteger* password_history_size);

    OAIConfigNodePropertyBoolean* getPasswordExpiryForAdmin();
    void setPasswordExpiryForAdmin(OAIConfigNodePropertyBoolean* password_expiry_for_admin);

    OAIConfigNodePropertyInteger* getCacheExpiration();
    void setCacheExpiration(OAIConfigNodePropertyInteger* cache_expiration);

    OAIConfigNodePropertyBoolean* getEnableRfc7613UsercaseMappedProfile();
    void setEnableRfc7613UsercaseMappedProfile(OAIConfigNodePropertyBoolean* enable_rfc7613_usercase_mapped_profile);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyString* users_path;
    bool m_users_path_isSet;

    OAIConfigNodePropertyString* groups_path;
    bool m_groups_path_isSet;

    OAIConfigNodePropertyString* system_relative_path;
    bool m_system_relative_path_isSet;

    OAIConfigNodePropertyInteger* default_depth;
    bool m_default_depth_isSet;

    OAIConfigNodePropertyDropDown* import_behavior;
    bool m_import_behavior_isSet;

    OAIConfigNodePropertyString* password_hash_algorithm;
    bool m_password_hash_algorithm_isSet;

    OAIConfigNodePropertyInteger* password_hash_iterations;
    bool m_password_hash_iterations_isSet;

    OAIConfigNodePropertyInteger* password_salt_size;
    bool m_password_salt_size_isSet;

    OAIConfigNodePropertyBoolean* omit_admin_pw;
    bool m_omit_admin_pw_isSet;

    OAIConfigNodePropertyBoolean* support_auto_save;
    bool m_support_auto_save_isSet;

    OAIConfigNodePropertyInteger* password_max_age;
    bool m_password_max_age_isSet;

    OAIConfigNodePropertyBoolean* initial_password_change;
    bool m_initial_password_change_isSet;

    OAIConfigNodePropertyInteger* password_history_size;
    bool m_password_history_size_isSet;

    OAIConfigNodePropertyBoolean* password_expiry_for_admin;
    bool m_password_expiry_for_admin_isSet;

    OAIConfigNodePropertyInteger* cache_expiration;
    bool m_cache_expiration_isSet;

    OAIConfigNodePropertyBoolean* enable_rfc7613_usercase_mapped_profile;
    bool m_enable_rfc7613_usercase_mapped_profile_isSet;

};

}

#endif /* OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties_H_ */
