/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteLicenseImplLicenseCheckFilterProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::ComAdobeGraniteLicenseImplLicenseCheckFilterProperties()
{
    m_CheckInternvalIsSet = false;
    m_ExcludeIdsIsSet = false;
    m_EncryptPingIsSet = false;
    
}

ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::~ComAdobeGraniteLicenseImplLicenseCheckFilterProperties()
{
}

void ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_CheckInternvalIsSet)
    {
        val["checkInternval"] = ModelBase::toJson(m_CheckInternval);
    }
    if(m_ExcludeIdsIsSet)
    {
        val["excludeIds"] = ModelBase::toJson(m_ExcludeIds);
    }
    if(m_EncryptPingIsSet)
    {
        val["encryptPing"] = ModelBase::toJson(m_EncryptPing);
    }
    

    return val;
}

void ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::fromJson(nlohmann::json& val)
{
    if(val.find("checkInternval") != val.end())
    {
        if(!val["checkInternval"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["checkInternval"]);
            setCheckInternval( newItem );
        }
        
    }
    if(val.find("excludeIds") != val.end())
    {
        if(!val["excludeIds"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["excludeIds"]);
            setExcludeIds( newItem );
        }
        
    }
    if(val.find("encryptPing") != val.end())
    {
        if(!val["encryptPing"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["encryptPing"]);
            setEncryptPing( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::getCheckInternval() const
{
    return m_CheckInternval;
}
void ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::setCheckInternval(ConfigNodePropertyInteger const& value)
{
    m_CheckInternval = value;
    m_CheckInternvalIsSet = true;
}
bool ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::checkInternvalIsSet() const
{
    return m_CheckInternvalIsSet;
}
void ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::unsetCheckInternval()
{
    m_CheckInternvalIsSet = false;
}
ConfigNodePropertyArray ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::getExcludeIds() const
{
    return m_ExcludeIds;
}
void ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::setExcludeIds(ConfigNodePropertyArray const& value)
{
    m_ExcludeIds = value;
    m_ExcludeIdsIsSet = true;
}
bool ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::excludeIdsIsSet() const
{
    return m_ExcludeIdsIsSet;
}
void ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::unsetExcludeIds()
{
    m_ExcludeIdsIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::getEncryptPing() const
{
    return m_EncryptPing;
}
void ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::setEncryptPing(ConfigNodePropertyBoolean const& value)
{
    m_EncryptPing = value;
    m_EncryptPingIsSet = true;
}
bool ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::encryptPingIsSet() const
{
    return m_EncryptPingIsSet;
}
void ComAdobeGraniteLicenseImplLicenseCheckFilterProperties::unsetEncryptPing()
{
    m_EncryptPingIsSet = false;
}

}
}
}
}

