/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties() {
    init();
}

OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::~OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::init() {
    default_transport_agent_to_worker_prefix = new OAIConfigNodePropertyString();
    m_default_transport_agent_to_worker_prefix_isSet = false;
    default_transport_agent_to_master_prefix = new OAIConfigNodePropertyString();
    m_default_transport_agent_to_master_prefix_isSet = false;
    default_transport_input_package = new OAIConfigNodePropertyString();
    m_default_transport_input_package_isSet = false;
    default_transport_output_package = new OAIConfigNodePropertyString();
    m_default_transport_output_package_isSet = false;
    default_transport_replication_synchronous = new OAIConfigNodePropertyBoolean();
    m_default_transport_replication_synchronous_isSet = false;
    default_transport_contentpackage = new OAIConfigNodePropertyBoolean();
    m_default_transport_contentpackage_isSet = false;
    offloading_transporter_default_enabled = new OAIConfigNodePropertyBoolean();
    m_offloading_transporter_default_enabled_isSet = false;
}

void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::cleanup() {
    if(default_transport_agent_to_worker_prefix != nullptr) { 
        delete default_transport_agent_to_worker_prefix;
    }
    if(default_transport_agent_to_master_prefix != nullptr) { 
        delete default_transport_agent_to_master_prefix;
    }
    if(default_transport_input_package != nullptr) { 
        delete default_transport_input_package;
    }
    if(default_transport_output_package != nullptr) { 
        delete default_transport_output_package;
    }
    if(default_transport_replication_synchronous != nullptr) { 
        delete default_transport_replication_synchronous;
    }
    if(default_transport_contentpackage != nullptr) { 
        delete default_transport_contentpackage;
    }
    if(offloading_transporter_default_enabled != nullptr) { 
        delete offloading_transporter_default_enabled;
    }
}

OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties*
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&default_transport_agent_to_worker_prefix, pJson["default.transport.agent-to-worker.prefix"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&default_transport_agent_to_master_prefix, pJson["default.transport.agent-to-master.prefix"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&default_transport_input_package, pJson["default.transport.input.package"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&default_transport_output_package, pJson["default.transport.output.package"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&default_transport_replication_synchronous, pJson["default.transport.replication.synchronous"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&default_transport_contentpackage, pJson["default.transport.contentpackage"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&offloading_transporter_default_enabled, pJson["offloading.transporter.default.enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::asJsonObject() {
    QJsonObject obj;
    if((default_transport_agent_to_worker_prefix != nullptr) && (default_transport_agent_to_worker_prefix->isSet())){
        toJsonValue(QString("default.transport.agent-to-worker.prefix"), default_transport_agent_to_worker_prefix, obj, QString("OAIConfigNodePropertyString"));
    }
    if((default_transport_agent_to_master_prefix != nullptr) && (default_transport_agent_to_master_prefix->isSet())){
        toJsonValue(QString("default.transport.agent-to-master.prefix"), default_transport_agent_to_master_prefix, obj, QString("OAIConfigNodePropertyString"));
    }
    if((default_transport_input_package != nullptr) && (default_transport_input_package->isSet())){
        toJsonValue(QString("default.transport.input.package"), default_transport_input_package, obj, QString("OAIConfigNodePropertyString"));
    }
    if((default_transport_output_package != nullptr) && (default_transport_output_package->isSet())){
        toJsonValue(QString("default.transport.output.package"), default_transport_output_package, obj, QString("OAIConfigNodePropertyString"));
    }
    if((default_transport_replication_synchronous != nullptr) && (default_transport_replication_synchronous->isSet())){
        toJsonValue(QString("default.transport.replication.synchronous"), default_transport_replication_synchronous, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((default_transport_contentpackage != nullptr) && (default_transport_contentpackage->isSet())){
        toJsonValue(QString("default.transport.contentpackage"), default_transport_contentpackage, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((offloading_transporter_default_enabled != nullptr) && (offloading_transporter_default_enabled->isSet())){
        toJsonValue(QString("offloading.transporter.default.enabled"), offloading_transporter_default_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getDefaultTransportAgentToWorkerPrefix() {
    return default_transport_agent_to_worker_prefix;
}
void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setDefaultTransportAgentToWorkerPrefix(OAIConfigNodePropertyString* default_transport_agent_to_worker_prefix) {
    this->default_transport_agent_to_worker_prefix = default_transport_agent_to_worker_prefix;
    this->m_default_transport_agent_to_worker_prefix_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getDefaultTransportAgentToMasterPrefix() {
    return default_transport_agent_to_master_prefix;
}
void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setDefaultTransportAgentToMasterPrefix(OAIConfigNodePropertyString* default_transport_agent_to_master_prefix) {
    this->default_transport_agent_to_master_prefix = default_transport_agent_to_master_prefix;
    this->m_default_transport_agent_to_master_prefix_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getDefaultTransportInputPackage() {
    return default_transport_input_package;
}
void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setDefaultTransportInputPackage(OAIConfigNodePropertyString* default_transport_input_package) {
    this->default_transport_input_package = default_transport_input_package;
    this->m_default_transport_input_package_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getDefaultTransportOutputPackage() {
    return default_transport_output_package;
}
void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setDefaultTransportOutputPackage(OAIConfigNodePropertyString* default_transport_output_package) {
    this->default_transport_output_package = default_transport_output_package;
    this->m_default_transport_output_package_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getDefaultTransportReplicationSynchronous() {
    return default_transport_replication_synchronous;
}
void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setDefaultTransportReplicationSynchronous(OAIConfigNodePropertyBoolean* default_transport_replication_synchronous) {
    this->default_transport_replication_synchronous = default_transport_replication_synchronous;
    this->m_default_transport_replication_synchronous_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getDefaultTransportContentpackage() {
    return default_transport_contentpackage;
}
void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setDefaultTransportContentpackage(OAIConfigNodePropertyBoolean* default_transport_contentpackage) {
    this->default_transport_contentpackage = default_transport_contentpackage;
    this->m_default_transport_contentpackage_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getOffloadingTransporterDefaultEnabled() {
    return offloading_transporter_default_enabled;
}
void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setOffloadingTransporterDefaultEnabled(OAIConfigNodePropertyBoolean* offloading_transporter_default_enabled) {
    this->offloading_transporter_default_enabled = offloading_transporter_default_enabled;
    this->m_offloading_transporter_default_enabled_isSet = true;
}


bool
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(default_transport_agent_to_worker_prefix != nullptr && default_transport_agent_to_worker_prefix->isSet()){ isObjectUpdated = true; break;}
        if(default_transport_agent_to_master_prefix != nullptr && default_transport_agent_to_master_prefix->isSet()){ isObjectUpdated = true; break;}
        if(default_transport_input_package != nullptr && default_transport_input_package->isSet()){ isObjectUpdated = true; break;}
        if(default_transport_output_package != nullptr && default_transport_output_package->isSet()){ isObjectUpdated = true; break;}
        if(default_transport_replication_synchronous != nullptr && default_transport_replication_synchronous->isSet()){ isObjectUpdated = true; break;}
        if(default_transport_contentpackage != nullptr && default_transport_contentpackage->isSet()){ isObjectUpdated = true; break;}
        if(offloading_transporter_default_enabled != nullptr && offloading_transporter_default_enabled->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

