/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingDiscoveryOakConfigProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingDiscoveryOakConfigProperties::OrgApacheSlingDiscoveryOakConfigProperties()
{
    m_ConnectorPingTimeoutIsSet = false;
    m_ConnectorPingIntervalIsSet = false;
    m_DiscoveryLiteCheckIntervalIsSet = false;
    m_ClusterSyncServiceTimeoutIsSet = false;
    m_ClusterSyncServiceIntervalIsSet = false;
    m_EnableSyncTokenIsSet = false;
    m_MinEventDelayIsSet = false;
    m_SocketConnectTimeoutIsSet = false;
    m_SoTimeoutIsSet = false;
    m_TopologyConnectorUrlsIsSet = false;
    m_TopologyConnectorWhitelistIsSet = false;
    m_AutoStopLocalLoopEnabledIsSet = false;
    m_GzipConnectorRequestsEnabledIsSet = false;
    m_HmacEnabledIsSet = false;
    m_EnableEncryptionIsSet = false;
    m_SharedKeyIsSet = false;
    m_HmacSharedKeyTTLIsSet = false;
    m_BackoffStandbyFactorIsSet = false;
    m_BackoffStableFactorIsSet = false;
}

OrgApacheSlingDiscoveryOakConfigProperties::~OrgApacheSlingDiscoveryOakConfigProperties()
{
}

void OrgApacheSlingDiscoveryOakConfigProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingDiscoveryOakConfigProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ConnectorPingTimeoutIsSet)
    {
        val[utility::conversions::to_string_t("connectorPingTimeout")] = ModelBase::toJson(m_ConnectorPingTimeout);
    }
    if(m_ConnectorPingIntervalIsSet)
    {
        val[utility::conversions::to_string_t("connectorPingInterval")] = ModelBase::toJson(m_ConnectorPingInterval);
    }
    if(m_DiscoveryLiteCheckIntervalIsSet)
    {
        val[utility::conversions::to_string_t("discoveryLiteCheckInterval")] = ModelBase::toJson(m_DiscoveryLiteCheckInterval);
    }
    if(m_ClusterSyncServiceTimeoutIsSet)
    {
        val[utility::conversions::to_string_t("clusterSyncServiceTimeout")] = ModelBase::toJson(m_ClusterSyncServiceTimeout);
    }
    if(m_ClusterSyncServiceIntervalIsSet)
    {
        val[utility::conversions::to_string_t("clusterSyncServiceInterval")] = ModelBase::toJson(m_ClusterSyncServiceInterval);
    }
    if(m_EnableSyncTokenIsSet)
    {
        val[utility::conversions::to_string_t("enableSyncToken")] = ModelBase::toJson(m_EnableSyncToken);
    }
    if(m_MinEventDelayIsSet)
    {
        val[utility::conversions::to_string_t("minEventDelay")] = ModelBase::toJson(m_MinEventDelay);
    }
    if(m_SocketConnectTimeoutIsSet)
    {
        val[utility::conversions::to_string_t("socketConnectTimeout")] = ModelBase::toJson(m_SocketConnectTimeout);
    }
    if(m_SoTimeoutIsSet)
    {
        val[utility::conversions::to_string_t("soTimeout")] = ModelBase::toJson(m_SoTimeout);
    }
    if(m_TopologyConnectorUrlsIsSet)
    {
        val[utility::conversions::to_string_t("topologyConnectorUrls")] = ModelBase::toJson(m_TopologyConnectorUrls);
    }
    if(m_TopologyConnectorWhitelistIsSet)
    {
        val[utility::conversions::to_string_t("topologyConnectorWhitelist")] = ModelBase::toJson(m_TopologyConnectorWhitelist);
    }
    if(m_AutoStopLocalLoopEnabledIsSet)
    {
        val[utility::conversions::to_string_t("autoStopLocalLoopEnabled")] = ModelBase::toJson(m_AutoStopLocalLoopEnabled);
    }
    if(m_GzipConnectorRequestsEnabledIsSet)
    {
        val[utility::conversions::to_string_t("gzipConnectorRequestsEnabled")] = ModelBase::toJson(m_GzipConnectorRequestsEnabled);
    }
    if(m_HmacEnabledIsSet)
    {
        val[utility::conversions::to_string_t("hmacEnabled")] = ModelBase::toJson(m_HmacEnabled);
    }
    if(m_EnableEncryptionIsSet)
    {
        val[utility::conversions::to_string_t("enableEncryption")] = ModelBase::toJson(m_EnableEncryption);
    }
    if(m_SharedKeyIsSet)
    {
        val[utility::conversions::to_string_t("sharedKey")] = ModelBase::toJson(m_SharedKey);
    }
    if(m_HmacSharedKeyTTLIsSet)
    {
        val[utility::conversions::to_string_t("hmacSharedKeyTTL")] = ModelBase::toJson(m_HmacSharedKeyTTL);
    }
    if(m_BackoffStandbyFactorIsSet)
    {
        val[utility::conversions::to_string_t("backoffStandbyFactor")] = ModelBase::toJson(m_BackoffStandbyFactor);
    }
    if(m_BackoffStableFactorIsSet)
    {
        val[utility::conversions::to_string_t("backoffStableFactor")] = ModelBase::toJson(m_BackoffStableFactor);
    }

    return val;
}

void OrgApacheSlingDiscoveryOakConfigProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("connectorPingTimeout")))
    {
        if(!val[utility::conversions::to_string_t("connectorPingTimeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("connectorPingTimeout")]);
            setConnectorPingTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("connectorPingInterval")))
    {
        if(!val[utility::conversions::to_string_t("connectorPingInterval")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("connectorPingInterval")]);
            setConnectorPingInterval( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("discoveryLiteCheckInterval")))
    {
        if(!val[utility::conversions::to_string_t("discoveryLiteCheckInterval")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("discoveryLiteCheckInterval")]);
            setDiscoveryLiteCheckInterval( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("clusterSyncServiceTimeout")))
    {
        if(!val[utility::conversions::to_string_t("clusterSyncServiceTimeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("clusterSyncServiceTimeout")]);
            setClusterSyncServiceTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("clusterSyncServiceInterval")))
    {
        if(!val[utility::conversions::to_string_t("clusterSyncServiceInterval")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("clusterSyncServiceInterval")]);
            setClusterSyncServiceInterval( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enableSyncToken")))
    {
        if(!val[utility::conversions::to_string_t("enableSyncToken")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enableSyncToken")]);
            setEnableSyncToken( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("minEventDelay")))
    {
        if(!val[utility::conversions::to_string_t("minEventDelay")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("minEventDelay")]);
            setMinEventDelay( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("socketConnectTimeout")))
    {
        if(!val[utility::conversions::to_string_t("socketConnectTimeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("socketConnectTimeout")]);
            setSocketConnectTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("soTimeout")))
    {
        if(!val[utility::conversions::to_string_t("soTimeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("soTimeout")]);
            setSoTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("topologyConnectorUrls")))
    {
        if(!val[utility::conversions::to_string_t("topologyConnectorUrls")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("topologyConnectorUrls")]);
            setTopologyConnectorUrls( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("topologyConnectorWhitelist")))
    {
        if(!val[utility::conversions::to_string_t("topologyConnectorWhitelist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("topologyConnectorWhitelist")]);
            setTopologyConnectorWhitelist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("autoStopLocalLoopEnabled")))
    {
        if(!val[utility::conversions::to_string_t("autoStopLocalLoopEnabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("autoStopLocalLoopEnabled")]);
            setAutoStopLocalLoopEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("gzipConnectorRequestsEnabled")))
    {
        if(!val[utility::conversions::to_string_t("gzipConnectorRequestsEnabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("gzipConnectorRequestsEnabled")]);
            setGzipConnectorRequestsEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hmacEnabled")))
    {
        if(!val[utility::conversions::to_string_t("hmacEnabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("hmacEnabled")]);
            setHmacEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enableEncryption")))
    {
        if(!val[utility::conversions::to_string_t("enableEncryption")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enableEncryption")]);
            setEnableEncryption( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sharedKey")))
    {
        if(!val[utility::conversions::to_string_t("sharedKey")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("sharedKey")]);
            setSharedKey( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hmacSharedKeyTTL")))
    {
        if(!val[utility::conversions::to_string_t("hmacSharedKeyTTL")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("hmacSharedKeyTTL")]);
            setHmacSharedKeyTTL( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("backoffStandbyFactor")))
    {
        if(!val[utility::conversions::to_string_t("backoffStandbyFactor")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("backoffStandbyFactor")]);
            setBackoffStandbyFactor( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("backoffStableFactor")))
    {
        if(!val[utility::conversions::to_string_t("backoffStableFactor")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("backoffStableFactor")]);
            setBackoffStableFactor( newItem );
        }
    }
}

void OrgApacheSlingDiscoveryOakConfigProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ConnectorPingTimeoutIsSet)
    {
        if (m_ConnectorPingTimeout.get())
        {
            m_ConnectorPingTimeout->toMultipart(multipart, utility::conversions::to_string_t("connectorPingTimeout."));
        }
    }
    if(m_ConnectorPingIntervalIsSet)
    {
        if (m_ConnectorPingInterval.get())
        {
            m_ConnectorPingInterval->toMultipart(multipart, utility::conversions::to_string_t("connectorPingInterval."));
        }
    }
    if(m_DiscoveryLiteCheckIntervalIsSet)
    {
        if (m_DiscoveryLiteCheckInterval.get())
        {
            m_DiscoveryLiteCheckInterval->toMultipart(multipart, utility::conversions::to_string_t("discoveryLiteCheckInterval."));
        }
    }
    if(m_ClusterSyncServiceTimeoutIsSet)
    {
        if (m_ClusterSyncServiceTimeout.get())
        {
            m_ClusterSyncServiceTimeout->toMultipart(multipart, utility::conversions::to_string_t("clusterSyncServiceTimeout."));
        }
    }
    if(m_ClusterSyncServiceIntervalIsSet)
    {
        if (m_ClusterSyncServiceInterval.get())
        {
            m_ClusterSyncServiceInterval->toMultipart(multipart, utility::conversions::to_string_t("clusterSyncServiceInterval."));
        }
    }
    if(m_EnableSyncTokenIsSet)
    {
        if (m_EnableSyncToken.get())
        {
            m_EnableSyncToken->toMultipart(multipart, utility::conversions::to_string_t("enableSyncToken."));
        }
    }
    if(m_MinEventDelayIsSet)
    {
        if (m_MinEventDelay.get())
        {
            m_MinEventDelay->toMultipart(multipart, utility::conversions::to_string_t("minEventDelay."));
        }
    }
    if(m_SocketConnectTimeoutIsSet)
    {
        if (m_SocketConnectTimeout.get())
        {
            m_SocketConnectTimeout->toMultipart(multipart, utility::conversions::to_string_t("socketConnectTimeout."));
        }
    }
    if(m_SoTimeoutIsSet)
    {
        if (m_SoTimeout.get())
        {
            m_SoTimeout->toMultipart(multipart, utility::conversions::to_string_t("soTimeout."));
        }
    }
    if(m_TopologyConnectorUrlsIsSet)
    {
        if (m_TopologyConnectorUrls.get())
        {
            m_TopologyConnectorUrls->toMultipart(multipart, utility::conversions::to_string_t("topologyConnectorUrls."));
        }
    }
    if(m_TopologyConnectorWhitelistIsSet)
    {
        if (m_TopologyConnectorWhitelist.get())
        {
            m_TopologyConnectorWhitelist->toMultipart(multipart, utility::conversions::to_string_t("topologyConnectorWhitelist."));
        }
    }
    if(m_AutoStopLocalLoopEnabledIsSet)
    {
        if (m_AutoStopLocalLoopEnabled.get())
        {
            m_AutoStopLocalLoopEnabled->toMultipart(multipart, utility::conversions::to_string_t("autoStopLocalLoopEnabled."));
        }
    }
    if(m_GzipConnectorRequestsEnabledIsSet)
    {
        if (m_GzipConnectorRequestsEnabled.get())
        {
            m_GzipConnectorRequestsEnabled->toMultipart(multipart, utility::conversions::to_string_t("gzipConnectorRequestsEnabled."));
        }
    }
    if(m_HmacEnabledIsSet)
    {
        if (m_HmacEnabled.get())
        {
            m_HmacEnabled->toMultipart(multipart, utility::conversions::to_string_t("hmacEnabled."));
        }
    }
    if(m_EnableEncryptionIsSet)
    {
        if (m_EnableEncryption.get())
        {
            m_EnableEncryption->toMultipart(multipart, utility::conversions::to_string_t("enableEncryption."));
        }
    }
    if(m_SharedKeyIsSet)
    {
        if (m_SharedKey.get())
        {
            m_SharedKey->toMultipart(multipart, utility::conversions::to_string_t("sharedKey."));
        }
    }
    if(m_HmacSharedKeyTTLIsSet)
    {
        if (m_HmacSharedKeyTTL.get())
        {
            m_HmacSharedKeyTTL->toMultipart(multipart, utility::conversions::to_string_t("hmacSharedKeyTTL."));
        }
    }
    if(m_BackoffStandbyFactorIsSet)
    {
        if (m_BackoffStandbyFactor.get())
        {
            m_BackoffStandbyFactor->toMultipart(multipart, utility::conversions::to_string_t("backoffStandbyFactor."));
        }
    }
    if(m_BackoffStableFactorIsSet)
    {
        if (m_BackoffStableFactor.get())
        {
            m_BackoffStableFactor->toMultipart(multipart, utility::conversions::to_string_t("backoffStableFactor."));
        }
    }
}

void OrgApacheSlingDiscoveryOakConfigProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("connectorPingTimeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("connectorPingTimeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("connectorPingTimeout."));
            setConnectorPingTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("connectorPingInterval")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("connectorPingInterval")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("connectorPingInterval."));
            setConnectorPingInterval( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("discoveryLiteCheckInterval")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("discoveryLiteCheckInterval")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("discoveryLiteCheckInterval."));
            setDiscoveryLiteCheckInterval( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("clusterSyncServiceTimeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("clusterSyncServiceTimeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("clusterSyncServiceTimeout."));
            setClusterSyncServiceTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("clusterSyncServiceInterval")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("clusterSyncServiceInterval")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("clusterSyncServiceInterval."));
            setClusterSyncServiceInterval( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enableSyncToken")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enableSyncToken")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enableSyncToken."));
            setEnableSyncToken( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("minEventDelay")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("minEventDelay")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("minEventDelay."));
            setMinEventDelay( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("socketConnectTimeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("socketConnectTimeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("socketConnectTimeout."));
            setSocketConnectTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("soTimeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("soTimeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("soTimeout."));
            setSoTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("topologyConnectorUrls")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("topologyConnectorUrls")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("topologyConnectorUrls."));
            setTopologyConnectorUrls( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("topologyConnectorWhitelist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("topologyConnectorWhitelist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("topologyConnectorWhitelist."));
            setTopologyConnectorWhitelist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("autoStopLocalLoopEnabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("autoStopLocalLoopEnabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("autoStopLocalLoopEnabled."));
            setAutoStopLocalLoopEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("gzipConnectorRequestsEnabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("gzipConnectorRequestsEnabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("gzipConnectorRequestsEnabled."));
            setGzipConnectorRequestsEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hmacEnabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("hmacEnabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("hmacEnabled."));
            setHmacEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enableEncryption")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enableEncryption")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enableEncryption."));
            setEnableEncryption( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sharedKey")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sharedKey")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sharedKey."));
            setSharedKey( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hmacSharedKeyTTL")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("hmacSharedKeyTTL")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("hmacSharedKeyTTL."));
            setHmacSharedKeyTTL( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("backoffStandbyFactor")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("backoffStandbyFactor")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("backoffStandbyFactor."));
            setBackoffStandbyFactor( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("backoffStableFactor")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("backoffStableFactor")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("backoffStableFactor."));
            setBackoffStableFactor( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDiscoveryOakConfigProperties::getConnectorPingTimeout() const
{
    return m_ConnectorPingTimeout;
}


void OrgApacheSlingDiscoveryOakConfigProperties::setConnectorPingTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ConnectorPingTimeout = value;
    m_ConnectorPingTimeoutIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::connectorPingTimeoutIsSet() const
{
    return m_ConnectorPingTimeoutIsSet;
}

void OrgApacheSlingDiscoveryOakConfigProperties::unsetConnectorPingTimeout()
{
    m_ConnectorPingTimeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDiscoveryOakConfigProperties::getConnectorPingInterval() const
{
    return m_ConnectorPingInterval;
}


void OrgApacheSlingDiscoveryOakConfigProperties::setConnectorPingInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ConnectorPingInterval = value;
    m_ConnectorPingIntervalIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::connectorPingIntervalIsSet() const
{
    return m_ConnectorPingIntervalIsSet;
}

void OrgApacheSlingDiscoveryOakConfigProperties::unsetConnectorPingInterval()
{
    m_ConnectorPingIntervalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDiscoveryOakConfigProperties::getDiscoveryLiteCheckInterval() const
{
    return m_DiscoveryLiteCheckInterval;
}


void OrgApacheSlingDiscoveryOakConfigProperties::setDiscoveryLiteCheckInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_DiscoveryLiteCheckInterval = value;
    m_DiscoveryLiteCheckIntervalIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::discoveryLiteCheckIntervalIsSet() const
{
    return m_DiscoveryLiteCheckIntervalIsSet;
}

void OrgApacheSlingDiscoveryOakConfigProperties::unsetDiscoveryLiteCheckInterval()
{
    m_DiscoveryLiteCheckIntervalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDiscoveryOakConfigProperties::getClusterSyncServiceTimeout() const
{
    return m_ClusterSyncServiceTimeout;
}


void OrgApacheSlingDiscoveryOakConfigProperties::setClusterSyncServiceTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ClusterSyncServiceTimeout = value;
    m_ClusterSyncServiceTimeoutIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::clusterSyncServiceTimeoutIsSet() const
{
    return m_ClusterSyncServiceTimeoutIsSet;
}

void OrgApacheSlingDiscoveryOakConfigProperties::unsetClusterSyncServiceTimeout()
{
    m_ClusterSyncServiceTimeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDiscoveryOakConfigProperties::getClusterSyncServiceInterval() const
{
    return m_ClusterSyncServiceInterval;
}


void OrgApacheSlingDiscoveryOakConfigProperties::setClusterSyncServiceInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ClusterSyncServiceInterval = value;
    m_ClusterSyncServiceIntervalIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::clusterSyncServiceIntervalIsSet() const
{
    return m_ClusterSyncServiceIntervalIsSet;
}

void OrgApacheSlingDiscoveryOakConfigProperties::unsetClusterSyncServiceInterval()
{
    m_ClusterSyncServiceIntervalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDiscoveryOakConfigProperties::getEnableSyncToken() const
{
    return m_EnableSyncToken;
}


void OrgApacheSlingDiscoveryOakConfigProperties::setEnableSyncToken(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EnableSyncToken = value;
    m_EnableSyncTokenIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::enableSyncTokenIsSet() const
{
    return m_EnableSyncTokenIsSet;
}

void OrgApacheSlingDiscoveryOakConfigProperties::unsetEnableSyncToken()
{
    m_EnableSyncTokenIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDiscoveryOakConfigProperties::getMinEventDelay() const
{
    return m_MinEventDelay;
}


void OrgApacheSlingDiscoveryOakConfigProperties::setMinEventDelay(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MinEventDelay = value;
    m_MinEventDelayIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::minEventDelayIsSet() const
{
    return m_MinEventDelayIsSet;
}

void OrgApacheSlingDiscoveryOakConfigProperties::unsetMinEventDelay()
{
    m_MinEventDelayIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDiscoveryOakConfigProperties::getSocketConnectTimeout() const
{
    return m_SocketConnectTimeout;
}


void OrgApacheSlingDiscoveryOakConfigProperties::setSocketConnectTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_SocketConnectTimeout = value;
    m_SocketConnectTimeoutIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::socketConnectTimeoutIsSet() const
{
    return m_SocketConnectTimeoutIsSet;
}

void OrgApacheSlingDiscoveryOakConfigProperties::unsetSocketConnectTimeout()
{
    m_SocketConnectTimeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDiscoveryOakConfigProperties::getSoTimeout() const
{
    return m_SoTimeout;
}


void OrgApacheSlingDiscoveryOakConfigProperties::setSoTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_SoTimeout = value;
    m_SoTimeoutIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::soTimeoutIsSet() const
{
    return m_SoTimeoutIsSet;
}

void OrgApacheSlingDiscoveryOakConfigProperties::unsetSoTimeout()
{
    m_SoTimeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingDiscoveryOakConfigProperties::getTopologyConnectorUrls() const
{
    return m_TopologyConnectorUrls;
}


void OrgApacheSlingDiscoveryOakConfigProperties::setTopologyConnectorUrls(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_TopologyConnectorUrls = value;
    m_TopologyConnectorUrlsIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::topologyConnectorUrlsIsSet() const
{
    return m_TopologyConnectorUrlsIsSet;
}

void OrgApacheSlingDiscoveryOakConfigProperties::unsetTopologyConnectorUrls()
{
    m_TopologyConnectorUrlsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingDiscoveryOakConfigProperties::getTopologyConnectorWhitelist() const
{
    return m_TopologyConnectorWhitelist;
}


void OrgApacheSlingDiscoveryOakConfigProperties::setTopologyConnectorWhitelist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_TopologyConnectorWhitelist = value;
    m_TopologyConnectorWhitelistIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::topologyConnectorWhitelistIsSet() const
{
    return m_TopologyConnectorWhitelistIsSet;
}

void OrgApacheSlingDiscoveryOakConfigProperties::unsetTopologyConnectorWhitelist()
{
    m_TopologyConnectorWhitelistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDiscoveryOakConfigProperties::getAutoStopLocalLoopEnabled() const
{
    return m_AutoStopLocalLoopEnabled;
}


void OrgApacheSlingDiscoveryOakConfigProperties::setAutoStopLocalLoopEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_AutoStopLocalLoopEnabled = value;
    m_AutoStopLocalLoopEnabledIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::autoStopLocalLoopEnabledIsSet() const
{
    return m_AutoStopLocalLoopEnabledIsSet;
}

void OrgApacheSlingDiscoveryOakConfigProperties::unsetAutoStopLocalLoopEnabled()
{
    m_AutoStopLocalLoopEnabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDiscoveryOakConfigProperties::getGzipConnectorRequestsEnabled() const
{
    return m_GzipConnectorRequestsEnabled;
}


void OrgApacheSlingDiscoveryOakConfigProperties::setGzipConnectorRequestsEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_GzipConnectorRequestsEnabled = value;
    m_GzipConnectorRequestsEnabledIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::gzipConnectorRequestsEnabledIsSet() const
{
    return m_GzipConnectorRequestsEnabledIsSet;
}

void OrgApacheSlingDiscoveryOakConfigProperties::unsetGzipConnectorRequestsEnabled()
{
    m_GzipConnectorRequestsEnabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDiscoveryOakConfigProperties::getHmacEnabled() const
{
    return m_HmacEnabled;
}


void OrgApacheSlingDiscoveryOakConfigProperties::setHmacEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_HmacEnabled = value;
    m_HmacEnabledIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::hmacEnabledIsSet() const
{
    return m_HmacEnabledIsSet;
}

void OrgApacheSlingDiscoveryOakConfigProperties::unsetHmacEnabled()
{
    m_HmacEnabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDiscoveryOakConfigProperties::getEnableEncryption() const
{
    return m_EnableEncryption;
}


void OrgApacheSlingDiscoveryOakConfigProperties::setEnableEncryption(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EnableEncryption = value;
    m_EnableEncryptionIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::enableEncryptionIsSet() const
{
    return m_EnableEncryptionIsSet;
}

void OrgApacheSlingDiscoveryOakConfigProperties::unsetEnableEncryption()
{
    m_EnableEncryptionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDiscoveryOakConfigProperties::getSharedKey() const
{
    return m_SharedKey;
}


void OrgApacheSlingDiscoveryOakConfigProperties::setSharedKey(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_SharedKey = value;
    m_SharedKeyIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::sharedKeyIsSet() const
{
    return m_SharedKeyIsSet;
}

void OrgApacheSlingDiscoveryOakConfigProperties::unsetSharedKey()
{
    m_SharedKeyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDiscoveryOakConfigProperties::getHmacSharedKeyTTL() const
{
    return m_HmacSharedKeyTTL;
}


void OrgApacheSlingDiscoveryOakConfigProperties::setHmacSharedKeyTTL(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_HmacSharedKeyTTL = value;
    m_HmacSharedKeyTTLIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::hmacSharedKeyTTLIsSet() const
{
    return m_HmacSharedKeyTTLIsSet;
}

void OrgApacheSlingDiscoveryOakConfigProperties::unsetHmacSharedKeyTTL()
{
    m_HmacSharedKeyTTLIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDiscoveryOakConfigProperties::getBackoffStandbyFactor() const
{
    return m_BackoffStandbyFactor;
}


void OrgApacheSlingDiscoveryOakConfigProperties::setBackoffStandbyFactor(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_BackoffStandbyFactor = value;
    m_BackoffStandbyFactorIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::backoffStandbyFactorIsSet() const
{
    return m_BackoffStandbyFactorIsSet;
}

void OrgApacheSlingDiscoveryOakConfigProperties::unsetBackoffStandbyFactor()
{
    m_BackoffStandbyFactorIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDiscoveryOakConfigProperties::getBackoffStableFactor() const
{
    return m_BackoffStableFactor;
}


void OrgApacheSlingDiscoveryOakConfigProperties::setBackoffStableFactor(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_BackoffStableFactor = value;
    m_BackoffStableFactorIsSet = true;
}
bool OrgApacheSlingDiscoveryOakConfigProperties::backoffStableFactorIsSet() const
{
    return m_BackoffStableFactorIsSet;
}

void OrgApacheSlingDiscoveryOakConfigProperties::unsetBackoffStableFactor()
{
    m_BackoffStableFactorIsSet = false;
}

}
}
}
}

