/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthProviderProperties {
  #[serde(rename = "oauth.config.id")]
  oauth_config_id: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "oauth.client.id")]
  oauth_client_id: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "oauth.client.secret")]
  oauth_client_secret: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "oauth.scope")]
  oauth_scope: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "oauth.config.provider.id")]
  oauth_config_provider_id: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "oauth.create.users")]
  oauth_create_users: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "oauth.userid.property")]
  oauth_userid_property: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "force.strict.username.matching")]
  force_strict_username_matching: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "oauth.encode.userids")]
  oauth_encode_userids: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "oauth.hash.userids")]
  oauth_hash_userids: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "oauth.callBackUrl")]
  oauth_call_back_url: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "oauth.access.token.persist")]
  oauth_access_token_persist: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "oauth.access.token.persist.cookie")]
  oauth_access_token_persist_cookie: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "oauth.csrf.state.protection")]
  oauth_csrf_state_protection: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "oauth.redirect.request.params")]
  oauth_redirect_request_params: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "oauth.config.siblings.allow")]
  oauth_config_siblings_allow: Option<::models::ConfigNodePropertyBoolean>
}

impl ComAdobeGraniteAuthOauthProviderProperties {
  pub fn new() -> ComAdobeGraniteAuthOauthProviderProperties {
    ComAdobeGraniteAuthOauthProviderProperties {
      oauth_config_id: None,
      oauth_client_id: None,
      oauth_client_secret: None,
      oauth_scope: None,
      oauth_config_provider_id: None,
      oauth_create_users: None,
      oauth_userid_property: None,
      force_strict_username_matching: None,
      oauth_encode_userids: None,
      oauth_hash_userids: None,
      oauth_call_back_url: None,
      oauth_access_token_persist: None,
      oauth_access_token_persist_cookie: None,
      oauth_csrf_state_protection: None,
      oauth_redirect_request_params: None,
      oauth_config_siblings_allow: None
    }
  }

  pub fn set_oauth_config_id(&mut self, oauth_config_id: ::models::ConfigNodePropertyString) {
    self.oauth_config_id = Some(oauth_config_id);
  }

  pub fn with_oauth_config_id(mut self, oauth_config_id: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthOauthProviderProperties {
    self.oauth_config_id = Some(oauth_config_id);
    self
  }

  pub fn oauth_config_id(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.oauth_config_id.as_ref()
  }

  pub fn reset_oauth_config_id(&mut self) {
    self.oauth_config_id = None;
  }

  pub fn set_oauth_client_id(&mut self, oauth_client_id: ::models::ConfigNodePropertyString) {
    self.oauth_client_id = Some(oauth_client_id);
  }

  pub fn with_oauth_client_id(mut self, oauth_client_id: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthOauthProviderProperties {
    self.oauth_client_id = Some(oauth_client_id);
    self
  }

  pub fn oauth_client_id(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.oauth_client_id.as_ref()
  }

  pub fn reset_oauth_client_id(&mut self) {
    self.oauth_client_id = None;
  }

  pub fn set_oauth_client_secret(&mut self, oauth_client_secret: ::models::ConfigNodePropertyString) {
    self.oauth_client_secret = Some(oauth_client_secret);
  }

  pub fn with_oauth_client_secret(mut self, oauth_client_secret: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthOauthProviderProperties {
    self.oauth_client_secret = Some(oauth_client_secret);
    self
  }

  pub fn oauth_client_secret(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.oauth_client_secret.as_ref()
  }

  pub fn reset_oauth_client_secret(&mut self) {
    self.oauth_client_secret = None;
  }

  pub fn set_oauth_scope(&mut self, oauth_scope: ::models::ConfigNodePropertyArray) {
    self.oauth_scope = Some(oauth_scope);
  }

  pub fn with_oauth_scope(mut self, oauth_scope: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteAuthOauthProviderProperties {
    self.oauth_scope = Some(oauth_scope);
    self
  }

  pub fn oauth_scope(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.oauth_scope.as_ref()
  }

  pub fn reset_oauth_scope(&mut self) {
    self.oauth_scope = None;
  }

  pub fn set_oauth_config_provider_id(&mut self, oauth_config_provider_id: ::models::ConfigNodePropertyString) {
    self.oauth_config_provider_id = Some(oauth_config_provider_id);
  }

  pub fn with_oauth_config_provider_id(mut self, oauth_config_provider_id: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthOauthProviderProperties {
    self.oauth_config_provider_id = Some(oauth_config_provider_id);
    self
  }

  pub fn oauth_config_provider_id(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.oauth_config_provider_id.as_ref()
  }

  pub fn reset_oauth_config_provider_id(&mut self) {
    self.oauth_config_provider_id = None;
  }

  pub fn set_oauth_create_users(&mut self, oauth_create_users: ::models::ConfigNodePropertyBoolean) {
    self.oauth_create_users = Some(oauth_create_users);
  }

  pub fn with_oauth_create_users(mut self, oauth_create_users: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteAuthOauthProviderProperties {
    self.oauth_create_users = Some(oauth_create_users);
    self
  }

  pub fn oauth_create_users(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.oauth_create_users.as_ref()
  }

  pub fn reset_oauth_create_users(&mut self) {
    self.oauth_create_users = None;
  }

  pub fn set_oauth_userid_property(&mut self, oauth_userid_property: ::models::ConfigNodePropertyString) {
    self.oauth_userid_property = Some(oauth_userid_property);
  }

  pub fn with_oauth_userid_property(mut self, oauth_userid_property: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthOauthProviderProperties {
    self.oauth_userid_property = Some(oauth_userid_property);
    self
  }

  pub fn oauth_userid_property(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.oauth_userid_property.as_ref()
  }

  pub fn reset_oauth_userid_property(&mut self) {
    self.oauth_userid_property = None;
  }

  pub fn set_force_strict_username_matching(&mut self, force_strict_username_matching: ::models::ConfigNodePropertyBoolean) {
    self.force_strict_username_matching = Some(force_strict_username_matching);
  }

  pub fn with_force_strict_username_matching(mut self, force_strict_username_matching: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteAuthOauthProviderProperties {
    self.force_strict_username_matching = Some(force_strict_username_matching);
    self
  }

  pub fn force_strict_username_matching(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.force_strict_username_matching.as_ref()
  }

  pub fn reset_force_strict_username_matching(&mut self) {
    self.force_strict_username_matching = None;
  }

  pub fn set_oauth_encode_userids(&mut self, oauth_encode_userids: ::models::ConfigNodePropertyBoolean) {
    self.oauth_encode_userids = Some(oauth_encode_userids);
  }

  pub fn with_oauth_encode_userids(mut self, oauth_encode_userids: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteAuthOauthProviderProperties {
    self.oauth_encode_userids = Some(oauth_encode_userids);
    self
  }

  pub fn oauth_encode_userids(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.oauth_encode_userids.as_ref()
  }

  pub fn reset_oauth_encode_userids(&mut self) {
    self.oauth_encode_userids = None;
  }

  pub fn set_oauth_hash_userids(&mut self, oauth_hash_userids: ::models::ConfigNodePropertyBoolean) {
    self.oauth_hash_userids = Some(oauth_hash_userids);
  }

  pub fn with_oauth_hash_userids(mut self, oauth_hash_userids: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteAuthOauthProviderProperties {
    self.oauth_hash_userids = Some(oauth_hash_userids);
    self
  }

  pub fn oauth_hash_userids(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.oauth_hash_userids.as_ref()
  }

  pub fn reset_oauth_hash_userids(&mut self) {
    self.oauth_hash_userids = None;
  }

  pub fn set_oauth_call_back_url(&mut self, oauth_call_back_url: ::models::ConfigNodePropertyString) {
    self.oauth_call_back_url = Some(oauth_call_back_url);
  }

  pub fn with_oauth_call_back_url(mut self, oauth_call_back_url: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthOauthProviderProperties {
    self.oauth_call_back_url = Some(oauth_call_back_url);
    self
  }

  pub fn oauth_call_back_url(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.oauth_call_back_url.as_ref()
  }

  pub fn reset_oauth_call_back_url(&mut self) {
    self.oauth_call_back_url = None;
  }

  pub fn set_oauth_access_token_persist(&mut self, oauth_access_token_persist: ::models::ConfigNodePropertyBoolean) {
    self.oauth_access_token_persist = Some(oauth_access_token_persist);
  }

  pub fn with_oauth_access_token_persist(mut self, oauth_access_token_persist: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteAuthOauthProviderProperties {
    self.oauth_access_token_persist = Some(oauth_access_token_persist);
    self
  }

  pub fn oauth_access_token_persist(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.oauth_access_token_persist.as_ref()
  }

  pub fn reset_oauth_access_token_persist(&mut self) {
    self.oauth_access_token_persist = None;
  }

  pub fn set_oauth_access_token_persist_cookie(&mut self, oauth_access_token_persist_cookie: ::models::ConfigNodePropertyBoolean) {
    self.oauth_access_token_persist_cookie = Some(oauth_access_token_persist_cookie);
  }

  pub fn with_oauth_access_token_persist_cookie(mut self, oauth_access_token_persist_cookie: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteAuthOauthProviderProperties {
    self.oauth_access_token_persist_cookie = Some(oauth_access_token_persist_cookie);
    self
  }

  pub fn oauth_access_token_persist_cookie(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.oauth_access_token_persist_cookie.as_ref()
  }

  pub fn reset_oauth_access_token_persist_cookie(&mut self) {
    self.oauth_access_token_persist_cookie = None;
  }

  pub fn set_oauth_csrf_state_protection(&mut self, oauth_csrf_state_protection: ::models::ConfigNodePropertyBoolean) {
    self.oauth_csrf_state_protection = Some(oauth_csrf_state_protection);
  }

  pub fn with_oauth_csrf_state_protection(mut self, oauth_csrf_state_protection: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteAuthOauthProviderProperties {
    self.oauth_csrf_state_protection = Some(oauth_csrf_state_protection);
    self
  }

  pub fn oauth_csrf_state_protection(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.oauth_csrf_state_protection.as_ref()
  }

  pub fn reset_oauth_csrf_state_protection(&mut self) {
    self.oauth_csrf_state_protection = None;
  }

  pub fn set_oauth_redirect_request_params(&mut self, oauth_redirect_request_params: ::models::ConfigNodePropertyBoolean) {
    self.oauth_redirect_request_params = Some(oauth_redirect_request_params);
  }

  pub fn with_oauth_redirect_request_params(mut self, oauth_redirect_request_params: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteAuthOauthProviderProperties {
    self.oauth_redirect_request_params = Some(oauth_redirect_request_params);
    self
  }

  pub fn oauth_redirect_request_params(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.oauth_redirect_request_params.as_ref()
  }

  pub fn reset_oauth_redirect_request_params(&mut self) {
    self.oauth_redirect_request_params = None;
  }

  pub fn set_oauth_config_siblings_allow(&mut self, oauth_config_siblings_allow: ::models::ConfigNodePropertyBoolean) {
    self.oauth_config_siblings_allow = Some(oauth_config_siblings_allow);
  }

  pub fn with_oauth_config_siblings_allow(mut self, oauth_config_siblings_allow: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteAuthOauthProviderProperties {
    self.oauth_config_siblings_allow = Some(oauth_config_siblings_allow);
    self
  }

  pub fn oauth_config_siblings_allow(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.oauth_config_siblings_allow.as_ref()
  }

  pub fn reset_oauth_config_siblings_allow(&mut self) {
    self.oauth_config_siblings_allow = None;
  }

}



