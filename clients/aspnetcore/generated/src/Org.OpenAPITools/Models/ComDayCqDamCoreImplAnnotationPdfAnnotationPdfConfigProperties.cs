/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties : IEquatable<ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties>
    { 
        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfDocumentWidth
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.document.width")]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfDocumentWidth { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfDocumentHeight
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.document.height")]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfDocumentHeight { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfDocumentPaddingHorizontal
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.document.padding.horizontal")]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfDocumentPaddingHorizontal { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfDocumentPaddingVertical
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.document.padding.vertical")]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfDocumentPaddingVertical { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfFontSize
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.font.size")]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfFontSize { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfFontColor
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.font.color")]
        public ConfigNodePropertyString CqDamConfigAnnotationPdfFontColor { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfFontFamily
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.font.family")]
        public ConfigNodePropertyString CqDamConfigAnnotationPdfFontFamily { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfFontLight
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.font.light")]
        public ConfigNodePropertyString CqDamConfigAnnotationPdfFontLight { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfMarginTextImage
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.marginTextImage")]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfMarginTextImage { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfMinImageHeight
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.minImageHeight")]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfMinImageHeight { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfReviewStatusWidth
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.reviewStatus.width")]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfReviewStatusWidth { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfReviewStatusColorApproved
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.reviewStatus.color.approved")]
        public ConfigNodePropertyString CqDamConfigAnnotationPdfReviewStatusColorApproved { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfReviewStatusColorRejected
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.reviewStatus.color.rejected")]
        public ConfigNodePropertyString CqDamConfigAnnotationPdfReviewStatusColorRejected { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfReviewStatusColorChangesRequested
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested")]
        public ConfigNodePropertyString CqDamConfigAnnotationPdfReviewStatusColorChangesRequested { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfAnnotationMarkerWidth
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.annotationMarker.width")]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfAnnotationMarkerWidth { get; set; }

        /// <summary>
        /// Gets or Sets CqDamConfigAnnotationPdfAssetMinheight
        /// </summary>
        [DataMember(Name="cq.dam.config.annotation.pdf.asset.minheight")]
        public ConfigNodePropertyInteger CqDamConfigAnnotationPdfAssetMinheight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties {\n");
            sb.Append("  CqDamConfigAnnotationPdfDocumentWidth: ").Append(CqDamConfigAnnotationPdfDocumentWidth).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfDocumentHeight: ").Append(CqDamConfigAnnotationPdfDocumentHeight).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfDocumentPaddingHorizontal: ").Append(CqDamConfigAnnotationPdfDocumentPaddingHorizontal).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfDocumentPaddingVertical: ").Append(CqDamConfigAnnotationPdfDocumentPaddingVertical).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfFontSize: ").Append(CqDamConfigAnnotationPdfFontSize).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfFontColor: ").Append(CqDamConfigAnnotationPdfFontColor).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfFontFamily: ").Append(CqDamConfigAnnotationPdfFontFamily).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfFontLight: ").Append(CqDamConfigAnnotationPdfFontLight).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfMarginTextImage: ").Append(CqDamConfigAnnotationPdfMarginTextImage).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfMinImageHeight: ").Append(CqDamConfigAnnotationPdfMinImageHeight).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfReviewStatusWidth: ").Append(CqDamConfigAnnotationPdfReviewStatusWidth).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfReviewStatusColorApproved: ").Append(CqDamConfigAnnotationPdfReviewStatusColorApproved).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfReviewStatusColorRejected: ").Append(CqDamConfigAnnotationPdfReviewStatusColorRejected).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfReviewStatusColorChangesRequested: ").Append(CqDamConfigAnnotationPdfReviewStatusColorChangesRequested).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfAnnotationMarkerWidth: ").Append(CqDamConfigAnnotationPdfAnnotationMarkerWidth).Append("\n");
            sb.Append("  CqDamConfigAnnotationPdfAssetMinheight: ").Append(CqDamConfigAnnotationPdfAssetMinheight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CqDamConfigAnnotationPdfDocumentWidth == other.CqDamConfigAnnotationPdfDocumentWidth ||
                    CqDamConfigAnnotationPdfDocumentWidth != null &&
                    CqDamConfigAnnotationPdfDocumentWidth.Equals(other.CqDamConfigAnnotationPdfDocumentWidth)
                ) && 
                (
                    CqDamConfigAnnotationPdfDocumentHeight == other.CqDamConfigAnnotationPdfDocumentHeight ||
                    CqDamConfigAnnotationPdfDocumentHeight != null &&
                    CqDamConfigAnnotationPdfDocumentHeight.Equals(other.CqDamConfigAnnotationPdfDocumentHeight)
                ) && 
                (
                    CqDamConfigAnnotationPdfDocumentPaddingHorizontal == other.CqDamConfigAnnotationPdfDocumentPaddingHorizontal ||
                    CqDamConfigAnnotationPdfDocumentPaddingHorizontal != null &&
                    CqDamConfigAnnotationPdfDocumentPaddingHorizontal.Equals(other.CqDamConfigAnnotationPdfDocumentPaddingHorizontal)
                ) && 
                (
                    CqDamConfigAnnotationPdfDocumentPaddingVertical == other.CqDamConfigAnnotationPdfDocumentPaddingVertical ||
                    CqDamConfigAnnotationPdfDocumentPaddingVertical != null &&
                    CqDamConfigAnnotationPdfDocumentPaddingVertical.Equals(other.CqDamConfigAnnotationPdfDocumentPaddingVertical)
                ) && 
                (
                    CqDamConfigAnnotationPdfFontSize == other.CqDamConfigAnnotationPdfFontSize ||
                    CqDamConfigAnnotationPdfFontSize != null &&
                    CqDamConfigAnnotationPdfFontSize.Equals(other.CqDamConfigAnnotationPdfFontSize)
                ) && 
                (
                    CqDamConfigAnnotationPdfFontColor == other.CqDamConfigAnnotationPdfFontColor ||
                    CqDamConfigAnnotationPdfFontColor != null &&
                    CqDamConfigAnnotationPdfFontColor.Equals(other.CqDamConfigAnnotationPdfFontColor)
                ) && 
                (
                    CqDamConfigAnnotationPdfFontFamily == other.CqDamConfigAnnotationPdfFontFamily ||
                    CqDamConfigAnnotationPdfFontFamily != null &&
                    CqDamConfigAnnotationPdfFontFamily.Equals(other.CqDamConfigAnnotationPdfFontFamily)
                ) && 
                (
                    CqDamConfigAnnotationPdfFontLight == other.CqDamConfigAnnotationPdfFontLight ||
                    CqDamConfigAnnotationPdfFontLight != null &&
                    CqDamConfigAnnotationPdfFontLight.Equals(other.CqDamConfigAnnotationPdfFontLight)
                ) && 
                (
                    CqDamConfigAnnotationPdfMarginTextImage == other.CqDamConfigAnnotationPdfMarginTextImage ||
                    CqDamConfigAnnotationPdfMarginTextImage != null &&
                    CqDamConfigAnnotationPdfMarginTextImage.Equals(other.CqDamConfigAnnotationPdfMarginTextImage)
                ) && 
                (
                    CqDamConfigAnnotationPdfMinImageHeight == other.CqDamConfigAnnotationPdfMinImageHeight ||
                    CqDamConfigAnnotationPdfMinImageHeight != null &&
                    CqDamConfigAnnotationPdfMinImageHeight.Equals(other.CqDamConfigAnnotationPdfMinImageHeight)
                ) && 
                (
                    CqDamConfigAnnotationPdfReviewStatusWidth == other.CqDamConfigAnnotationPdfReviewStatusWidth ||
                    CqDamConfigAnnotationPdfReviewStatusWidth != null &&
                    CqDamConfigAnnotationPdfReviewStatusWidth.Equals(other.CqDamConfigAnnotationPdfReviewStatusWidth)
                ) && 
                (
                    CqDamConfigAnnotationPdfReviewStatusColorApproved == other.CqDamConfigAnnotationPdfReviewStatusColorApproved ||
                    CqDamConfigAnnotationPdfReviewStatusColorApproved != null &&
                    CqDamConfigAnnotationPdfReviewStatusColorApproved.Equals(other.CqDamConfigAnnotationPdfReviewStatusColorApproved)
                ) && 
                (
                    CqDamConfigAnnotationPdfReviewStatusColorRejected == other.CqDamConfigAnnotationPdfReviewStatusColorRejected ||
                    CqDamConfigAnnotationPdfReviewStatusColorRejected != null &&
                    CqDamConfigAnnotationPdfReviewStatusColorRejected.Equals(other.CqDamConfigAnnotationPdfReviewStatusColorRejected)
                ) && 
                (
                    CqDamConfigAnnotationPdfReviewStatusColorChangesRequested == other.CqDamConfigAnnotationPdfReviewStatusColorChangesRequested ||
                    CqDamConfigAnnotationPdfReviewStatusColorChangesRequested != null &&
                    CqDamConfigAnnotationPdfReviewStatusColorChangesRequested.Equals(other.CqDamConfigAnnotationPdfReviewStatusColorChangesRequested)
                ) && 
                (
                    CqDamConfigAnnotationPdfAnnotationMarkerWidth == other.CqDamConfigAnnotationPdfAnnotationMarkerWidth ||
                    CqDamConfigAnnotationPdfAnnotationMarkerWidth != null &&
                    CqDamConfigAnnotationPdfAnnotationMarkerWidth.Equals(other.CqDamConfigAnnotationPdfAnnotationMarkerWidth)
                ) && 
                (
                    CqDamConfigAnnotationPdfAssetMinheight == other.CqDamConfigAnnotationPdfAssetMinheight ||
                    CqDamConfigAnnotationPdfAssetMinheight != null &&
                    CqDamConfigAnnotationPdfAssetMinheight.Equals(other.CqDamConfigAnnotationPdfAssetMinheight)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CqDamConfigAnnotationPdfDocumentWidth != null)
                    hashCode = hashCode * 59 + CqDamConfigAnnotationPdfDocumentWidth.GetHashCode();
                    if (CqDamConfigAnnotationPdfDocumentHeight != null)
                    hashCode = hashCode * 59 + CqDamConfigAnnotationPdfDocumentHeight.GetHashCode();
                    if (CqDamConfigAnnotationPdfDocumentPaddingHorizontal != null)
                    hashCode = hashCode * 59 + CqDamConfigAnnotationPdfDocumentPaddingHorizontal.GetHashCode();
                    if (CqDamConfigAnnotationPdfDocumentPaddingVertical != null)
                    hashCode = hashCode * 59 + CqDamConfigAnnotationPdfDocumentPaddingVertical.GetHashCode();
                    if (CqDamConfigAnnotationPdfFontSize != null)
                    hashCode = hashCode * 59 + CqDamConfigAnnotationPdfFontSize.GetHashCode();
                    if (CqDamConfigAnnotationPdfFontColor != null)
                    hashCode = hashCode * 59 + CqDamConfigAnnotationPdfFontColor.GetHashCode();
                    if (CqDamConfigAnnotationPdfFontFamily != null)
                    hashCode = hashCode * 59 + CqDamConfigAnnotationPdfFontFamily.GetHashCode();
                    if (CqDamConfigAnnotationPdfFontLight != null)
                    hashCode = hashCode * 59 + CqDamConfigAnnotationPdfFontLight.GetHashCode();
                    if (CqDamConfigAnnotationPdfMarginTextImage != null)
                    hashCode = hashCode * 59 + CqDamConfigAnnotationPdfMarginTextImage.GetHashCode();
                    if (CqDamConfigAnnotationPdfMinImageHeight != null)
                    hashCode = hashCode * 59 + CqDamConfigAnnotationPdfMinImageHeight.GetHashCode();
                    if (CqDamConfigAnnotationPdfReviewStatusWidth != null)
                    hashCode = hashCode * 59 + CqDamConfigAnnotationPdfReviewStatusWidth.GetHashCode();
                    if (CqDamConfigAnnotationPdfReviewStatusColorApproved != null)
                    hashCode = hashCode * 59 + CqDamConfigAnnotationPdfReviewStatusColorApproved.GetHashCode();
                    if (CqDamConfigAnnotationPdfReviewStatusColorRejected != null)
                    hashCode = hashCode * 59 + CqDamConfigAnnotationPdfReviewStatusColorRejected.GetHashCode();
                    if (CqDamConfigAnnotationPdfReviewStatusColorChangesRequested != null)
                    hashCode = hashCode * 59 + CqDamConfigAnnotationPdfReviewStatusColorChangesRequested.GetHashCode();
                    if (CqDamConfigAnnotationPdfAnnotationMarkerWidth != null)
                    hashCode = hashCode * 59 + CqDamConfigAnnotationPdfAnnotationMarkerWidth.GetHashCode();
                    if (CqDamConfigAnnotationPdfAssetMinheight != null)
                    hashCode = hashCode * 59 + CqDamConfigAnnotationPdfAssetMinheight.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties left, ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties left, ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
