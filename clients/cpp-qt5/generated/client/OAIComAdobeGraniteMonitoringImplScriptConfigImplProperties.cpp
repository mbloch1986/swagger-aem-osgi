/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties() {
    init();
}

OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::~OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::init() {
    script_filename = new OAIConfigNodePropertyString();
    m_script_filename_isSet = false;
    script_display = new OAIConfigNodePropertyString();
    m_script_display_isSet = false;
    script_path = new OAIConfigNodePropertyString();
    m_script_path_isSet = false;
    script_platform = new OAIConfigNodePropertyArray();
    m_script_platform_isSet = false;
    interval = new OAIConfigNodePropertyInteger();
    m_interval_isSet = false;
    jmxdomain = new OAIConfigNodePropertyString();
    m_jmxdomain_isSet = false;
}

void
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::cleanup() {
    if(script_filename != nullptr) { 
        delete script_filename;
    }
    if(script_display != nullptr) { 
        delete script_display;
    }
    if(script_path != nullptr) { 
        delete script_path;
    }
    if(script_platform != nullptr) { 
        delete script_platform;
    }
    if(interval != nullptr) { 
        delete interval;
    }
    if(jmxdomain != nullptr) { 
        delete jmxdomain;
    }
}

OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties*
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&script_filename, pJson["script.filename"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&script_display, pJson["script.display"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&script_path, pJson["script.path"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&script_platform, pJson["script.platform"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&interval, pJson["interval"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&jmxdomain, pJson["jmxdomain"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::asJsonObject() {
    QJsonObject obj;
    if((script_filename != nullptr) && (script_filename->isSet())){
        toJsonValue(QString("script.filename"), script_filename, obj, QString("OAIConfigNodePropertyString"));
    }
    if((script_display != nullptr) && (script_display->isSet())){
        toJsonValue(QString("script.display"), script_display, obj, QString("OAIConfigNodePropertyString"));
    }
    if((script_path != nullptr) && (script_path->isSet())){
        toJsonValue(QString("script.path"), script_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((script_platform != nullptr) && (script_platform->isSet())){
        toJsonValue(QString("script.platform"), script_platform, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((interval != nullptr) && (interval->isSet())){
        toJsonValue(QString("interval"), interval, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((jmxdomain != nullptr) && (jmxdomain->isSet())){
        toJsonValue(QString("jmxdomain"), jmxdomain, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptFilename() {
    return script_filename;
}
void
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptFilename(OAIConfigNodePropertyString* script_filename) {
    this->script_filename = script_filename;
    this->m_script_filename_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptDisplay() {
    return script_display;
}
void
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptDisplay(OAIConfigNodePropertyString* script_display) {
    this->script_display = script_display;
    this->m_script_display_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptPath() {
    return script_path;
}
void
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptPath(OAIConfigNodePropertyString* script_path) {
    this->script_path = script_path;
    this->m_script_path_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::getScriptPlatform() {
    return script_platform;
}
void
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::setScriptPlatform(OAIConfigNodePropertyArray* script_platform) {
    this->script_platform = script_platform;
    this->m_script_platform_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::getInterval() {
    return interval;
}
void
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::setInterval(OAIConfigNodePropertyInteger* interval) {
    this->interval = interval;
    this->m_interval_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::getJmxdomain() {
    return jmxdomain;
}
void
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::setJmxdomain(OAIConfigNodePropertyString* jmxdomain) {
    this->jmxdomain = jmxdomain;
    this->m_jmxdomain_isSet = true;
}


bool
OAIComAdobeGraniteMonitoringImplScriptConfigImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(script_filename != nullptr && script_filename->isSet()){ isObjectUpdated = true; break;}
        if(script_display != nullptr && script_display->isSet()){ isObjectUpdated = true; break;}
        if(script_path != nullptr && script_path->isSet()){ isObjectUpdated = true; break;}
        if(script_platform != nullptr && script_platform->isSet()){ isObjectUpdated = true; break;}
        if(interval != nullptr && interval->isSet()){ isObjectUpdated = true; break;}
        if(jmxdomain != nullptr && jmxdomain->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

