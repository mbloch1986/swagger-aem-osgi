/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqAuthImplLoginSelectorHandlerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqAuthImplLoginSelectorHandlerProperties::ComDayCqAuthImplLoginSelectorHandlerProperties()
{
    m_PathIsSet = false;
    m_Service_rankingIsSet = false;
    m_Auth_loginselector_mappingsIsSet = false;
    m_Auth_loginselector_changepw_mappingsIsSet = false;
    m_Auth_loginselector_defaultloginpageIsSet = false;
    m_Auth_loginselector_defaultchangepwpageIsSet = false;
    m_Auth_loginselector_handleIsSet = false;
    m_Auth_loginselector_handle_all_extensionsIsSet = false;
}

ComDayCqAuthImplLoginSelectorHandlerProperties::~ComDayCqAuthImplLoginSelectorHandlerProperties()
{
}

void ComDayCqAuthImplLoginSelectorHandlerProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqAuthImplLoginSelectorHandlerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PathIsSet)
    {
        val[utility::conversions::to_string_t("path")] = ModelBase::toJson(m_Path);
    }
    if(m_Service_rankingIsSet)
    {
        val[utility::conversions::to_string_t("service.ranking")] = ModelBase::toJson(m_Service_ranking);
    }
    if(m_Auth_loginselector_mappingsIsSet)
    {
        val[utility::conversions::to_string_t("auth.loginselector.mappings")] = ModelBase::toJson(m_Auth_loginselector_mappings);
    }
    if(m_Auth_loginselector_changepw_mappingsIsSet)
    {
        val[utility::conversions::to_string_t("auth.loginselector.changepw.mappings")] = ModelBase::toJson(m_Auth_loginselector_changepw_mappings);
    }
    if(m_Auth_loginselector_defaultloginpageIsSet)
    {
        val[utility::conversions::to_string_t("auth.loginselector.defaultloginpage")] = ModelBase::toJson(m_Auth_loginselector_defaultloginpage);
    }
    if(m_Auth_loginselector_defaultchangepwpageIsSet)
    {
        val[utility::conversions::to_string_t("auth.loginselector.defaultchangepwpage")] = ModelBase::toJson(m_Auth_loginselector_defaultchangepwpage);
    }
    if(m_Auth_loginselector_handleIsSet)
    {
        val[utility::conversions::to_string_t("auth.loginselector.handle")] = ModelBase::toJson(m_Auth_loginselector_handle);
    }
    if(m_Auth_loginselector_handle_all_extensionsIsSet)
    {
        val[utility::conversions::to_string_t("auth.loginselector.handle.all.extensions")] = ModelBase::toJson(m_Auth_loginselector_handle_all_extensions);
    }

    return val;
}

void ComDayCqAuthImplLoginSelectorHandlerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("path")))
    {
        if(!val[utility::conversions::to_string_t("path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("path")]);
            setPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("service.ranking")))
    {
        if(!val[utility::conversions::to_string_t("service.ranking")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("service.ranking")]);
            setServiceRanking( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auth.loginselector.mappings")))
    {
        if(!val[utility::conversions::to_string_t("auth.loginselector.mappings")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("auth.loginselector.mappings")]);
            setAuthLoginselectorMappings( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auth.loginselector.changepw.mappings")))
    {
        if(!val[utility::conversions::to_string_t("auth.loginselector.changepw.mappings")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("auth.loginselector.changepw.mappings")]);
            setAuthLoginselectorChangepwMappings( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auth.loginselector.defaultloginpage")))
    {
        if(!val[utility::conversions::to_string_t("auth.loginselector.defaultloginpage")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("auth.loginselector.defaultloginpage")]);
            setAuthLoginselectorDefaultloginpage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auth.loginselector.defaultchangepwpage")))
    {
        if(!val[utility::conversions::to_string_t("auth.loginselector.defaultchangepwpage")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("auth.loginselector.defaultchangepwpage")]);
            setAuthLoginselectorDefaultchangepwpage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auth.loginselector.handle")))
    {
        if(!val[utility::conversions::to_string_t("auth.loginselector.handle")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("auth.loginselector.handle")]);
            setAuthLoginselectorHandle( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auth.loginselector.handle.all.extensions")))
    {
        if(!val[utility::conversions::to_string_t("auth.loginselector.handle.all.extensions")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("auth.loginselector.handle.all.extensions")]);
            setAuthLoginselectorHandleAllExtensions( newItem );
        }
    }
}

void ComDayCqAuthImplLoginSelectorHandlerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_PathIsSet)
    {
        if (m_Path.get())
        {
            m_Path->toMultipart(multipart, utility::conversions::to_string_t("path."));
        }
    }
    if(m_Service_rankingIsSet)
    {
        if (m_Service_ranking.get())
        {
            m_Service_ranking->toMultipart(multipart, utility::conversions::to_string_t("service.ranking."));
        }
    }
    if(m_Auth_loginselector_mappingsIsSet)
    {
        if (m_Auth_loginselector_mappings.get())
        {
            m_Auth_loginselector_mappings->toMultipart(multipart, utility::conversions::to_string_t("auth.loginselector.mappings."));
        }
    }
    if(m_Auth_loginselector_changepw_mappingsIsSet)
    {
        if (m_Auth_loginselector_changepw_mappings.get())
        {
            m_Auth_loginselector_changepw_mappings->toMultipart(multipart, utility::conversions::to_string_t("auth.loginselector.changepw.mappings."));
        }
    }
    if(m_Auth_loginselector_defaultloginpageIsSet)
    {
        if (m_Auth_loginselector_defaultloginpage.get())
        {
            m_Auth_loginselector_defaultloginpage->toMultipart(multipart, utility::conversions::to_string_t("auth.loginselector.defaultloginpage."));
        }
    }
    if(m_Auth_loginselector_defaultchangepwpageIsSet)
    {
        if (m_Auth_loginselector_defaultchangepwpage.get())
        {
            m_Auth_loginselector_defaultchangepwpage->toMultipart(multipart, utility::conversions::to_string_t("auth.loginselector.defaultchangepwpage."));
        }
    }
    if(m_Auth_loginselector_handleIsSet)
    {
        if (m_Auth_loginselector_handle.get())
        {
            m_Auth_loginselector_handle->toMultipart(multipart, utility::conversions::to_string_t("auth.loginselector.handle."));
        }
    }
    if(m_Auth_loginselector_handle_all_extensionsIsSet)
    {
        if (m_Auth_loginselector_handle_all_extensions.get())
        {
            m_Auth_loginselector_handle_all_extensions->toMultipart(multipart, utility::conversions::to_string_t("auth.loginselector.handle.all.extensions."));
        }
    }
}

void ComDayCqAuthImplLoginSelectorHandlerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("path")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("path."));
            setPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("service.ranking")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("service.ranking")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("service.ranking."));
            setServiceRanking( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auth.loginselector.mappings")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auth.loginselector.mappings")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auth.loginselector.mappings."));
            setAuthLoginselectorMappings( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auth.loginselector.changepw.mappings")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auth.loginselector.changepw.mappings")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auth.loginselector.changepw.mappings."));
            setAuthLoginselectorChangepwMappings( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auth.loginselector.defaultloginpage")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auth.loginselector.defaultloginpage")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auth.loginselector.defaultloginpage."));
            setAuthLoginselectorDefaultloginpage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auth.loginselector.defaultchangepwpage")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auth.loginselector.defaultchangepwpage")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auth.loginselector.defaultchangepwpage."));
            setAuthLoginselectorDefaultchangepwpage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auth.loginselector.handle")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auth.loginselector.handle")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auth.loginselector.handle."));
            setAuthLoginselectorHandle( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auth.loginselector.handle.all.extensions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auth.loginselector.handle.all.extensions")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auth.loginselector.handle.all.extensions."));
            setAuthLoginselectorHandleAllExtensions( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqAuthImplLoginSelectorHandlerProperties::getPath() const
{
    return m_Path;
}


void ComDayCqAuthImplLoginSelectorHandlerProperties::setPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool ComDayCqAuthImplLoginSelectorHandlerProperties::pathIsSet() const
{
    return m_PathIsSet;
}

void ComDayCqAuthImplLoginSelectorHandlerProperties::unsetPath()
{
    m_PathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqAuthImplLoginSelectorHandlerProperties::getServiceRanking() const
{
    return m_Service_ranking;
}


void ComDayCqAuthImplLoginSelectorHandlerProperties::setServiceRanking(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}
bool ComDayCqAuthImplLoginSelectorHandlerProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}

void ComDayCqAuthImplLoginSelectorHandlerProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorMappings() const
{
    return m_Auth_loginselector_mappings;
}


void ComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorMappings(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Auth_loginselector_mappings = value;
    m_Auth_loginselector_mappingsIsSet = true;
}
bool ComDayCqAuthImplLoginSelectorHandlerProperties::authLoginselectorMappingsIsSet() const
{
    return m_Auth_loginselector_mappingsIsSet;
}

void ComDayCqAuthImplLoginSelectorHandlerProperties::unsetAuth_loginselector_mappings()
{
    m_Auth_loginselector_mappingsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorChangepwMappings() const
{
    return m_Auth_loginselector_changepw_mappings;
}


void ComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorChangepwMappings(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Auth_loginselector_changepw_mappings = value;
    m_Auth_loginselector_changepw_mappingsIsSet = true;
}
bool ComDayCqAuthImplLoginSelectorHandlerProperties::authLoginselectorChangepwMappingsIsSet() const
{
    return m_Auth_loginselector_changepw_mappingsIsSet;
}

void ComDayCqAuthImplLoginSelectorHandlerProperties::unsetAuth_loginselector_changepw_mappings()
{
    m_Auth_loginselector_changepw_mappingsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorDefaultloginpage() const
{
    return m_Auth_loginselector_defaultloginpage;
}


void ComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorDefaultloginpage(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Auth_loginselector_defaultloginpage = value;
    m_Auth_loginselector_defaultloginpageIsSet = true;
}
bool ComDayCqAuthImplLoginSelectorHandlerProperties::authLoginselectorDefaultloginpageIsSet() const
{
    return m_Auth_loginselector_defaultloginpageIsSet;
}

void ComDayCqAuthImplLoginSelectorHandlerProperties::unsetAuth_loginselector_defaultloginpage()
{
    m_Auth_loginselector_defaultloginpageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorDefaultchangepwpage() const
{
    return m_Auth_loginselector_defaultchangepwpage;
}


void ComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorDefaultchangepwpage(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Auth_loginselector_defaultchangepwpage = value;
    m_Auth_loginselector_defaultchangepwpageIsSet = true;
}
bool ComDayCqAuthImplLoginSelectorHandlerProperties::authLoginselectorDefaultchangepwpageIsSet() const
{
    return m_Auth_loginselector_defaultchangepwpageIsSet;
}

void ComDayCqAuthImplLoginSelectorHandlerProperties::unsetAuth_loginselector_defaultchangepwpage()
{
    m_Auth_loginselector_defaultchangepwpageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorHandle() const
{
    return m_Auth_loginselector_handle;
}


void ComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorHandle(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Auth_loginselector_handle = value;
    m_Auth_loginselector_handleIsSet = true;
}
bool ComDayCqAuthImplLoginSelectorHandlerProperties::authLoginselectorHandleIsSet() const
{
    return m_Auth_loginselector_handleIsSet;
}

void ComDayCqAuthImplLoginSelectorHandlerProperties::unsetAuth_loginselector_handle()
{
    m_Auth_loginselector_handleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorHandleAllExtensions() const
{
    return m_Auth_loginselector_handle_all_extensions;
}


void ComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorHandleAllExtensions(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Auth_loginselector_handle_all_extensions = value;
    m_Auth_loginselector_handle_all_extensionsIsSet = true;
}
bool ComDayCqAuthImplLoginSelectorHandlerProperties::authLoginselectorHandleAllExtensionsIsSet() const
{
    return m_Auth_loginselector_handle_all_extensionsIsSet;
}

void ComDayCqAuthImplLoginSelectorHandlerProperties::unsetAuth_loginselector_handle_all_extensions()
{
    m_Auth_loginselector_handle_all_extensionsIsSet = false;
}

}
}
}
}

