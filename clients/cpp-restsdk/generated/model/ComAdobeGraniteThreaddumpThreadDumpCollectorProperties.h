/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteThreaddumpThreadDumpCollectorProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteThreaddumpThreadDumpCollectorProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteThreaddumpThreadDumpCollectorProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteThreaddumpThreadDumpCollectorProperties
    : public ModelBase
{
public:
    ComAdobeGraniteThreaddumpThreadDumpCollectorProperties();
    virtual ~ComAdobeGraniteThreaddumpThreadDumpCollectorProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeGraniteThreaddumpThreadDumpCollectorProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getSchedulerPeriod() const;
    bool schedulerPeriodIsSet() const;
    void unsetScheduler_period();
    void setSchedulerPeriod(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getSchedulerRunOn() const;
    bool schedulerRunOnIsSet() const;
    void unsetScheduler_runOn();
    void setSchedulerRunOn(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGraniteThreaddumpEnabled() const;
    bool graniteThreaddumpEnabledIsSet() const;
    void unsetGranite_threaddump_enabled();
    void setGraniteThreaddumpEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getGraniteThreaddumpDumpsPerFile() const;
    bool graniteThreaddumpDumpsPerFileIsSet() const;
    void unsetGranite_threaddump_dumpsPerFile();
    void setGraniteThreaddumpDumpsPerFile(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGraniteThreaddumpEnableGzipCompression() const;
    bool graniteThreaddumpEnableGzipCompressionIsSet() const;
    void unsetGranite_threaddump_enableGzipCompression();
    void setGraniteThreaddumpEnableGzipCompression(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGraniteThreaddumpEnableDirectoriesCompression() const;
    bool graniteThreaddumpEnableDirectoriesCompressionIsSet() const;
    void unsetGranite_threaddump_enableDirectoriesCompression();
    void setGraniteThreaddumpEnableDirectoriesCompression(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGraniteThreaddumpEnableJStack() const;
    bool graniteThreaddumpEnableJStackIsSet() const;
    void unsetGranite_threaddump_enableJStack();
    void setGraniteThreaddumpEnableJStack(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getGraniteThreaddumpMaxBackupDays() const;
    bool graniteThreaddumpMaxBackupDaysIsSet() const;
    void unsetGranite_threaddump_maxBackupDays();
    void setGraniteThreaddumpMaxBackupDays(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getGraniteThreaddumpBackupCleanTrigger() const;
    bool graniteThreaddumpBackupCleanTriggerIsSet() const;
    void unsetGranite_threaddump_backupCleanTrigger();
    void setGraniteThreaddumpBackupCleanTrigger(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyInteger> m_Scheduler_period;
    bool m_Scheduler_periodIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Scheduler_runOn;
    bool m_Scheduler_runOnIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Granite_threaddump_enabled;
    bool m_Granite_threaddump_enabledIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Granite_threaddump_dumpsPerFile;
    bool m_Granite_threaddump_dumpsPerFileIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Granite_threaddump_enableGzipCompression;
    bool m_Granite_threaddump_enableGzipCompressionIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Granite_threaddump_enableDirectoriesCompression;
    bool m_Granite_threaddump_enableDirectoriesCompressionIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Granite_threaddump_enableJStack;
    bool m_Granite_threaddump_enableJStackIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Granite_threaddump_maxBackupDays;
    bool m_Granite_threaddump_maxBackupDaysIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Granite_threaddump_backupCleanTrigger;
    bool m_Granite_threaddump_backupCleanTriggerIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteThreaddumpThreadDumpCollectorProperties_H_ */
