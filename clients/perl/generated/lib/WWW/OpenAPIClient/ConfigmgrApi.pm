=begin comment

Adobe Experience Manager OSGI config (AEM) API

Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API

OpenAPI spec version: 1.0.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ConfigmgrApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# adaptive_form_and_interactive_communication_web_channel_configuration
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $show_placeholder  (optional)
# @param int $maximum_cache_entries  (optional)
# @param string $af/scripting/compatversion  (optional)
# @param boolean $make_file_name_unique  (optional)
# @param boolean $generating_compliant_data  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'show_placeholder' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'maximum_cache_entries' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'af/scripting/compatversion' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'make_file_name_unique' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'generating_compliant_data' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'adaptive_form_and_interactive_communication_web_channel_configuration' } = { 
    	summary => '',
        params => $params,
        returns => 'AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo',
        };
}
# @return AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo
#
sub adaptive_form_and_interactive_communication_web_channel_configuration {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'show_placeholder'}) {
        $query_params->{'showPlaceholder'} = $self->{api_client}->to_query_value($args{'show_placeholder'});
    }

    # query params
    if ( exists $args{'maximum_cache_entries'}) {
        $query_params->{'maximumCacheEntries'} = $self->{api_client}->to_query_value($args{'maximum_cache_entries'});
    }

    # query params
    if ( exists $args{'af/scripting/compatversion'}) {
        $query_params->{'af.scripting.compatversion'} = $self->{api_client}->to_query_value($args{'af/scripting/compatversion'});
    }

    # query params
    if ( exists $args{'make_file_name_unique'}) {
        $query_params->{'makeFileNameUnique'} = $self->{api_client}->to_query_value($args{'make_file_name_unique'});
    }

    # query params
    if ( exists $args{'generating_compliant_data'}) {
        $query_params->{'generatingCompliantData'} = $self->{api_client}->to_query_value($args{'generating_compliant_data'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo', $response);
    return $_response_object;
}

#
# adaptive_form_and_interactive_communication_web_channel_theme_configur
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $font_list  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'font_list' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'adaptive_form_and_interactive_communication_web_channel_theme_configur' } = { 
    	summary => '',
        params => $params,
        returns => 'AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo',
        };
}
# @return AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo
#
sub adaptive_form_and_interactive_communication_web_channel_theme_configur {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'font_list'}) {
        $query_params->{'fontList'} = $self->{api_client}->to_query_value($args{'font_list'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo', $response);
    return $_response_object;
}

#
# analytics_component_query_cache_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $cq/analytics/component/query/cache/size  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/analytics/component/query/cache/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'analytics_component_query_cache_service' } = { 
    	summary => '',
        params => $params,
        returns => 'AnalyticsComponentQueryCacheServiceInfo',
        };
}
# @return AnalyticsComponentQueryCacheServiceInfo
#
sub analytics_component_query_cache_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/Analytics Component Query Cache Service';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/analytics/component/query/cache/size'}) {
        $query_params->{'cq.analytics.component.query.cache.size'} = $self->{api_client}->to_query_value($args{'cq/analytics/component/query/cache/size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AnalyticsComponentQueryCacheServiceInfo', $response);
    return $_response_object;
}

#
# apache_sling_health_check_result_html_serializer
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $style_string  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'style_string' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'apache_sling_health_check_result_html_serializer' } = { 
    	summary => '',
        params => $params,
        returns => 'ApacheSlingHealthCheckResultHTMLSerializerInfo',
        };
}
# @return ApacheSlingHealthCheckResultHTMLSerializerInfo
#
sub apache_sling_health_check_result_html_serializer {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/Apache Sling Health Check Result HTML Serializer';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'style_string'}) {
        $query_params->{'styleString'} = $self->{api_client}->to_query_value($args{'style_string'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ApacheSlingHealthCheckResultHTMLSerializerInfo', $response);
    return $_response_object;
}

#
# com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $forms_manager_config/include_ootb_templates  (optional)
# @param boolean $forms_manager_config/include_deprecated_templates  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'forms_manager_config/include_ootb_templates' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'forms_manager_config/include_deprecated_templates' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo',
        };
}
# @return ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo
#
sub com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'forms_manager_config/include_ootb_templates'}) {
        $query_params->{'formsManagerConfig.includeOOTBTemplates'} = $self->{api_client}->to_query_value($args{'forms_manager_config/include_ootb_templates'});
    }

    # query params
    if ( exists $args{'forms_manager_config/include_deprecated_templates'}) {
        $query_params->{'formsManagerConfig.includeDeprecatedTemplates'} = $self->{api_client}->to_query_value($args{'forms_manager_config/include_deprecated_templates'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo', $response);
    return $_response_object;
}

#
# com_adobe_aem_transaction_core_impl_transaction_recorder
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $is_transaction_recording_enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'is_transaction_recording_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_aem_transaction_core_impl_transaction_recorder' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeAemTransactionCoreImplTransactionRecorderInfo',
        };
}
# @return ComAdobeAemTransactionCoreImplTransactionRecorderInfo
#
sub com_adobe_aem_transaction_core_impl_transaction_recorder {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'is_transaction_recording_enabled'}) {
        $query_params->{'isTransactionRecordingEnabled'} = $self->{api_client}->to_query_value($args{'is_transaction_recording_enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeAemTransactionCoreImplTransactionRecorderInfo', $response);
    return $_response_object;
}

#
# com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $hc/name  (optional)
# @param ARRAY[string] $hc/tags  (optional)
# @param string $hc/mbean/name  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/mbean/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo',
        };
}
# @return ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo
#
sub com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/name'}) {
        $query_params->{'hc.name'} = $self->{api_client}->to_query_value($args{'hc/name'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    # query params
    if ( exists $args{'hc/mbean/name'}) {
        $query_params->{'hc.mbean.name'} = $self->{api_client}->to_query_value($args{'hc/mbean/name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo', $response);
    return $_response_object;
}

#
# com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $hc/name  (optional)
# @param ARRAY[string] $hc/tags  (optional)
# @param string $hc/mbean/name  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/mbean/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo',
        };
}
# @return ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo
#
sub com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/name'}) {
        $query_params->{'hc.name'} = $self->{api_client}->to_query_value($args{'hc/name'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    # query params
    if ( exists $args{'hc/mbean/name'}) {
        $query_params->{'hc.mbean.name'} = $self->{api_client}->to_query_value($args{'hc/mbean/name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo', $response);
    return $_response_object;
}

#
# com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $pre_upgrade/maintenance/tasks  (optional)
# @param ARRAY[string] $pre_upgrade/hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'pre_upgrade/maintenance/tasks' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'pre_upgrade/hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo',
        };
}
# @return ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo
#
sub com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'pre_upgrade/maintenance/tasks'}) {
        $query_params->{'pre-upgrade.maintenance.tasks'} = $self->{api_client}->to_query_value($args{'pre_upgrade/maintenance/tasks'});
    }

    # query params
    if ( exists $args{'pre_upgrade/hc/tags'}) {
        $query_params->{'pre-upgrade.hc.tags'} = $self->{api_client}->to_query_value($args{'pre_upgrade/hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $root/path  (optional)
# @param boolean $fix/inconsistencies  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'root/path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'fix/inconsistencies' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo',
        };
}
# @return ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo
#
sub com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'root/path'}) {
        $query_params->{'root.path'} = $self->{api_client}->to_query_value($args{'root/path'});
    }

    # query params
    if ( exists $args{'fix/inconsistencies'}) {
        $query_params->{'fix.inconsistencies'} = $self->{api_client}->to_query_value($args{'fix/inconsistencies'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_account_api_account_management_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $cq/accountmanager/token/validity/period  (optional)
# @param string $cq/accountmanager/config/requestnewaccount/mail  (optional)
# @param string $cq/accountmanager/config/requestnewpwd/mail  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/accountmanager/token/validity/period' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/accountmanager/config/requestnewaccount/mail' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/accountmanager/config/requestnewpwd/mail' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_account_api_account_management_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqAccountApiAccountManagementServiceInfo',
        };
}
# @return ComAdobeCqAccountApiAccountManagementServiceInfo
#
sub com_adobe_cq_account_api_account_management_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/accountmanager/token/validity/period'}) {
        $query_params->{'cq.accountmanager.token.validity.period'} = $self->{api_client}->to_query_value($args{'cq/accountmanager/token/validity/period'});
    }

    # query params
    if ( exists $args{'cq/accountmanager/config/requestnewaccount/mail'}) {
        $query_params->{'cq.accountmanager.config.requestnewaccount.mail'} = $self->{api_client}->to_query_value($args{'cq/accountmanager/config/requestnewaccount/mail'});
    }

    # query params
    if ( exists $args{'cq/accountmanager/config/requestnewpwd/mail'}) {
        $query_params->{'cq.accountmanager.config.requestnewpwd.mail'} = $self->{api_client}->to_query_value($args{'cq/accountmanager/config/requestnewpwd/mail'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqAccountApiAccountManagementServiceInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_account_impl_account_management_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $cq/accountmanager/config/informnewaccount/mail  (optional)
# @param string $cq/accountmanager/config/informnewpwd/mail  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/accountmanager/config/informnewaccount/mail' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/accountmanager/config/informnewpwd/mail' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_account_impl_account_management_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqAccountImplAccountManagementServletInfo',
        };
}
# @return ComAdobeCqAccountImplAccountManagementServletInfo
#
sub com_adobe_cq_account_impl_account_management_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/accountmanager/config/informnewaccount/mail'}) {
        $query_params->{'cq.accountmanager.config.informnewaccount.mail'} = $self->{api_client}->to_query_value($args{'cq/accountmanager/config/informnewaccount/mail'});
    }

    # query params
    if ( exists $args{'cq/accountmanager/config/informnewpwd/mail'}) {
        $query_params->{'cq.accountmanager.config.informnewpwd.mail'} = $self->{api_client}->to_query_value($args{'cq/accountmanager/config/informnewpwd/mail'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqAccountImplAccountManagementServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_address_impl_location_location_list_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $cq/address/location/default/max_results  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/address/location/default/max_results' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_address_impl_location_location_list_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqAddressImplLocationLocationListServletInfo',
        };
}
# @return ComAdobeCqAddressImplLocationLocationListServletInfo
#
sub com_adobe_cq_address_impl_location_location_list_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/address/location/default/max_results'}) {
        $query_params->{'cq.address.location.default.maxResults'} = $self->{api_client}->to_query_value($args{'cq/address/location/default/max_results'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqAddressImplLocationLocationListServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_audit_purge_dam
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $auditlog/rule/name  (optional)
# @param string $auditlog/rule/contentpath  (optional)
# @param int $auditlog/rule/minimumage  (optional)
# @param string $auditlog/rule/types  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'auditlog/rule/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auditlog/rule/contentpath' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auditlog/rule/minimumage' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'auditlog/rule/types' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_audit_purge_dam' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqAuditPurgeDamInfo',
        };
}
# @return ComAdobeCqAuditPurgeDamInfo
#
sub com_adobe_cq_audit_purge_dam {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.audit.purge.Dam';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'auditlog/rule/name'}) {
        $query_params->{'auditlog.rule.name'} = $self->{api_client}->to_query_value($args{'auditlog/rule/name'});
    }

    # query params
    if ( exists $args{'auditlog/rule/contentpath'}) {
        $query_params->{'auditlog.rule.contentpath'} = $self->{api_client}->to_query_value($args{'auditlog/rule/contentpath'});
    }

    # query params
    if ( exists $args{'auditlog/rule/minimumage'}) {
        $query_params->{'auditlog.rule.minimumage'} = $self->{api_client}->to_query_value($args{'auditlog/rule/minimumage'});
    }

    # query params
    if ( exists $args{'auditlog/rule/types'}) {
        $query_params->{'auditlog.rule.types'} = $self->{api_client}->to_query_value($args{'auditlog/rule/types'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqAuditPurgeDamInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_audit_purge_pages
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $auditlog/rule/name  (optional)
# @param string $auditlog/rule/contentpath  (optional)
# @param int $auditlog/rule/minimumage  (optional)
# @param string $auditlog/rule/types  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'auditlog/rule/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auditlog/rule/contentpath' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auditlog/rule/minimumage' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'auditlog/rule/types' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_audit_purge_pages' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqAuditPurgePagesInfo',
        };
}
# @return ComAdobeCqAuditPurgePagesInfo
#
sub com_adobe_cq_audit_purge_pages {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.audit.purge.Pages';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'auditlog/rule/name'}) {
        $query_params->{'auditlog.rule.name'} = $self->{api_client}->to_query_value($args{'auditlog/rule/name'});
    }

    # query params
    if ( exists $args{'auditlog/rule/contentpath'}) {
        $query_params->{'auditlog.rule.contentpath'} = $self->{api_client}->to_query_value($args{'auditlog/rule/contentpath'});
    }

    # query params
    if ( exists $args{'auditlog/rule/minimumage'}) {
        $query_params->{'auditlog.rule.minimumage'} = $self->{api_client}->to_query_value($args{'auditlog/rule/minimumage'});
    }

    # query params
    if ( exists $args{'auditlog/rule/types'}) {
        $query_params->{'auditlog.rule.types'} = $self->{api_client}->to_query_value($args{'auditlog/rule/types'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqAuditPurgePagesInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_audit_purge_replication
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $auditlog/rule/name  (optional)
# @param string $auditlog/rule/contentpath  (optional)
# @param int $auditlog/rule/minimumage  (optional)
# @param string $auditlog/rule/types  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'auditlog/rule/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auditlog/rule/contentpath' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auditlog/rule/minimumage' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'auditlog/rule/types' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_audit_purge_replication' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqAuditPurgeReplicationInfo',
        };
}
# @return ComAdobeCqAuditPurgeReplicationInfo
#
sub com_adobe_cq_audit_purge_replication {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.audit.purge.Replication';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'auditlog/rule/name'}) {
        $query_params->{'auditlog.rule.name'} = $self->{api_client}->to_query_value($args{'auditlog/rule/name'});
    }

    # query params
    if ( exists $args{'auditlog/rule/contentpath'}) {
        $query_params->{'auditlog.rule.contentpath'} = $self->{api_client}->to_query_value($args{'auditlog/rule/contentpath'});
    }

    # query params
    if ( exists $args{'auditlog/rule/minimumage'}) {
        $query_params->{'auditlog.rule.minimumage'} = $self->{api_client}->to_query_value($args{'auditlog/rule/minimumage'});
    }

    # query params
    if ( exists $args{'auditlog/rule/types'}) {
        $query_params->{'auditlog.rule.types'} = $self->{api_client}->to_query_value($args{'auditlog/rule/types'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqAuditPurgeReplicationInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $keypair/id  (optional)
# @param string $keypair/alias  (optional)
# @param ARRAY[string] $cdnrewriter/attributes  (optional)
# @param string $cdn/rewriter/distribution/domain  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'keypair/id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'keypair/alias' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cdnrewriter/attributes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cdn/rewriter/distribution/domain' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo',
        };
}
# @return ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo
#
sub com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'keypair/id'}) {
        $query_params->{'keypair.id'} = $self->{api_client}->to_query_value($args{'keypair/id'});
    }

    # query params
    if ( exists $args{'keypair/alias'}) {
        $query_params->{'keypair.alias'} = $self->{api_client}->to_query_value($args{'keypair/alias'});
    }

    # query params
    if ( exists $args{'cdnrewriter/attributes'}) {
        $query_params->{'cdnrewriter.attributes'} = $self->{api_client}->to_query_value($args{'cdnrewriter/attributes'});
    }

    # query params
    if ( exists $args{'cdn/rewriter/distribution/domain'}) {
        $query_params->{'cdn.rewriter.distribution.domain'} = $self->{api_client}->to_query_value($args{'cdn/rewriter/distribution/domain'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $cdn/config/distribution/domain  (optional)
# @param boolean $cdn/config/enable/rewriting  (optional)
# @param ARRAY[string] $cdn/config/path/prefixes  (optional)
# @param int $cdn/config/cdnttl  (optional)
# @param string $cdn/config/application/protocol  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cdn/config/distribution/domain' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cdn/config/enable/rewriting' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cdn/config/path/prefixes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cdn/config/cdnttl' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cdn/config/application/protocol' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo',
        };
}
# @return ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo
#
sub com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cdn/config/distribution/domain'}) {
        $query_params->{'cdn.config.distribution.domain'} = $self->{api_client}->to_query_value($args{'cdn/config/distribution/domain'});
    }

    # query params
    if ( exists $args{'cdn/config/enable/rewriting'}) {
        $query_params->{'cdn.config.enable.rewriting'} = $self->{api_client}->to_query_value($args{'cdn/config/enable/rewriting'});
    }

    # query params
    if ( exists $args{'cdn/config/path/prefixes'}) {
        $query_params->{'cdn.config.path.prefixes'} = $self->{api_client}->to_query_value($args{'cdn/config/path/prefixes'});
    }

    # query params
    if ( exists $args{'cdn/config/cdnttl'}) {
        $query_params->{'cdn.config.cdnttl'} = $self->{api_client}->to_query_value($args{'cdn/config/cdnttl'});
    }

    # query params
    if ( exists $args{'cdn/config/application/protocol'}) {
        $query_params->{'cdn.config.application.protocol'} = $self->{api_client}->to_query_value($args{'cdn/config/application/protocol'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_cdn_rewriter_impl_cdn_rewriter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param ARRAY[string] $cdnrewriter/attributes  (optional)
# @param string $cdn/rewriter/distribution/domain  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cdnrewriter/attributes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cdn/rewriter/distribution/domain' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_cdn_rewriter_impl_cdn_rewriter' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqCdnRewriterImplCDNRewriterInfo',
        };
}
# @return ComAdobeCqCdnRewriterImplCDNRewriterInfo
#
sub com_adobe_cq_cdn_rewriter_impl_cdn_rewriter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'cdnrewriter/attributes'}) {
        $query_params->{'cdnrewriter.attributes'} = $self->{api_client}->to_query_value($args{'cdnrewriter/attributes'});
    }

    # query params
    if ( exists $args{'cdn/rewriter/distribution/domain'}) {
        $query_params->{'cdn.rewriter.distribution.domain'} = $self->{api_client}->to_query_value($args{'cdn/rewriter/distribution/domain'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqCdnRewriterImplCDNRewriterInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $flush/agents  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'flush/agents' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo',
        };
}
# @return ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo
#
sub com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'flush/agents'}) {
        $query_params->{'flush.agents'} = $self->{api_client}->to_query_value($args{'flush/agents'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_commerce_impl_asset_dynamic_image_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/commerce/asset/handler/active  (optional)
# @param string $cq/commerce/asset/handler/name  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/commerce/asset/handler/active' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cq/commerce/asset/handler/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_commerce_impl_asset_dynamic_image_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo',
        };
}
# @return ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo
#
sub com_adobe_cq_commerce_impl_asset_dynamic_image_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/commerce/asset/handler/active'}) {
        $query_params->{'cq.commerce.asset.handler.active'} = $self->{api_client}->to_query_value($args{'cq/commerce/asset/handler/active'});
    }

    # query params
    if ( exists $args{'cq/commerce/asset/handler/name'}) {
        $query_params->{'cq.commerce.asset.handler.name'} = $self->{api_client}->to_query_value($args{'cq/commerce/asset/handler/name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $cq/commerce/asset/handler/fallback  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/commerce/asset/handler/fallback' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo',
        };
}
# @return ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo
#
sub com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/commerce/asset/handler/fallback'}) {
        $query_params->{'cq.commerce.asset.handler.fallback'} = $self->{api_client}->to_query_value($args{'cq/commerce/asset/handler/fallback'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_commerce_impl_asset_static_image_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/commerce/asset/handler/active  (optional)
# @param string $cq/commerce/asset/handler/name  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/commerce/asset/handler/active' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cq/commerce/asset/handler/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_commerce_impl_asset_static_image_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqCommerceImplAssetStaticImageHandlerInfo',
        };
}
# @return ComAdobeCqCommerceImplAssetStaticImageHandlerInfo
#
sub com_adobe_cq_commerce_impl_asset_static_image_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/commerce/asset/handler/active'}) {
        $query_params->{'cq.commerce.asset.handler.active'} = $self->{api_client}->to_query_value($args{'cq/commerce/asset/handler/active'});
    }

    # query params
    if ( exists $args{'cq/commerce/asset/handler/name'}) {
        $query_params->{'cq.commerce.asset.handler.name'} = $self->{api_client}->to_query_value($args{'cq/commerce/asset/handler/name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqCommerceImplAssetStaticImageHandlerInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_commerce_impl_asset_video_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/commerce/asset/handler/active  (optional)
# @param string $cq/commerce/asset/handler/name  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/commerce/asset/handler/active' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cq/commerce/asset/handler/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_commerce_impl_asset_video_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqCommerceImplAssetVideoHandlerInfo',
        };
}
# @return ComAdobeCqCommerceImplAssetVideoHandlerInfo
#
sub com_adobe_cq_commerce_impl_asset_video_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/commerce/asset/handler/active'}) {
        $query_params->{'cq.commerce.asset.handler.active'} = $self->{api_client}->to_query_value($args{'cq/commerce/asset/handler/active'});
    }

    # query params
    if ( exists $args{'cq/commerce/asset/handler/name'}) {
        $query_params->{'cq.commerce.asset.handler.name'} = $self->{api_client}->to_query_value($args{'cq/commerce/asset/handler/name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqCommerceImplAssetVideoHandlerInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_commerce_impl_promotion_promotion_manager_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $cq/commerce/promotion/root  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/commerce/promotion/root' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_commerce_impl_promotion_promotion_manager_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo',
        };
}
# @return ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo
#
sub com_adobe_cq_commerce_impl_promotion_promotion_manager_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/commerce/promotion/root'}) {
        $query_params->{'cq.commerce.promotion.root'} = $self->{api_client}->to_query_value($args{'cq/commerce/promotion/root'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $cq/commerce/cataloggenerator/bucketsize  (optional)
# @param string $cq/commerce/cataloggenerator/bucketname  (optional)
# @param ARRAY[string] $cq/commerce/cataloggenerator/excludedtemplateproperties  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/commerce/cataloggenerator/bucketsize' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/commerce/cataloggenerator/bucketname' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/commerce/cataloggenerator/excludedtemplateproperties' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo',
        };
}
# @return ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo
#
sub com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/commerce/cataloggenerator/bucketsize'}) {
        $query_params->{'cq.commerce.cataloggenerator.bucketsize'} = $self->{api_client}->to_query_value($args{'cq/commerce/cataloggenerator/bucketsize'});
    }

    # query params
    if ( exists $args{'cq/commerce/cataloggenerator/bucketname'}) {
        $query_params->{'cq.commerce.cataloggenerator.bucketname'} = $self->{api_client}->to_query_value($args{'cq/commerce/cataloggenerator/bucketname'});
    }

    # query params
    if ( exists $args{'cq/commerce/cataloggenerator/excludedtemplateproperties'}) {
        $query_params->{'cq.commerce.cataloggenerator.excludedtemplateproperties'} = $self->{api_client}->to_query_value($args{'cq/commerce/cataloggenerator/excludedtemplateproperties'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_commerce_pim_impl_page_event_listener
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/commerce/pageeventlistener/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/commerce/pageeventlistener/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_commerce_pim_impl_page_event_listener' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqCommercePimImplPageEventListenerInfo',
        };
}
# @return ComAdobeCqCommercePimImplPageEventListenerInfo
#
sub com_adobe_cq_commerce_pim_impl_page_event_listener {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/commerce/pageeventlistener/enabled'}) {
        $query_params->{'cq.commerce.pageeventlistener.enabled'} = $self->{api_client}->to_query_value($args{'cq/commerce/pageeventlistener/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqCommercePimImplPageEventListenerInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $feed_generator_algorithm  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'feed_generator_algorithm' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo',
        };
}
# @return ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo
#
sub com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'feed_generator_algorithm'}) {
        $query_params->{'Feed generator algorithm'} = $self->{api_client}->to_query_value($args{'feed_generator_algorithm'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_contentinsight_impl_reporting_services_settings_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $reportingservices/url  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'reportingservices/url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_contentinsight_impl_reporting_services_settings_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo',
        };
}
# @return ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo
#
sub com_adobe_cq_contentinsight_impl_reporting_services_settings_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'reportingservices/url'}) {
        $query_params->{'reportingservices.url'} = $self->{api_client}->to_query_value($args{'reportingservices/url'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $brightedge/url  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'brightedge/url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo',
        };
}
# @return ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo
#
sub com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'brightedge/url'}) {
        $query_params->{'brightedge.url'} = $self->{api_client}->to_query_value($args{'brightedge/url'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $reportingservices/proxy/whitelist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'reportingservices/proxy/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo',
        };
}
# @return ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo
#
sub com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'reportingservices/proxy/whitelist'}) {
        $query_params->{'reportingservices.proxy.whitelist'} = $self->{api_client}->to_query_value($args{'reportingservices/proxy/whitelist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_dam_cfm_impl_component_component_config_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $dam/cfm/component/resource_type  (optional)
# @param string $dam/cfm/component/file_reference_prop  (optional)
# @param string $dam/cfm/component/elements_prop  (optional)
# @param string $dam/cfm/component/variation_prop  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'dam/cfm/component/resource_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'dam/cfm/component/file_reference_prop' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'dam/cfm/component/elements_prop' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'dam/cfm/component/variation_prop' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_dam_cfm_impl_component_component_config_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqDamCfmImplComponentComponentConfigImplInfo',
        };
}
# @return ComAdobeCqDamCfmImplComponentComponentConfigImplInfo
#
sub com_adobe_cq_dam_cfm_impl_component_component_config_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'dam/cfm/component/resource_type'}) {
        $query_params->{'dam.cfm.component.resourceType'} = $self->{api_client}->to_query_value($args{'dam/cfm/component/resource_type'});
    }

    # query params
    if ( exists $args{'dam/cfm/component/file_reference_prop'}) {
        $query_params->{'dam.cfm.component.fileReferenceProp'} = $self->{api_client}->to_query_value($args{'dam/cfm/component/file_reference_prop'});
    }

    # query params
    if ( exists $args{'dam/cfm/component/elements_prop'}) {
        $query_params->{'dam.cfm.component.elementsProp'} = $self->{api_client}->to_query_value($args{'dam/cfm/component/elements_prop'});
    }

    # query params
    if ( exists $args{'dam/cfm/component/variation_prop'}) {
        $query_params->{'dam.cfm.component.variationProp'} = $self->{api_client}->to_query_value($args{'dam/cfm/component/variation_prop'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqDamCfmImplComponentComponentConfigImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_dam_cfm_impl_conf_feature_config_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $dam/cfm/resource_types  (optional)
# @param ARRAY[string] $dam/cfm/reference_properties  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'dam/cfm/resource_types' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'dam/cfm/reference_properties' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_dam_cfm_impl_conf_feature_config_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqDamCfmImplConfFeatureConfigImplInfo',
        };
}
# @return ComAdobeCqDamCfmImplConfFeatureConfigImplInfo
#
sub com_adobe_cq_dam_cfm_impl_conf_feature_config_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'dam/cfm/resource_types'}) {
        $query_params->{'dam.cfm.resourceTypes'} = $self->{api_client}->to_query_value($args{'dam/cfm/resource_types'});
    }

    # query params
    if ( exists $args{'dam/cfm/reference_properties'}) {
        $query_params->{'dam.cfm.referenceProperties'} = $self->{api_client}->to_query_value($args{'dam/cfm/reference_properties'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqDamCfmImplConfFeatureConfigImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $pipeline/type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'pipeline/type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo',
        };
}
# @return ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo
#
sub com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'pipeline/type'}) {
        $query_params->{'pipeline.type'} = $self->{api_client}->to_query_value($args{'pipeline/type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $pipeline/type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'pipeline/type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo',
        };
}
# @return ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo
#
sub com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'pipeline/type'}) {
        $query_params->{'pipeline.type'} = $self->{api_client}->to_query_value($args{'pipeline/type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $pipeline/type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'pipeline/type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo',
        };
}
# @return ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo
#
sub com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'pipeline/type'}) {
        $query_params->{'pipeline.type'} = $self->{api_client}->to_query_value($args{'pipeline/type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $max_memory  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'max_memory' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqDamDmProcessImagePTiffManagerImplInfo',
        };
}
# @return ComAdobeCqDamDmProcessImagePTiffManagerImplInfo
#
sub com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'max_memory'}) {
        $query_params->{'maxMemory'} = $self->{api_client}->to_query_value($args{'max_memory'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqDamDmProcessImagePTiffManagerImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $dmreplicateonmodify/enabled  (optional)
# @param boolean $dmreplicateonmodify/forcesyncdeletes  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'dmreplicateonmodify/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'dmreplicateonmodify/forcesyncdeletes' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo',
        };
}
# @return ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo
#
sub com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'dmreplicateonmodify/enabled'}) {
        $query_params->{'dmreplicateonmodify.enabled'} = $self->{api_client}->to_query_value($args{'dmreplicateonmodify/enabled'});
    }

    # query params
    if ( exists $args{'dmreplicateonmodify/forcesyncdeletes'}) {
        $query_params->{'dmreplicateonmodify.forcesyncdeletes'} = $self->{api_client}->to_query_value($args{'dmreplicateonmodify/forcesyncdeletes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $com/adobe/dam/mac/sync/client/so/timeout  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'com/adobe/dam/mac/sync/client/so/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo',
        };
}
# @return ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo
#
sub com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'com/adobe/dam/mac/sync/client/so/timeout'}) {
        $query_params->{'com.adobe.dam.mac.sync.client.so.timeout'} = $self->{api_client}->to_query_value($args{'com/adobe/dam/mac/sync/client/so/timeout'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $com/adobe/cq/dam/mac/sync/damsyncservice/registered_paths  (optional)
# @param boolean $com/adobe/cq/dam/mac/sync/damsyncservice/sync/renditions  (optional)
# @param int $com/adobe/cq/dam/mac/sync/damsyncservice/replicate/thread/wait/ms  (optional)
# @param string $com/adobe/cq/dam/mac/sync/damsyncservice/platform  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'com/adobe/cq/dam/mac/sync/damsyncservice/registered_paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'com/adobe/cq/dam/mac/sync/damsyncservice/sync/renditions' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'com/adobe/cq/dam/mac/sync/damsyncservice/replicate/thread/wait/ms' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'com/adobe/cq/dam/mac/sync/damsyncservice/platform' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo',
        };
}
# @return ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo
#
sub com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/dam/mac/sync/damsyncservice/registered_paths'}) {
        $query_params->{'com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/dam/mac/sync/damsyncservice/registered_paths'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/dam/mac/sync/damsyncservice/sync/renditions'}) {
        $query_params->{'com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/dam/mac/sync/damsyncservice/sync/renditions'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/dam/mac/sync/damsyncservice/replicate/thread/wait/ms'}) {
        $query_params->{'com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/dam/mac/sync/damsyncservice/replicate/thread/wait/ms'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/dam/mac/sync/damsyncservice/platform'}) {
        $query_params->{'com.adobe.cq.dam.mac.sync.damsyncservice.platform'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/dam/mac/sync/damsyncservice/platform'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_dam_processor_nui_impl_nui_asset_processor
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $nui_enabled  (optional)
# @param string $nui_service_url  (optional)
# @param string $nui_api_key  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'nui_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'nui_service_url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'nui_api_key' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_dam_processor_nui_impl_nui_asset_processor' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo',
        };
}
# @return ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo
#
sub com_adobe_cq_dam_processor_nui_impl_nui_asset_processor {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'nui_enabled'}) {
        $query_params->{'nuiEnabled'} = $self->{api_client}->to_query_value($args{'nui_enabled'});
    }

    # query params
    if ( exists $args{'nui_service_url'}) {
        $query_params->{'nuiServiceUrl'} = $self->{api_client}->to_query_value($args{'nui_service_url'});
    }

    # query params
    if ( exists $args{'nui_api_key'}) {
        $query_params->{'nuiApiKey'} = $self->{api_client}->to_query_value($args{'nui_api_key'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_dam_s7imaging_impl_is_image_server_component
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $tcp_port  (optional)
# @param boolean $allow_remote_access  (optional)
# @param string $max_render_rgn_pixels  (optional)
# @param string $max_message_size  (optional)
# @param int $random_access_url_timeout  (optional)
# @param int $worker_threads  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'tcp_port' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'allow_remote_access' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'max_render_rgn_pixels' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'max_message_size' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'random_access_url_timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'worker_threads' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_dam_s7imaging_impl_is_image_server_component' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqDamS7imagingImplIsImageServerComponentInfo',
        };
}
# @return ComAdobeCqDamS7imagingImplIsImageServerComponentInfo
#
sub com_adobe_cq_dam_s7imaging_impl_is_image_server_component {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'tcp_port'}) {
        $query_params->{'TcpPort'} = $self->{api_client}->to_query_value($args{'tcp_port'});
    }

    # query params
    if ( exists $args{'allow_remote_access'}) {
        $query_params->{'AllowRemoteAccess'} = $self->{api_client}->to_query_value($args{'allow_remote_access'});
    }

    # query params
    if ( exists $args{'max_render_rgn_pixels'}) {
        $query_params->{'MaxRenderRgnPixels'} = $self->{api_client}->to_query_value($args{'max_render_rgn_pixels'});
    }

    # query params
    if ( exists $args{'max_message_size'}) {
        $query_params->{'MaxMessageSize'} = $self->{api_client}->to_query_value($args{'max_message_size'});
    }

    # query params
    if ( exists $args{'random_access_url_timeout'}) {
        $query_params->{'RandomAccessUrlTimeout'} = $self->{api_client}->to_query_value($args{'random_access_url_timeout'});
    }

    # query params
    if ( exists $args{'worker_threads'}) {
        $query_params->{'WorkerThreads'} = $self->{api_client}->to_query_value($args{'worker_threads'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqDamS7imagingImplIsImageServerComponentInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cache/enable  (optional)
# @param ARRAY[string] $cache/root_paths  (optional)
# @param int $cache/max_size  (optional)
# @param int $cache/max_entries  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cache/enable' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cache/root_paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cache/max_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cache/max_entries' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo',
        };
}
# @return ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo
#
sub com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cache/enable'}) {
        $query_params->{'cache.enable'} = $self->{api_client}->to_query_value($args{'cache/enable'});
    }

    # query params
    if ( exists $args{'cache/root_paths'}) {
        $query_params->{'cache.rootPaths'} = $self->{api_client}->to_query_value($args{'cache/root_paths'});
    }

    # query params
    if ( exists $args{'cache/max_size'}) {
        $query_params->{'cache.maxSize'} = $self->{api_client}->to_query_value($args{'cache/max_size'});
    }

    # query params
    if ( exists $args{'cache/max_entries'}) {
        $query_params->{'cache.maxEntries'} = $self->{api_client}->to_query_value($args{'cache/max_entries'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_dam_webdav_impl_io_asset_io_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $path_prefix  (optional)
# @param boolean $create_version  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'path_prefix' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'create_version' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_dam_webdav_impl_io_asset_io_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo',
        };
}
# @return ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo
#
sub com_adobe_cq_dam_webdav_impl_io_asset_io_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'path_prefix'}) {
        $query_params->{'pathPrefix'} = $self->{api_client}->to_query_value($args{'path_prefix'});
    }

    # query params
    if ( exists $args{'create_version'}) {
        $query_params->{'createVersion'} = $self->{api_client}->to_query_value($args{'create_version'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/dam/webdav/version/linking/enable  (optional)
# @param int $cq/dam/webdav/version/linking/scheduler/period  (optional)
# @param int $cq/dam/webdav/version/linking/staging/timeout  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/webdav/version/linking/enable' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cq/dam/webdav/version/linking/scheduler/period' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/webdav/version/linking/staging/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo',
        };
}
# @return ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo
#
sub com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/webdav/version/linking/enable'}) {
        $query_params->{'cq.dam.webdav.version.linking.enable'} = $self->{api_client}->to_query_value($args{'cq/dam/webdav/version/linking/enable'});
    }

    # query params
    if ( exists $args{'cq/dam/webdav/version/linking/scheduler/period'}) {
        $query_params->{'cq.dam.webdav.version.linking.scheduler.period'} = $self->{api_client}->to_query_value($args{'cq/dam/webdav/version/linking/scheduler/period'});
    }

    # query params
    if ( exists $args{'cq/dam/webdav/version/linking/staging/timeout'}) {
        $query_params->{'cq.dam.webdav.version.linking.staging.timeout'} = $self->{api_client}->to_query_value($args{'cq/dam/webdav/version/linking/staging/timeout'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_dam_webdav_impl_io_special_files_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $com/day/cq/dam/core/impl/io/special_files_handler/filepatters  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'com/day/cq/dam/core/impl/io/special_files_handler/filepatters' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_dam_webdav_impl_io_special_files_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo',
        };
}
# @return ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo
#
sub com_adobe_cq_dam_webdav_impl_io_special_files_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'com/day/cq/dam/core/impl/io/special_files_handler/filepatters'}) {
        $query_params->{'com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters'} = $self->{api_client}->to_query_value($args{'com/day/cq/dam/core/impl/io/special_files_handler/filepatters'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_deserfw_impl_deserialization_firewall_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $firewall/deserialization/whitelist  (optional)
# @param ARRAY[string] $firewall/deserialization/blacklist  (optional)
# @param string $firewall/deserialization/diagnostics  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'firewall/deserialization/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'firewall/deserialization/blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'firewall/deserialization/diagnostics' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_deserfw_impl_deserialization_firewall_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqDeserfwImplDeserializationFirewallImplInfo',
        };
}
# @return ComAdobeCqDeserfwImplDeserializationFirewallImplInfo
#
sub com_adobe_cq_deserfw_impl_deserialization_firewall_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'firewall/deserialization/whitelist'}) {
        $query_params->{'firewall.deserialization.whitelist'} = $self->{api_client}->to_query_value($args{'firewall/deserialization/whitelist'});
    }

    # query params
    if ( exists $args{'firewall/deserialization/blacklist'}) {
        $query_params->{'firewall.deserialization.blacklist'} = $self->{api_client}->to_query_value($args{'firewall/deserialization/blacklist'});
    }

    # query params
    if ( exists $args{'firewall/deserialization/diagnostics'}) {
        $query_params->{'firewall.deserialization.diagnostics'} = $self->{api_client}->to_query_value($args{'firewall/deserialization/diagnostics'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqDeserfwImplDeserializationFirewallImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_dtm_impl_service_dtm_web_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $connection/timeout  (optional)
# @param int $socket/timeout  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'connection/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'socket/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_dtm_impl_service_dtm_web_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqDtmImplServiceDTMWebServiceImplInfo',
        };
}
# @return ComAdobeCqDtmImplServiceDTMWebServiceImplInfo
#
sub com_adobe_cq_dtm_impl_service_dtm_web_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'connection/timeout'}) {
        $query_params->{'connection.timeout'} = $self->{api_client}->to_query_value($args{'connection/timeout'});
    }

    # query params
    if ( exists $args{'socket/timeout'}) {
        $query_params->{'socket.timeout'} = $self->{api_client}->to_query_value($args{'socket/timeout'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqDtmImplServiceDTMWebServiceImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $dtm/staging/ip/whitelist  (optional)
# @param ARRAY[string] $dtm/production/ip/whitelist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'dtm/staging/ip/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'dtm/production/ip/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqDtmImplServletsDTMDeployHookServletInfo',
        };
}
# @return ComAdobeCqDtmImplServletsDTMDeployHookServletInfo
#
sub com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'dtm/staging/ip/whitelist'}) {
        $query_params->{'dtm.staging.ip.whitelist'} = $self->{api_client}->to_query_value($args{'dtm/staging/ip/whitelist'});
    }

    # query params
    if ( exists $args{'dtm/production/ip/whitelist'}) {
        $query_params->{'dtm.production.ip.whitelist'} = $self->{api_client}->to_query_value($args{'dtm/production/ip/whitelist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqDtmImplServletsDTMDeployHookServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_dtm_reactor_impl_service_web_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $endpoint_uri  (optional)
# @param int $connection_timeout  (optional)
# @param int $socket_timeout  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'endpoint_uri' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'connection_timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'socket_timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_dtm_reactor_impl_service_web_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqDtmReactorImplServiceWebServiceImplInfo',
        };
}
# @return ComAdobeCqDtmReactorImplServiceWebServiceImplInfo
#
sub com_adobe_cq_dtm_reactor_impl_service_web_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'endpoint_uri'}) {
        $query_params->{'endpointUri'} = $self->{api_client}->to_query_value($args{'endpoint_uri'});
    }

    # query params
    if ( exists $args{'connection_timeout'}) {
        $query_params->{'connectionTimeout'} = $self->{api_client}->to_query_value($args{'connection_timeout'});
    }

    # query params
    if ( exists $args{'socket_timeout'}) {
        $query_params->{'socketTimeout'} = $self->{api_client}->to_query_value($args{'socket_timeout'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqDtmReactorImplServiceWebServiceImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_experiencelog_impl_experience_log_config_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enabled  (optional)
# @param ARRAY[string] $disabled_for_groups  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'disabled_for_groups' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_experiencelog_impl_experience_log_config_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo',
        };
}
# @return ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo
#
sub com_adobe_cq_experiencelog_impl_experience_log_config_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    # query params
    if ( exists $args{'disabled_for_groups'}) {
        $query_params->{'disabledForGroups'} = $self->{api_client}->to_query_value($args{'disabled_for_groups'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_hc_content_packages_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $hc/name  (optional)
# @param ARRAY[string] $hc/tags  (optional)
# @param string $hc/mbean/name  (optional)
# @param ARRAY[string] $package/names  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/mbean/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'package/names' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_hc_content_packages_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqHcContentPackagesHealthCheckInfo',
        };
}
# @return ComAdobeCqHcContentPackagesHealthCheckInfo
#
sub com_adobe_cq_hc_content_packages_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/name'}) {
        $query_params->{'hc.name'} = $self->{api_client}->to_query_value($args{'hc/name'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    # query params
    if ( exists $args{'hc/mbean/name'}) {
        $query_params->{'hc.mbean.name'} = $self->{api_client}->to_query_value($args{'hc/mbean/name'});
    }

    # query params
    if ( exists $args{'package/names'}) {
        $query_params->{'package.names'} = $self->{api_client}->to_query_value($args{'package/names'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqHcContentPackagesHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_history_impl_history_request_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $history/request_filter/excluded_selectors  (optional)
# @param ARRAY[string] $history/request_filter/excluded_extensions  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'history/request_filter/excluded_selectors' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'history/request_filter/excluded_extensions' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_history_impl_history_request_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqHistoryImplHistoryRequestFilterInfo',
        };
}
# @return ComAdobeCqHistoryImplHistoryRequestFilterInfo
#
sub com_adobe_cq_history_impl_history_request_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'history/request_filter/excluded_selectors'}) {
        $query_params->{'history.requestFilter.excludedSelectors'} = $self->{api_client}->to_query_value($args{'history/request_filter/excluded_selectors'});
    }

    # query params
    if ( exists $args{'history/request_filter/excluded_extensions'}) {
        $query_params->{'history.requestFilter.excludedExtensions'} = $self->{api_client}->to_query_value($args{'history/request_filter/excluded_extensions'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqHistoryImplHistoryRequestFilterInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_history_impl_history_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $history/service/resource_types  (optional)
# @param ARRAY[string] $history/service/path_filter  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'history/service/resource_types' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'history/service/path_filter' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_history_impl_history_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqHistoryImplHistoryServiceImplInfo',
        };
}
# @return ComAdobeCqHistoryImplHistoryServiceImplInfo
#
sub com_adobe_cq_history_impl_history_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'history/service/resource_types'}) {
        $query_params->{'history.service.resourceTypes'} = $self->{api_client}->to_query_value($args{'history/service/resource_types'});
    }

    # query params
    if ( exists $args{'history/service/path_filter'}) {
        $query_params->{'history.service.pathFilter'} = $self->{api_client}->to_query_value($args{'history/service/path_filter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqHistoryImplHistoryServiceImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_inbox_impl_typeprovider_item_type_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $inbox/impl/typeprovider/registrypaths  (optional)
# @param ARRAY[string] $inbox/impl/typeprovider/legacypaths  (optional)
# @param string $inbox/impl/typeprovider/defaulturl/failureitem  (optional)
# @param string $inbox/impl/typeprovider/defaulturl/workitem  (optional)
# @param string $inbox/impl/typeprovider/defaulturl/task  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'inbox/impl/typeprovider/registrypaths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'inbox/impl/typeprovider/legacypaths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'inbox/impl/typeprovider/defaulturl/failureitem' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'inbox/impl/typeprovider/defaulturl/workitem' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'inbox/impl/typeprovider/defaulturl/task' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_inbox_impl_typeprovider_item_type_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo',
        };
}
# @return ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo
#
sub com_adobe_cq_inbox_impl_typeprovider_item_type_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'inbox/impl/typeprovider/registrypaths'}) {
        $query_params->{'inbox.impl.typeprovider.registrypaths'} = $self->{api_client}->to_query_value($args{'inbox/impl/typeprovider/registrypaths'});
    }

    # query params
    if ( exists $args{'inbox/impl/typeprovider/legacypaths'}) {
        $query_params->{'inbox.impl.typeprovider.legacypaths'} = $self->{api_client}->to_query_value($args{'inbox/impl/typeprovider/legacypaths'});
    }

    # query params
    if ( exists $args{'inbox/impl/typeprovider/defaulturl/failureitem'}) {
        $query_params->{'inbox.impl.typeprovider.defaulturl.failureitem'} = $self->{api_client}->to_query_value($args{'inbox/impl/typeprovider/defaulturl/failureitem'});
    }

    # query params
    if ( exists $args{'inbox/impl/typeprovider/defaulturl/workitem'}) {
        $query_params->{'inbox.impl.typeprovider.defaulturl.workitem'} = $self->{api_client}->to_query_value($args{'inbox/impl/typeprovider/defaulturl/workitem'});
    }

    # query params
    if ( exists $args{'inbox/impl/typeprovider/defaulturl/task'}) {
        $query_params->{'inbox.impl.typeprovider.defaulturl.task'} = $self->{api_client}->to_query_value($args{'inbox/impl/typeprovider/defaulturl/task'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_projects_impl_servlet_project_image_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $image/quality  (optional)
# @param string $image/supported/resolutions  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'image/quality' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'image/supported/resolutions' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_projects_impl_servlet_project_image_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqProjectsImplServletProjectImageServletInfo',
        };
}
# @return ComAdobeCqProjectsImplServletProjectImageServletInfo
#
sub com_adobe_cq_projects_impl_servlet_project_image_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'image/quality'}) {
        $query_params->{'image.quality'} = $self->{api_client}->to_query_value($args{'image/quality'});
    }

    # query params
    if ( exists $args{'image/supported/resolutions'}) {
        $query_params->{'image.supported.resolutions'} = $self->{api_client}->to_query_value($args{'image/supported/resolutions'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqProjectsImplServletProjectImageServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_projects_purge_scheduler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $scheduledpurge/name  (optional)
# @param boolean $scheduledpurge/purge_active  (optional)
# @param ARRAY[string] $scheduledpurge/templates  (optional)
# @param boolean $scheduledpurge/purge_groups  (optional)
# @param boolean $scheduledpurge/purge_assets  (optional)
# @param boolean $scheduledpurge/terminate_running_workflows  (optional)
# @param int $scheduledpurge/daysold  (optional)
# @param int $scheduledpurge/save_threshold  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduledpurge/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'scheduledpurge/purge_active' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'scheduledpurge/templates' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduledpurge/purge_groups' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'scheduledpurge/purge_assets' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'scheduledpurge/terminate_running_workflows' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'scheduledpurge/daysold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'scheduledpurge/save_threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_projects_purge_scheduler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqProjectsPurgeSchedulerInfo',
        };
}
# @return ComAdobeCqProjectsPurgeSchedulerInfo
#
sub com_adobe_cq_projects_purge_scheduler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scheduledpurge/name'}) {
        $query_params->{'scheduledpurge.name'} = $self->{api_client}->to_query_value($args{'scheduledpurge/name'});
    }

    # query params
    if ( exists $args{'scheduledpurge/purge_active'}) {
        $query_params->{'scheduledpurge.purgeActive'} = $self->{api_client}->to_query_value($args{'scheduledpurge/purge_active'});
    }

    # query params
    if ( exists $args{'scheduledpurge/templates'}) {
        $query_params->{'scheduledpurge.templates'} = $self->{api_client}->to_query_value($args{'scheduledpurge/templates'});
    }

    # query params
    if ( exists $args{'scheduledpurge/purge_groups'}) {
        $query_params->{'scheduledpurge.purgeGroups'} = $self->{api_client}->to_query_value($args{'scheduledpurge/purge_groups'});
    }

    # query params
    if ( exists $args{'scheduledpurge/purge_assets'}) {
        $query_params->{'scheduledpurge.purgeAssets'} = $self->{api_client}->to_query_value($args{'scheduledpurge/purge_assets'});
    }

    # query params
    if ( exists $args{'scheduledpurge/terminate_running_workflows'}) {
        $query_params->{'scheduledpurge.terminateRunningWorkflows'} = $self->{api_client}->to_query_value($args{'scheduledpurge/terminate_running_workflows'});
    }

    # query params
    if ( exists $args{'scheduledpurge/daysold'}) {
        $query_params->{'scheduledpurge.daysold'} = $self->{api_client}->to_query_value($args{'scheduledpurge/daysold'});
    }

    # query params
    if ( exists $args{'scheduledpurge/save_threshold'}) {
        $query_params->{'scheduledpurge.saveThreshold'} = $self->{api_client}->to_query_value($args{'scheduledpurge/save_threshold'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqProjectsPurgeSchedulerInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $include/paths  (optional)
# @param string $exporter/user  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'include/paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'exporter/user' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqScheduledExporterImplScheduledExporterImplInfo',
        };
}
# @return ComAdobeCqScheduledExporterImplScheduledExporterImplInfo
#
sub com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'include/paths'}) {
        $query_params->{'include.paths'} = $self->{api_client}->to_query_value($args{'include/paths'});
    }

    # query params
    if ( exists $args{'exporter/user'}) {
        $query_params->{'exporter.user'} = $self->{api_client}->to_query_value($args{'exporter/user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqScheduledExporterImplScheduledExporterImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $com/adobe/cq/screens/analytics/impl/url  (optional)
# @param string $com/adobe/cq/screens/analytics/impl/apikey  (optional)
# @param string $com/adobe/cq/screens/analytics/impl/project  (optional)
# @param string $com/adobe/cq/screens/analytics/impl/environment  (optional)
# @param int $com/adobe/cq/screens/analytics/impl/send_frequency  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'com/adobe/cq/screens/analytics/impl/url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/screens/analytics/impl/apikey' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/screens/analytics/impl/project' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/screens/analytics/impl/environment' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/screens/analytics/impl/send_frequency' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo',
        };
}
# @return ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo
#
sub com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/screens/analytics/impl/url'}) {
        $query_params->{'com.adobe.cq.screens.analytics.impl.url'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/screens/analytics/impl/url'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/screens/analytics/impl/apikey'}) {
        $query_params->{'com.adobe.cq.screens.analytics.impl.apikey'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/screens/analytics/impl/apikey'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/screens/analytics/impl/project'}) {
        $query_params->{'com.adobe.cq.screens.analytics.impl.project'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/screens/analytics/impl/project'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/screens/analytics/impl/environment'}) {
        $query_params->{'com.adobe.cq.screens.analytics.impl.environment'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/screens/analytics/impl/environment'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/screens/analytics/impl/send_frequency'}) {
        $query_params->{'com.adobe.cq.screens.analytics.impl.sendFrequency'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/screens/analytics/impl/send_frequency'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_screens_device_impl_device_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $com/adobe/aem/screens/player/pingfrequency  (optional)
# @param string $com/adobe/aem/screens/device/pasword/specialchars  (optional)
# @param int $com/adobe/aem/screens/device/pasword/minlowercasechars  (optional)
# @param int $com/adobe/aem/screens/device/pasword/minuppercasechars  (optional)
# @param int $com/adobe/aem/screens/device/pasword/minnumberchars  (optional)
# @param int $com/adobe/aem/screens/device/pasword/minspecialchars  (optional)
# @param int $com/adobe/aem/screens/device/pasword/minlength  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'com/adobe/aem/screens/player/pingfrequency' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'com/adobe/aem/screens/device/pasword/specialchars' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/aem/screens/device/pasword/minlowercasechars' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'com/adobe/aem/screens/device/pasword/minuppercasechars' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'com/adobe/aem/screens/device/pasword/minnumberchars' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'com/adobe/aem/screens/device/pasword/minspecialchars' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'com/adobe/aem/screens/device/pasword/minlength' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_screens_device_impl_device_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqScreensDeviceImplDeviceServiceInfo',
        };
}
# @return ComAdobeCqScreensDeviceImplDeviceServiceInfo
#
sub com_adobe_cq_screens_device_impl_device_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'com/adobe/aem/screens/player/pingfrequency'}) {
        $query_params->{'com.adobe.aem.screens.player.pingfrequency'} = $self->{api_client}->to_query_value($args{'com/adobe/aem/screens/player/pingfrequency'});
    }

    # query params
    if ( exists $args{'com/adobe/aem/screens/device/pasword/specialchars'}) {
        $query_params->{'com.adobe.aem.screens.device.pasword.specialchars'} = $self->{api_client}->to_query_value($args{'com/adobe/aem/screens/device/pasword/specialchars'});
    }

    # query params
    if ( exists $args{'com/adobe/aem/screens/device/pasword/minlowercasechars'}) {
        $query_params->{'com.adobe.aem.screens.device.pasword.minlowercasechars'} = $self->{api_client}->to_query_value($args{'com/adobe/aem/screens/device/pasword/minlowercasechars'});
    }

    # query params
    if ( exists $args{'com/adobe/aem/screens/device/pasword/minuppercasechars'}) {
        $query_params->{'com.adobe.aem.screens.device.pasword.minuppercasechars'} = $self->{api_client}->to_query_value($args{'com/adobe/aem/screens/device/pasword/minuppercasechars'});
    }

    # query params
    if ( exists $args{'com/adobe/aem/screens/device/pasword/minnumberchars'}) {
        $query_params->{'com.adobe.aem.screens.device.pasword.minnumberchars'} = $self->{api_client}->to_query_value($args{'com/adobe/aem/screens/device/pasword/minnumberchars'});
    }

    # query params
    if ( exists $args{'com/adobe/aem/screens/device/pasword/minspecialchars'}) {
        $query_params->{'com.adobe.aem.screens.device.pasword.minspecialchars'} = $self->{api_client}->to_query_value($args{'com/adobe/aem/screens/device/pasword/minspecialchars'});
    }

    # query params
    if ( exists $args{'com/adobe/aem/screens/device/pasword/minlength'}) {
        $query_params->{'com.adobe.aem.screens.device.pasword.minlength'} = $self->{api_client}->to_query_value($args{'com/adobe/aem/screens/device/pasword/minlength'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqScreensDeviceImplDeviceServiceInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_screens_device_registration_impl_registration_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $device_registration_timeout  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'device_registration_timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_screens_device_registration_impl_registration_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo',
        };
}
# @return ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo
#
sub com_adobe_cq_screens_device_registration_impl_registration_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'device_registration_timeout'}) {
        $query_params->{'deviceRegistrationTimeout'} = $self->{api_client}->to_query_value($args{'device_registration_timeout'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_screens_impl_handler_channels_update_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/pagesupdatehandler/imageresourcetypes  (optional)
# @param ARRAY[string] $cq/pagesupdatehandler/productresourcetypes  (optional)
# @param ARRAY[string] $cq/pagesupdatehandler/videoresourcetypes  (optional)
# @param ARRAY[string] $cq/pagesupdatehandler/dynamicsequenceresourcetypes  (optional)
# @param ARRAY[string] $cq/pagesupdatehandler/previewmodepaths  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/pagesupdatehandler/imageresourcetypes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/pagesupdatehandler/productresourcetypes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/pagesupdatehandler/videoresourcetypes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/pagesupdatehandler/dynamicsequenceresourcetypes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/pagesupdatehandler/previewmodepaths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_screens_impl_handler_channels_update_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo',
        };
}
# @return ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo
#
sub com_adobe_cq_screens_impl_handler_channels_update_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/pagesupdatehandler/imageresourcetypes'}) {
        $query_params->{'cq.pagesupdatehandler.imageresourcetypes'} = $self->{api_client}->to_query_value($args{'cq/pagesupdatehandler/imageresourcetypes'});
    }

    # query params
    if ( exists $args{'cq/pagesupdatehandler/productresourcetypes'}) {
        $query_params->{'cq.pagesupdatehandler.productresourcetypes'} = $self->{api_client}->to_query_value($args{'cq/pagesupdatehandler/productresourcetypes'});
    }

    # query params
    if ( exists $args{'cq/pagesupdatehandler/videoresourcetypes'}) {
        $query_params->{'cq.pagesupdatehandler.videoresourcetypes'} = $self->{api_client}->to_query_value($args{'cq/pagesupdatehandler/videoresourcetypes'});
    }

    # query params
    if ( exists $args{'cq/pagesupdatehandler/dynamicsequenceresourcetypes'}) {
        $query_params->{'cq.pagesupdatehandler.dynamicsequenceresourcetypes'} = $self->{api_client}->to_query_value($args{'cq/pagesupdatehandler/dynamicsequenceresourcetypes'});
    }

    # query params
    if ( exists $args{'cq/pagesupdatehandler/previewmodepaths'}) {
        $query_params->{'cq.pagesupdatehandler.previewmodepaths'} = $self->{api_client}->to_query_value($args{'cq/pagesupdatehandler/previewmodepaths'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $scheduler/expression  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduler/expression' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo',
        };
}
# @return ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo
#
sub com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scheduler/expression'}) {
        $query_params->{'scheduler.expression'} = $self->{api_client}->to_query_value($args{'scheduler/expression'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $com/adobe/aem/screens/impl/remote/request_timeout  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'com/adobe/aem/screens/impl/remote/request_timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo',
        };
}
# @return ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo
#
sub com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'com/adobe/aem/screens/impl/remote/request_timeout'}) {
        $query_params->{'com.adobe.aem.screens.impl.remote.request_timeout'} = $self->{api_client}->to_query_value($args{'com/adobe/aem/screens/impl/remote/request_timeout'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_screens_impl_screens_channel_post_processor
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $screens/channels/properties/to/remove  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'screens/channels/properties/to/remove' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_screens_impl_screens_channel_post_processor' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqScreensImplScreensChannelPostProcessorInfo',
        };
}
# @return ComAdobeCqScreensImplScreensChannelPostProcessorInfo
#
sub com_adobe_cq_screens_impl_screens_channel_post_processor {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'screens/channels/properties/to/remove'}) {
        $query_params->{'screens.channels.properties.to.remove'} = $self->{api_client}->to_query_value($args{'screens/channels/properties/to/remove'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqScreensImplScreensChannelPostProcessorInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/project_path  (optional)
# @param string $com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/schedule_frequency  (optional)
# @param int $com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/ping_timeout  (optional)
# @param string $com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/recipients  (optional)
# @param string $com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/smtpserver  (optional)
# @param int $com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/smtpport  (optional)
# @param boolean $com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/usetls  (optional)
# @param string $com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/username  (optional)
# @param string $com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/password  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/project_path' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/schedule_frequency' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/ping_timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/recipients' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/smtpserver' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/smtpport' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/usetls' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/username' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/password' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo',
        };
}
# @return ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo
#
sub com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/project_path'}) {
        $query_params->{'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/project_path'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/schedule_frequency'}) {
        $query_params->{'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/schedule_frequency'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/ping_timeout'}) {
        $query_params->{'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/ping_timeout'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/recipients'}) {
        $query_params->{'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/recipients'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/smtpserver'}) {
        $query_params->{'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/smtpserver'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/smtpport'}) {
        $query_params->{'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/smtpport'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/usetls'}) {
        $query_params->{'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/usetls'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/username'}) {
        $query_params->{'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/username'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/password'}) {
        $query_params->{'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/screens/monitoring/impl/screens_monitoring_service_impl/password'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param int $global/size  (optional)
# @param int $max/disk/usage  (optional)
# @param boolean $persistence/enabled  (optional)
# @param int $thread/pool/max/size  (optional)
# @param int $scheduled/thread/pool/max/size  (optional)
# @param int $graceful/shutdown/timeout  (optional)
# @param ARRAY[string] $queues  (optional)
# @param ARRAY[string] $topics  (optional)
# @param int $addresses/max/delivery/attempts  (optional)
# @param int $addresses/expiry/delay  (optional)
# @param string $addresses/address/full/message/policy  (optional)
# @param int $addresses/max/size/bytes  (optional)
# @param int $addresses/page/size/bytes  (optional)
# @param int $addresses/page/cache/max/size  (optional)
# @param string $cluster/user  (optional)
# @param string $cluster/password  (optional)
# @param int $cluster/call/timeout  (optional)
# @param int $cluster/call/failover/timeout  (optional)
# @param int $cluster/client/failure/check/period  (optional)
# @param int $cluster/notification/attempts  (optional)
# @param int $cluster/notification/interval  (optional)
# @param int $id/cache/size  (optional)
# @param int $cluster/confirmation/window/size  (optional)
# @param int $cluster/connection/ttl  (optional)
# @param boolean $cluster/duplicate/detection  (optional)
# @param int $cluster/initial/connect/attempts  (optional)
# @param int $cluster/max/retry/interval  (optional)
# @param int $cluster/min/large/message/size  (optional)
# @param int $cluster/producer/window/size  (optional)
# @param int $cluster/reconnect/attempts  (optional)
# @param int $cluster/retry/interval  (optional)
# @param double $cluster/retry/interval/multiplier  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'global/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'max/disk/usage' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'persistence/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'thread/pool/max/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'scheduled/thread/pool/max/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'graceful/shutdown/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'queues' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'topics' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'addresses/max/delivery/attempts' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'addresses/expiry/delay' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'addresses/address/full/message/policy' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'addresses/max/size/bytes' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'addresses/page/size/bytes' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'addresses/page/cache/max/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cluster/user' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cluster/password' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cluster/call/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cluster/call/failover/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cluster/client/failure/check/period' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cluster/notification/attempts' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cluster/notification/interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'id/cache/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cluster/confirmation/window/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cluster/connection/ttl' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cluster/duplicate/detection' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cluster/initial/connect/attempts' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cluster/max/retry/interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cluster/min/large/message/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cluster/producer/window/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cluster/reconnect/attempts' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cluster/retry/interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cluster/retry/interval/multiplier' => {
        data_type => 'double',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo',
        };
}
# @return ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo
#
sub com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'global/size'}) {
        $query_params->{'global.size'} = $self->{api_client}->to_query_value($args{'global/size'});
    }

    # query params
    if ( exists $args{'max/disk/usage'}) {
        $query_params->{'max.disk.usage'} = $self->{api_client}->to_query_value($args{'max/disk/usage'});
    }

    # query params
    if ( exists $args{'persistence/enabled'}) {
        $query_params->{'persistence.enabled'} = $self->{api_client}->to_query_value($args{'persistence/enabled'});
    }

    # query params
    if ( exists $args{'thread/pool/max/size'}) {
        $query_params->{'thread.pool.max.size'} = $self->{api_client}->to_query_value($args{'thread/pool/max/size'});
    }

    # query params
    if ( exists $args{'scheduled/thread/pool/max/size'}) {
        $query_params->{'scheduled.thread.pool.max.size'} = $self->{api_client}->to_query_value($args{'scheduled/thread/pool/max/size'});
    }

    # query params
    if ( exists $args{'graceful/shutdown/timeout'}) {
        $query_params->{'graceful.shutdown.timeout'} = $self->{api_client}->to_query_value($args{'graceful/shutdown/timeout'});
    }

    # query params
    if ( exists $args{'queues'}) {
        $query_params->{'queues'} = $self->{api_client}->to_query_value($args{'queues'});
    }

    # query params
    if ( exists $args{'topics'}) {
        $query_params->{'topics'} = $self->{api_client}->to_query_value($args{'topics'});
    }

    # query params
    if ( exists $args{'addresses/max/delivery/attempts'}) {
        $query_params->{'addresses.max.delivery.attempts'} = $self->{api_client}->to_query_value($args{'addresses/max/delivery/attempts'});
    }

    # query params
    if ( exists $args{'addresses/expiry/delay'}) {
        $query_params->{'addresses.expiry.delay'} = $self->{api_client}->to_query_value($args{'addresses/expiry/delay'});
    }

    # query params
    if ( exists $args{'addresses/address/full/message/policy'}) {
        $query_params->{'addresses.address.full.message.policy'} = $self->{api_client}->to_query_value($args{'addresses/address/full/message/policy'});
    }

    # query params
    if ( exists $args{'addresses/max/size/bytes'}) {
        $query_params->{'addresses.max.size.bytes'} = $self->{api_client}->to_query_value($args{'addresses/max/size/bytes'});
    }

    # query params
    if ( exists $args{'addresses/page/size/bytes'}) {
        $query_params->{'addresses.page.size.bytes'} = $self->{api_client}->to_query_value($args{'addresses/page/size/bytes'});
    }

    # query params
    if ( exists $args{'addresses/page/cache/max/size'}) {
        $query_params->{'addresses.page.cache.max.size'} = $self->{api_client}->to_query_value($args{'addresses/page/cache/max/size'});
    }

    # query params
    if ( exists $args{'cluster/user'}) {
        $query_params->{'cluster.user'} = $self->{api_client}->to_query_value($args{'cluster/user'});
    }

    # query params
    if ( exists $args{'cluster/password'}) {
        $query_params->{'cluster.password'} = $self->{api_client}->to_query_value($args{'cluster/password'});
    }

    # query params
    if ( exists $args{'cluster/call/timeout'}) {
        $query_params->{'cluster.call.timeout'} = $self->{api_client}->to_query_value($args{'cluster/call/timeout'});
    }

    # query params
    if ( exists $args{'cluster/call/failover/timeout'}) {
        $query_params->{'cluster.call.failover.timeout'} = $self->{api_client}->to_query_value($args{'cluster/call/failover/timeout'});
    }

    # query params
    if ( exists $args{'cluster/client/failure/check/period'}) {
        $query_params->{'cluster.client.failure.check.period'} = $self->{api_client}->to_query_value($args{'cluster/client/failure/check/period'});
    }

    # query params
    if ( exists $args{'cluster/notification/attempts'}) {
        $query_params->{'cluster.notification.attempts'} = $self->{api_client}->to_query_value($args{'cluster/notification/attempts'});
    }

    # query params
    if ( exists $args{'cluster/notification/interval'}) {
        $query_params->{'cluster.notification.interval'} = $self->{api_client}->to_query_value($args{'cluster/notification/interval'});
    }

    # query params
    if ( exists $args{'id/cache/size'}) {
        $query_params->{'id.cache.size'} = $self->{api_client}->to_query_value($args{'id/cache/size'});
    }

    # query params
    if ( exists $args{'cluster/confirmation/window/size'}) {
        $query_params->{'cluster.confirmation.window.size'} = $self->{api_client}->to_query_value($args{'cluster/confirmation/window/size'});
    }

    # query params
    if ( exists $args{'cluster/connection/ttl'}) {
        $query_params->{'cluster.connection.ttl'} = $self->{api_client}->to_query_value($args{'cluster/connection/ttl'});
    }

    # query params
    if ( exists $args{'cluster/duplicate/detection'}) {
        $query_params->{'cluster.duplicate.detection'} = $self->{api_client}->to_query_value($args{'cluster/duplicate/detection'});
    }

    # query params
    if ( exists $args{'cluster/initial/connect/attempts'}) {
        $query_params->{'cluster.initial.connect.attempts'} = $self->{api_client}->to_query_value($args{'cluster/initial/connect/attempts'});
    }

    # query params
    if ( exists $args{'cluster/max/retry/interval'}) {
        $query_params->{'cluster.max.retry.interval'} = $self->{api_client}->to_query_value($args{'cluster/max/retry/interval'});
    }

    # query params
    if ( exists $args{'cluster/min/large/message/size'}) {
        $query_params->{'cluster.min.large.message.size'} = $self->{api_client}->to_query_value($args{'cluster/min/large/message/size'});
    }

    # query params
    if ( exists $args{'cluster/producer/window/size'}) {
        $query_params->{'cluster.producer.window.size'} = $self->{api_client}->to_query_value($args{'cluster/producer/window/size'});
    }

    # query params
    if ( exists $args{'cluster/reconnect/attempts'}) {
        $query_params->{'cluster.reconnect.attempts'} = $self->{api_client}->to_query_value($args{'cluster/reconnect/attempts'});
    }

    # query params
    if ( exists $args{'cluster/retry/interval'}) {
        $query_params->{'cluster.retry.interval'} = $self->{api_client}->to_query_value($args{'cluster/retry/interval'});
    }

    # query params
    if ( exists $args{'cluster/retry/interval/multiplier'}) {
        $query_params->{'cluster.retry.interval.multiplier'} = $self->{api_client}->to_query_value($args{'cluster/retry/interval/multiplier'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $com/adobe/cq/screens/offlinecontent/impl/bulk_offline_update_service_impl/project_path  (optional)
# @param string $com/adobe/cq/screens/offlinecontent/impl/bulk_offline_update_service_impl/schedule_frequency  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'com/adobe/cq/screens/offlinecontent/impl/bulk_offline_update_service_impl/project_path' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'com/adobe/cq/screens/offlinecontent/impl/bulk_offline_update_service_impl/schedule_frequency' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo',
        };
}
# @return ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo
#
sub com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/screens/offlinecontent/impl/bulk_offline_update_service_impl/project_path'}) {
        $query_params->{'com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/screens/offlinecontent/impl/bulk_offline_update_service_impl/project_path'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/screens/offlinecontent/impl/bulk_offline_update_service_impl/schedule_frequency'}) {
        $query_params->{'com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/screens/offlinecontent/impl/bulk_offline_update_service_impl/schedule_frequency'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $disable_smart_sync  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'disable_smart_sync' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo',
        };
}
# @return ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo
#
sub com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'disable_smart_sync'}) {
        $query_params->{'disableSmartSync'} = $self->{api_client}->to_query_value($args{'disable_smart_sync'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enable_data_triggered_content  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enable_data_triggered_content' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo',
        };
}
# @return ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo
#
sub com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enable_data_triggered_content'}) {
        $query_params->{'enableDataTriggeredContent'} = $self->{api_client}->to_query_value($args{'enable_data_triggered_content'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo',
        };
}
# @return ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo
#
sub com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo',
        };
}
# @return ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo
#
sub com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
# @param string $dispatcher/address  (optional)
# @param ARRAY[string] $dispatcher/filter/allowed  (optional)
# @param ARRAY[string] $dispatcher/filter/blocked  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'dispatcher/address' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'dispatcher/filter/allowed' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'dispatcher/filter/blocked' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo',
        };
}
# @return ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo
#
sub com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    # query params
    if ( exists $args{'dispatcher/address'}) {
        $query_params->{'dispatcher.address'} = $self->{api_client}->to_query_value($args{'dispatcher/address'});
    }

    # query params
    if ( exists $args{'dispatcher/filter/allowed'}) {
        $query_params->{'dispatcher.filter.allowed'} = $self->{api_client}->to_query_value($args{'dispatcher/filter/allowed'});
    }

    # query params
    if ( exists $args{'dispatcher/filter/blocked'}) {
        $query_params->{'dispatcher.filter.blocked'} = $self->{api_client}->to_query_value($args{'dispatcher/filter/blocked'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_security_hc_packages_impl_example_content_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_security_hc_packages_impl_example_content_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo',
        };
}
# @return ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo
#
sub com_adobe_cq_security_hc_packages_impl_example_content_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
# @param string $webserver/address  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'webserver/address' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo',
        };
}
# @return ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo
#
sub com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    # query params
    if ( exists $args{'webserver/address'}) {
        $query_params->{'webserver.address'} = $self->{api_client}->to_query_value($args{'webserver/address'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_accountverification_impl_account_management_config_im
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enable  (optional)
# @param int $ttl1  (optional)
# @param int $ttl2  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enable' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'ttl1' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'ttl2' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_accountverification_impl_account_management_config_im' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo',
        };
}
# @return ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo
#
sub com_adobe_cq_social_accountverification_impl_account_management_config_im {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enable'}) {
        $query_params->{'enable'} = $self->{api_client}->to_query_value($args{'enable'});
    }

    # query params
    if ( exists $args{'ttl1'}) {
        $query_params->{'ttl1'} = $self->{api_client}->to_query_value($args{'ttl1'});
    }

    # query params
    if ( exists $args{'ttl2'}) {
        $query_params->{'ttl2'} = $self->{api_client}->to_query_value($args{'ttl2'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_activitystreams_client_impl_social_activity_componen
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $priority  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'priority' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_activitystreams_client_impl_social_activity_componen' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo',
        };
}
# @return ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo
#
sub com_adobe_cq_social_activitystreams_client_impl_social_activity_componen {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'priority'}) {
        $query_params->{'priority'} = $self->{api_client}->to_query_value($args{'priority'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $priority  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'priority' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo',
        };
}
# @return ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo
#
sub com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'priority'}) {
        $query_params->{'priority'} = $self->{api_client}->to_query_value($args{'priority'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $event/topics  (optional)
# @param string $event/filter  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'event/topics' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'event/filter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo',
        };
}
# @return ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo
#
sub com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'event/topics'}) {
        $query_params->{'event.topics'} = $self->{api_client}->to_query_value($args{'event/topics'});
    }

    # query params
    if ( exists $args{'event/filter'}) {
        $query_params->{'event.filter'} = $self->{api_client}->to_query_value($args{'event/filter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $accepted  (optional)
# @param int $ranked  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'accepted' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'ranked' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo',
        };
}
# @return ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo
#
sub com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'accepted'}) {
        $query_params->{'accepted'} = $self->{api_client}->to_query_value($args{'accepted'});
    }

    # query params
    if ( exists $args{'ranked'}) {
        $query_params->{'ranked'} = $self->{api_client}->to_query_value($args{'ranked'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $ranking  (optional)
# @param boolean $enable  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'enable' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo',
        };
}
# @return ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo
#
sub com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'ranking'}) {
        $query_params->{'ranking'} = $self->{api_client}->to_query_value($args{'ranking'});
    }

    # query params
    if ( exists $args{'enable'}) {
        $query_params->{'enable'} = $self->{api_client}->to_query_value($args{'enable'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $stream_path  (optional)
# @param string $stream_name  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'stream_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'stream_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo',
        };
}
# @return ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo
#
sub com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'stream_path'}) {
        $query_params->{'streamPath'} = $self->{api_client}->to_query_value($args{'stream_path'});
    }

    # query params
    if ( exists $args{'stream_name'}) {
        $query_params->{'streamName'} = $self->{api_client}->to_query_value($args{'stream_name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $max_retry  (optional)
# @param ARRAY[string] $field_whitelist  (optional)
# @param ARRAY[string] $attachment_type_blacklist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'max_retry' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'field_whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'attachment_type_blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo',
        };
}
# @return ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo
#
sub com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'max_retry'}) {
        $query_params->{'MaxRetry'} = $self->{api_client}->to_query_value($args{'max_retry'});
    }

    # query params
    if ( exists $args{'field_whitelist'}) {
        $query_params->{'fieldWhitelist'} = $self->{api_client}->to_query_value($args{'field_whitelist'});
    }

    # query params
    if ( exists $args{'attachment_type_blacklist'}) {
        $query_params->{'attachmentTypeBlacklist'} = $self->{api_client}->to_query_value($args{'attachment_type_blacklist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_calendar_client_operationextensions_event_attachmen
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $attachment_type_blacklist  (optional)
# @param int $extension/order  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'attachment_type_blacklist' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'extension/order' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_calendar_client_operationextensions_event_attachmen' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo',
        };
}
# @return ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo
#
sub com_adobe_cq_social_calendar_client_operationextensions_event_attachmen {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'attachment_type_blacklist'}) {
        $query_params->{'attachmentTypeBlacklist'} = $self->{api_client}->to_query_value($args{'attachment_type_blacklist'});
    }

    # query params
    if ( exists $args{'extension/order'}) {
        $query_params->{'extension.order'} = $self->{api_client}->to_query_value($args{'extension/order'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_calendar_servlets_time_zone_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $timezones/expirytime  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'timezones/expirytime' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_calendar_servlets_time_zone_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCalendarServletsTimeZoneServletInfo',
        };
}
# @return ComAdobeCqSocialCalendarServletsTimeZoneServletInfo
#
sub com_adobe_cq_social_calendar_servlets_time_zone_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'timezones/expirytime'}) {
        $query_params->{'timezones.expirytime'} = $self->{api_client}->to_query_value($args{'timezones/expirytime'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCalendarServletsTimeZoneServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $ranking  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo',
        };
}
# @return ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo
#
sub com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'ranking'}) {
        $query_params->{'ranking'} = $self->{api_client}->to_query_value($args{'ranking'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $field_whitelist  (optional)
# @param ARRAY[string] $attachment_type_blacklist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'field_whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'attachment_type_blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo',
        };
}
# @return ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo
#
sub com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'field_whitelist'}) {
        $query_params->{'fieldWhitelist'} = $self->{api_client}->to_query_value($args{'field_whitelist'});
    }

    # query params
    if ( exists $args{'attachment_type_blacklist'}) {
        $query_params->{'attachmentTypeBlacklist'} = $self->{api_client}->to_query_value($args{'attachment_type_blacklist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $field_whitelist  (optional)
# @param ARRAY[string] $attachment_type_blacklist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'field_whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'attachment_type_blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo',
        };
}
# @return ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo
#
sub com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'field_whitelist'}) {
        $query_params->{'fieldWhitelist'} = $self->{api_client}->to_query_value($args{'field_whitelist'});
    }

    # query params
    if ( exists $args{'attachment_type_blacklist'}) {
        $query_params->{'attachmentTypeBlacklist'} = $self->{api_client}->to_query_value($args{'attachment_type_blacklist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $num_user_limit  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'num_user_limit' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo',
        };
}
# @return ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo
#
sub com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'num_user_limit'}) {
        $query_params->{'numUserLimit'} = $self->{api_client}->to_query_value($args{'num_user_limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enable_scheduled_posts_search  (optional)
# @param int $number_of_minutes  (optional)
# @param int $max_search_limit  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enable_scheduled_posts_search' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'number_of_minutes' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'max_search_limit' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo',
        };
}
# @return ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo
#
sub com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enable_scheduled_posts_search'}) {
        $query_params->{'enableScheduledPostsSearch'} = $self->{api_client}->to_query_value($args{'enable_scheduled_posts_search'});
    }

    # query params
    if ( exists $args{'number_of_minutes'}) {
        $query_params->{'numberOfMinutes'} = $self->{api_client}->to_query_value($args{'number_of_minutes'});
    }

    # query params
    if ( exists $args{'max_search_limit'}) {
        $query_params->{'maxSearchLimit'} = $self->{api_client}->to_query_value($args{'max_search_limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_cors_cors_authentication_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cors/enabling  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cors/enabling' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_cors_cors_authentication_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo',
        };
}
# @return ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo
#
sub com_adobe_cq_social_commons_cors_cors_authentication_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cors/enabling'}) {
        $query_params->{'cors.enabling'} = $self->{api_client}->to_query_value($args{'cors/enabling'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $priority_order  (optional)
# @param ARRAY[string] $reply_email_patterns  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'priority_order' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'reply_email_patterns' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo',
        };
}
# @return ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo
#
sub com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'priority_order'}) {
        $query_params->{'priorityOrder'} = $self->{api_client}->to_query_value($args{'priority_order'});
    }

    # query params
    if ( exists $args{'reply_email_patterns'}) {
        $query_params->{'replyEmailPatterns'} = $self->{api_client}->to_query_value($args{'reply_email_patterns'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $context/path  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'context/path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo',
        };
}
# @return ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo
#
sub com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'context/path'}) {
        $query_params->{'context.path'} = $self->{api_client}->to_query_value($args{'context/path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $event/topics  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'event/topics' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo',
        };
}
# @return ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo
#
sub com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'event/topics'}) {
        $query_params->{'event.topics'} = $self->{api_client}->to_query_value($args{'event/topics'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $priority_order  (optional)
# @param ARRAY[string] $reply_email_patterns  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'priority_order' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'reply_email_patterns' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo',
        };
}
# @return ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo
#
sub com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'priority_order'}) {
        $query_params->{'priorityOrder'} = $self->{api_client}->to_query_value($args{'priority_order'});
    }

    # query params
    if ( exists $args{'reply_email_patterns'}) {
        $query_params->{'replyEmailPatterns'} = $self->{api_client}->to_query_value($args{'reply_email_patterns'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $pattern/time  (optional)
# @param string $pattern/newline  (optional)
# @param string $pattern/day_of_month  (optional)
# @param string $pattern/month  (optional)
# @param string $pattern/year  (optional)
# @param string $pattern/date  (optional)
# @param string $pattern/date_time  (optional)
# @param string $pattern/email  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'pattern/time' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'pattern/newline' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'pattern/day_of_month' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'pattern/month' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'pattern/year' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'pattern/date' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'pattern/date_time' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'pattern/email' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo',
        };
}
# @return ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo
#
sub com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'pattern/time'}) {
        $query_params->{'pattern.time'} = $self->{api_client}->to_query_value($args{'pattern/time'});
    }

    # query params
    if ( exists $args{'pattern/newline'}) {
        $query_params->{'pattern.newline'} = $self->{api_client}->to_query_value($args{'pattern/newline'});
    }

    # query params
    if ( exists $args{'pattern/day_of_month'}) {
        $query_params->{'pattern.dayOfMonth'} = $self->{api_client}->to_query_value($args{'pattern/day_of_month'});
    }

    # query params
    if ( exists $args{'pattern/month'}) {
        $query_params->{'pattern.month'} = $self->{api_client}->to_query_value($args{'pattern/month'});
    }

    # query params
    if ( exists $args{'pattern/year'}) {
        $query_params->{'pattern.year'} = $self->{api_client}->to_query_value($args{'pattern/year'});
    }

    # query params
    if ( exists $args{'pattern/date'}) {
        $query_params->{'pattern.date'} = $self->{api_client}->to_query_value($args{'pattern/date'});
    }

    # query params
    if ( exists $args{'pattern/date_time'}) {
        $query_params->{'pattern.dateTime'} = $self->{api_client}->to_query_value($args{'pattern/date_time'});
    }

    # query params
    if ( exists $args{'pattern/email'}) {
        $query_params->{'pattern.email'} = $self->{api_client}->to_query_value($args{'pattern/email'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $email/name  (optional)
# @param boolean $email/create_post_from_reply  (optional)
# @param string $email/add_comment_id_to  (optional)
# @param int $email/subject_maximum_length  (optional)
# @param string $email/reply_to_address  (optional)
# @param string $email/reply_to_delimiter  (optional)
# @param string $email/tracker_id_prefix_in_subject  (optional)
# @param string $email/tracker_id_prefix_in_body  (optional)
# @param boolean $email/as_html  (optional)
# @param string $email/default_user_name  (optional)
# @param string $email/templates/root_path  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'email/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'email/create_post_from_reply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'email/add_comment_id_to' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'email/subject_maximum_length' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'email/reply_to_address' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'email/reply_to_delimiter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'email/tracker_id_prefix_in_subject' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'email/tracker_id_prefix_in_body' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'email/as_html' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'email/default_user_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'email/templates/root_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo',
        };
}
# @return ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo
#
sub com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'email/name'}) {
        $query_params->{'email.name'} = $self->{api_client}->to_query_value($args{'email/name'});
    }

    # query params
    if ( exists $args{'email/create_post_from_reply'}) {
        $query_params->{'email.createPostFromReply'} = $self->{api_client}->to_query_value($args{'email/create_post_from_reply'});
    }

    # query params
    if ( exists $args{'email/add_comment_id_to'}) {
        $query_params->{'email.addCommentIdTo'} = $self->{api_client}->to_query_value($args{'email/add_comment_id_to'});
    }

    # query params
    if ( exists $args{'email/subject_maximum_length'}) {
        $query_params->{'email.subjectMaximumLength'} = $self->{api_client}->to_query_value($args{'email/subject_maximum_length'});
    }

    # query params
    if ( exists $args{'email/reply_to_address'}) {
        $query_params->{'email.replyToAddress'} = $self->{api_client}->to_query_value($args{'email/reply_to_address'});
    }

    # query params
    if ( exists $args{'email/reply_to_delimiter'}) {
        $query_params->{'email.replyToDelimiter'} = $self->{api_client}->to_query_value($args{'email/reply_to_delimiter'});
    }

    # query params
    if ( exists $args{'email/tracker_id_prefix_in_subject'}) {
        $query_params->{'email.trackerIdPrefixInSubject'} = $self->{api_client}->to_query_value($args{'email/tracker_id_prefix_in_subject'});
    }

    # query params
    if ( exists $args{'email/tracker_id_prefix_in_body'}) {
        $query_params->{'email.trackerIdPrefixInBody'} = $self->{api_client}->to_query_value($args{'email/tracker_id_prefix_in_body'});
    }

    # query params
    if ( exists $args{'email/as_html'}) {
        $query_params->{'email.asHTML'} = $self->{api_client}->to_query_value($args{'email/as_html'});
    }

    # query params
    if ( exists $args{'email/default_user_name'}) {
        $query_params->{'email.defaultUserName'} = $self->{api_client}->to_query_value($args{'email/default_user_name'});
    }

    # query params
    if ( exists $args{'email/templates/root_path'}) {
        $query_params->{'email.templates.rootPath'} = $self->{api_client}->to_query_value($args{'email/templates/root_path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_emailreply_impl_email_reply_importer
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $connect_protocol  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'connect_protocol' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_emailreply_impl_email_reply_importer' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo',
        };
}
# @return ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo
#
sub com_adobe_cq_social_commons_emailreply_impl_email_reply_importer {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'connect_protocol'}) {
        $query_params->{'connectProtocol'} = $self->{api_client}->to_query_value($args{'connect_protocol'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $priority_order  (optional)
# @param ARRAY[string] $reply_email_patterns  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'priority_order' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'reply_email_patterns' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo',
        };
}
# @return ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo
#
sub com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'priority_order'}) {
        $query_params->{'priorityOrder'} = $self->{api_client}->to_query_value($args{'priority_order'});
    }

    # query params
    if ( exists $args{'reply_email_patterns'}) {
        $query_params->{'replyEmailPatterns'} = $self->{api_client}->to_query_value($args{'reply_email_patterns'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $priority_order  (optional)
# @param ARRAY[string] $reply_email_patterns  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'priority_order' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'reply_email_patterns' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo',
        };
}
# @return ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo
#
sub com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'priority_order'}) {
        $query_params->{'priorityOrder'} = $self->{api_client}->to_query_value($args{'priority_order'});
    }

    # query params
    if ( exists $args{'reply_email_patterns'}) {
        $query_params->{'replyEmailPatterns'} = $self->{api_client}->to_query_value($args{'reply_email_patterns'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $priority_order  (optional)
# @param ARRAY[string] $reply_email_patterns  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'priority_order' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'reply_email_patterns' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo',
        };
}
# @return ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo
#
sub com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'priority_order'}) {
        $query_params->{'priorityOrder'} = $self->{api_client}->to_query_value($args{'priority_order'});
    }

    # query params
    if ( exists $args{'reply_email_patterns'}) {
        $query_params->{'replyEmailPatterns'} = $self->{api_client}->to_query_value($args{'reply_email_patterns'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $priority_order  (optional)
# @param ARRAY[string] $reply_email_patterns  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'priority_order' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'reply_email_patterns' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo',
        };
}
# @return ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo
#
sub com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'priority_order'}) {
        $query_params->{'priorityOrder'} = $self->{api_client}->to_query_value($args{'priority_order'});
    }

    # query params
    if ( exists $args{'reply_email_patterns'}) {
        $query_params->{'replyEmailPatterns'} = $self->{api_client}->to_query_value($args{'reply_email_patterns'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $reply_email_patterns  (optional)
# @param int $priority_order  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'reply_email_patterns' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'priority_order' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo',
        };
}
# @return ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo
#
sub com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'reply_email_patterns'}) {
        $query_params->{'replyEmailPatterns'} = $self->{api_client}->to_query_value($args{'reply_email_patterns'});
    }

    # query params
    if ( exists $args{'priority_order'}) {
        $query_params->{'priorityOrder'} = $self->{api_client}->to_query_value($args{'priority_order'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $priority_order  (optional)
# @param ARRAY[string] $reply_email_patterns  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'priority_order' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'reply_email_patterns' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo',
        };
}
# @return ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo
#
sub com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'priority_order'}) {
        $query_params->{'priorityOrder'} = $self->{api_client}->to_query_value($args{'priority_order'});
    }

    # query params
    if ( exists $args{'reply_email_patterns'}) {
        $query_params->{'replyEmailPatterns'} = $self->{api_client}->to_query_value($args{'reply_email_patterns'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $number_of_days  (optional)
# @param int $age_of_file  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'number_of_days' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'age_of_file' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo',
        };
}
# @return ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo
#
sub com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'number_of_days'}) {
        $query_params->{'numberOfDays'} = $self->{api_client}->to_query_value($args{'number_of_days'});
    }

    # query params
    if ( exists $args{'age_of_file'}) {
        $query_params->{'ageOfFile'} = $self->{api_client}->to_query_value($args{'age_of_file'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $event/topics  (optional)
# @param string $event/filter  (optional)
# @param ARRAY[string] $verbs  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'event/topics' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'event/filter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'verbs' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo',
        };
}
# @return ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo
#
sub com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'event/topics'}) {
        $query_params->{'event.topics'} = $self->{api_client}->to_query_value($args{'event/topics'});
    }

    # query params
    if ( exists $args{'event/filter'}) {
        $query_params->{'event.filter'} = $self->{api_client}->to_query_value($args{'event/filter'});
    }

    # query params
    if ( exists $args{'verbs'}) {
        $query_params->{'verbs'} = $self->{api_client}->to_query_value($args{'verbs'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enable  (optional)
# @param int $ugc_limit  (optional)
# @param int $ugc_limit_duration  (optional)
# @param ARRAY[string] $domains  (optional)
# @param ARRAY[string] $to_list  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enable' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'ugc_limit' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'ugc_limit_duration' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'domains' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'to_list' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo',
        };
}
# @return ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo
#
sub com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enable'}) {
        $query_params->{'enable'} = $self->{api_client}->to_query_value($args{'enable'});
    }

    # query params
    if ( exists $args{'ugc_limit'}) {
        $query_params->{'UGCLimit'} = $self->{api_client}->to_query_value($args{'ugc_limit'});
    }

    # query params
    if ( exists $args{'ugc_limit_duration'}) {
        $query_params->{'ugcLimitDuration'} = $self->{api_client}->to_query_value($args{'ugc_limit_duration'});
    }

    # query params
    if ( exists $args{'domains'}) {
        $query_params->{'domains'} = $self->{api_client}->to_query_value($args{'domains'});
    }

    # query params
    if ( exists $args{'to_list'}) {
        $query_params->{'toList'} = $self->{api_client}->to_query_value($args{'to_list'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $oauth/provider/id  (optional)
# @param string $oauth/cloud/config/root  (optional)
# @param string $provider/config/root  (optional)
# @param boolean $provider/config/create/tags/enabled  (optional)
# @param string $provider/config/user/folder  (optional)
# @param boolean $provider/config/facebook/fetch/fields  (optional)
# @param ARRAY[string] $provider/config/facebook/fields  (optional)
# @param boolean $provider/config/refresh/userdata/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oauth/provider/id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/cloud/config/root' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'provider/config/root' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'provider/config/create/tags/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'provider/config/user/folder' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'provider/config/facebook/fetch/fields' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'provider/config/facebook/fields' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'provider/config/refresh/userdata/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo',
        };
}
# @return ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo
#
sub com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'oauth/provider/id'}) {
        $query_params->{'oauth.provider.id'} = $self->{api_client}->to_query_value($args{'oauth/provider/id'});
    }

    # query params
    if ( exists $args{'oauth/cloud/config/root'}) {
        $query_params->{'oauth.cloud.config.root'} = $self->{api_client}->to_query_value($args{'oauth/cloud/config/root'});
    }

    # query params
    if ( exists $args{'provider/config/root'}) {
        $query_params->{'provider.config.root'} = $self->{api_client}->to_query_value($args{'provider/config/root'});
    }

    # query params
    if ( exists $args{'provider/config/create/tags/enabled'}) {
        $query_params->{'provider.config.create.tags.enabled'} = $self->{api_client}->to_query_value($args{'provider/config/create/tags/enabled'});
    }

    # query params
    if ( exists $args{'provider/config/user/folder'}) {
        $query_params->{'provider.config.user.folder'} = $self->{api_client}->to_query_value($args{'provider/config/user/folder'});
    }

    # query params
    if ( exists $args{'provider/config/facebook/fetch/fields'}) {
        $query_params->{'provider.config.facebook.fetch.fields'} = $self->{api_client}->to_query_value($args{'provider/config/facebook/fetch/fields'});
    }

    # query params
    if ( exists $args{'provider/config/facebook/fields'}) {
        $query_params->{'provider.config.facebook.fields'} = $self->{api_client}->to_query_value($args{'provider/config/facebook/fields'});
    }

    # query params
    if ( exists $args{'provider/config/refresh/userdata/enabled'}) {
        $query_params->{'provider.config.refresh.userdata.enabled'} = $self->{api_client}->to_query_value($args{'provider/config/refresh/userdata/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $path  (optional)
# @param int $service/ranking  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo',
        };
}
# @return ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo
#
sub com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $facebook  (optional)
# @param ARRAY[string] $twitter  (optional)
# @param string $provider/config/user/folder  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'facebook' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'twitter' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'provider/config/user/folder' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo',
        };
}
# @return ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo
#
sub com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'facebook'}) {
        $query_params->{'facebook'} = $self->{api_client}->to_query_value($args{'facebook'});
    }

    # query params
    if ( exists $args{'twitter'}) {
        $query_params->{'twitter'} = $self->{api_client}->to_query_value($args{'twitter'});
    }

    # query params
    if ( exists $args{'provider/config/user/folder'}) {
        $query_params->{'provider.config.user.folder'} = $self->{api_client}->to_query_value($args{'provider/config/user/folder'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $oauth/provider/id  (optional)
# @param string $oauth/cloud/config/root  (optional)
# @param string $provider/config/root  (optional)
# @param string $provider/config/user/folder  (optional)
# @param boolean $provider/config/twitter/enable/params  (optional)
# @param ARRAY[string] $provider/config/twitter/params  (optional)
# @param boolean $provider/config/refresh/userdata/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oauth/provider/id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/cloud/config/root' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'provider/config/root' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'provider/config/user/folder' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'provider/config/twitter/enable/params' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'provider/config/twitter/params' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'provider/config/refresh/userdata/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo',
        };
}
# @return ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo
#
sub com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'oauth/provider/id'}) {
        $query_params->{'oauth.provider.id'} = $self->{api_client}->to_query_value($args{'oauth/provider/id'});
    }

    # query params
    if ( exists $args{'oauth/cloud/config/root'}) {
        $query_params->{'oauth.cloud.config.root'} = $self->{api_client}->to_query_value($args{'oauth/cloud/config/root'});
    }

    # query params
    if ( exists $args{'provider/config/root'}) {
        $query_params->{'provider.config.root'} = $self->{api_client}->to_query_value($args{'provider/config/root'});
    }

    # query params
    if ( exists $args{'provider/config/user/folder'}) {
        $query_params->{'provider.config.user.folder'} = $self->{api_client}->to_query_value($args{'provider/config/user/folder'});
    }

    # query params
    if ( exists $args{'provider/config/twitter/enable/params'}) {
        $query_params->{'provider.config.twitter.enable.params'} = $self->{api_client}->to_query_value($args{'provider/config/twitter/enable/params'});
    }

    # query params
    if ( exists $args{'provider/config/twitter/params'}) {
        $query_params->{'provider.config.twitter.params'} = $self->{api_client}->to_query_value($args{'provider/config/twitter/params'});
    }

    # query params
    if ( exists $args{'provider/config/refresh/userdata/enabled'}) {
        $query_params->{'provider.config.refresh.userdata.enabled'} = $self->{api_client}->to_query_value($args{'provider/config/refresh/userdata/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_content_fragments_services_impl_communities_fragmen
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/social/content/fragments/services/enabled  (optional)
# @param int $cq/social/content/fragments/services/wait_time_seconds  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/social/content/fragments/services/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cq/social/content/fragments/services/wait_time_seconds' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_content_fragments_services_impl_communities_fragmen' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo',
        };
}
# @return ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo
#
sub com_adobe_cq_social_content_fragments_services_impl_communities_fragmen {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/social/content/fragments/services/enabled'}) {
        $query_params->{'cq.social.content.fragments.services.enabled'} = $self->{api_client}->to_query_value($args{'cq/social/content/fragments/services/enabled'});
    }

    # query params
    if ( exists $args{'cq/social/content/fragments/services/wait_time_seconds'}) {
        $query_params->{'cq.social.content.fragments.services.waitTimeSeconds'} = $self->{api_client}->to_query_value($args{'cq/social/content/fragments/services/wait_time_seconds'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $version/id  (optional)
# @param boolean $cache/on  (optional)
# @param int $concurrency/level  (optional)
# @param int $cache/start/size  (optional)
# @param int $cache/ttl  (optional)
# @param int $cache/size  (optional)
# @param int $time/limit  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'version/id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cache/on' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'concurrency/level' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cache/start/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cache/ttl' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cache/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'time/limit' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo',
        };
}
# @return ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo
#
sub com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'version/id'}) {
        $query_params->{'version.id'} = $self->{api_client}->to_query_value($args{'version/id'});
    }

    # query params
    if ( exists $args{'cache/on'}) {
        $query_params->{'cache.on'} = $self->{api_client}->to_query_value($args{'cache/on'});
    }

    # query params
    if ( exists $args{'concurrency/level'}) {
        $query_params->{'concurrency.level'} = $self->{api_client}->to_query_value($args{'concurrency/level'});
    }

    # query params
    if ( exists $args{'cache/start/size'}) {
        $query_params->{'cache.start.size'} = $self->{api_client}->to_query_value($args{'cache/start/size'});
    }

    # query params
    if ( exists $args{'cache/ttl'}) {
        $query_params->{'cache.ttl'} = $self->{api_client}->to_query_value($args{'cache/ttl'});
    }

    # query params
    if ( exists $args{'cache/size'}) {
        $query_params->{'cache.size'} = $self->{api_client}->to_query_value($args{'cache/size'});
    }

    # query params
    if ( exists $args{'time/limit'}) {
        $query_params->{'time.limit'} = $self->{api_client}->to_query_value($args{'time/limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $solr/zk/timeout  (optional)
# @param string $solr/commit  (optional)
# @param boolean $cache/on  (optional)
# @param int $concurrency/level  (optional)
# @param int $cache/start/size  (optional)
# @param int $cache/ttl  (optional)
# @param int $cache/size  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'solr/zk/timeout' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'solr/commit' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cache/on' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'concurrency/level' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cache/start/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cache/ttl' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cache/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo',
        };
}
# @return ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo
#
sub com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'solr/zk/timeout'}) {
        $query_params->{'solr.zk.timeout'} = $self->{api_client}->to_query_value($args{'solr/zk/timeout'});
    }

    # query params
    if ( exists $args{'solr/commit'}) {
        $query_params->{'solr.commit'} = $self->{api_client}->to_query_value($args{'solr/commit'});
    }

    # query params
    if ( exists $args{'cache/on'}) {
        $query_params->{'cache.on'} = $self->{api_client}->to_query_value($args{'cache/on'});
    }

    # query params
    if ( exists $args{'concurrency/level'}) {
        $query_params->{'concurrency.level'} = $self->{api_client}->to_query_value($args{'concurrency/level'});
    }

    # query params
    if ( exists $args{'cache/start/size'}) {
        $query_params->{'cache.start.size'} = $self->{api_client}->to_query_value($args{'cache/start/size'});
    }

    # query params
    if ( exists $args{'cache/ttl'}) {
        $query_params->{'cache.ttl'} = $self->{api_client}->to_query_value($args{'cache/ttl'});
    }

    # query params
    if ( exists $args{'cache/size'}) {
        $query_params->{'cache.size'} = $self->{api_client}->to_query_value($args{'cache/size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $solr/zk/timeout  (optional)
# @param string $solr/commit  (optional)
# @param boolean $cache/on  (optional)
# @param int $concurrency/level  (optional)
# @param int $cache/start/size  (optional)
# @param int $cache/ttl  (optional)
# @param int $cache/size  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'solr/zk/timeout' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'solr/commit' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cache/on' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'concurrency/level' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cache/start/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cache/ttl' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cache/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo',
        };
}
# @return ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo
#
sub com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'solr/zk/timeout'}) {
        $query_params->{'solr.zk.timeout'} = $self->{api_client}->to_query_value($args{'solr/zk/timeout'});
    }

    # query params
    if ( exists $args{'solr/commit'}) {
        $query_params->{'solr.commit'} = $self->{api_client}->to_query_value($args{'solr/commit'});
    }

    # query params
    if ( exists $args{'cache/on'}) {
        $query_params->{'cache.on'} = $self->{api_client}->to_query_value($args{'cache/on'});
    }

    # query params
    if ( exists $args{'concurrency/level'}) {
        $query_params->{'concurrency.level'} = $self->{api_client}->to_query_value($args{'concurrency/level'});
    }

    # query params
    if ( exists $args{'cache/start/size'}) {
        $query_params->{'cache.start.size'} = $self->{api_client}->to_query_value($args{'cache/start/size'});
    }

    # query params
    if ( exists $args{'cache/ttl'}) {
        $query_params->{'cache.ttl'} = $self->{api_client}->to_query_value($args{'cache/ttl'});
    }

    # query params
    if ( exists $args{'cache/size'}) {
        $query_params->{'cache.size'} = $self->{api_client}->to_query_value($args{'cache/size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $is_member_check  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'is_member_check' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo',
        };
}
# @return ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo
#
sub com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'is_member_check'}) {
        $query_params->{'isMemberCheck'} = $self->{api_client}->to_query_value($args{'is_member_check'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $is_member_check  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'is_member_check' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo',
        };
}
# @return ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo
#
sub com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'is_member_check'}) {
        $query_params->{'isMemberCheck'} = $self->{api_client}->to_query_value($args{'is_member_check'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $field_whitelist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'field_whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo',
        };
}
# @return ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo
#
sub com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'field_whitelist'}) {
        $query_params->{'fieldWhitelist'} = $self->{api_client}->to_query_value($args{'field_whitelist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $field_whitelist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'field_whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo',
        };
}
# @return ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo
#
sub com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'field_whitelist'}) {
        $query_params->{'fieldWhitelist'} = $self->{api_client}->to_query_value($args{'field_whitelist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_enablement_services_impl_author_marker_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_enablement_services_impl_author_marker_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo',
        };
}
# @return ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo
#
sub com_adobe_cq_social_enablement_services_impl_author_marker_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $sling/servlet/selectors  (optional)
# @param string $sling/servlet/extensions  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/servlet/selectors' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/servlet/extensions' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo',
        };
}
# @return ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo
#
sub com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/servlet/selectors'}) {
        $query_params->{'sling.servlet.selectors'} = $self->{api_client}->to_query_value($args{'sling/servlet/selectors'});
    }

    # query params
    if ( exists $args{'sling/servlet/extensions'}) {
        $query_params->{'sling.servlet.extensions'} = $self->{api_client}->to_query_value($args{'sling/servlet/extensions'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $field_whitelist  (optional)
# @param ARRAY[string] $attachment_type_blacklist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'field_whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'attachment_type_blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo',
        };
}
# @return ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo
#
sub com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'field_whitelist'}) {
        $query_params->{'fieldWhitelist'} = $self->{api_client}->to_query_value($args{'field_whitelist'});
    }

    # query params
    if ( exists $args{'attachment_type_blacklist'}) {
        $query_params->{'attachmentTypeBlacklist'} = $self->{api_client}->to_query_value($args{'attachment_type_blacklist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $field_whitelist  (optional)
# @param ARRAY[string] $attachment_type_blacklist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'field_whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'attachment_type_blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo',
        };
}
# @return ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo
#
sub com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'field_whitelist'}) {
        $query_params->{'fieldWhitelist'} = $self->{api_client}->to_query_value($args{'field_whitelist'});
    }

    # query params
    if ( exists $args{'attachment_type_blacklist'}) {
        $query_params->{'attachmentTypeBlacklist'} = $self->{api_client}->to_query_value($args{'attachment_type_blacklist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_forum_dispatcher_impl_flush_operations
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $extension/order  (optional)
# @param boolean $flush/forumontopic  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'extension/order' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'flush/forumontopic' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_forum_dispatcher_impl_flush_operations' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo',
        };
}
# @return ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo
#
sub com_adobe_cq_social_forum_dispatcher_impl_flush_operations {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'extension/order'}) {
        $query_params->{'extension.order'} = $self->{api_client}->to_query_value($args{'extension/order'});
    }

    # query params
    if ( exists $args{'flush/forumontopic'}) {
        $query_params->{'flush.forumontopic'} = $self->{api_client}->to_query_value($args{'flush/forumontopic'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_group_client_impl_community_group_collection_componen
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $group/listing/pagination/enable  (optional)
# @param boolean $group/listing/lazyloading/enable  (optional)
# @param int $page/size  (optional)
# @param int $priority  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'group/listing/pagination/enable' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'group/listing/lazyloading/enable' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'page/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'priority' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_group_client_impl_community_group_collection_componen' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo',
        };
}
# @return ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo
#
sub com_adobe_cq_social_group_client_impl_community_group_collection_componen {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'group/listing/pagination/enable'}) {
        $query_params->{'group.listing.pagination.enable'} = $self->{api_client}->to_query_value($args{'group/listing/pagination/enable'});
    }

    # query params
    if ( exists $args{'group/listing/lazyloading/enable'}) {
        $query_params->{'group.listing.lazyloading.enable'} = $self->{api_client}->to_query_value($args{'group/listing/lazyloading/enable'});
    }

    # query params
    if ( exists $args{'page/size'}) {
        $query_params->{'page.size'} = $self->{api_client}->to_query_value($args{'page/size'});
    }

    # query params
    if ( exists $args{'priority'}) {
        $query_params->{'priority'} = $self->{api_client}->to_query_value($args{'priority'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_group_impl_group_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $max_wait_time  (optional)
# @param int $min_wait_between_retries  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'max_wait_time' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'min_wait_between_retries' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_group_impl_group_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialGroupImplGroupServiceImplInfo',
        };
}
# @return ComAdobeCqSocialGroupImplGroupServiceImplInfo
#
sub com_adobe_cq_social_group_impl_group_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'max_wait_time'}) {
        $query_params->{'maxWaitTime'} = $self->{api_client}->to_query_value($args{'max_wait_time'});
    }

    # query params
    if ( exists $args{'min_wait_between_retries'}) {
        $query_params->{'minWaitBetweenRetries'} = $self->{api_client}->to_query_value($args{'min_wait_between_retries'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialGroupImplGroupServiceImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_handlebars_guava_template_cache_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $parameter/guava/cache/enabled  (optional)
# @param string $parameter/guava/cache/params  (optional)
# @param boolean $parameter/guava/cache/reload  (optional)
# @param int $service/ranking  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'parameter/guava/cache/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'parameter/guava/cache/params' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'parameter/guava/cache/reload' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_handlebars_guava_template_cache_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo',
        };
}
# @return ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo
#
sub com_adobe_cq_social_handlebars_guava_template_cache_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'parameter/guava/cache/enabled'}) {
        $query_params->{'parameter.guava.cache.enabled'} = $self->{api_client}->to_query_value($args{'parameter/guava/cache/enabled'});
    }

    # query params
    if ( exists $args{'parameter/guava/cache/params'}) {
        $query_params->{'parameter.guava.cache.params'} = $self->{api_client}->to_query_value($args{'parameter/guava/cache/params'});
    }

    # query params
    if ( exists $args{'parameter/guava/cache/reload'}) {
        $query_params->{'parameter.guava.cache.reload'} = $self->{api_client}->to_query_value($args{'parameter/guava/cache/reload'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $field_whitelist  (optional)
# @param ARRAY[string] $attachment_type_blacklist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'field_whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'attachment_type_blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo',
        };
}
# @return ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo
#
sub com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'field_whitelist'}) {
        $query_params->{'fieldWhitelist'} = $self->{api_client}->to_query_value($args{'field_whitelist'});
    }

    # query params
    if ( exists $args{'attachment_type_blacklist'}) {
        $query_params->{'attachmentTypeBlacklist'} = $self->{api_client}->to_query_value($args{'attachment_type_blacklist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $field_whitelist  (optional)
# @param ARRAY[string] $attachment_type_blacklist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'field_whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'attachment_type_blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo',
        };
}
# @return ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo
#
sub com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'field_whitelist'}) {
        $query_params->{'fieldWhitelist'} = $self->{api_client}->to_query_value($args{'field_whitelist'});
    }

    # query params
    if ( exists $args{'attachment_type_blacklist'}) {
        $query_params->{'attachmentTypeBlacklist'} = $self->{api_client}->to_query_value($args{'attachment_type_blacklist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_members_endpoints_impl_community_member_group_profile
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $field_whitelist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'field_whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_members_endpoints_impl_community_member_group_profile' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo',
        };
}
# @return ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo
#
sub com_adobe_cq_social_members_endpoints_impl_community_member_group_profile {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'field_whitelist'}) {
        $query_params->{'fieldWhitelist'} = $self->{api_client}->to_query_value($args{'field_whitelist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $field_whitelist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'field_whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo',
        };
}
# @return ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo
#
sub com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'field_whitelist'}) {
        $query_params->{'fieldWhitelist'} = $self->{api_client}->to_query_value($args{'field_whitelist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_members_impl_community_member_group_profile_component_f
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $everyone_limit  (optional)
# @param int $priority  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'everyone_limit' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'priority' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_members_impl_community_member_group_profile_component_f' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo',
        };
}
# @return ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo
#
sub com_adobe_cq_social_members_impl_community_member_group_profile_component_f {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'everyone_limit'}) {
        $query_params->{'everyoneLimit'} = $self->{api_client}->to_query_value($args{'everyone_limit'});
    }

    # query params
    if ( exists $args{'priority'}) {
        $query_params->{'priority'} = $self->{api_client}->to_query_value($args{'priority'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $message/properties  (optional)
# @param int $message_box_size_limit  (optional)
# @param int $message_count_limit  (optional)
# @param boolean $notify_failure  (optional)
# @param string $failure_message_from  (optional)
# @param string $failure_template_path  (optional)
# @param int $max_retries  (optional)
# @param int $min_wait_between_retries  (optional)
# @param int $count_update_pool_size  (optional)
# @param string $inbox/path  (optional)
# @param string $sentitems/path  (optional)
# @param boolean $support_attachments  (optional)
# @param boolean $support_group_messaging  (optional)
# @param int $max_total_recipients  (optional)
# @param int $batch_size  (optional)
# @param int $max_total_attachment_size  (optional)
# @param ARRAY[string] $attachment_type_blacklist  (optional)
# @param ARRAY[string] $allowed_attachment_types  (optional)
# @param string $service_selector  (optional)
# @param ARRAY[string] $field_whitelist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'message/properties' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'message_box_size_limit' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'message_count_limit' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'notify_failure' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'failure_message_from' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'failure_template_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'max_retries' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'min_wait_between_retries' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'count_update_pool_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'inbox/path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sentitems/path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'support_attachments' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'support_group_messaging' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'max_total_recipients' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'batch_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'max_total_attachment_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'attachment_type_blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'allowed_attachment_types' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service_selector' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'field_whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo',
        };
}
# @return ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo
#
sub com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'message/properties'}) {
        $query_params->{'message.properties'} = $self->{api_client}->to_query_value($args{'message/properties'});
    }

    # query params
    if ( exists $args{'message_box_size_limit'}) {
        $query_params->{'messageBoxSizeLimit'} = $self->{api_client}->to_query_value($args{'message_box_size_limit'});
    }

    # query params
    if ( exists $args{'message_count_limit'}) {
        $query_params->{'messageCountLimit'} = $self->{api_client}->to_query_value($args{'message_count_limit'});
    }

    # query params
    if ( exists $args{'notify_failure'}) {
        $query_params->{'notifyFailure'} = $self->{api_client}->to_query_value($args{'notify_failure'});
    }

    # query params
    if ( exists $args{'failure_message_from'}) {
        $query_params->{'failureMessageFrom'} = $self->{api_client}->to_query_value($args{'failure_message_from'});
    }

    # query params
    if ( exists $args{'failure_template_path'}) {
        $query_params->{'failureTemplatePath'} = $self->{api_client}->to_query_value($args{'failure_template_path'});
    }

    # query params
    if ( exists $args{'max_retries'}) {
        $query_params->{'maxRetries'} = $self->{api_client}->to_query_value($args{'max_retries'});
    }

    # query params
    if ( exists $args{'min_wait_between_retries'}) {
        $query_params->{'minWaitBetweenRetries'} = $self->{api_client}->to_query_value($args{'min_wait_between_retries'});
    }

    # query params
    if ( exists $args{'count_update_pool_size'}) {
        $query_params->{'countUpdatePoolSize'} = $self->{api_client}->to_query_value($args{'count_update_pool_size'});
    }

    # query params
    if ( exists $args{'inbox/path'}) {
        $query_params->{'inbox.path'} = $self->{api_client}->to_query_value($args{'inbox/path'});
    }

    # query params
    if ( exists $args{'sentitems/path'}) {
        $query_params->{'sentitems.path'} = $self->{api_client}->to_query_value($args{'sentitems/path'});
    }

    # query params
    if ( exists $args{'support_attachments'}) {
        $query_params->{'supportAttachments'} = $self->{api_client}->to_query_value($args{'support_attachments'});
    }

    # query params
    if ( exists $args{'support_group_messaging'}) {
        $query_params->{'supportGroupMessaging'} = $self->{api_client}->to_query_value($args{'support_group_messaging'});
    }

    # query params
    if ( exists $args{'max_total_recipients'}) {
        $query_params->{'maxTotalRecipients'} = $self->{api_client}->to_query_value($args{'max_total_recipients'});
    }

    # query params
    if ( exists $args{'batch_size'}) {
        $query_params->{'batchSize'} = $self->{api_client}->to_query_value($args{'batch_size'});
    }

    # query params
    if ( exists $args{'max_total_attachment_size'}) {
        $query_params->{'maxTotalAttachmentSize'} = $self->{api_client}->to_query_value($args{'max_total_attachment_size'});
    }

    # query params
    if ( exists $args{'attachment_type_blacklist'}) {
        $query_params->{'attachmentTypeBlacklist'} = $self->{api_client}->to_query_value($args{'attachment_type_blacklist'});
    }

    # query params
    if ( exists $args{'allowed_attachment_types'}) {
        $query_params->{'allowedAttachmentTypes'} = $self->{api_client}->to_query_value($args{'allowed_attachment_types'});
    }

    # query params
    if ( exists $args{'service_selector'}) {
        $query_params->{'serviceSelector'} = $self->{api_client}->to_query_value($args{'service_selector'});
    }

    # query params
    if ( exists $args{'field_whitelist'}) {
        $query_params->{'fieldWhitelist'} = $self->{api_client}->to_query_value($args{'field_whitelist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $resource_type/filters  (optional)
# @param int $priority  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'resource_type/filters' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'priority' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo',
        };
}
# @return ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo
#
sub com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'resource_type/filters'}) {
        $query_params->{'resourceType.filters'} = $self->{api_client}->to_query_value($args{'resource_type/filters'});
    }

    # query params
    if ( exists $args{'priority'}) {
        $query_params->{'priority'} = $self->{api_client}->to_query_value($args{'priority'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $priority  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'priority' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo',
        };
}
# @return ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo
#
sub com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'priority'}) {
        $query_params->{'priority'} = $self->{api_client}->to_query_value($args{'priority'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $priority  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'priority' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo',
        };
}
# @return ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo
#
sub com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'priority'}) {
        $query_params->{'priority'} = $self->{api_client}->to_query_value($args{'priority'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $resource_type/filters  (optional)
# @param int $priority  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'resource_type/filters' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'priority' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo',
        };
}
# @return ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo
#
sub com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'resource_type/filters'}) {
        $query_params->{'resourceType.filters'} = $self->{api_client}->to_query_value($args{'resource_type/filters'});
    }

    # query params
    if ( exists $args{'priority'}) {
        $query_params->{'priority'} = $self->{api_client}->to_query_value($args{'priority'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_notifications_impl_mentions_router
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $event/topics  (optional)
# @param string $event/filter  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'event/topics' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'event/filter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_notifications_impl_mentions_router' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialNotificationsImplMentionsRouterInfo',
        };
}
# @return ComAdobeCqSocialNotificationsImplMentionsRouterInfo
#
sub com_adobe_cq_social_notifications_impl_mentions_router {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'event/topics'}) {
        $query_params->{'event.topics'} = $self->{api_client}->to_query_value($args{'event/topics'});
    }

    # query params
    if ( exists $args{'event/filter'}) {
        $query_params->{'event.filter'} = $self->{api_client}->to_query_value($args{'event/filter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialNotificationsImplMentionsRouterInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_notifications_impl_notification_manager_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $max/unread/notification/count  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'max/unread/notification/count' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_notifications_impl_notification_manager_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo',
        };
}
# @return ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo
#
sub com_adobe_cq_social_notifications_impl_notification_manager_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'max/unread/notification/count'}) {
        $query_params->{'max.unread.notification.count'} = $self->{api_client}->to_query_value($args{'max/unread/notification/count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_notifications_impl_notifications_router
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $event/topics  (optional)
# @param string $event/filter  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'event/topics' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'event/filter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_notifications_impl_notifications_router' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialNotificationsImplNotificationsRouterInfo',
        };
}
# @return ComAdobeCqSocialNotificationsImplNotificationsRouterInfo
#
sub com_adobe_cq_social_notifications_impl_notifications_router {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'event/topics'}) {
        $query_params->{'event.topics'} = $self->{api_client}->to_query_value($args{'event/topics'});
    }

    # query params
    if ( exists $args{'event/filter'}) {
        $query_params->{'event.filter'} = $self->{api_client}->to_query_value($args{'event/filter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialNotificationsImplNotificationsRouterInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $field_whitelist  (optional)
# @param ARRAY[string] $attachment_type_blacklist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'field_whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'attachment_type_blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo',
        };
}
# @return ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo
#
sub com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'field_whitelist'}) {
        $query_params->{'fieldWhitelist'} = $self->{api_client}->to_query_value($args{'field_whitelist'});
    }

    # query params
    if ( exists $args{'attachment_type_blacklist'}) {
        $query_params->{'attachmentTypeBlacklist'} = $self->{api_client}->to_query_value($args{'attachment_type_blacklist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $cq/social/reporting/analytics/polling/importer/interval  (optional)
# @param int $cq/social/reporting/analytics/polling/importer/page_size  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/social/reporting/analytics/polling/importer/interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/social/reporting/analytics/polling/importer/page_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo',
        };
}
# @return ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo
#
sub com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/social/reporting/analytics/polling/importer/interval'}) {
        $query_params->{'cq.social.reporting.analytics.polling.importer.interval'} = $self->{api_client}->to_query_value($args{'cq/social/reporting/analytics/polling/importer/interval'});
    }

    # query params
    if ( exists $args{'cq/social/reporting/analytics/polling/importer/page_size'}) {
        $query_params->{'cq.social.reporting.analytics.polling.importer.pageSize'} = $self->{api_client}->to_query_value($args{'cq/social/reporting/analytics/polling/importer/page_size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $report/fetch/delay  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'report/fetch/delay' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo',
        };
}
# @return ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo
#
sub com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'report/fetch/delay'}) {
        $query_params->{'report.fetch.delay'} = $self->{api_client}->to_query_value($args{'report/fetch/delay'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/social/console/analytics/sites/mapping  (optional)
# @param int $priority  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/social/console/analytics/sites/mapping' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'priority' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo',
        };
}
# @return ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo
#
sub com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/social/console/analytics/sites/mapping'}) {
        $query_params->{'cq.social.console.analytics.sites.mapping'} = $self->{api_client}->to_query_value($args{'cq/social/console/analytics/sites/mapping'});
    }

    # query params
    if ( exists $args{'priority'}) {
        $query_params->{'priority'} = $self->{api_client}->to_query_value($args{'priority'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $field_whitelist  (optional)
# @param ARRAY[string] $attachment_type_blacklist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'field_whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'attachment_type_blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo',
        };
}
# @return ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo
#
sub com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'field_whitelist'}) {
        $query_params->{'fieldWhitelist'} = $self->{api_client}->to_query_value($args{'field_whitelist'});
    }

    # query params
    if ( exists $args{'attachment_type_blacklist'}) {
        $query_params->{'attachmentTypeBlacklist'} = $self->{api_client}->to_query_value($args{'attachment_type_blacklist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $sling/servlet/selectors  (optional)
# @param string $sling/servlet/extensions  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/servlet/selectors' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/servlet/extensions' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo',
        };
}
# @return ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo
#
sub com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/servlet/selectors'}) {
        $query_params->{'sling.servlet.selectors'} = $self->{api_client}->to_query_value($args{'sling/servlet/selectors'});
    }

    # query params
    if ( exists $args{'sling/servlet/extensions'}) {
        $query_params->{'sling.servlet.extensions'} = $self->{api_client}->to_query_value($args{'sling/servlet/extensions'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $sling/servlet/selectors  (optional)
# @param string $sling/servlet/extensions  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/servlet/selectors' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/servlet/extensions' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo',
        };
}
# @return ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo
#
sub com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/servlet/selectors'}) {
        $query_params->{'sling.servlet.selectors'} = $self->{api_client}->to_query_value($args{'sling/servlet/selectors'});
    }

    # query params
    if ( exists $args{'sling/servlet/extensions'}) {
        $query_params->{'sling.servlet.extensions'} = $self->{api_client}->to_query_value($args{'sling/servlet/extensions'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_scoring_impl_scoring_event_listener
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $event/topics  (optional)
# @param string $event/filter  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'event/topics' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'event/filter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_scoring_impl_scoring_event_listener' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialScoringImplScoringEventListenerInfo',
        };
}
# @return ComAdobeCqSocialScoringImplScoringEventListenerInfo
#
sub com_adobe_cq_social_scoring_impl_scoring_event_listener {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'event/topics'}) {
        $query_params->{'event.topics'} = $self->{api_client}->to_query_value($args{'event/topics'});
    }

    # query params
    if ( exists $args{'event/filter'}) {
        $query_params->{'event.filter'} = $self->{api_client}->to_query_value($args{'event/filter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialScoringImplScoringEventListenerInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enable_fallback  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enable_fallback' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo',
        };
}
# @return ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo
#
sub com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enable_fallback'}) {
        $query_params->{'enableFallback'} = $self->{api_client}->to_query_value($args{'enable_fallback'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_site_endpoints_impl_site_operation_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $field_whitelist  (optional)
# @param ARRAY[string] $site_path_filters  (optional)
# @param string $site_package_group  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'field_whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'site_path_filters' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'site_package_group' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_site_endpoints_impl_site_operation_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo',
        };
}
# @return ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo
#
sub com_adobe_cq_social_site_endpoints_impl_site_operation_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'field_whitelist'}) {
        $query_params->{'fieldWhitelist'} = $self->{api_client}->to_query_value($args{'field_whitelist'});
    }

    # query params
    if ( exists $args{'site_path_filters'}) {
        $query_params->{'sitePathFilters'} = $self->{api_client}->to_query_value($args{'site_path_filters'});
    }

    # query params
    if ( exists $args{'site_package_group'}) {
        $query_params->{'sitePackageGroup'} = $self->{api_client}->to_query_value($args{'site_package_group'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_site_impl_analytics_component_configuration_service_im
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/social/console/analytics/components  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/social/console/analytics/components' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_site_impl_analytics_component_configuration_service_im' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo',
        };
}
# @return ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo
#
sub com_adobe_cq_social_site_impl_analytics_component_configuration_service_im {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/social/console/analytics/components'}) {
        $query_params->{'cq.social.console.analytics.components'} = $self->{api_client}->to_query_value($args{'cq/social/console/analytics/components'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_site_impl_site_configurator_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $components_using_tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'components_using_tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_site_impl_site_configurator_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo',
        };
}
# @return ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo
#
sub com_adobe_cq_social_site_impl_site_configurator_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'components_using_tags'}) {
        $query_params->{'componentsUsingTags'} = $self->{api_client}->to_query_value($args{'components_using_tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_srp_impl_social_solr_connector
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $srp/type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'srp/type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_srp_impl_social_solr_connector' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialSrpImplSocialSolrConnectorInfo',
        };
}
# @return ComAdobeCqSocialSrpImplSocialSolrConnectorInfo
#
sub com_adobe_cq_social_srp_impl_social_solr_connector {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'srp/type'}) {
        $query_params->{'srp.type'} = $self->{api_client}->to_query_value($args{'srp/type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialSrpImplSocialSolrConnectorInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_sync_impl_diff_changes_observer
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enabled  (optional)
# @param string $agent_name  (optional)
# @param string $diff_path  (optional)
# @param string $property_names  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'agent_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'diff_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'property_names' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_sync_impl_diff_changes_observer' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialSyncImplDiffChangesObserverInfo',
        };
}
# @return ComAdobeCqSocialSyncImplDiffChangesObserverInfo
#
sub com_adobe_cq_social_sync_impl_diff_changes_observer {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    # query params
    if ( exists $args{'agent_name'}) {
        $query_params->{'agentName'} = $self->{api_client}->to_query_value($args{'agent_name'});
    }

    # query params
    if ( exists $args{'diff_path'}) {
        $query_params->{'diffPath'} = $self->{api_client}->to_query_value($args{'diff_path'});
    }

    # query params
    if ( exists $args{'property_names'}) {
        $query_params->{'propertyNames'} = $self->{api_client}->to_query_value($args{'property_names'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialSyncImplDiffChangesObserverInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_sync_impl_group_sync_listener_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $nodetypes  (optional)
# @param ARRAY[string] $ignorableprops  (optional)
# @param string $ignorablenodes  (optional)
# @param boolean $enabled  (optional)
# @param string $distfolders  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'nodetypes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'ignorableprops' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'ignorablenodes' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'distfolders' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_sync_impl_group_sync_listener_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo',
        };
}
# @return ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo
#
sub com_adobe_cq_social_sync_impl_group_sync_listener_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'nodetypes'}) {
        $query_params->{'nodetypes'} = $self->{api_client}->to_query_value($args{'nodetypes'});
    }

    # query params
    if ( exists $args{'ignorableprops'}) {
        $query_params->{'ignorableprops'} = $self->{api_client}->to_query_value($args{'ignorableprops'});
    }

    # query params
    if ( exists $args{'ignorablenodes'}) {
        $query_params->{'ignorablenodes'} = $self->{api_client}->to_query_value($args{'ignorablenodes'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    # query params
    if ( exists $args{'distfolders'}) {
        $query_params->{'distfolders'} = $self->{api_client}->to_query_value($args{'distfolders'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_sync_impl_publisher_sync_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $active_run_modes  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'active_run_modes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_sync_impl_publisher_sync_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo',
        };
}
# @return ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo
#
sub com_adobe_cq_social_sync_impl_publisher_sync_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'active_run_modes'}) {
        $query_params->{'activeRunModes'} = $self->{api_client}->to_query_value($args{'active_run_modes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_sync_impl_user_sync_listener_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $nodetypes  (optional)
# @param ARRAY[string] $ignorableprops  (optional)
# @param ARRAY[string] $ignorablenodes  (optional)
# @param boolean $enabled  (optional)
# @param ARRAY[string] $distfolders  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'nodetypes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'ignorableprops' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'ignorablenodes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'distfolders' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_sync_impl_user_sync_listener_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialSyncImplUserSyncListenerImplInfo',
        };
}
# @return ComAdobeCqSocialSyncImplUserSyncListenerImplInfo
#
sub com_adobe_cq_social_sync_impl_user_sync_listener_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'nodetypes'}) {
        $query_params->{'nodetypes'} = $self->{api_client}->to_query_value($args{'nodetypes'});
    }

    # query params
    if ( exists $args{'ignorableprops'}) {
        $query_params->{'ignorableprops'} = $self->{api_client}->to_query_value($args{'ignorableprops'});
    }

    # query params
    if ( exists $args{'ignorablenodes'}) {
        $query_params->{'ignorablenodes'} = $self->{api_client}->to_query_value($args{'ignorablenodes'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    # query params
    if ( exists $args{'distfolders'}) {
        $query_params->{'distfolders'} = $self->{api_client}->to_query_value($args{'distfolders'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialSyncImplUserSyncListenerImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_translation_impl_translation_service_config_manager
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $translate/language  (optional)
# @param string $translate/display  (optional)
# @param boolean $translate/attribution  (optional)
# @param string $translate/caching  (optional)
# @param string $translate/smart/rendering  (optional)
# @param string $translate/caching/duration  (optional)
# @param string $translate/session/save/interval  (optional)
# @param string $translate/session/save/batch_limit  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'translate/language' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'translate/display' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'translate/attribution' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'translate/caching' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'translate/smart/rendering' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'translate/caching/duration' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'translate/session/save/interval' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'translate/session/save/batch_limit' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_translation_impl_translation_service_config_manager' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo',
        };
}
# @return ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo
#
sub com_adobe_cq_social_translation_impl_translation_service_config_manager {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'translate/language'}) {
        $query_params->{'translate.language'} = $self->{api_client}->to_query_value($args{'translate/language'});
    }

    # query params
    if ( exists $args{'translate/display'}) {
        $query_params->{'translate.display'} = $self->{api_client}->to_query_value($args{'translate/display'});
    }

    # query params
    if ( exists $args{'translate/attribution'}) {
        $query_params->{'translate.attribution'} = $self->{api_client}->to_query_value($args{'translate/attribution'});
    }

    # query params
    if ( exists $args{'translate/caching'}) {
        $query_params->{'translate.caching'} = $self->{api_client}->to_query_value($args{'translate/caching'});
    }

    # query params
    if ( exists $args{'translate/smart/rendering'}) {
        $query_params->{'translate.smart.rendering'} = $self->{api_client}->to_query_value($args{'translate/smart/rendering'});
    }

    # query params
    if ( exists $args{'translate/caching/duration'}) {
        $query_params->{'translate.caching.duration'} = $self->{api_client}->to_query_value($args{'translate/caching/duration'});
    }

    # query params
    if ( exists $args{'translate/session/save/interval'}) {
        $query_params->{'translate.session.save.interval'} = $self->{api_client}->to_query_value($args{'translate/session/save/interval'});
    }

    # query params
    if ( exists $args{'translate/session/save/batch_limit'}) {
        $query_params->{'translate.session.save.batchLimit'} = $self->{api_client}->to_query_value($args{'translate/session/save/batch_limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_translation_impl_ugc_language_detector
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $event/topics  (optional)
# @param string $event/filter  (optional)
# @param ARRAY[string] $translate/listener/type  (optional)
# @param ARRAY[string] $translate/property/list  (optional)
# @param int $pool_size  (optional)
# @param int $max_pool_size  (optional)
# @param int $queue_size  (optional)
# @param int $keep_alive_time  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'event/topics' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'event/filter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'translate/listener/type' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'translate/property/list' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'pool_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'max_pool_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'queue_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'keep_alive_time' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_translation_impl_ugc_language_detector' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo',
        };
}
# @return ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo
#
sub com_adobe_cq_social_translation_impl_ugc_language_detector {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'event/topics'}) {
        $query_params->{'event.topics'} = $self->{api_client}->to_query_value($args{'event/topics'});
    }

    # query params
    if ( exists $args{'event/filter'}) {
        $query_params->{'event.filter'} = $self->{api_client}->to_query_value($args{'event/filter'});
    }

    # query params
    if ( exists $args{'translate/listener/type'}) {
        $query_params->{'translate.listener.type'} = $self->{api_client}->to_query_value($args{'translate/listener/type'});
    }

    # query params
    if ( exists $args{'translate/property/list'}) {
        $query_params->{'translate.property.list'} = $self->{api_client}->to_query_value($args{'translate/property/list'});
    }

    # query params
    if ( exists $args{'pool_size'}) {
        $query_params->{'poolSize'} = $self->{api_client}->to_query_value($args{'pool_size'});
    }

    # query params
    if ( exists $args{'max_pool_size'}) {
        $query_params->{'maxPoolSize'} = $self->{api_client}->to_query_value($args{'max_pool_size'});
    }

    # query params
    if ( exists $args{'queue_size'}) {
        $query_params->{'queueSize'} = $self->{api_client}->to_query_value($args{'queue_size'});
    }

    # query params
    if ( exists $args{'keep_alive_time'}) {
        $query_params->{'keepAliveTime'} = $self->{api_client}->to_query_value($args{'keep_alive_time'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $thread_pool_size  (optional)
# @param int $delay_time  (optional)
# @param int $worker_sleep_time  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'thread_pool_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'delay_time' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'worker_sleep_time' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo',
        };
}
# @return ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo
#
sub com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'thread_pool_size'}) {
        $query_params->{'threadPoolSize'} = $self->{api_client}->to_query_value($args{'thread_pool_size'});
    }

    # query params
    if ( exists $args{'delay_time'}) {
        $query_params->{'delayTime'} = $self->{api_client}->to_query_value($args{'delay_time'});
    }

    # query params
    if ( exists $args{'worker_sleep_time'}) {
        $query_params->{'workerSleepTime'} = $self->{api_client}->to_query_value($args{'worker_sleep_time'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $pool_size  (optional)
# @param int $max_pool_size  (optional)
# @param int $queue_size  (optional)
# @param int $keep_alive_time  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'pool_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'max_pool_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'queue_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'keep_alive_time' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo',
        };
}
# @return ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo
#
sub com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'pool_size'}) {
        $query_params->{'poolSize'} = $self->{api_client}->to_query_value($args{'pool_size'});
    }

    # query params
    if ( exists $args{'max_pool_size'}) {
        $query_params->{'maxPoolSize'} = $self->{api_client}->to_query_value($args{'max_pool_size'});
    }

    # query params
    if ( exists $args{'queue_size'}) {
        $query_params->{'queueSize'} = $self->{api_client}->to_query_value($args{'queue_size'});
    }

    # query params
    if ( exists $args{'keep_alive_time'}) {
        $query_params->{'keepAliveTime'} = $self->{api_client}->to_query_value($args{'keep_alive_time'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $is_primary_publisher  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'is_primary_publisher' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo',
        };
}
# @return ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo
#
sub com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'is_primary_publisher'}) {
        $query_params->{'isPrimaryPublisher'} = $self->{api_client}->to_query_value($args{'is_primary_publisher'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_ugcbase_impl_social_utils_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $legacy_cloud_ugc_path_mapping  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'legacy_cloud_ugc_path_mapping' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_ugcbase_impl_social_utils_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo',
        };
}
# @return ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo
#
sub com_adobe_cq_social_ugcbase_impl_social_utils_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'legacy_cloud_ugc_path_mapping'}) {
        $query_params->{'legacyCloudUGCPathMapping'} = $self->{api_client}->to_query_value($args{'legacy_cloud_ugc_path_mapping'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $automoderation/sequence  (optional)
# @param boolean $automoderation/onfailurestop  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'automoderation/sequence' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'automoderation/onfailurestop' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo',
        };
}
# @return ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo
#
sub com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'automoderation/sequence'}) {
        $query_params->{'automoderation.sequence'} = $self->{api_client}->to_query_value($args{'automoderation/sequence'});
    }

    # query params
    if ( exists $args{'automoderation/onfailurestop'}) {
        $query_params->{'automoderation.onfailurestop'} = $self->{api_client}->to_query_value($args{'automoderation/onfailurestop'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $watchwords/positive  (optional)
# @param ARRAY[string] $watchwords/negative  (optional)
# @param string $watchwords/path  (optional)
# @param string $sentiment/path  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'watchwords/positive' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'watchwords/negative' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'watchwords/path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sentiment/path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo',
        };
}
# @return ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo
#
sub com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'watchwords/positive'}) {
        $query_params->{'watchwords.positive'} = $self->{api_client}->to_query_value($args{'watchwords/positive'});
    }

    # query params
    if ( exists $args{'watchwords/negative'}) {
        $query_params->{'watchwords.negative'} = $self->{api_client}->to_query_value($args{'watchwords/negative'});
    }

    # query params
    if ( exists $args{'watchwords/path'}) {
        $query_params->{'watchwords.path'} = $self->{api_client}->to_query_value($args{'watchwords/path'});
    }

    # query params
    if ( exists $args{'sentiment/path'}) {
        $query_params->{'sentiment.path'} = $self->{api_client}->to_query_value($args{'sentiment/path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $default/attachment/type/blacklist  (optional)
# @param ARRAY[string] $baseline/attachment/type/blacklist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'default/attachment/type/blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'baseline/attachment/type/blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo',
        };
}
# @return ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo
#
sub com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'default/attachment/type/blacklist'}) {
        $query_params->{'default.attachment.type.blacklist'} = $self->{api_client}->to_query_value($args{'default/attachment/type/blacklist'});
    }

    # query params
    if ( exists $args{'baseline/attachment/type/blacklist'}) {
        $query_params->{'baseline.attachment.type.blacklist'} = $self->{api_client}->to_query_value($args{'baseline/attachment/type/blacklist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $parameter/whitelist  (optional)
# @param ARRAY[string] $parameter/whitelist/prefixes  (optional)
# @param ARRAY[string] $binary/parameter/whitelist  (optional)
# @param ARRAY[string] $modifier/whitelist  (optional)
# @param ARRAY[string] $operation/whitelist  (optional)
# @param ARRAY[string] $operation/whitelist/prefixes  (optional)
# @param ARRAY[string] $typehint/whitelist  (optional)
# @param ARRAY[string] $resourcetype/whitelist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'parameter/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'parameter/whitelist/prefixes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'binary/parameter/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'modifier/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'operation/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'operation/whitelist/prefixes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'typehint/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'resourcetype/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo',
        };
}
# @return ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo
#
sub com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'parameter/whitelist'}) {
        $query_params->{'parameter.whitelist'} = $self->{api_client}->to_query_value($args{'parameter/whitelist'});
    }

    # query params
    if ( exists $args{'parameter/whitelist/prefixes'}) {
        $query_params->{'parameter.whitelist.prefixes'} = $self->{api_client}->to_query_value($args{'parameter/whitelist/prefixes'});
    }

    # query params
    if ( exists $args{'binary/parameter/whitelist'}) {
        $query_params->{'binary.parameter.whitelist'} = $self->{api_client}->to_query_value($args{'binary/parameter/whitelist'});
    }

    # query params
    if ( exists $args{'modifier/whitelist'}) {
        $query_params->{'modifier.whitelist'} = $self->{api_client}->to_query_value($args{'modifier/whitelist'});
    }

    # query params
    if ( exists $args{'operation/whitelist'}) {
        $query_params->{'operation.whitelist'} = $self->{api_client}->to_query_value($args{'operation/whitelist'});
    }

    # query params
    if ( exists $args{'operation/whitelist/prefixes'}) {
        $query_params->{'operation.whitelist.prefixes'} = $self->{api_client}->to_query_value($args{'operation/whitelist/prefixes'});
    }

    # query params
    if ( exists $args{'typehint/whitelist'}) {
        $query_params->{'typehint.whitelist'} = $self->{api_client}->to_query_value($args{'typehint/whitelist'});
    }

    # query params
    if ( exists $args{'resourcetype/whitelist'}) {
        $query_params->{'resourcetype.whitelist'} = $self->{api_client}->to_query_value($args{'resourcetype/whitelist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $sling/servlet/extensions  (optional)
# @param string $sling/servlet/paths  (optional)
# @param string $sling/servlet/methods  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/servlet/extensions' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/servlet/paths' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/servlet/methods' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo',
        };
}
# @return ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo
#
sub com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/servlet/extensions'}) {
        $query_params->{'sling.servlet.extensions'} = $self->{api_client}->to_query_value($args{'sling/servlet/extensions'});
    }

    # query params
    if ( exists $args{'sling/servlet/paths'}) {
        $query_params->{'sling.servlet.paths'} = $self->{api_client}->to_query_value($args{'sling/servlet/paths'});
    }

    # query params
    if ( exists $args{'sling/servlet/methods'}) {
        $query_params->{'sling.servlet.methods'} = $self->{api_client}->to_query_value($args{'sling/servlet/methods'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_social_user_impl_transport_http_to_publisher
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enable  (optional)
# @param ARRAY[string] $agent/configuration  (optional)
# @param string $context/path  (optional)
# @param ARRAY[string] $disabled/cipher/suites  (optional)
# @param ARRAY[string] $enabled/cipher/suites  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enable' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'agent/configuration' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'context/path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'disabled/cipher/suites' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled/cipher/suites' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_social_user_impl_transport_http_to_publisher' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqSocialUserImplTransportHttpToPublisherInfo',
        };
}
# @return ComAdobeCqSocialUserImplTransportHttpToPublisherInfo
#
sub com_adobe_cq_social_user_impl_transport_http_to_publisher {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enable'}) {
        $query_params->{'enable'} = $self->{api_client}->to_query_value($args{'enable'});
    }

    # query params
    if ( exists $args{'agent/configuration'}) {
        $query_params->{'agent.configuration'} = $self->{api_client}->to_query_value($args{'agent/configuration'});
    }

    # query params
    if ( exists $args{'context/path'}) {
        $query_params->{'context.path'} = $self->{api_client}->to_query_value($args{'context/path'});
    }

    # query params
    if ( exists $args{'disabled/cipher/suites'}) {
        $query_params->{'disabled.cipher.suites'} = $self->{api_client}->to_query_value($args{'disabled/cipher/suites'});
    }

    # query params
    if ( exists $args{'enabled/cipher/suites'}) {
        $query_params->{'enabled.cipher.suites'} = $self->{api_client}->to_query_value($args{'enabled/cipher/suites'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqSocialUserImplTransportHttpToPublisherInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $resource/types  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'resource/types' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo',
        };
}
# @return ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo
#
sub com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'resource/types'}) {
        $query_params->{'resource.types'} = $self->{api_client}->to_query_value($args{'resource/types'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $delete/path/regexps  (optional)
# @param string $delete/sql2/query  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'delete/path/regexps' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'delete/sql2/query' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo',
        };
}
# @return ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo
#
sub com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'delete/path/regexps'}) {
        $query_params->{'delete.path.regexps'} = $self->{api_client}->to_query_value($args{'delete/path/regexps'});
    }

    # query params
    if ( exists $args{'delete/sql2/query'}) {
        $query_params->{'delete.sql2.query'} = $self->{api_client}->to_query_value($args{'delete/sql2/query'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $delete/name/regexps  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'delete/name/regexps' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo',
        };
}
# @return ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo
#
sub com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'delete/name/regexps'}) {
        $query_params->{'delete.name.regexps'} = $self->{api_client}->to_query_value($args{'delete/name/regexps'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $threshold  (optional)
# @param string $job_topic_name  (optional)
# @param boolean $email_enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'job_topic_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'email_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo',
        };
}
# @return ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo
#
sub com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'threshold'}) {
        $query_params->{'threshold'} = $self->{api_client}->to_query_value($args{'threshold'});
    }

    # query params
    if ( exists $args{'job_topic_name'}) {
        $query_params->{'jobTopicName'} = $self->{api_client}->to_query_value($args{'job_topic_name'});
    }

    # query params
    if ( exists $args{'email_enabled'}) {
        $query_params->{'emailEnabled'} = $self->{api_client}->to_query_value($args{'email_enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $scheduler/expression  (optional)
# @param int $job/purge/threshold  (optional)
# @param int $job/purge/max/jobs  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduler/expression' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'job/purge/threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'job/purge/max/jobs' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo',
        };
}
# @return ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo
#
sub com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scheduler/expression'}) {
        $query_params->{'scheduler.expression'} = $self->{api_client}->to_query_value($args{'scheduler/expression'});
    }

    # query params
    if ( exists $args{'job/purge/threshold'}) {
        $query_params->{'job.purge.threshold'} = $self->{api_client}->to_query_value($args{'job/purge/threshold'});
    }

    # query params
    if ( exists $args{'job/purge/max/jobs'}) {
        $query_params->{'job.purge.max.jobs'} = $self->{api_client}->to_query_value($args{'job/purge/max/jobs'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $threshold  (optional)
# @param string $job_topic_name  (optional)
# @param boolean $email_enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'job_topic_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'email_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo',
        };
}
# @return ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo
#
sub com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'threshold'}) {
        $query_params->{'threshold'} = $self->{api_client}->to_query_value($args{'threshold'});
    }

    # query params
    if ( exists $args{'job_topic_name'}) {
        $query_params->{'jobTopicName'} = $self->{api_client}->to_query_value($args{'job_topic_name'});
    }

    # query params
    if ( exists $args{'email_enabled'}) {
        $query_params->{'emailEnabled'} = $self->{api_client}->to_query_value($args{'email_enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $threshold  (optional)
# @param string $job_topic_name  (optional)
# @param boolean $email_enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'job_topic_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'email_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo',
        };
}
# @return ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo
#
sub com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'threshold'}) {
        $query_params->{'threshold'} = $self->{api_client}->to_query_value($args{'threshold'});
    }

    # query params
    if ( exists $args{'job_topic_name'}) {
        $query_params->{'jobTopicName'} = $self->{api_client}->to_query_value($args{'job_topic_name'});
    }

    # query params
    if ( exists $args{'email_enabled'}) {
        $query_params->{'emailEnabled'} = $self->{api_client}->to_query_value($args{'email_enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_wcm_launches_impl_launches_event_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $event/filter  (optional)
# @param int $launches/eventhandler/threadpool/maxsize  (optional)
# @param string $launches/eventhandler/threadpool/priority  (optional)
# @param boolean $launches/eventhandler/updatelastmodification  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'event/filter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'launches/eventhandler/threadpool/maxsize' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'launches/eventhandler/threadpool/priority' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'launches/eventhandler/updatelastmodification' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_wcm_launches_impl_launches_event_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo',
        };
}
# @return ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo
#
sub com_adobe_cq_wcm_launches_impl_launches_event_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'event/filter'}) {
        $query_params->{'event.filter'} = $self->{api_client}->to_query_value($args{'event/filter'});
    }

    # query params
    if ( exists $args{'launches/eventhandler/threadpool/maxsize'}) {
        $query_params->{'launches.eventhandler.threadpool.maxsize'} = $self->{api_client}->to_query_value($args{'launches/eventhandler/threadpool/maxsize'});
    }

    # query params
    if ( exists $args{'launches/eventhandler/threadpool/priority'}) {
        $query_params->{'launches.eventhandler.threadpool.priority'} = $self->{api_client}->to_query_value($args{'launches/eventhandler/threadpool/priority'});
    }

    # query params
    if ( exists $args{'launches/eventhandler/updatelastmodification'}) {
        $query_params->{'launches.eventhandler.updatelastmodification'} = $self->{api_client}->to_query_value($args{'launches/eventhandler/updatelastmodification'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/wcm/qrcode/servlet/whitelist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/qrcode/servlet/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo',
        };
}
# @return ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo
#
sub com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/wcm/qrcode/servlet/whitelist'}) {
        $query_params->{'cq.wcm.qrcode.servlet.whitelist'} = $self->{api_client}->to_query_value($args{'cq/wcm/qrcode/servlet/whitelist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_wcm_style_internal_component_style_info_cache_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $size  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_wcm_style_internal_component_style_info_cache_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo',
        };
}
# @return ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo
#
sub com_adobe_cq_wcm_style_internal_component_style_info_cache_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $sync_translation_state/scheduling_format  (optional)
# @param string $scheduling_repeat_translation/scheduling_format  (optional)
# @param string $sync_translation_state/lock_timeout_in_minutes  (optional)
# @param string $export/format  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sync_translation_state/scheduling_format' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'scheduling_repeat_translation/scheduling_format' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sync_translation_state/lock_timeout_in_minutes' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'export/format' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo',
        };
}
# @return ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo
#
sub com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sync_translation_state/scheduling_format'}) {
        $query_params->{'syncTranslationState.schedulingFormat'} = $self->{api_client}->to_query_value($args{'sync_translation_state/scheduling_format'});
    }

    # query params
    if ( exists $args{'scheduling_repeat_translation/scheduling_format'}) {
        $query_params->{'schedulingRepeatTranslation.schedulingFormat'} = $self->{api_client}->to_query_value($args{'scheduling_repeat_translation/scheduling_format'});
    }

    # query params
    if ( exists $args{'sync_translation_state/lock_timeout_in_minutes'}) {
        $query_params->{'syncTranslationState.lockTimeoutInMinutes'} = $self->{api_client}->to_query_value($args{'sync_translation_state/lock_timeout_in_minutes'});
    }

    # query params
    if ( exists $args{'export/format'}) {
        $query_params->{'export.format'} = $self->{api_client}->to_query_value($args{'export/format'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $portal/outboxes  (optional)
# @param string $draft/data/service  (optional)
# @param string $draft/metadata/service  (optional)
# @param string $submit/data/service  (optional)
# @param string $submit/metadata/service  (optional)
# @param string $pending_sign/data/service  (optional)
# @param string $pending_sign/metadata/service  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'portal/outboxes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'draft/data/service' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'draft/metadata/service' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'submit/data/service' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'submit/metadata/service' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'pending_sign/data/service' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'pending_sign/metadata/service' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo',
        };
}
# @return ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo
#
sub com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'portal/outboxes'}) {
        $query_params->{'portal.outboxes'} = $self->{api_client}->to_query_value($args{'portal/outboxes'});
    }

    # query params
    if ( exists $args{'draft/data/service'}) {
        $query_params->{'draft.data.service'} = $self->{api_client}->to_query_value($args{'draft/data/service'});
    }

    # query params
    if ( exists $args{'draft/metadata/service'}) {
        $query_params->{'draft.metadata.service'} = $self->{api_client}->to_query_value($args{'draft/metadata/service'});
    }

    # query params
    if ( exists $args{'submit/data/service'}) {
        $query_params->{'submit.data.service'} = $self->{api_client}->to_query_value($args{'submit/data/service'});
    }

    # query params
    if ( exists $args{'submit/metadata/service'}) {
        $query_params->{'submit.metadata.service'} = $self->{api_client}->to_query_value($args{'submit/metadata/service'});
    }

    # query params
    if ( exists $args{'pending_sign/data/service'}) {
        $query_params->{'pendingSign.data.service'} = $self->{api_client}->to_query_value($args{'pending_sign/data/service'});
    }

    # query params
    if ( exists $args{'pending_sign/metadata/service'}) {
        $query_params->{'pendingSign.metadata.service'} = $self->{api_client}->to_query_value($args{'pending_sign/metadata/service'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo', $response);
    return $_response_object;
}

#
# com_adobe_fd_fp_config_forms_portal_scheduler_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $formportal/interval  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'formportal/interval' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_fd_fp_config_forms_portal_scheduler_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo',
        };
}
# @return ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo
#
sub com_adobe_fd_fp_config_forms_portal_scheduler_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'formportal/interval'}) {
        $query_params->{'formportal.interval'} = $self->{api_client}->to_query_value($args{'formportal/interval'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo', $response);
    return $_response_object;
}

#
# com_adobe_forms_common_service_impl_default_data_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $alloweddata_file_locations  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'alloweddata_file_locations' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_forms_common_service_impl_default_data_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeFormsCommonServiceImplDefaultDataProviderInfo',
        };
}
# @return ComAdobeFormsCommonServiceImplDefaultDataProviderInfo
#
sub com_adobe_forms_common_service_impl_default_data_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'alloweddata_file_locations'}) {
        $query_params->{'alloweddataFileLocations'} = $self->{api_client}->to_query_value($args{'alloweddata_file_locations'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeFormsCommonServiceImplDefaultDataProviderInfo', $response);
    return $_response_object;
}

#
# com_adobe_forms_common_service_impl_forms_common_configuration_service_imp
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $temp_storage_config  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'temp_storage_config' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_forms_common_service_impl_forms_common_configuration_service_imp' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo',
        };
}
# @return ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo
#
sub com_adobe_forms_common_service_impl_forms_common_configuration_service_imp {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'temp_storage_config'}) {
        $query_params->{'tempStorageConfig'} = $self->{api_client}->to_query_value($args{'temp_storage_config'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo', $response);
    return $_response_object;
}

#
# com_adobe_forms_common_servlet_temp_clean_up_task
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $scheduler/expression  (optional)
# @param string $duration_for_temporary_storage  (optional)
# @param string $duration_for_anonymous_storage  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduler/expression' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'duration_for_temporary_storage' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'duration_for_anonymous_storage' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_forms_common_servlet_temp_clean_up_task' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeFormsCommonServletTempCleanUpTaskInfo',
        };
}
# @return ComAdobeFormsCommonServletTempCleanUpTaskInfo
#
sub com_adobe_forms_common_servlet_temp_clean_up_task {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scheduler/expression'}) {
        $query_params->{'scheduler.expression'} = $self->{api_client}->to_query_value($args{'scheduler/expression'});
    }

    # query params
    if ( exists $args{'duration_for_temporary_storage'}) {
        $query_params->{'Duration for Temporary Storage'} = $self->{api_client}->to_query_value($args{'duration_for_temporary_storage'});
    }

    # query params
    if ( exists $args{'duration_for_anonymous_storage'}) {
        $query_params->{'Duration for Anonymous Storage'} = $self->{api_client}->to_query_value($args{'duration_for_anonymous_storage'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeFormsCommonServletTempCleanUpTaskInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_acp_platform_platform_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $query/limit  (optional)
# @param ARRAY[string] $file/type/extension/map  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'query/limit' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'file/type/extension/map' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_acp_platform_platform_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAcpPlatformPlatformServletInfo',
        };
}
# @return ComAdobeGraniteAcpPlatformPlatformServletInfo
#
sub com_adobe_granite_acp_platform_platform_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'query/limit'}) {
        $query_params->{'query.limit'} = $self->{api_client}->to_query_value($args{'query/limit'});
    }

    # query params
    if ( exists $args{'file/type/extension/map'}) {
        $query_params->{'file.type.extension.map'} = $self->{api_client}->to_query_value($args{'file/type/extension/map'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAcpPlatformPlatformServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_activitystreams_impl_activity_manager_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $aggregate/relationships  (optional)
# @param boolean $aggregate/descend/virtual  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'aggregate/relationships' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'aggregate/descend/virtual' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_activitystreams_impl_activity_manager_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo',
        };
}
# @return ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo
#
sub com_adobe_granite_activitystreams_impl_activity_manager_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'aggregate/relationships'}) {
        $query_params->{'aggregate.relationships'} = $self->{api_client}->to_query_value($args{'aggregate/relationships'});
    }

    # query params
    if ( exists $args{'aggregate/descend/virtual'}) {
        $query_params->{'aggregate.descend.virtual'} = $self->{api_client}->to_query_value($args{'aggregate/descend/virtual'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_analyzer_base_system_status_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $disabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'disabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_analyzer_base_system_status_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo',
        };
}
# @return ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo
#
sub com_adobe_granite_analyzer_base_system_status_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'disabled'}) {
        $query_params->{'disabled'} = $self->{api_client}->to_query_value($args{'disabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $disabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'disabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo',
        };
}
# @return ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo
#
sub com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'disabled'}) {
        $query_params->{'disabled'} = $self->{api_client}->to_query_value($args{'disabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_apicontroller_filter_resolver_hook_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $com/adobe/cq/cdn/cdn_rewriter  (optional)
# @param string $com/adobe/cq/cloud_config/components  (optional)
# @param string $com/adobe/cq/cloud_config/core  (optional)
# @param string $com/adobe/cq/cloud_config/ui  (optional)
# @param string $com/adobe/cq/com/adobe/cq/editor  (optional)
# @param string $com/adobe/cq/com/adobe/cq/projects/core  (optional)
# @param string $com/adobe/cq/com/adobe/cq/projects/wcm/core  (optional)
# @param string $com/adobe/cq/com/adobe/cq/ui/commons  (optional)
# @param string $com/adobe/cq/com/adobe/cq/wcm/style  (optional)
# @param string $com/adobe/cq/cq_activitymap_integration  (optional)
# @param string $com/adobe/cq/cq_contexthub_commons  (optional)
# @param string $com/adobe/cq/cq_dtm  (optional)
# @param string $com/adobe/cq/cq_healthcheck  (optional)
# @param string $com/adobe/cq/cq_multisite_targeting  (optional)
# @param string $com/adobe/cq/cq_pre_upgrade_cleanup  (optional)
# @param string $com/adobe/cq/cq_product_info_provider  (optional)
# @param string $com/adobe/cq/cq_rest_sites  (optional)
# @param string $com/adobe/cq/cq_security_hc  (optional)
# @param string $com/adobe/cq/dam/cq_dam_svg_handler  (optional)
# @param string $com/adobe/cq/dam/cq_scene7_imaging  (optional)
# @param string $com/adobe/cq/dtm_reactor/core  (optional)
# @param string $com/adobe/cq/dtm_reactor/ui  (optional)
# @param string $com/adobe/cq/exp_jspel_resolver  (optional)
# @param string $com/adobe/cq/inbox/cq_inbox  (optional)
# @param string $com/adobe/cq/json_schema_parser  (optional)
# @param string $com/adobe/cq/media/cq_media_publishing_dps_fp_core  (optional)
# @param string $com/adobe/cq/mobile/cq_mobile_caas  (optional)
# @param string $com/adobe/cq/mobile/cq_mobile_index_builder  (optional)
# @param string $com/adobe/cq/mobile/cq_mobile_phonegap_build  (optional)
# @param string $com/adobe/cq/myspell  (optional)
# @param string $com/adobe/cq/sample/we/retail/core  (optional)
# @param string $com/adobe/cq/screens/com/adobe/cq/screens/dcc  (optional)
# @param string $com/adobe/cq/screens/com/adobe/cq/screens/mq/core  (optional)
# @param string $com/adobe/cq/social/cq_social_as_provider  (optional)
# @param string $com/adobe/cq/social/cq_social_badging_basic_impl  (optional)
# @param string $com/adobe/cq/social/cq_social_badging_impl  (optional)
# @param string $com/adobe/cq/social/cq_social_calendar_impl  (optional)
# @param string $com/adobe/cq/social/cq_social_content_fragments_impl  (optional)
# @param string $com/adobe/cq/social/cq_social_enablement_impl  (optional)
# @param string $com/adobe/cq/social/cq_social_graph_impl  (optional)
# @param string $com/adobe/cq/social/cq_social_ideation_impl  (optional)
# @param string $com/adobe/cq/social/cq_social_jcr_provider  (optional)
# @param string $com/adobe/cq/social/cq_social_members_impl  (optional)
# @param string $com/adobe/cq/social/cq_social_ms_provider  (optional)
# @param string $com/adobe/cq/social/cq_social_notifications_channels_web  (optional)
# @param string $com/adobe/cq/social/cq_social_notifications_impl  (optional)
# @param string $com/adobe/cq/social/cq_social_rdb_provider  (optional)
# @param string $com/adobe/cq/social/cq_social_scf_impl  (optional)
# @param string $com/adobe/cq/social/cq_social_scoring_basic_impl  (optional)
# @param string $com/adobe/cq/social/cq_social_scoring_impl  (optional)
# @param string $com/adobe/cq/social/cq_social_serviceusers_impl  (optional)
# @param string $com/adobe/cq/social/cq_social_srp_impl  (optional)
# @param string $com/adobe/cq/social/cq_social_ugcbase_impl  (optional)
# @param string $com/adobe/dam/cq_dam_cfm_impl  (optional)
# @param string $com/adobe/forms/foundation_forms_foundation_base  (optional)
# @param string $com/adobe/granite/apicontroller  (optional)
# @param string $com/adobe/granite/asset/core  (optional)
# @param string $com/adobe/granite/auth/sso  (optional)
# @param string $com/adobe/granite/bundles/hc/impl  (optional)
# @param string $com/adobe/granite/compat_router  (optional)
# @param string $com/adobe/granite/conf  (optional)
# @param string $com/adobe/granite/conf/ui/core  (optional)
# @param string $com/adobe/granite/cors  (optional)
# @param string $com/adobe/granite/crx_explorer  (optional)
# @param string $com/adobe/granite/crxde_lite  (optional)
# @param string $com/adobe/granite/crypto/config  (optional)
# @param string $com/adobe/granite/crypto/extension  (optional)
# @param string $com/adobe/granite/crypto/file  (optional)
# @param string $com/adobe/granite/crypto/jcr  (optional)
# @param string $com/adobe/granite/csrf  (optional)
# @param string $com/adobe/granite/distribution/core  (optional)
# @param string $com/adobe/granite/dropwizard/metrics  (optional)
# @param string $com/adobe/granite/frags/impl  (optional)
# @param string $com/adobe/granite/gibson  (optional)
# @param string $com/adobe/granite/infocollector  (optional)
# @param string $com/adobe/granite/installer/factory/packages  (optional)
# @param string $com/adobe/granite/jetty/ssl  (optional)
# @param string $com/adobe/granite/jobs/async  (optional)
# @param string $com/adobe/granite/maintenance/oak  (optional)
# @param string $com/adobe/granite/monitoring/core  (optional)
# @param string $com/adobe/granite/queries  (optional)
# @param string $com/adobe/granite/replication/hc/impl  (optional)
# @param string $com/adobe/granite/repository/checker  (optional)
# @param string $com/adobe/granite/repository/hc/impl  (optional)
# @param string $com/adobe/granite/rest/assets  (optional)
# @param string $com/adobe/granite/security/ui  (optional)
# @param string $com/adobe/granite/startup  (optional)
# @param string $com/adobe/granite/tagsoup  (optional)
# @param string $com/adobe/granite/taskmanagement/core  (optional)
# @param string $com/adobe/granite/taskmanagement/workflow  (optional)
# @param string $com/adobe/granite/ui/clientlibs/compiler/less  (optional)
# @param string $com/adobe/granite/ui/clientlibs/processor/gcc  (optional)
# @param string $com/adobe/granite/webconsole/plugins  (optional)
# @param string $com/adobe/granite/workflow/console  (optional)
# @param string $com/adobe/xmp/worker/files/native/fragment/linux  (optional)
# @param string $com/adobe/xmp/worker/files/native/fragment/macosx  (optional)
# @param string $com/adobe/xmp/worker/files/native/fragment/win  (optional)
# @param string $com/day/commons/osgi/wrapper/simple_jndi  (optional)
# @param string $com/day/cq/cq_authhandler  (optional)
# @param string $com/day/cq/cq_compat_configupdate  (optional)
# @param string $com/day/cq/cq_licensebranding  (optional)
# @param string $com/day/cq/cq_notifcation_impl  (optional)
# @param string $com/day/cq/cq_replication_audit  (optional)
# @param string $com/day/cq/cq_search_ext  (optional)
# @param string $com/day/cq/dam/cq_dam_annotation_print  (optional)
# @param string $com/day/cq/dam/cq_dam_asset_usage  (optional)
# @param string $com/day/cq/dam/cq_dam_s7dam  (optional)
# @param string $com/day/cq/dam/cq_dam_similaritysearch  (optional)
# @param string $com/day/cq/dam/dam_webdav_support  (optional)
# @param string $com/day/cq/pre_upgrade_tasks  (optional)
# @param string $com/day/cq/replication/extensions  (optional)
# @param string $com/day/cq/wcm/cq_msm_core  (optional)
# @param string $com/day/cq/wcm/cq_wcm_translation  (optional)
# @param string $day_commons_jrawio  (optional)
# @param string $org/apache/aries/jmx/whiteboard  (optional)
# @param string $org/apache/felix/http/sslfilter  (optional)
# @param string $org/apache/felix/org/apache/felix/threaddump  (optional)
# @param string $org/apache/felix/webconsole/plugins/ds  (optional)
# @param string $org/apache/felix/webconsole/plugins/event  (optional)
# @param string $org/apache/felix/webconsole/plugins/memoryusage  (optional)
# @param string $org/apache/felix/webconsole/plugins/packageadmin  (optional)
# @param string $org/apache/jackrabbit/oak_auth_ldap  (optional)
# @param string $org/apache/jackrabbit/oak_segment_tar  (optional)
# @param string $org/apache/jackrabbit/oak_solr_osgi  (optional)
# @param string $org/apache/sling/bundleresource/impl  (optional)
# @param string $org/apache/sling/commons/fsclassloader  (optional)
# @param string $org/apache/sling/commons/log/webconsole  (optional)
# @param string $org/apache/sling/datasource  (optional)
# @param string $org/apache/sling/discovery/base  (optional)
# @param string $org/apache/sling/discovery/oak  (optional)
# @param string $org/apache/sling/discovery/support  (optional)
# @param string $org/apache/sling/distribution/api  (optional)
# @param string $org/apache/sling/distribution/core  (optional)
# @param string $org/apache/sling/extensions/webconsolesecurityprovider  (optional)
# @param string $org/apache/sling/hc/webconsole  (optional)
# @param string $org/apache/sling/installer/console  (optional)
# @param string $org/apache/sling/installer/provider/file  (optional)
# @param string $org/apache/sling/installer/provider/jcr  (optional)
# @param string $org/apache/sling/jcr/davex  (optional)
# @param string $org/apache/sling/jcr/resourcesecurity  (optional)
# @param string $org/apache/sling/jmx/provider  (optional)
# @param string $org/apache/sling/launchpad/installer  (optional)
# @param string $org/apache/sling/models/impl  (optional)
# @param string $org/apache/sling/repoinit/parser  (optional)
# @param string $org/apache/sling/resource/inventory  (optional)
# @param string $org/apache/sling/resourceresolver  (optional)
# @param string $org/apache/sling/scripting/javascript  (optional)
# @param string $org/apache/sling/scripting/jst  (optional)
# @param string $org/apache/sling/scripting/sightly/js/provider  (optional)
# @param string $org/apache/sling/scripting/sightly/models/provider  (optional)
# @param string $org/apache/sling/security  (optional)
# @param string $org/apache/sling/servlets/compat  (optional)
# @param string $org/apache/sling/servlets/get  (optional)
# @param string $org/apache/sling/startupfilter/disabler  (optional)
# @param string $org/apache/sling/tracer  (optional)
# @param string $we/retail/client/app/core  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'com/adobe/cq/cdn/cdn_rewriter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/cloud_config/components' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/cloud_config/core' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/cloud_config/ui' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/com/adobe/cq/editor' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/com/adobe/cq/projects/core' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/com/adobe/cq/projects/wcm/core' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/com/adobe/cq/ui/commons' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/com/adobe/cq/wcm/style' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/cq_activitymap_integration' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/cq_contexthub_commons' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/cq_dtm' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/cq_healthcheck' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/cq_multisite_targeting' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/cq_pre_upgrade_cleanup' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/cq_product_info_provider' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/cq_rest_sites' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/cq_security_hc' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/dam/cq_dam_svg_handler' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/dam/cq_scene7_imaging' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/dtm_reactor/core' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/dtm_reactor/ui' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/exp_jspel_resolver' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/inbox/cq_inbox' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/json_schema_parser' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/media/cq_media_publishing_dps_fp_core' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/mobile/cq_mobile_caas' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/mobile/cq_mobile_index_builder' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/mobile/cq_mobile_phonegap_build' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/myspell' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/sample/we/retail/core' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/screens/com/adobe/cq/screens/dcc' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/screens/com/adobe/cq/screens/mq/core' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_as_provider' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_badging_basic_impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_badging_impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_calendar_impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_content_fragments_impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_enablement_impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_graph_impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_ideation_impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_jcr_provider' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_members_impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_ms_provider' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_notifications_channels_web' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_notifications_impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_rdb_provider' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_scf_impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_scoring_basic_impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_scoring_impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_serviceusers_impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_srp_impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/cq/social/cq_social_ugcbase_impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/dam/cq_dam_cfm_impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/forms/foundation_forms_foundation_base' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/apicontroller' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/asset/core' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/auth/sso' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/bundles/hc/impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/compat_router' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/conf' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/conf/ui/core' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/cors' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/crx_explorer' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/crxde_lite' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/crypto/config' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/crypto/extension' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/crypto/file' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/crypto/jcr' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/csrf' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/distribution/core' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/dropwizard/metrics' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/frags/impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/gibson' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/infocollector' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/installer/factory/packages' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/jetty/ssl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/jobs/async' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/maintenance/oak' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/monitoring/core' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/queries' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/replication/hc/impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/repository/checker' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/repository/hc/impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/rest/assets' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/security/ui' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/startup' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/tagsoup' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/taskmanagement/core' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/taskmanagement/workflow' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/ui/clientlibs/compiler/less' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/ui/clientlibs/processor/gcc' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/webconsole/plugins' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/workflow/console' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/xmp/worker/files/native/fragment/linux' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/xmp/worker/files/native/fragment/macosx' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/xmp/worker/files/native/fragment/win' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/day/commons/osgi/wrapper/simple_jndi' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/day/cq/cq_authhandler' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/day/cq/cq_compat_configupdate' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/day/cq/cq_licensebranding' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/day/cq/cq_notifcation_impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/day/cq/cq_replication_audit' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/day/cq/cq_search_ext' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/day/cq/dam/cq_dam_annotation_print' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/day/cq/dam/cq_dam_asset_usage' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/day/cq/dam/cq_dam_s7dam' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/day/cq/dam/cq_dam_similaritysearch' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/day/cq/dam/dam_webdav_support' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/day/cq/pre_upgrade_tasks' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/day/cq/replication/extensions' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/day/cq/wcm/cq_msm_core' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/day/cq/wcm/cq_wcm_translation' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'day_commons_jrawio' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/aries/jmx/whiteboard' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/felix/http/sslfilter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/felix/org/apache/felix/threaddump' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/felix/webconsole/plugins/ds' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/felix/webconsole/plugins/event' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/felix/webconsole/plugins/memoryusage' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/felix/webconsole/plugins/packageadmin' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/jackrabbit/oak_auth_ldap' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/jackrabbit/oak_segment_tar' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/jackrabbit/oak_solr_osgi' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/bundleresource/impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/fsclassloader' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/webconsole' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/datasource' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/discovery/base' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/discovery/oak' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/discovery/support' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/distribution/api' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/distribution/core' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/extensions/webconsolesecurityprovider' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/hc/webconsole' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/installer/console' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/installer/provider/file' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/installer/provider/jcr' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/jcr/davex' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/jcr/resourcesecurity' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/jmx/provider' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/launchpad/installer' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/models/impl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/repoinit/parser' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/resource/inventory' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/resourceresolver' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/scripting/javascript' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/scripting/jst' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/scripting/sightly/js/provider' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/scripting/sightly/models/provider' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/security' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/servlets/compat' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/servlets/get' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/startupfilter/disabler' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/tracer' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'we/retail/client/app/core' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_apicontroller_filter_resolver_hook_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo',
        };
}
# @return ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo
#
sub com_adobe_granite_apicontroller_filter_resolver_hook_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/cdn/cdn_rewriter'}) {
        $query_params->{'com.adobe.cq.cdn.cdn-rewriter'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/cdn/cdn_rewriter'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/cloud_config/components'}) {
        $query_params->{'com.adobe.cq.cloud-config.components'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/cloud_config/components'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/cloud_config/core'}) {
        $query_params->{'com.adobe.cq.cloud-config.core'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/cloud_config/core'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/cloud_config/ui'}) {
        $query_params->{'com.adobe.cq.cloud-config.ui'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/cloud_config/ui'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/com/adobe/cq/editor'}) {
        $query_params->{'com.adobe.cq.com.adobe.cq.editor'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/com/adobe/cq/editor'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/com/adobe/cq/projects/core'}) {
        $query_params->{'com.adobe.cq.com.adobe.cq.projects.core'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/com/adobe/cq/projects/core'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/com/adobe/cq/projects/wcm/core'}) {
        $query_params->{'com.adobe.cq.com.adobe.cq.projects.wcm.core'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/com/adobe/cq/projects/wcm/core'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/com/adobe/cq/ui/commons'}) {
        $query_params->{'com.adobe.cq.com.adobe.cq.ui.commons'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/com/adobe/cq/ui/commons'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/com/adobe/cq/wcm/style'}) {
        $query_params->{'com.adobe.cq.com.adobe.cq.wcm.style'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/com/adobe/cq/wcm/style'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/cq_activitymap_integration'}) {
        $query_params->{'com.adobe.cq.cq-activitymap-integration'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/cq_activitymap_integration'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/cq_contexthub_commons'}) {
        $query_params->{'com.adobe.cq.cq-contexthub-commons'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/cq_contexthub_commons'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/cq_dtm'}) {
        $query_params->{'com.adobe.cq.cq-dtm'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/cq_dtm'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/cq_healthcheck'}) {
        $query_params->{'com.adobe.cq.cq-healthcheck'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/cq_healthcheck'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/cq_multisite_targeting'}) {
        $query_params->{'com.adobe.cq.cq-multisite-targeting'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/cq_multisite_targeting'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/cq_pre_upgrade_cleanup'}) {
        $query_params->{'com.adobe.cq.cq-pre-upgrade-cleanup'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/cq_pre_upgrade_cleanup'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/cq_product_info_provider'}) {
        $query_params->{'com.adobe.cq.cq-product-info-provider'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/cq_product_info_provider'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/cq_rest_sites'}) {
        $query_params->{'com.adobe.cq.cq-rest-sites'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/cq_rest_sites'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/cq_security_hc'}) {
        $query_params->{'com.adobe.cq.cq-security-hc'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/cq_security_hc'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/dam/cq_dam_svg_handler'}) {
        $query_params->{'com.adobe.cq.dam.cq-dam-svg-handler'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/dam/cq_dam_svg_handler'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/dam/cq_scene7_imaging'}) {
        $query_params->{'com.adobe.cq.dam.cq-scene7-imaging'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/dam/cq_scene7_imaging'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/dtm_reactor/core'}) {
        $query_params->{'com.adobe.cq.dtm-reactor.core'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/dtm_reactor/core'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/dtm_reactor/ui'}) {
        $query_params->{'com.adobe.cq.dtm-reactor.ui'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/dtm_reactor/ui'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/exp_jspel_resolver'}) {
        $query_params->{'com.adobe.cq.exp-jspel-resolver'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/exp_jspel_resolver'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/inbox/cq_inbox'}) {
        $query_params->{'com.adobe.cq.inbox.cq-inbox'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/inbox/cq_inbox'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/json_schema_parser'}) {
        $query_params->{'com.adobe.cq.json-schema-parser'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/json_schema_parser'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/media/cq_media_publishing_dps_fp_core'}) {
        $query_params->{'com.adobe.cq.media.cq-media-publishing-dps-fp-core'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/media/cq_media_publishing_dps_fp_core'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/mobile/cq_mobile_caas'}) {
        $query_params->{'com.adobe.cq.mobile.cq-mobile-caas'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/mobile/cq_mobile_caas'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/mobile/cq_mobile_index_builder'}) {
        $query_params->{'com.adobe.cq.mobile.cq-mobile-index-builder'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/mobile/cq_mobile_index_builder'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/mobile/cq_mobile_phonegap_build'}) {
        $query_params->{'com.adobe.cq.mobile.cq-mobile-phonegap-build'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/mobile/cq_mobile_phonegap_build'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/myspell'}) {
        $query_params->{'com.adobe.cq.myspell'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/myspell'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/sample/we/retail/core'}) {
        $query_params->{'com.adobe.cq.sample.we.retail.core'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/sample/we/retail/core'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/screens/com/adobe/cq/screens/dcc'}) {
        $query_params->{'com.adobe.cq.screens.com.adobe.cq.screens.dcc'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/screens/com/adobe/cq/screens/dcc'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/screens/com/adobe/cq/screens/mq/core'}) {
        $query_params->{'com.adobe.cq.screens.com.adobe.cq.screens.mq.core'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/screens/com/adobe/cq/screens/mq/core'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_as_provider'}) {
        $query_params->{'com.adobe.cq.social.cq-social-as-provider'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_as_provider'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_badging_basic_impl'}) {
        $query_params->{'com.adobe.cq.social.cq-social-badging-basic-impl'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_badging_basic_impl'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_badging_impl'}) {
        $query_params->{'com.adobe.cq.social.cq-social-badging-impl'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_badging_impl'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_calendar_impl'}) {
        $query_params->{'com.adobe.cq.social.cq-social-calendar-impl'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_calendar_impl'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_content_fragments_impl'}) {
        $query_params->{'com.adobe.cq.social.cq-social-content-fragments-impl'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_content_fragments_impl'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_enablement_impl'}) {
        $query_params->{'com.adobe.cq.social.cq-social-enablement-impl'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_enablement_impl'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_graph_impl'}) {
        $query_params->{'com.adobe.cq.social.cq-social-graph-impl'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_graph_impl'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_ideation_impl'}) {
        $query_params->{'com.adobe.cq.social.cq-social-ideation-impl'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_ideation_impl'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_jcr_provider'}) {
        $query_params->{'com.adobe.cq.social.cq-social-jcr-provider'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_jcr_provider'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_members_impl'}) {
        $query_params->{'com.adobe.cq.social.cq-social-members-impl'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_members_impl'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_ms_provider'}) {
        $query_params->{'com.adobe.cq.social.cq-social-ms-provider'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_ms_provider'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_notifications_channels_web'}) {
        $query_params->{'com.adobe.cq.social.cq-social-notifications-channels-web'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_notifications_channels_web'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_notifications_impl'}) {
        $query_params->{'com.adobe.cq.social.cq-social-notifications-impl'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_notifications_impl'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_rdb_provider'}) {
        $query_params->{'com.adobe.cq.social.cq-social-rdb-provider'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_rdb_provider'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_scf_impl'}) {
        $query_params->{'com.adobe.cq.social.cq-social-scf-impl'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_scf_impl'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_scoring_basic_impl'}) {
        $query_params->{'com.adobe.cq.social.cq-social-scoring-basic-impl'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_scoring_basic_impl'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_scoring_impl'}) {
        $query_params->{'com.adobe.cq.social.cq-social-scoring-impl'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_scoring_impl'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_serviceusers_impl'}) {
        $query_params->{'com.adobe.cq.social.cq-social-serviceusers-impl'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_serviceusers_impl'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_srp_impl'}) {
        $query_params->{'com.adobe.cq.social.cq-social-srp-impl'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_srp_impl'});
    }

    # query params
    if ( exists $args{'com/adobe/cq/social/cq_social_ugcbase_impl'}) {
        $query_params->{'com.adobe.cq.social.cq-social-ugcbase-impl'} = $self->{api_client}->to_query_value($args{'com/adobe/cq/social/cq_social_ugcbase_impl'});
    }

    # query params
    if ( exists $args{'com/adobe/dam/cq_dam_cfm_impl'}) {
        $query_params->{'com.adobe.dam.cq-dam-cfm-impl'} = $self->{api_client}->to_query_value($args{'com/adobe/dam/cq_dam_cfm_impl'});
    }

    # query params
    if ( exists $args{'com/adobe/forms/foundation_forms_foundation_base'}) {
        $query_params->{'com.adobe.forms.foundation-forms-foundation-base'} = $self->{api_client}->to_query_value($args{'com/adobe/forms/foundation_forms_foundation_base'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/apicontroller'}) {
        $query_params->{'com.adobe.granite.apicontroller'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/apicontroller'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/asset/core'}) {
        $query_params->{'com.adobe.granite.asset.core'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/asset/core'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/auth/sso'}) {
        $query_params->{'com.adobe.granite.auth.sso'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/auth/sso'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/bundles/hc/impl'}) {
        $query_params->{'com.adobe.granite.bundles.hc.impl'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/bundles/hc/impl'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/compat_router'}) {
        $query_params->{'com.adobe.granite.compat-router'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/compat_router'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/conf'}) {
        $query_params->{'com.adobe.granite.conf'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/conf'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/conf/ui/core'}) {
        $query_params->{'com.adobe.granite.conf.ui.core'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/conf/ui/core'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/cors'}) {
        $query_params->{'com.adobe.granite.cors'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/cors'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/crx_explorer'}) {
        $query_params->{'com.adobe.granite.crx-explorer'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/crx_explorer'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/crxde_lite'}) {
        $query_params->{'com.adobe.granite.crxde-lite'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/crxde_lite'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/crypto/config'}) {
        $query_params->{'com.adobe.granite.crypto.config'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/crypto/config'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/crypto/extension'}) {
        $query_params->{'com.adobe.granite.crypto.extension'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/crypto/extension'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/crypto/file'}) {
        $query_params->{'com.adobe.granite.crypto.file'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/crypto/file'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/crypto/jcr'}) {
        $query_params->{'com.adobe.granite.crypto.jcr'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/crypto/jcr'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/csrf'}) {
        $query_params->{'com.adobe.granite.csrf'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/csrf'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/distribution/core'}) {
        $query_params->{'com.adobe.granite.distribution.core'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/distribution/core'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/dropwizard/metrics'}) {
        $query_params->{'com.adobe.granite.dropwizard.metrics'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/dropwizard/metrics'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/frags/impl'}) {
        $query_params->{'com.adobe.granite.frags.impl'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/frags/impl'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/gibson'}) {
        $query_params->{'com.adobe.granite.gibson'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/gibson'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/infocollector'}) {
        $query_params->{'com.adobe.granite.infocollector'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/infocollector'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/installer/factory/packages'}) {
        $query_params->{'com.adobe.granite.installer.factory.packages'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/installer/factory/packages'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/jetty/ssl'}) {
        $query_params->{'com.adobe.granite.jetty.ssl'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/jetty/ssl'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/jobs/async'}) {
        $query_params->{'com.adobe.granite.jobs.async'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/jobs/async'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/maintenance/oak'}) {
        $query_params->{'com.adobe.granite.maintenance.oak'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/maintenance/oak'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/monitoring/core'}) {
        $query_params->{'com.adobe.granite.monitoring.core'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/monitoring/core'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/queries'}) {
        $query_params->{'com.adobe.granite.queries'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/queries'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/replication/hc/impl'}) {
        $query_params->{'com.adobe.granite.replication.hc.impl'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/replication/hc/impl'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/repository/checker'}) {
        $query_params->{'com.adobe.granite.repository.checker'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/repository/checker'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/repository/hc/impl'}) {
        $query_params->{'com.adobe.granite.repository.hc.impl'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/repository/hc/impl'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/rest/assets'}) {
        $query_params->{'com.adobe.granite.rest.assets'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/rest/assets'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/security/ui'}) {
        $query_params->{'com.adobe.granite.security.ui'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/security/ui'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/startup'}) {
        $query_params->{'com.adobe.granite.startup'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/startup'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/tagsoup'}) {
        $query_params->{'com.adobe.granite.tagsoup'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/tagsoup'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/taskmanagement/core'}) {
        $query_params->{'com.adobe.granite.taskmanagement.core'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/taskmanagement/core'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/taskmanagement/workflow'}) {
        $query_params->{'com.adobe.granite.taskmanagement.workflow'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/taskmanagement/workflow'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/ui/clientlibs/compiler/less'}) {
        $query_params->{'com.adobe.granite.ui.clientlibs.compiler.less'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/ui/clientlibs/compiler/less'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/ui/clientlibs/processor/gcc'}) {
        $query_params->{'com.adobe.granite.ui.clientlibs.processor.gcc'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/ui/clientlibs/processor/gcc'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/webconsole/plugins'}) {
        $query_params->{'com.adobe.granite.webconsole.plugins'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/webconsole/plugins'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/workflow/console'}) {
        $query_params->{'com.adobe.granite.workflow.console'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/workflow/console'});
    }

    # query params
    if ( exists $args{'com/adobe/xmp/worker/files/native/fragment/linux'}) {
        $query_params->{'com.adobe.xmp.worker.files.native.fragment.linux'} = $self->{api_client}->to_query_value($args{'com/adobe/xmp/worker/files/native/fragment/linux'});
    }

    # query params
    if ( exists $args{'com/adobe/xmp/worker/files/native/fragment/macosx'}) {
        $query_params->{'com.adobe.xmp.worker.files.native.fragment.macosx'} = $self->{api_client}->to_query_value($args{'com/adobe/xmp/worker/files/native/fragment/macosx'});
    }

    # query params
    if ( exists $args{'com/adobe/xmp/worker/files/native/fragment/win'}) {
        $query_params->{'com.adobe.xmp.worker.files.native.fragment.win'} = $self->{api_client}->to_query_value($args{'com/adobe/xmp/worker/files/native/fragment/win'});
    }

    # query params
    if ( exists $args{'com/day/commons/osgi/wrapper/simple_jndi'}) {
        $query_params->{'com.day.commons.osgi.wrapper.simple-jndi'} = $self->{api_client}->to_query_value($args{'com/day/commons/osgi/wrapper/simple_jndi'});
    }

    # query params
    if ( exists $args{'com/day/cq/cq_authhandler'}) {
        $query_params->{'com.day.cq.cq-authhandler'} = $self->{api_client}->to_query_value($args{'com/day/cq/cq_authhandler'});
    }

    # query params
    if ( exists $args{'com/day/cq/cq_compat_configupdate'}) {
        $query_params->{'com.day.cq.cq-compat-configupdate'} = $self->{api_client}->to_query_value($args{'com/day/cq/cq_compat_configupdate'});
    }

    # query params
    if ( exists $args{'com/day/cq/cq_licensebranding'}) {
        $query_params->{'com.day.cq.cq-licensebranding'} = $self->{api_client}->to_query_value($args{'com/day/cq/cq_licensebranding'});
    }

    # query params
    if ( exists $args{'com/day/cq/cq_notifcation_impl'}) {
        $query_params->{'com.day.cq.cq-notifcation-impl'} = $self->{api_client}->to_query_value($args{'com/day/cq/cq_notifcation_impl'});
    }

    # query params
    if ( exists $args{'com/day/cq/cq_replication_audit'}) {
        $query_params->{'com.day.cq.cq-replication-audit'} = $self->{api_client}->to_query_value($args{'com/day/cq/cq_replication_audit'});
    }

    # query params
    if ( exists $args{'com/day/cq/cq_search_ext'}) {
        $query_params->{'com.day.cq.cq-search-ext'} = $self->{api_client}->to_query_value($args{'com/day/cq/cq_search_ext'});
    }

    # query params
    if ( exists $args{'com/day/cq/dam/cq_dam_annotation_print'}) {
        $query_params->{'com.day.cq.dam.cq-dam-annotation-print'} = $self->{api_client}->to_query_value($args{'com/day/cq/dam/cq_dam_annotation_print'});
    }

    # query params
    if ( exists $args{'com/day/cq/dam/cq_dam_asset_usage'}) {
        $query_params->{'com.day.cq.dam.cq-dam-asset-usage'} = $self->{api_client}->to_query_value($args{'com/day/cq/dam/cq_dam_asset_usage'});
    }

    # query params
    if ( exists $args{'com/day/cq/dam/cq_dam_s7dam'}) {
        $query_params->{'com.day.cq.dam.cq-dam-s7dam'} = $self->{api_client}->to_query_value($args{'com/day/cq/dam/cq_dam_s7dam'});
    }

    # query params
    if ( exists $args{'com/day/cq/dam/cq_dam_similaritysearch'}) {
        $query_params->{'com.day.cq.dam.cq-dam-similaritysearch'} = $self->{api_client}->to_query_value($args{'com/day/cq/dam/cq_dam_similaritysearch'});
    }

    # query params
    if ( exists $args{'com/day/cq/dam/dam_webdav_support'}) {
        $query_params->{'com.day.cq.dam.dam-webdav-support'} = $self->{api_client}->to_query_value($args{'com/day/cq/dam/dam_webdav_support'});
    }

    # query params
    if ( exists $args{'com/day/cq/pre_upgrade_tasks'}) {
        $query_params->{'com.day.cq.pre-upgrade-tasks'} = $self->{api_client}->to_query_value($args{'com/day/cq/pre_upgrade_tasks'});
    }

    # query params
    if ( exists $args{'com/day/cq/replication/extensions'}) {
        $query_params->{'com.day.cq.replication.extensions'} = $self->{api_client}->to_query_value($args{'com/day/cq/replication/extensions'});
    }

    # query params
    if ( exists $args{'com/day/cq/wcm/cq_msm_core'}) {
        $query_params->{'com.day.cq.wcm.cq-msm-core'} = $self->{api_client}->to_query_value($args{'com/day/cq/wcm/cq_msm_core'});
    }

    # query params
    if ( exists $args{'com/day/cq/wcm/cq_wcm_translation'}) {
        $query_params->{'com.day.cq.wcm.cq-wcm-translation'} = $self->{api_client}->to_query_value($args{'com/day/cq/wcm/cq_wcm_translation'});
    }

    # query params
    if ( exists $args{'day_commons_jrawio'}) {
        $query_params->{'day-commons-jrawio'} = $self->{api_client}->to_query_value($args{'day_commons_jrawio'});
    }

    # query params
    if ( exists $args{'org/apache/aries/jmx/whiteboard'}) {
        $query_params->{'org.apache.aries.jmx.whiteboard'} = $self->{api_client}->to_query_value($args{'org/apache/aries/jmx/whiteboard'});
    }

    # query params
    if ( exists $args{'org/apache/felix/http/sslfilter'}) {
        $query_params->{'org.apache.felix.http.sslfilter'} = $self->{api_client}->to_query_value($args{'org/apache/felix/http/sslfilter'});
    }

    # query params
    if ( exists $args{'org/apache/felix/org/apache/felix/threaddump'}) {
        $query_params->{'org.apache.felix.org.apache.felix.threaddump'} = $self->{api_client}->to_query_value($args{'org/apache/felix/org/apache/felix/threaddump'});
    }

    # query params
    if ( exists $args{'org/apache/felix/webconsole/plugins/ds'}) {
        $query_params->{'org.apache.felix.webconsole.plugins.ds'} = $self->{api_client}->to_query_value($args{'org/apache/felix/webconsole/plugins/ds'});
    }

    # query params
    if ( exists $args{'org/apache/felix/webconsole/plugins/event'}) {
        $query_params->{'org.apache.felix.webconsole.plugins.event'} = $self->{api_client}->to_query_value($args{'org/apache/felix/webconsole/plugins/event'});
    }

    # query params
    if ( exists $args{'org/apache/felix/webconsole/plugins/memoryusage'}) {
        $query_params->{'org.apache.felix.webconsole.plugins.memoryusage'} = $self->{api_client}->to_query_value($args{'org/apache/felix/webconsole/plugins/memoryusage'});
    }

    # query params
    if ( exists $args{'org/apache/felix/webconsole/plugins/packageadmin'}) {
        $query_params->{'org.apache.felix.webconsole.plugins.packageadmin'} = $self->{api_client}->to_query_value($args{'org/apache/felix/webconsole/plugins/packageadmin'});
    }

    # query params
    if ( exists $args{'org/apache/jackrabbit/oak_auth_ldap'}) {
        $query_params->{'org.apache.jackrabbit.oak-auth-ldap'} = $self->{api_client}->to_query_value($args{'org/apache/jackrabbit/oak_auth_ldap'});
    }

    # query params
    if ( exists $args{'org/apache/jackrabbit/oak_segment_tar'}) {
        $query_params->{'org.apache.jackrabbit.oak-segment-tar'} = $self->{api_client}->to_query_value($args{'org/apache/jackrabbit/oak_segment_tar'});
    }

    # query params
    if ( exists $args{'org/apache/jackrabbit/oak_solr_osgi'}) {
        $query_params->{'org.apache.jackrabbit.oak-solr-osgi'} = $self->{api_client}->to_query_value($args{'org/apache/jackrabbit/oak_solr_osgi'});
    }

    # query params
    if ( exists $args{'org/apache/sling/bundleresource/impl'}) {
        $query_params->{'org.apache.sling.bundleresource.impl'} = $self->{api_client}->to_query_value($args{'org/apache/sling/bundleresource/impl'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/fsclassloader'}) {
        $query_params->{'org.apache.sling.commons.fsclassloader'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/fsclassloader'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/webconsole'}) {
        $query_params->{'org.apache.sling.commons.log.webconsole'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/webconsole'});
    }

    # query params
    if ( exists $args{'org/apache/sling/datasource'}) {
        $query_params->{'org.apache.sling.datasource'} = $self->{api_client}->to_query_value($args{'org/apache/sling/datasource'});
    }

    # query params
    if ( exists $args{'org/apache/sling/discovery/base'}) {
        $query_params->{'org.apache.sling.discovery.base'} = $self->{api_client}->to_query_value($args{'org/apache/sling/discovery/base'});
    }

    # query params
    if ( exists $args{'org/apache/sling/discovery/oak'}) {
        $query_params->{'org.apache.sling.discovery.oak'} = $self->{api_client}->to_query_value($args{'org/apache/sling/discovery/oak'});
    }

    # query params
    if ( exists $args{'org/apache/sling/discovery/support'}) {
        $query_params->{'org.apache.sling.discovery.support'} = $self->{api_client}->to_query_value($args{'org/apache/sling/discovery/support'});
    }

    # query params
    if ( exists $args{'org/apache/sling/distribution/api'}) {
        $query_params->{'org.apache.sling.distribution.api'} = $self->{api_client}->to_query_value($args{'org/apache/sling/distribution/api'});
    }

    # query params
    if ( exists $args{'org/apache/sling/distribution/core'}) {
        $query_params->{'org.apache.sling.distribution.core'} = $self->{api_client}->to_query_value($args{'org/apache/sling/distribution/core'});
    }

    # query params
    if ( exists $args{'org/apache/sling/extensions/webconsolesecurityprovider'}) {
        $query_params->{'org.apache.sling.extensions.webconsolesecurityprovider'} = $self->{api_client}->to_query_value($args{'org/apache/sling/extensions/webconsolesecurityprovider'});
    }

    # query params
    if ( exists $args{'org/apache/sling/hc/webconsole'}) {
        $query_params->{'org.apache.sling.hc.webconsole'} = $self->{api_client}->to_query_value($args{'org/apache/sling/hc/webconsole'});
    }

    # query params
    if ( exists $args{'org/apache/sling/installer/console'}) {
        $query_params->{'org.apache.sling.installer.console'} = $self->{api_client}->to_query_value($args{'org/apache/sling/installer/console'});
    }

    # query params
    if ( exists $args{'org/apache/sling/installer/provider/file'}) {
        $query_params->{'org.apache.sling.installer.provider.file'} = $self->{api_client}->to_query_value($args{'org/apache/sling/installer/provider/file'});
    }

    # query params
    if ( exists $args{'org/apache/sling/installer/provider/jcr'}) {
        $query_params->{'org.apache.sling.installer.provider.jcr'} = $self->{api_client}->to_query_value($args{'org/apache/sling/installer/provider/jcr'});
    }

    # query params
    if ( exists $args{'org/apache/sling/jcr/davex'}) {
        $query_params->{'org.apache.sling.jcr.davex'} = $self->{api_client}->to_query_value($args{'org/apache/sling/jcr/davex'});
    }

    # query params
    if ( exists $args{'org/apache/sling/jcr/resourcesecurity'}) {
        $query_params->{'org.apache.sling.jcr.resourcesecurity'} = $self->{api_client}->to_query_value($args{'org/apache/sling/jcr/resourcesecurity'});
    }

    # query params
    if ( exists $args{'org/apache/sling/jmx/provider'}) {
        $query_params->{'org.apache.sling.jmx.provider'} = $self->{api_client}->to_query_value($args{'org/apache/sling/jmx/provider'});
    }

    # query params
    if ( exists $args{'org/apache/sling/launchpad/installer'}) {
        $query_params->{'org.apache.sling.launchpad.installer'} = $self->{api_client}->to_query_value($args{'org/apache/sling/launchpad/installer'});
    }

    # query params
    if ( exists $args{'org/apache/sling/models/impl'}) {
        $query_params->{'org.apache.sling.models.impl'} = $self->{api_client}->to_query_value($args{'org/apache/sling/models/impl'});
    }

    # query params
    if ( exists $args{'org/apache/sling/repoinit/parser'}) {
        $query_params->{'org.apache.sling.repoinit.parser'} = $self->{api_client}->to_query_value($args{'org/apache/sling/repoinit/parser'});
    }

    # query params
    if ( exists $args{'org/apache/sling/resource/inventory'}) {
        $query_params->{'org.apache.sling.resource.inventory'} = $self->{api_client}->to_query_value($args{'org/apache/sling/resource/inventory'});
    }

    # query params
    if ( exists $args{'org/apache/sling/resourceresolver'}) {
        $query_params->{'org.apache.sling.resourceresolver'} = $self->{api_client}->to_query_value($args{'org/apache/sling/resourceresolver'});
    }

    # query params
    if ( exists $args{'org/apache/sling/scripting/javascript'}) {
        $query_params->{'org.apache.sling.scripting.javascript'} = $self->{api_client}->to_query_value($args{'org/apache/sling/scripting/javascript'});
    }

    # query params
    if ( exists $args{'org/apache/sling/scripting/jst'}) {
        $query_params->{'org.apache.sling.scripting.jst'} = $self->{api_client}->to_query_value($args{'org/apache/sling/scripting/jst'});
    }

    # query params
    if ( exists $args{'org/apache/sling/scripting/sightly/js/provider'}) {
        $query_params->{'org.apache.sling.scripting.sightly.js.provider'} = $self->{api_client}->to_query_value($args{'org/apache/sling/scripting/sightly/js/provider'});
    }

    # query params
    if ( exists $args{'org/apache/sling/scripting/sightly/models/provider'}) {
        $query_params->{'org.apache.sling.scripting.sightly.models.provider'} = $self->{api_client}->to_query_value($args{'org/apache/sling/scripting/sightly/models/provider'});
    }

    # query params
    if ( exists $args{'org/apache/sling/security'}) {
        $query_params->{'org.apache.sling.security'} = $self->{api_client}->to_query_value($args{'org/apache/sling/security'});
    }

    # query params
    if ( exists $args{'org/apache/sling/servlets/compat'}) {
        $query_params->{'org.apache.sling.servlets.compat'} = $self->{api_client}->to_query_value($args{'org/apache/sling/servlets/compat'});
    }

    # query params
    if ( exists $args{'org/apache/sling/servlets/get'}) {
        $query_params->{'org.apache.sling.servlets.get'} = $self->{api_client}->to_query_value($args{'org/apache/sling/servlets/get'});
    }

    # query params
    if ( exists $args{'org/apache/sling/startupfilter/disabler'}) {
        $query_params->{'org.apache.sling.startupfilter.disabler'} = $self->{api_client}->to_query_value($args{'org/apache/sling/startupfilter/disabler'});
    }

    # query params
    if ( exists $args{'org/apache/sling/tracer'}) {
        $query_params->{'org.apache.sling.tracer'} = $self->{api_client}->to_query_value($args{'org/apache/sling/tracer'});
    }

    # query params
    if ( exists $args{'we/retail/client/app/core'}) {
        $query_params->{'we.retail.client.app.core'} = $self->{api_client}->to_query_value($args{'we/retail/client/app/core'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_cert_impl_client_cert_auth_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $path  (optional)
# @param int $service/ranking  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_cert_impl_client_cert_auth_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo',
        };
}
# @return ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo
#
sub com_adobe_granite_auth_cert_impl_client_cert_auth_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_ims
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $configid  (optional)
# @param string $scope  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'configid' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'scope' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_ims' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthImsInfo',
        };
}
# @return ComAdobeGraniteAuthImsInfo
#
sub com_adobe_granite_auth_ims {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.ims';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'configid'}) {
        $query_params->{'configid'} = $self->{api_client}->to_query_value($args{'configid'});
    }

    # query params
    if ( exists $args{'scope'}) {
        $query_params->{'scope'} = $self->{api_client}->to_query_value($args{'scope'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthImsInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $oauth/provider/id  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oauth/provider/id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo',
        };
}
# @return ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo
#
sub com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'oauth/provider/id'}) {
        $query_params->{'oauth.provider.id'} = $self->{api_client}->to_query_value($args{'oauth/provider/id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $auth/ims/client/secret  (optional)
# @param string $customizer/type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'auth/ims/client/secret' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'customizer/type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo',
        };
}
# @return ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo
#
sub com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'auth/ims/client/secret'}) {
        $query_params->{'auth.ims.client.secret'} = $self->{api_client}->to_query_value($args{'auth/ims/client/secret'});
    }

    # query params
    if ( exists $args{'customizer/type'}) {
        $query_params->{'customizer.type'} = $self->{api_client}->to_query_value($args{'customizer/type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_ims_impl_ims_config_provider_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $oauth/configmanager/ims/configid  (optional)
# @param string $ims/owning_entity  (optional)
# @param string $aem/instance_id  (optional)
# @param string $ims/service_code  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oauth/configmanager/ims/configid' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'ims/owning_entity' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'aem/instance_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'ims/service_code' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_ims_impl_ims_config_provider_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo',
        };
}
# @return ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo
#
sub com_adobe_granite_auth_ims_impl_ims_config_provider_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'oauth/configmanager/ims/configid'}) {
        $query_params->{'oauth.configmanager.ims.configid'} = $self->{api_client}->to_query_value($args{'oauth/configmanager/ims/configid'});
    }

    # query params
    if ( exists $args{'ims/owning_entity'}) {
        $query_params->{'ims.owningEntity'} = $self->{api_client}->to_query_value($args{'ims/owning_entity'});
    }

    # query params
    if ( exists $args{'aem/instance_id'}) {
        $query_params->{'aem.instanceId'} = $self->{api_client}->to_query_value($args{'aem/instance_id'});
    }

    # query params
    if ( exists $args{'ims/service_code'}) {
        $query_params->{'ims.serviceCode'} = $self->{api_client}->to_query_value($args{'ims/service_code'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $oauth/provider/id  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oauth/provider/id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo',
        };
}
# @return ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo
#
sub com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'oauth/provider/id'}) {
        $query_params->{'oauth.provider.id'} = $self->{api_client}->to_query_value($args{'oauth/provider/id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_ims_impl_ims_provider_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $oauth/provider/id  (optional)
# @param string $oauth/provider/ims/authorization/url  (optional)
# @param string $oauth/provider/ims/token/url  (optional)
# @param string $oauth/provider/ims/profile/url  (optional)
# @param ARRAY[string] $oauth/provider/ims/extended/details/urls  (optional)
# @param string $oauth/provider/ims/validate/token/url  (optional)
# @param string $oauth/provider/ims/session/property  (optional)
# @param string $oauth/provider/ims/service/token/client/id  (optional)
# @param string $oauth/provider/ims/service/token/client/secret  (optional)
# @param string $oauth/provider/ims/service/token  (optional)
# @param string $ims/org/ref  (optional)
# @param ARRAY[string] $ims/group/mapping  (optional)
# @param boolean $oauth/provider/ims/only/license/group  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oauth/provider/id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/provider/ims/authorization/url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/provider/ims/token/url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/provider/ims/profile/url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/provider/ims/extended/details/urls' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oauth/provider/ims/validate/token/url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/provider/ims/session/property' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/provider/ims/service/token/client/id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/provider/ims/service/token/client/secret' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/provider/ims/service/token' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'ims/org/ref' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'ims/group/mapping' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oauth/provider/ims/only/license/group' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_ims_impl_ims_provider_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthImsImplIMSProviderImplInfo',
        };
}
# @return ComAdobeGraniteAuthImsImplIMSProviderImplInfo
#
sub com_adobe_granite_auth_ims_impl_ims_provider_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'oauth/provider/id'}) {
        $query_params->{'oauth.provider.id'} = $self->{api_client}->to_query_value($args{'oauth/provider/id'});
    }

    # query params
    if ( exists $args{'oauth/provider/ims/authorization/url'}) {
        $query_params->{'oauth.provider.ims.authorization.url'} = $self->{api_client}->to_query_value($args{'oauth/provider/ims/authorization/url'});
    }

    # query params
    if ( exists $args{'oauth/provider/ims/token/url'}) {
        $query_params->{'oauth.provider.ims.token.url'} = $self->{api_client}->to_query_value($args{'oauth/provider/ims/token/url'});
    }

    # query params
    if ( exists $args{'oauth/provider/ims/profile/url'}) {
        $query_params->{'oauth.provider.ims.profile.url'} = $self->{api_client}->to_query_value($args{'oauth/provider/ims/profile/url'});
    }

    # query params
    if ( exists $args{'oauth/provider/ims/extended/details/urls'}) {
        $query_params->{'oauth.provider.ims.extended.details.urls'} = $self->{api_client}->to_query_value($args{'oauth/provider/ims/extended/details/urls'});
    }

    # query params
    if ( exists $args{'oauth/provider/ims/validate/token/url'}) {
        $query_params->{'oauth.provider.ims.validate.token.url'} = $self->{api_client}->to_query_value($args{'oauth/provider/ims/validate/token/url'});
    }

    # query params
    if ( exists $args{'oauth/provider/ims/session/property'}) {
        $query_params->{'oauth.provider.ims.session.property'} = $self->{api_client}->to_query_value($args{'oauth/provider/ims/session/property'});
    }

    # query params
    if ( exists $args{'oauth/provider/ims/service/token/client/id'}) {
        $query_params->{'oauth.provider.ims.service.token.client.id'} = $self->{api_client}->to_query_value($args{'oauth/provider/ims/service/token/client/id'});
    }

    # query params
    if ( exists $args{'oauth/provider/ims/service/token/client/secret'}) {
        $query_params->{'oauth.provider.ims.service.token.client.secret'} = $self->{api_client}->to_query_value($args{'oauth/provider/ims/service/token/client/secret'});
    }

    # query params
    if ( exists $args{'oauth/provider/ims/service/token'}) {
        $query_params->{'oauth.provider.ims.service.token'} = $self->{api_client}->to_query_value($args{'oauth/provider/ims/service/token'});
    }

    # query params
    if ( exists $args{'ims/org/ref'}) {
        $query_params->{'ims.org.ref'} = $self->{api_client}->to_query_value($args{'ims/org/ref'});
    }

    # query params
    if ( exists $args{'ims/group/mapping'}) {
        $query_params->{'ims.group.mapping'} = $self->{api_client}->to_query_value($args{'ims/group/mapping'});
    }

    # query params
    if ( exists $args{'oauth/provider/ims/only/license/group'}) {
        $query_params->{'oauth.provider.ims.only.license.group'} = $self->{api_client}->to_query_value($args{'oauth/provider/ims/only/license/group'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthImsImplIMSProviderImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_oauth_accesstoken_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $auth/token/provider/title  (optional)
# @param ARRAY[string] $auth/token/provider/default/claims  (optional)
# @param string $auth/token/provider/endpoint  (optional)
# @param string $auth/access/token/request  (optional)
# @param string $auth/token/provider/keypair/alias  (optional)
# @param int $auth/token/provider/conn/timeout  (optional)
# @param int $auth/token/provider/so/timeout  (optional)
# @param string $auth/token/provider/client/id  (optional)
# @param string $auth/token/provider/scope  (optional)
# @param boolean $auth/token/provider/reuse/access/token  (optional)
# @param boolean $auth/token/provider/relaxed/ssl  (optional)
# @param string $token/request/customizer/type  (optional)
# @param string $auth/token/validator/type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auth/token/provider/title' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auth/token/provider/default/claims' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'auth/token/provider/endpoint' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auth/access/token/request' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auth/token/provider/keypair/alias' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auth/token/provider/conn/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'auth/token/provider/so/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'auth/token/provider/client/id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auth/token/provider/scope' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auth/token/provider/reuse/access/token' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'auth/token/provider/relaxed/ssl' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'token/request/customizer/type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auth/token/validator/type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_oauth_accesstoken_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthOauthAccesstokenProviderInfo',
        };
}
# @return ComAdobeGraniteAuthOauthAccesstokenProviderInfo
#
sub com_adobe_granite_auth_oauth_accesstoken_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'auth/token/provider/title'}) {
        $query_params->{'auth.token.provider.title'} = $self->{api_client}->to_query_value($args{'auth/token/provider/title'});
    }

    # query params
    if ( exists $args{'auth/token/provider/default/claims'}) {
        $query_params->{'auth.token.provider.default.claims'} = $self->{api_client}->to_query_value($args{'auth/token/provider/default/claims'});
    }

    # query params
    if ( exists $args{'auth/token/provider/endpoint'}) {
        $query_params->{'auth.token.provider.endpoint'} = $self->{api_client}->to_query_value($args{'auth/token/provider/endpoint'});
    }

    # query params
    if ( exists $args{'auth/access/token/request'}) {
        $query_params->{'auth.access.token.request'} = $self->{api_client}->to_query_value($args{'auth/access/token/request'});
    }

    # query params
    if ( exists $args{'auth/token/provider/keypair/alias'}) {
        $query_params->{'auth.token.provider.keypair.alias'} = $self->{api_client}->to_query_value($args{'auth/token/provider/keypair/alias'});
    }

    # query params
    if ( exists $args{'auth/token/provider/conn/timeout'}) {
        $query_params->{'auth.token.provider.conn.timeout'} = $self->{api_client}->to_query_value($args{'auth/token/provider/conn/timeout'});
    }

    # query params
    if ( exists $args{'auth/token/provider/so/timeout'}) {
        $query_params->{'auth.token.provider.so.timeout'} = $self->{api_client}->to_query_value($args{'auth/token/provider/so/timeout'});
    }

    # query params
    if ( exists $args{'auth/token/provider/client/id'}) {
        $query_params->{'auth.token.provider.client.id'} = $self->{api_client}->to_query_value($args{'auth/token/provider/client/id'});
    }

    # query params
    if ( exists $args{'auth/token/provider/scope'}) {
        $query_params->{'auth.token.provider.scope'} = $self->{api_client}->to_query_value($args{'auth/token/provider/scope'});
    }

    # query params
    if ( exists $args{'auth/token/provider/reuse/access/token'}) {
        $query_params->{'auth.token.provider.reuse.access.token'} = $self->{api_client}->to_query_value($args{'auth/token/provider/reuse/access/token'});
    }

    # query params
    if ( exists $args{'auth/token/provider/relaxed/ssl'}) {
        $query_params->{'auth.token.provider.relaxed.ssl'} = $self->{api_client}->to_query_value($args{'auth/token/provider/relaxed/ssl'});
    }

    # query params
    if ( exists $args{'token/request/customizer/type'}) {
        $query_params->{'token.request.customizer.type'} = $self->{api_client}->to_query_value($args{'token/request/customizer/type'});
    }

    # query params
    if ( exists $args{'auth/token/validator/type'}) {
        $query_params->{'auth.token.validator.type'} = $self->{api_client}->to_query_value($args{'auth/token/validator/type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthOauthAccesstokenProviderInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_oauth_impl_bearer_authentication_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $path  (optional)
# @param ARRAY[string] $oauth/client_ids/allowed  (optional)
# @param boolean $auth/bearer/sync/ims  (optional)
# @param string $auth/token_request_parameter  (optional)
# @param string $oauth/bearer/configid  (optional)
# @param boolean $oauth/jwt/support  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/client_ids/allowed' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'auth/bearer/sync/ims' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'auth/token_request_parameter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/bearer/configid' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/jwt/support' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_oauth_impl_bearer_authentication_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo',
        };
}
# @return ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo
#
sub com_adobe_granite_auth_oauth_impl_bearer_authentication_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'oauth/client_ids/allowed'}) {
        $query_params->{'oauth.clientIds.allowed'} = $self->{api_client}->to_query_value($args{'oauth/client_ids/allowed'});
    }

    # query params
    if ( exists $args{'auth/bearer/sync/ims'}) {
        $query_params->{'auth.bearer.sync.ims'} = $self->{api_client}->to_query_value($args{'auth/bearer/sync/ims'});
    }

    # query params
    if ( exists $args{'auth/token_request_parameter'}) {
        $query_params->{'auth.tokenRequestParameter'} = $self->{api_client}->to_query_value($args{'auth/token_request_parameter'});
    }

    # query params
    if ( exists $args{'oauth/bearer/configid'}) {
        $query_params->{'oauth.bearer.configid'} = $self->{api_client}->to_query_value($args{'oauth/bearer/configid'});
    }

    # query params
    if ( exists $args{'oauth/jwt/support'}) {
        $query_params->{'oauth.jwt.support'} = $self->{api_client}->to_query_value($args{'oauth/jwt/support'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_oauth_impl_default_token_validator_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $auth/token/validator/type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'auth/token/validator/type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_oauth_impl_default_token_validator_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo',
        };
}
# @return ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo
#
sub com_adobe_granite_auth_oauth_impl_default_token_validator_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'auth/token/validator/type'}) {
        $query_params->{'auth.token.validator.type'} = $self->{api_client}->to_query_value($args{'auth/token/validator/type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_oauth_impl_facebook_provider_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $oauth/provider/id  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oauth/provider/id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_oauth_impl_facebook_provider_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo',
        };
}
# @return ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo
#
sub com_adobe_granite_auth_oauth_impl_facebook_provider_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'oauth/provider/id'}) {
        $query_params->{'oauth.provider.id'} = $self->{api_client}->to_query_value($args{'oauth/provider/id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_oauth_impl_github_provider_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $oauth/provider/id  (optional)
# @param string $oauth/provider/github/authorization/url  (optional)
# @param string $oauth/provider/github/token/url  (optional)
# @param string $oauth/provider/github/profile/url  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oauth/provider/id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/provider/github/authorization/url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/provider/github/token/url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/provider/github/profile/url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_oauth_impl_github_provider_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthOauthImplGithubProviderImplInfo',
        };
}
# @return ComAdobeGraniteAuthOauthImplGithubProviderImplInfo
#
sub com_adobe_granite_auth_oauth_impl_github_provider_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'oauth/provider/id'}) {
        $query_params->{'oauth.provider.id'} = $self->{api_client}->to_query_value($args{'oauth/provider/id'});
    }

    # query params
    if ( exists $args{'oauth/provider/github/authorization/url'}) {
        $query_params->{'oauth.provider.github.authorization.url'} = $self->{api_client}->to_query_value($args{'oauth/provider/github/authorization/url'});
    }

    # query params
    if ( exists $args{'oauth/provider/github/token/url'}) {
        $query_params->{'oauth.provider.github.token.url'} = $self->{api_client}->to_query_value($args{'oauth/provider/github/token/url'});
    }

    # query params
    if ( exists $args{'oauth/provider/github/profile/url'}) {
        $query_params->{'oauth.provider.github.profile.url'} = $self->{api_client}->to_query_value($args{'oauth/provider/github/profile/url'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthOauthImplGithubProviderImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_oauth_impl_granite_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $oauth/provider/id  (optional)
# @param string $oauth/provider/granite/authorization/url  (optional)
# @param string $oauth/provider/granite/token/url  (optional)
# @param string $oauth/provider/granite/profile/url  (optional)
# @param string $oauth/provider/granite/extended/details/urls  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oauth/provider/id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/provider/granite/authorization/url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/provider/granite/token/url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/provider/granite/profile/url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/provider/granite/extended/details/urls' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_oauth_impl_granite_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthOauthImplGraniteProviderInfo',
        };
}
# @return ComAdobeGraniteAuthOauthImplGraniteProviderInfo
#
sub com_adobe_granite_auth_oauth_impl_granite_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'oauth/provider/id'}) {
        $query_params->{'oauth.provider.id'} = $self->{api_client}->to_query_value($args{'oauth/provider/id'});
    }

    # query params
    if ( exists $args{'oauth/provider/granite/authorization/url'}) {
        $query_params->{'oauth.provider.granite.authorization.url'} = $self->{api_client}->to_query_value($args{'oauth/provider/granite/authorization/url'});
    }

    # query params
    if ( exists $args{'oauth/provider/granite/token/url'}) {
        $query_params->{'oauth.provider.granite.token.url'} = $self->{api_client}->to_query_value($args{'oauth/provider/granite/token/url'});
    }

    # query params
    if ( exists $args{'oauth/provider/granite/profile/url'}) {
        $query_params->{'oauth.provider.granite.profile.url'} = $self->{api_client}->to_query_value($args{'oauth/provider/granite/profile/url'});
    }

    # query params
    if ( exists $args{'oauth/provider/granite/extended/details/urls'}) {
        $query_params->{'oauth.provider.granite.extended.details.urls'} = $self->{api_client}->to_query_value($args{'oauth/provider/granite/extended/details/urls'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthOauthImplGraniteProviderInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_oauth_impl_helper_provider_config_manager
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $oauth/cookie/login/timeout  (optional)
# @param string $oauth/cookie/max/age  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oauth/cookie/login/timeout' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/cookie/max/age' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_oauth_impl_helper_provider_config_manager' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo',
        };
}
# @return ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo
#
sub com_adobe_granite_auth_oauth_impl_helper_provider_config_manager {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'oauth/cookie/login/timeout'}) {
        $query_params->{'oauth.cookie.login.timeout'} = $self->{api_client}->to_query_value($args{'oauth/cookie/login/timeout'});
    }

    # query params
    if ( exists $args{'oauth/cookie/max/age'}) {
        $query_params->{'oauth.cookie.max.age'} = $self->{api_client}->to_query_value($args{'oauth/cookie/max/age'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $oauth/cookie/login/timeout  (optional)
# @param string $oauth/cookie/max/age  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oauth/cookie/login/timeout' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/cookie/max/age' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo',
        };
}
# @return ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo
#
sub com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'oauth/cookie/login/timeout'}) {
        $query_params->{'oauth.cookie.login.timeout'} = $self->{api_client}->to_query_value($args{'oauth/cookie/login/timeout'});
    }

    # query params
    if ( exists $args{'oauth/cookie/max/age'}) {
        $query_params->{'oauth.cookie.max.age'} = $self->{api_client}->to_query_value($args{'oauth/cookie/max/age'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $path  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo',
        };
}
# @return ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo
#
sub com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_oauth_impl_twitter_provider_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $oauth/provider/id  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oauth/provider/id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_oauth_impl_twitter_provider_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo',
        };
}
# @return ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo
#
sub com_adobe_granite_auth_oauth_impl_twitter_provider_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'oauth/provider/id'}) {
        $query_params->{'oauth.provider.id'} = $self->{api_client}->to_query_value($args{'oauth/provider/id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_oauth_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $oauth/config/id  (optional)
# @param string $oauth/client/id  (optional)
# @param string $oauth/client/secret  (optional)
# @param ARRAY[string] $oauth/scope  (optional)
# @param string $oauth/config/provider/id  (optional)
# @param boolean $oauth/create/users  (optional)
# @param string $oauth/userid/property  (optional)
# @param boolean $force/strict/username/matching  (optional)
# @param boolean $oauth/encode/userids  (optional)
# @param boolean $oauth/hash/userids  (optional)
# @param string $oauth/call_back_url  (optional)
# @param boolean $oauth/access/token/persist  (optional)
# @param boolean $oauth/access/token/persist/cookie  (optional)
# @param boolean $oauth/csrf/state/protection  (optional)
# @param boolean $oauth/redirect/request/params  (optional)
# @param boolean $oauth/config/siblings/allow  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oauth/config/id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/client/id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/client/secret' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/scope' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oauth/config/provider/id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/create/users' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'oauth/userid/property' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'force/strict/username/matching' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'oauth/encode/userids' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'oauth/hash/userids' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'oauth/call_back_url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/access/token/persist' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'oauth/access/token/persist/cookie' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'oauth/csrf/state/protection' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'oauth/redirect/request/params' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'oauth/config/siblings/allow' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_oauth_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthOauthProviderInfo',
        };
}
# @return ComAdobeGraniteAuthOauthProviderInfo
#
sub com_adobe_granite_auth_oauth_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.provider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'oauth/config/id'}) {
        $query_params->{'oauth.config.id'} = $self->{api_client}->to_query_value($args{'oauth/config/id'});
    }

    # query params
    if ( exists $args{'oauth/client/id'}) {
        $query_params->{'oauth.client.id'} = $self->{api_client}->to_query_value($args{'oauth/client/id'});
    }

    # query params
    if ( exists $args{'oauth/client/secret'}) {
        $query_params->{'oauth.client.secret'} = $self->{api_client}->to_query_value($args{'oauth/client/secret'});
    }

    # query params
    if ( exists $args{'oauth/scope'}) {
        $query_params->{'oauth.scope'} = $self->{api_client}->to_query_value($args{'oauth/scope'});
    }

    # query params
    if ( exists $args{'oauth/config/provider/id'}) {
        $query_params->{'oauth.config.provider.id'} = $self->{api_client}->to_query_value($args{'oauth/config/provider/id'});
    }

    # query params
    if ( exists $args{'oauth/create/users'}) {
        $query_params->{'oauth.create.users'} = $self->{api_client}->to_query_value($args{'oauth/create/users'});
    }

    # query params
    if ( exists $args{'oauth/userid/property'}) {
        $query_params->{'oauth.userid.property'} = $self->{api_client}->to_query_value($args{'oauth/userid/property'});
    }

    # query params
    if ( exists $args{'force/strict/username/matching'}) {
        $query_params->{'force.strict.username.matching'} = $self->{api_client}->to_query_value($args{'force/strict/username/matching'});
    }

    # query params
    if ( exists $args{'oauth/encode/userids'}) {
        $query_params->{'oauth.encode.userids'} = $self->{api_client}->to_query_value($args{'oauth/encode/userids'});
    }

    # query params
    if ( exists $args{'oauth/hash/userids'}) {
        $query_params->{'oauth.hash.userids'} = $self->{api_client}->to_query_value($args{'oauth/hash/userids'});
    }

    # query params
    if ( exists $args{'oauth/call_back_url'}) {
        $query_params->{'oauth.callBackUrl'} = $self->{api_client}->to_query_value($args{'oauth/call_back_url'});
    }

    # query params
    if ( exists $args{'oauth/access/token/persist'}) {
        $query_params->{'oauth.access.token.persist'} = $self->{api_client}->to_query_value($args{'oauth/access/token/persist'});
    }

    # query params
    if ( exists $args{'oauth/access/token/persist/cookie'}) {
        $query_params->{'oauth.access.token.persist.cookie'} = $self->{api_client}->to_query_value($args{'oauth/access/token/persist/cookie'});
    }

    # query params
    if ( exists $args{'oauth/csrf/state/protection'}) {
        $query_params->{'oauth.csrf.state.protection'} = $self->{api_client}->to_query_value($args{'oauth/csrf/state/protection'});
    }

    # query params
    if ( exists $args{'oauth/redirect/request/params'}) {
        $query_params->{'oauth.redirect.request.params'} = $self->{api_client}->to_query_value($args{'oauth/redirect/request/params'});
    }

    # query params
    if ( exists $args{'oauth/config/siblings/allow'}) {
        $query_params->{'oauth.config.siblings.allow'} = $self->{api_client}->to_query_value($args{'oauth/config/siblings/allow'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthOauthProviderInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_requirement_impl_default_requirement_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $supported_paths  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'supported_paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_requirement_impl_default_requirement_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo',
        };
}
# @return ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo
#
sub com_adobe_granite_auth_requirement_impl_default_requirement_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'supported_paths'}) {
        $query_params->{'supportedPaths'} = $self->{api_client}->to_query_value($args{'supported_paths'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_saml_saml_authentication_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $path  (optional)
# @param int $service/ranking  (optional)
# @param string $idp_url  (optional)
# @param string $idp_cert_alias  (optional)
# @param boolean $idp_http_redirect  (optional)
# @param string $service_provider_entity_id  (optional)
# @param string $assertion_consumer_service_url  (optional)
# @param string $sp_private_key_alias  (optional)
# @param string $key_store_password  (optional)
# @param string $default_redirect_url  (optional)
# @param string $user_id_attribute  (optional)
# @param boolean $use_encryption  (optional)
# @param boolean $create_user  (optional)
# @param string $user_intermediate_path  (optional)
# @param boolean $add_group_memberships  (optional)
# @param string $group_membership_attribute  (optional)
# @param ARRAY[string] $default_groups  (optional)
# @param string $name_id_format  (optional)
# @param ARRAY[string] $synchronize_attributes  (optional)
# @param boolean $handle_logout  (optional)
# @param string $logout_url  (optional)
# @param int $clock_tolerance  (optional)
# @param string $digest_method  (optional)
# @param string $signature_method  (optional)
# @param string $identity_sync_type  (optional)
# @param string $idp_identifier  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'idp_url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'idp_cert_alias' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'idp_http_redirect' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'service_provider_entity_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'assertion_consumer_service_url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sp_private_key_alias' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'key_store_password' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default_redirect_url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'user_id_attribute' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'use_encryption' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'create_user' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'user_intermediate_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'add_group_memberships' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'group_membership_attribute' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default_groups' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name_id_format' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'synchronize_attributes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'handle_logout' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'logout_url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'clock_tolerance' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'digest_method' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'signature_method' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'identity_sync_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'idp_identifier' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_saml_saml_authentication_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo',
        };
}
# @return ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo
#
sub com_adobe_granite_auth_saml_saml_authentication_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'idp_url'}) {
        $query_params->{'idpUrl'} = $self->{api_client}->to_query_value($args{'idp_url'});
    }

    # query params
    if ( exists $args{'idp_cert_alias'}) {
        $query_params->{'idpCertAlias'} = $self->{api_client}->to_query_value($args{'idp_cert_alias'});
    }

    # query params
    if ( exists $args{'idp_http_redirect'}) {
        $query_params->{'idpHttpRedirect'} = $self->{api_client}->to_query_value($args{'idp_http_redirect'});
    }

    # query params
    if ( exists $args{'service_provider_entity_id'}) {
        $query_params->{'serviceProviderEntityId'} = $self->{api_client}->to_query_value($args{'service_provider_entity_id'});
    }

    # query params
    if ( exists $args{'assertion_consumer_service_url'}) {
        $query_params->{'assertionConsumerServiceURL'} = $self->{api_client}->to_query_value($args{'assertion_consumer_service_url'});
    }

    # query params
    if ( exists $args{'sp_private_key_alias'}) {
        $query_params->{'spPrivateKeyAlias'} = $self->{api_client}->to_query_value($args{'sp_private_key_alias'});
    }

    # query params
    if ( exists $args{'key_store_password'}) {
        $query_params->{'keyStorePassword'} = $self->{api_client}->to_query_value($args{'key_store_password'});
    }

    # query params
    if ( exists $args{'default_redirect_url'}) {
        $query_params->{'defaultRedirectUrl'} = $self->{api_client}->to_query_value($args{'default_redirect_url'});
    }

    # query params
    if ( exists $args{'user_id_attribute'}) {
        $query_params->{'userIDAttribute'} = $self->{api_client}->to_query_value($args{'user_id_attribute'});
    }

    # query params
    if ( exists $args{'use_encryption'}) {
        $query_params->{'useEncryption'} = $self->{api_client}->to_query_value($args{'use_encryption'});
    }

    # query params
    if ( exists $args{'create_user'}) {
        $query_params->{'createUser'} = $self->{api_client}->to_query_value($args{'create_user'});
    }

    # query params
    if ( exists $args{'user_intermediate_path'}) {
        $query_params->{'userIntermediatePath'} = $self->{api_client}->to_query_value($args{'user_intermediate_path'});
    }

    # query params
    if ( exists $args{'add_group_memberships'}) {
        $query_params->{'addGroupMemberships'} = $self->{api_client}->to_query_value($args{'add_group_memberships'});
    }

    # query params
    if ( exists $args{'group_membership_attribute'}) {
        $query_params->{'groupMembershipAttribute'} = $self->{api_client}->to_query_value($args{'group_membership_attribute'});
    }

    # query params
    if ( exists $args{'default_groups'}) {
        $query_params->{'defaultGroups'} = $self->{api_client}->to_query_value($args{'default_groups'});
    }

    # query params
    if ( exists $args{'name_id_format'}) {
        $query_params->{'nameIdFormat'} = $self->{api_client}->to_query_value($args{'name_id_format'});
    }

    # query params
    if ( exists $args{'synchronize_attributes'}) {
        $query_params->{'synchronizeAttributes'} = $self->{api_client}->to_query_value($args{'synchronize_attributes'});
    }

    # query params
    if ( exists $args{'handle_logout'}) {
        $query_params->{'handleLogout'} = $self->{api_client}->to_query_value($args{'handle_logout'});
    }

    # query params
    if ( exists $args{'logout_url'}) {
        $query_params->{'logoutUrl'} = $self->{api_client}->to_query_value($args{'logout_url'});
    }

    # query params
    if ( exists $args{'clock_tolerance'}) {
        $query_params->{'clockTolerance'} = $self->{api_client}->to_query_value($args{'clock_tolerance'});
    }

    # query params
    if ( exists $args{'digest_method'}) {
        $query_params->{'digestMethod'} = $self->{api_client}->to_query_value($args{'digest_method'});
    }

    # query params
    if ( exists $args{'signature_method'}) {
        $query_params->{'signatureMethod'} = $self->{api_client}->to_query_value($args{'signature_method'});
    }

    # query params
    if ( exists $args{'identity_sync_type'}) {
        $query_params->{'identitySyncType'} = $self->{api_client}->to_query_value($args{'identity_sync_type'});
    }

    # query params
    if ( exists $args{'idp_identifier'}) {
        $query_params->{'idpIdentifier'} = $self->{api_client}->to_query_value($args{'idp_identifier'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_auth_sso_impl_sso_authentication_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $path  (optional)
# @param int $service/ranking  (optional)
# @param string $jaas/control_flag  (optional)
# @param string $jaas/realm_name  (optional)
# @param int $jaas/ranking  (optional)
# @param ARRAY[string] $headers  (optional)
# @param ARRAY[string] $cookies  (optional)
# @param ARRAY[string] $parameters  (optional)
# @param ARRAY[string] $usermap  (optional)
# @param string $format  (optional)
# @param string $trusted_credentials_attribute  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'jaas/control_flag' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jaas/realm_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jaas/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'headers' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cookies' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'parameters' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'usermap' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'format' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'trusted_credentials_attribute' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_auth_sso_impl_sso_authentication_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo',
        };
}
# @return ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo
#
sub com_adobe_granite_auth_sso_impl_sso_authentication_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'jaas/control_flag'}) {
        $query_params->{'jaas.controlFlag'} = $self->{api_client}->to_query_value($args{'jaas/control_flag'});
    }

    # query params
    if ( exists $args{'jaas/realm_name'}) {
        $query_params->{'jaas.realmName'} = $self->{api_client}->to_query_value($args{'jaas/realm_name'});
    }

    # query params
    if ( exists $args{'jaas/ranking'}) {
        $query_params->{'jaas.ranking'} = $self->{api_client}->to_query_value($args{'jaas/ranking'});
    }

    # query params
    if ( exists $args{'headers'}) {
        $query_params->{'headers'} = $self->{api_client}->to_query_value($args{'headers'});
    }

    # query params
    if ( exists $args{'cookies'}) {
        $query_params->{'cookies'} = $self->{api_client}->to_query_value($args{'cookies'});
    }

    # query params
    if ( exists $args{'parameters'}) {
        $query_params->{'parameters'} = $self->{api_client}->to_query_value($args{'parameters'});
    }

    # query params
    if ( exists $args{'usermap'}) {
        $query_params->{'usermap'} = $self->{api_client}->to_query_value($args{'usermap'});
    }

    # query params
    if ( exists $args{'format'}) {
        $query_params->{'format'} = $self->{api_client}->to_query_value($args{'format'});
    }

    # query params
    if ( exists $args{'trusted_credentials_attribute'}) {
        $query_params->{'trustedCredentialsAttribute'} = $self->{api_client}->to_query_value($args{'trusted_credentials_attribute'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_bundles_hc_impl_code_cache_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
# @param int $minimum/code/cache/size  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'minimum/code/cache/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_bundles_hc_impl_code_cache_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo',
        };
}
# @return ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo
#
sub com_adobe_granite_bundles_hc_impl_code_cache_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    # query params
    if ( exists $args{'minimum/code/cache/size'}) {
        $query_params->{'minimum.code.cache.size'} = $self->{api_client}->to_query_value($args{'minimum/code/cache/size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo',
        };
}
# @return ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo
#
sub com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo',
        };
}
# @return ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo
#
sub com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
# @param ARRAY[string] $ignored/bundles  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'ignored/bundles' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo',
        };
}
# @return ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo
#
sub com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    # query params
    if ( exists $args{'ignored/bundles'}) {
        $query_params->{'ignored.bundles'} = $self->{api_client}->to_query_value($args{'ignored/bundles'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_bundles_hc_impl_jobs_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
# @param int $max/queued/jobs  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'max/queued/jobs' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_bundles_hc_impl_jobs_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo',
        };
}
# @return ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo
#
sub com_adobe_granite_bundles_hc_impl_jobs_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    # query params
    if ( exists $args{'max/queued/jobs'}) {
        $query_params->{'max.queued.jobs'} = $self->{api_client}->to_query_value($args{'max/queued/jobs'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo',
        };
}
# @return ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo
#
sub com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo',
        };
}
# @return ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo
#
sub com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo',
        };
}
# @return ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo
#
sub com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo',
        };
}
# @return ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo
#
sub com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo',
        };
}
# @return ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo
#
sub com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_comments_internal_comment_replication_content_filter_fac
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $replicate/comment/resource_types  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'replicate/comment/resource_types' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_comments_internal_comment_replication_content_filter_fac' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo',
        };
}
# @return ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo
#
sub com_adobe_granite_comments_internal_comment_replication_content_filter_fac {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'replicate/comment/resource_types'}) {
        $query_params->{'replicate.comment.resourceTypes'} = $self->{api_client}->to_query_value($args{'replicate/comment/resource_types'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_compatrouter_impl_compat_switching_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $compatgroups  (optional)
# @param boolean $enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'compatgroups' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_compatrouter_impl_compat_switching_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo',
        };
}
# @return ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo
#
sub com_adobe_granite_compatrouter_impl_compat_switching_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'compatgroups'}) {
        $query_params->{'compatgroups'} = $self->{api_client}->to_query_value($args{'compatgroups'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_compatrouter_impl_routing_config
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $id  (optional)
# @param string $compat_path  (optional)
# @param string $new_path  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'compat_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'new_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_compatrouter_impl_routing_config' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteCompatrouterImplRoutingConfigInfo',
        };
}
# @return ComAdobeGraniteCompatrouterImplRoutingConfigInfo
#
sub com_adobe_granite_compatrouter_impl_routing_config {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'compat_path'}) {
        $query_params->{'compatPath'} = $self->{api_client}->to_query_value($args{'compat_path'});
    }

    # query params
    if ( exists $args{'new_path'}) {
        $query_params->{'newPath'} = $self->{api_client}->to_query_value($args{'new_path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteCompatrouterImplRoutingConfigInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_compatrouter_impl_switch_mapping_config
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $group  (optional)
# @param ARRAY[string] $ids  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'group' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'ids' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_compatrouter_impl_switch_mapping_config' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo',
        };
}
# @return ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo
#
sub com_adobe_granite_compatrouter_impl_switch_mapping_config {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'group'}) {
        $query_params->{'group'} = $self->{api_client}->to_query_value($args{'group'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enabled  (optional)
# @param ARRAY[string] $fallback_paths  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'fallback_paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo',
        };
}
# @return ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo
#
sub com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    # query params
    if ( exists $args{'fallback_paths'}) {
        $query_params->{'fallbackPaths'} = $self->{api_client}->to_query_value($args{'fallback_paths'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_contexthub_impl_context_hub_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $com/adobe/granite/contexthub/silent_mode  (optional)
# @param boolean $com/adobe/granite/contexthub/show_ui  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'com/adobe/granite/contexthub/silent_mode' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'com/adobe/granite/contexthub/show_ui' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_contexthub_impl_context_hub_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteContexthubImplContextHubImplInfo',
        };
}
# @return ComAdobeGraniteContexthubImplContextHubImplInfo
#
sub com_adobe_granite_contexthub_impl_context_hub_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/contexthub/silent_mode'}) {
        $query_params->{'com.adobe.granite.contexthub.silent_mode'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/contexthub/silent_mode'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/contexthub/show_ui'}) {
        $query_params->{'com.adobe.granite.contexthub.show_ui'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/contexthub/show_ui'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteContexthubImplContextHubImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_cors_impl_cors_policy_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $alloworigin  (optional)
# @param ARRAY[string] $alloworiginregexp  (optional)
# @param ARRAY[string] $allowedpaths  (optional)
# @param ARRAY[string] $exposedheaders  (optional)
# @param int $maxage  (optional)
# @param ARRAY[string] $supportedheaders  (optional)
# @param ARRAY[string] $supportedmethods  (optional)
# @param boolean $supportscredentials  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'alloworigin' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'alloworiginregexp' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'allowedpaths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'exposedheaders' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'maxage' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'supportedheaders' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'supportedmethods' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'supportscredentials' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_cors_impl_cors_policy_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteCorsImplCORSPolicyImplInfo',
        };
}
# @return ComAdobeGraniteCorsImplCORSPolicyImplInfo
#
sub com_adobe_granite_cors_impl_cors_policy_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'alloworigin'}) {
        $query_params->{'alloworigin'} = $self->{api_client}->to_query_value($args{'alloworigin'});
    }

    # query params
    if ( exists $args{'alloworiginregexp'}) {
        $query_params->{'alloworiginregexp'} = $self->{api_client}->to_query_value($args{'alloworiginregexp'});
    }

    # query params
    if ( exists $args{'allowedpaths'}) {
        $query_params->{'allowedpaths'} = $self->{api_client}->to_query_value($args{'allowedpaths'});
    }

    # query params
    if ( exists $args{'exposedheaders'}) {
        $query_params->{'exposedheaders'} = $self->{api_client}->to_query_value($args{'exposedheaders'});
    }

    # query params
    if ( exists $args{'maxage'}) {
        $query_params->{'maxage'} = $self->{api_client}->to_query_value($args{'maxage'});
    }

    # query params
    if ( exists $args{'supportedheaders'}) {
        $query_params->{'supportedheaders'} = $self->{api_client}->to_query_value($args{'supportedheaders'});
    }

    # query params
    if ( exists $args{'supportedmethods'}) {
        $query_params->{'supportedmethods'} = $self->{api_client}->to_query_value($args{'supportedmethods'});
    }

    # query params
    if ( exists $args{'supportscredentials'}) {
        $query_params->{'supportscredentials'} = $self->{api_client}->to_query_value($args{'supportscredentials'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteCorsImplCORSPolicyImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_csrf_impl_csrf_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $filter/methods  (optional)
# @param boolean $filter/enable/safe/user/agents  (optional)
# @param ARRAY[string] $filter/safe/user/agents  (optional)
# @param ARRAY[string] $filter/excluded/paths  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'filter/methods' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'filter/enable/safe/user/agents' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'filter/safe/user/agents' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'filter/excluded/paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_csrf_impl_csrf_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteCsrfImplCSRFFilterInfo',
        };
}
# @return ComAdobeGraniteCsrfImplCSRFFilterInfo
#
sub com_adobe_granite_csrf_impl_csrf_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'filter/methods'}) {
        $query_params->{'filter.methods'} = $self->{api_client}->to_query_value($args{'filter/methods'});
    }

    # query params
    if ( exists $args{'filter/enable/safe/user/agents'}) {
        $query_params->{'filter.enable.safe.user.agents'} = $self->{api_client}->to_query_value($args{'filter/enable/safe/user/agents'});
    }

    # query params
    if ( exists $args{'filter/safe/user/agents'}) {
        $query_params->{'filter.safe.user.agents'} = $self->{api_client}->to_query_value($args{'filter/safe/user/agents'});
    }

    # query params
    if ( exists $args{'filter/excluded/paths'}) {
        $query_params->{'filter.excluded.paths'} = $self->{api_client}->to_query_value($args{'filter/excluded/paths'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteCsrfImplCSRFFilterInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_csrf_impl_csrf_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $csrf/token/expires/in  (optional)
# @param string $sling/auth/requirements  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'csrf/token/expires/in' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'sling/auth/requirements' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_csrf_impl_csrf_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteCsrfImplCSRFServletInfo',
        };
}
# @return ComAdobeGraniteCsrfImplCSRFServletInfo
#
sub com_adobe_granite_csrf_impl_csrf_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'csrf/token/expires/in'}) {
        $query_params->{'csrf.token.expires.in'} = $self->{api_client}->to_query_value($args{'csrf/token/expires/in'});
    }

    # query params
    if ( exists $args{'sling/auth/requirements'}) {
        $query_params->{'sling.auth.requirements'} = $self->{api_client}->to_query_value($args{'sling/auth/requirements'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteCsrfImplCSRFServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $username  (optional)
# @param string $encrypted_password  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'username' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'encrypted_password' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo',
        };
}
# @return ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo
#
sub com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'username'}) {
        $query_params->{'username'} = $self->{api_client}->to_query_value($args{'username'});
    }

    # query params
    if ( exists $args{'encrypted_password'}) {
        $query_params->{'encryptedPassword'} = $self->{api_client}->to_query_value($args{'encrypted_password'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_distribution_core_impl_diff_diff_changes_observer
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enabled  (optional)
# @param string $agent_name  (optional)
# @param string $diff_path  (optional)
# @param string $observed_path  (optional)
# @param string $service_name  (optional)
# @param string $property_names  (optional)
# @param int $distribution_delay  (optional)
# @param string $service_user/target  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'agent_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'diff_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'observed_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'service_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'property_names' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'distribution_delay' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'service_user/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_distribution_core_impl_diff_diff_changes_observer' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo',
        };
}
# @return ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo
#
sub com_adobe_granite_distribution_core_impl_diff_diff_changes_observer {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    # query params
    if ( exists $args{'agent_name'}) {
        $query_params->{'agentName'} = $self->{api_client}->to_query_value($args{'agent_name'});
    }

    # query params
    if ( exists $args{'diff_path'}) {
        $query_params->{'diffPath'} = $self->{api_client}->to_query_value($args{'diff_path'});
    }

    # query params
    if ( exists $args{'observed_path'}) {
        $query_params->{'observedPath'} = $self->{api_client}->to_query_value($args{'observed_path'});
    }

    # query params
    if ( exists $args{'service_name'}) {
        $query_params->{'serviceName'} = $self->{api_client}->to_query_value($args{'service_name'});
    }

    # query params
    if ( exists $args{'property_names'}) {
        $query_params->{'propertyNames'} = $self->{api_client}->to_query_value($args{'property_names'});
    }

    # query params
    if ( exists $args{'distribution_delay'}) {
        $query_params->{'distributionDelay'} = $self->{api_client}->to_query_value($args{'distribution_delay'});
    }

    # query params
    if ( exists $args{'service_user/target'}) {
        $query_params->{'serviceUser.target'} = $self->{api_client}->to_query_value($args{'service_user/target'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_distribution_core_impl_diff_diff_event_listener
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $diff_path  (optional)
# @param string $service_name  (optional)
# @param string $service_user/target  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'diff_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'service_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'service_user/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_distribution_core_impl_diff_diff_event_listener' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo',
        };
}
# @return ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo
#
sub com_adobe_granite_distribution_core_impl_diff_diff_event_listener {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'diff_path'}) {
        $query_params->{'diffPath'} = $self->{api_client}->to_query_value($args{'diff_path'});
    }

    # query params
    if ( exists $args{'service_name'}) {
        $query_params->{'serviceName'} = $self->{api_client}->to_query_value($args{'service_name'});
    }

    # query params
    if ( exists $args{'service_user/target'}) {
        $query_params->{'serviceUser.target'} = $self->{api_client}->to_query_value($args{'service_user/target'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_distribution_core_impl_distribution_to_replication_even
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $importer/name  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'importer/name' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_distribution_core_impl_distribution_to_replication_even' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo',
        };
}
# @return ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo
#
sub com_adobe_granite_distribution_core_impl_distribution_to_replication_even {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'importer/name'}) {
        $query_params->{'importer.name'} = $self->{api_client}->to_query_value($args{'importer/name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_distribution_core_impl_replication_adapters_replicat
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $provider_name  (optional)
# @param boolean $forward/requests  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'provider_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'forward/requests' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_distribution_core_impl_replication_adapters_replicat' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo',
        };
}
# @return ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo
#
sub com_adobe_granite_distribution_core_impl_replication_adapters_replicat {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'provider_name'}) {
        $query_params->{'providerName'} = $self->{api_client}->to_query_value($args{'provider_name'});
    }

    # query params
    if ( exists $args{'forward/requests'}) {
        $query_params->{'forward.requests'} = $self->{api_client}->to_query_value($args{'forward/requests'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_distribution_core_impl_replication_distribution_trans
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $forward/requests  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'forward/requests' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_distribution_core_impl_replication_distribution_trans' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo',
        };
}
# @return ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo
#
sub com_adobe_granite_distribution_core_impl_replication_distribution_trans {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'forward/requests'}) {
        $query_params->{'forward.requests'} = $self->{api_client}->to_query_value($args{'forward/requests'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_distribution_core_impl_transport_access_token_distribu
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $service_name  (optional)
# @param string $user_id  (optional)
# @param string $access_token_provider/target  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'service_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'user_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'access_token_provider/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_distribution_core_impl_transport_access_token_distribu' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo',
        };
}
# @return ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo
#
sub com_adobe_granite_distribution_core_impl_transport_access_token_distribu {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'service_name'}) {
        $query_params->{'serviceName'} = $self->{api_client}->to_query_value($args{'service_name'});
    }

    # query params
    if ( exists $args{'user_id'}) {
        $query_params->{'userId'} = $self->{api_client}->to_query_value($args{'user_id'});
    }

    # query params
    if ( exists $args{'access_token_provider/target'}) {
        $query_params->{'accessTokenProvider.target'} = $self->{api_client}->to_query_value($args{'access_token_provider/target'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_frags_impl_check_http_header_flag
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $feature/name  (optional)
# @param string $feature/description  (optional)
# @param string $http/header/name  (optional)
# @param string $http/header/valuepattern  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'feature/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'feature/description' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'http/header/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'http/header/valuepattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_frags_impl_check_http_header_flag' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo',
        };
}
# @return ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo
#
sub com_adobe_granite_frags_impl_check_http_header_flag {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'feature/name'}) {
        $query_params->{'feature.name'} = $self->{api_client}->to_query_value($args{'feature/name'});
    }

    # query params
    if ( exists $args{'feature/description'}) {
        $query_params->{'feature.description'} = $self->{api_client}->to_query_value($args{'feature/description'});
    }

    # query params
    if ( exists $args{'http/header/name'}) {
        $query_params->{'http.header.name'} = $self->{api_client}->to_query_value($args{'http/header/name'});
    }

    # query params
    if ( exists $args{'http/header/valuepattern'}) {
        $query_params->{'http.header.valuepattern'} = $self->{api_client}->to_query_value($args{'http/header/valuepattern'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_frags_impl_random_feature
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $feature/name  (optional)
# @param string $feature/description  (optional)
# @param string $active/percentage  (optional)
# @param string $cookie/name  (optional)
# @param int $cookie/max_age  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'feature/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'feature/description' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'active/percentage' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cookie/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cookie/max_age' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_frags_impl_random_feature' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteFragsImplRandomFeatureInfo',
        };
}
# @return ComAdobeGraniteFragsImplRandomFeatureInfo
#
sub com_adobe_granite_frags_impl_random_feature {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'feature/name'}) {
        $query_params->{'feature.name'} = $self->{api_client}->to_query_value($args{'feature/name'});
    }

    # query params
    if ( exists $args{'feature/description'}) {
        $query_params->{'feature.description'} = $self->{api_client}->to_query_value($args{'feature/description'});
    }

    # query params
    if ( exists $args{'active/percentage'}) {
        $query_params->{'active.percentage'} = $self->{api_client}->to_query_value($args{'active/percentage'});
    }

    # query params
    if ( exists $args{'cookie/name'}) {
        $query_params->{'cookie.name'} = $self->{api_client}->to_query_value($args{'cookie/name'});
    }

    # query params
    if ( exists $args{'cookie/max_age'}) {
        $query_params->{'cookie.maxAge'} = $self->{api_client}->to_query_value($args{'cookie/max_age'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteFragsImplRandomFeatureInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_httpcache_file_file_cache_store
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $com/adobe/granite/httpcache/file/document_root  (optional)
# @param string $com/adobe/granite/httpcache/file/include_host  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'com/adobe/granite/httpcache/file/document_root' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/httpcache/file/include_host' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_httpcache_file_file_cache_store' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteHttpcacheFileFileCacheStoreInfo',
        };
}
# @return ComAdobeGraniteHttpcacheFileFileCacheStoreInfo
#
sub com_adobe_granite_httpcache_file_file_cache_store {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/httpcache/file/document_root'}) {
        $query_params->{'com.adobe.granite.httpcache.file.documentRoot'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/httpcache/file/document_root'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/httpcache/file/include_host'}) {
        $query_params->{'com.adobe.granite.httpcache.file.includeHost'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/httpcache/file/include_host'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteHttpcacheFileFileCacheStoreInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_httpcache_impl_outer_cache_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $com/adobe/granite/httpcache/url/paths  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'com/adobe/granite/httpcache/url/paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_httpcache_impl_outer_cache_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo',
        };
}
# @return ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo
#
sub com_adobe_granite_httpcache_impl_outer_cache_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/httpcache/url/paths'}) {
        $query_params->{'com.adobe.granite.httpcache.url.paths'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/httpcache/url/paths'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_i18n_impl_bundle_pseudo_translations
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $pseudo/patterns  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'pseudo/patterns' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_i18n_impl_bundle_pseudo_translations' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo',
        };
}
# @return ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo
#
sub com_adobe_granite_i18n_impl_bundle_pseudo_translations {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'pseudo/patterns'}) {
        $query_params->{'pseudo.patterns'} = $self->{api_client}->to_query_value($args{'pseudo/patterns'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_i18n_impl_preferences_locale_resolver_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $security/preferences/name  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'security/preferences/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_i18n_impl_preferences_locale_resolver_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo',
        };
}
# @return ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo
#
sub com_adobe_granite_i18n_impl_preferences_locale_resolver_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'security/preferences/name'}) {
        $query_params->{'security.preferences.name'} = $self->{api_client}->to_query_value($args{'security/preferences/name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_infocollector_info_collector
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $granite/infocollector/include_thread_dumps  (optional)
# @param boolean $granite/infocollector/include_heap_dump  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'granite/infocollector/include_thread_dumps' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'granite/infocollector/include_heap_dump' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_infocollector_info_collector' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteInfocollectorInfoCollectorInfo',
        };
}
# @return ComAdobeGraniteInfocollectorInfoCollectorInfo
#
sub com_adobe_granite_infocollector_info_collector {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'granite/infocollector/include_thread_dumps'}) {
        $query_params->{'granite.infocollector.includeThreadDumps'} = $self->{api_client}->to_query_value($args{'granite/infocollector/include_thread_dumps'});
    }

    # query params
    if ( exists $args{'granite/infocollector/include_heap_dump'}) {
        $query_params->{'granite.infocollector.includeHeapDump'} = $self->{api_client}->to_query_value($args{'granite/infocollector/include_heap_dump'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteInfocollectorInfoCollectorInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $com/adobe/granite/jetty/ssl/port  (optional)
# @param string $com/adobe/granite/jetty/ssl/keystore/user  (optional)
# @param string $com/adobe/granite/jetty/ssl/keystore/password  (optional)
# @param ARRAY[string] $com/adobe/granite/jetty/ssl/ciphersuites/excluded  (optional)
# @param ARRAY[string] $com/adobe/granite/jetty/ssl/ciphersuites/included  (optional)
# @param string $com/adobe/granite/jetty/ssl/client/certificate  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'com/adobe/granite/jetty/ssl/port' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'com/adobe/granite/jetty/ssl/keystore/user' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/jetty/ssl/keystore/password' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'com/adobe/granite/jetty/ssl/ciphersuites/excluded' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'com/adobe/granite/jetty/ssl/ciphersuites/included' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'com/adobe/granite/jetty/ssl/client/certificate' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo',
        };
}
# @return ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo
#
sub com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/jetty/ssl/port'}) {
        $query_params->{'com.adobe.granite.jetty.ssl.port'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/jetty/ssl/port'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/jetty/ssl/keystore/user'}) {
        $query_params->{'com.adobe.granite.jetty.ssl.keystore.user'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/jetty/ssl/keystore/user'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/jetty/ssl/keystore/password'}) {
        $query_params->{'com.adobe.granite.jetty.ssl.keystore.password'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/jetty/ssl/keystore/password'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/jetty/ssl/ciphersuites/excluded'}) {
        $query_params->{'com.adobe.granite.jetty.ssl.ciphersuites.excluded'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/jetty/ssl/ciphersuites/excluded'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/jetty/ssl/ciphersuites/included'}) {
        $query_params->{'com.adobe.granite.jetty.ssl.ciphersuites.included'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/jetty/ssl/ciphersuites/included'});
    }

    # query params
    if ( exists $args{'com/adobe/granite/jetty/ssl/client/certificate'}) {
        $query_params->{'com.adobe.granite.jetty.ssl.client.certificate'} = $self->{api_client}->to_query_value($args{'com/adobe/granite/jetty/ssl/client/certificate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_license_impl_license_check_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $check_internval  (optional)
# @param ARRAY[string] $exclude_ids  (optional)
# @param boolean $encrypt_ping  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'check_internval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'exclude_ids' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'encrypt_ping' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_license_impl_license_check_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteLicenseImplLicenseCheckFilterInfo',
        };
}
# @return ComAdobeGraniteLicenseImplLicenseCheckFilterInfo
#
sub com_adobe_granite_license_impl_license_check_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'check_internval'}) {
        $query_params->{'checkInternval'} = $self->{api_client}->to_query_value($args{'check_internval'});
    }

    # query params
    if ( exists $args{'exclude_ids'}) {
        $query_params->{'excludeIds'} = $self->{api_client}->to_query_value($args{'exclude_ids'});
    }

    # query params
    if ( exists $args{'encrypt_ping'}) {
        $query_params->{'encryptPing'} = $self->{api_client}->to_query_value($args{'encrypt_ping'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteLicenseImplLicenseCheckFilterInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_logging_impl_log_analyser_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $messages/queue/size  (optional)
# @param ARRAY[string] $logger/config  (optional)
# @param int $messages/size  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'messages/queue/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'logger/config' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'messages/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_logging_impl_log_analyser_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteLoggingImplLogAnalyserImplInfo',
        };
}
# @return ComAdobeGraniteLoggingImplLogAnalyserImplInfo
#
sub com_adobe_granite_logging_impl_log_analyser_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'messages/queue/size'}) {
        $query_params->{'messages.queue.size'} = $self->{api_client}->to_query_value($args{'messages/queue/size'});
    }

    # query params
    if ( exists $args{'logger/config'}) {
        $query_params->{'logger.config'} = $self->{api_client}->to_query_value($args{'logger/config'});
    }

    # query params
    if ( exists $args{'messages/size'}) {
        $query_params->{'messages.size'} = $self->{api_client}->to_query_value($args{'messages/size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteLoggingImplLogAnalyserImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_logging_impl_log_error_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_logging_impl_log_error_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo',
        };
}
# @return ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo
#
sub com_adobe_granite_logging_impl_log_error_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $granite/maintenance/mandatory  (optional)
# @param string $job/topics  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'granite/maintenance/mandatory' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'job/topics' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo',
        };
}
# @return ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo
#
sub com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'granite/maintenance/mandatory'}) {
        $query_params->{'granite.maintenance.mandatory'} = $self->{api_client}->to_query_value($args{'granite/maintenance/mandatory'});
    }

    # query params
    if ( exists $args{'job/topics'}) {
        $query_params->{'job.topics'} = $self->{api_client}->to_query_value($args{'job/topics'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $job/topics  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'job/topics' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo',
        };
}
# @return ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo
#
sub com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'job/topics'}) {
        $query_params->{'job.topics'} = $self->{api_client}->to_query_value($args{'job/topics'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_maintenance_crx_impl_revision_cleanup_task
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $full/gc/days  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'full/gc/days' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_maintenance_crx_impl_revision_cleanup_task' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo',
        };
}
# @return ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo
#
sub com_adobe_granite_maintenance_crx_impl_revision_cleanup_task {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'full/gc/days'}) {
        $query_params->{'full.gc.days'} = $self->{api_client}->to_query_value($args{'full/gc/days'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_monitoring_impl_script_config_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $script/filename  (optional)
# @param string $script/display  (optional)
# @param string $script/path  (optional)
# @param ARRAY[string] $script/platform  (optional)
# @param int $interval  (optional)
# @param string $jmxdomain  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'script/filename' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'script/display' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'script/path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'script/platform' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'jmxdomain' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_monitoring_impl_script_config_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteMonitoringImplScriptConfigImplInfo',
        };
}
# @return ComAdobeGraniteMonitoringImplScriptConfigImplInfo
#
sub com_adobe_granite_monitoring_impl_script_config_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'script/filename'}) {
        $query_params->{'script.filename'} = $self->{api_client}->to_query_value($args{'script/filename'});
    }

    # query params
    if ( exists $args{'script/display'}) {
        $query_params->{'script.display'} = $self->{api_client}->to_query_value($args{'script/display'});
    }

    # query params
    if ( exists $args{'script/path'}) {
        $query_params->{'script.path'} = $self->{api_client}->to_query_value($args{'script/path'});
    }

    # query params
    if ( exists $args{'script/platform'}) {
        $query_params->{'script.platform'} = $self->{api_client}->to_query_value($args{'script/platform'});
    }

    # query params
    if ( exists $args{'interval'}) {
        $query_params->{'interval'} = $self->{api_client}->to_query_value($args{'interval'});
    }

    # query params
    if ( exists $args{'jmxdomain'}) {
        $query_params->{'jmxdomain'} = $self->{api_client}->to_query_value($args{'jmxdomain'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteMonitoringImplScriptConfigImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $path  (optional)
# @param string $jaas/control_flag  (optional)
# @param string $jaas/realm_name  (optional)
# @param int $jaas/ranking  (optional)
# @param boolean $oauth/offline/validation  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jaas/control_flag' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jaas/realm_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jaas/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'oauth/offline/validation' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo',
        };
}
# @return ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo
#
sub com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'jaas/control_flag'}) {
        $query_params->{'jaas.controlFlag'} = $self->{api_client}->to_query_value($args{'jaas/control_flag'});
    }

    # query params
    if ( exists $args{'jaas/realm_name'}) {
        $query_params->{'jaas.realmName'} = $self->{api_client}->to_query_value($args{'jaas/realm_name'});
    }

    # query params
    if ( exists $args{'jaas/ranking'}) {
        $query_params->{'jaas.ranking'} = $self->{api_client}->to_query_value($args{'jaas/ranking'});
    }

    # query params
    if ( exists $args{'oauth/offline/validation'}) {
        $query_params->{'oauth.offline.validation'} = $self->{api_client}->to_query_value($args{'oauth/offline/validation'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_oauth_server_impl_access_token_cleanup_task
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $scheduler/expression  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduler/expression' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_oauth_server_impl_access_token_cleanup_task' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo',
        };
}
# @return ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo
#
sub com_adobe_granite_oauth_server_impl_access_token_cleanup_task {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scheduler/expression'}) {
        $query_params->{'scheduler.expression'} = $self->{api_client}->to_query_value($args{'scheduler/expression'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $oauth/client/revocation/active  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oauth/client/revocation/active' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo',
        };
}
# @return ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo
#
sub com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'oauth/client/revocation/active'}) {
        $query_params->{'oauth.client.revocation.active'} = $self->{api_client}->to_query_value($args{'oauth/client/revocation/active'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $sling/servlet/paths  (optional)
# @param boolean $oauth/revocation/active  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/servlet/paths' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/revocation/active' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo',
        };
}
# @return ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo
#
sub com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/servlet/paths'}) {
        $query_params->{'sling.servlet.paths'} = $self->{api_client}->to_query_value($args{'sling/servlet/paths'});
    }

    # query params
    if ( exists $args{'oauth/revocation/active'}) {
        $query_params->{'oauth.revocation.active'} = $self->{api_client}->to_query_value($args{'oauth/revocation/active'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $oauth/issuer  (optional)
# @param string $oauth/access/token/expires/in  (optional)
# @param string $osgi/http/whiteboard/servlet/pattern  (optional)
# @param string $osgi/http/whiteboard/context/select  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oauth/issuer' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'oauth/access/token/expires/in' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'osgi/http/whiteboard/servlet/pattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'osgi/http/whiteboard/context/select' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo',
        };
}
# @return ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo
#
sub com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'oauth/issuer'}) {
        $query_params->{'oauth.issuer'} = $self->{api_client}->to_query_value($args{'oauth/issuer'});
    }

    # query params
    if ( exists $args{'oauth/access/token/expires/in'}) {
        $query_params->{'oauth.access.token.expires.in'} = $self->{api_client}->to_query_value($args{'oauth/access/token/expires/in'});
    }

    # query params
    if ( exists $args{'osgi/http/whiteboard/servlet/pattern'}) {
        $query_params->{'osgi.http.whiteboard.servlet.pattern'} = $self->{api_client}->to_query_value($args{'osgi/http/whiteboard/servlet/pattern'});
    }

    # query params
    if ( exists $args{'osgi/http/whiteboard/context/select'}) {
        $query_params->{'osgi.http.whiteboard.context.select'} = $self->{api_client}->to_query_value($args{'osgi/http/whiteboard/context/select'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $oauth/token/revocation/active  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oauth/token/revocation/active' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo',
        };
}
# @return ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo
#
sub com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'oauth/token/revocation/active'}) {
        $query_params->{'oauth.token.revocation.active'} = $self->{api_client}->to_query_value($args{'oauth/token/revocation/active'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_offloading_impl_offloading_configurator
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $offloading/transporter  (optional)
# @param boolean $offloading/cleanup/payload  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'offloading/transporter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'offloading/cleanup/payload' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_offloading_impl_offloading_configurator' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo',
        };
}
# @return ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo
#
sub com_adobe_granite_offloading_impl_offloading_configurator {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'offloading/transporter'}) {
        $query_params->{'offloading.transporter'} = $self->{api_client}->to_query_value($args{'offloading/transporter'});
    }

    # query params
    if ( exists $args{'offloading/cleanup/payload'}) {
        $query_params->{'offloading.cleanup.payload'} = $self->{api_client}->to_query_value($args{'offloading/cleanup/payload'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_offloading_impl_offloading_job_cloner
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $offloading/jobcloner/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'offloading/jobcloner/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_offloading_impl_offloading_job_cloner' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo',
        };
}
# @return ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo
#
sub com_adobe_granite_offloading_impl_offloading_job_cloner {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'offloading/jobcloner/enabled'}) {
        $query_params->{'offloading.jobcloner.enabled'} = $self->{api_client}->to_query_value($args{'offloading/jobcloner/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_offloading_impl_offloading_job_offloader
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $offloading/offloader/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'offloading/offloader/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_offloading_impl_offloading_job_offloader' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo',
        };
}
# @return ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo
#
sub com_adobe_granite_offloading_impl_offloading_job_offloader {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'offloading/offloader/enabled'}) {
        $query_params->{'offloading.offloader.enabled'} = $self->{api_client}->to_query_value($args{'offloading/offloader/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_offloading_impl_transporter_offloading_agent_manager
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $offloading/agentmanager/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'offloading/agentmanager/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_offloading_impl_transporter_offloading_agent_manager' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo',
        };
}
# @return ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo
#
sub com_adobe_granite_offloading_impl_transporter_offloading_agent_manager {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'offloading/agentmanager/enabled'}) {
        $query_params->{'offloading.agentmanager.enabled'} = $self->{api_client}->to_query_value($args{'offloading/agentmanager/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_offloading_impl_transporter_offloading_default_transpo
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $default/transport/agent_to_worker/prefix  (optional)
# @param string $default/transport/agent_to_master/prefix  (optional)
# @param string $default/transport/input/package  (optional)
# @param string $default/transport/output/package  (optional)
# @param boolean $default/transport/replication/synchronous  (optional)
# @param boolean $default/transport/contentpackage  (optional)
# @param boolean $offloading/transporter/default/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'default/transport/agent_to_worker/prefix' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default/transport/agent_to_master/prefix' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default/transport/input/package' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default/transport/output/package' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default/transport/replication/synchronous' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'default/transport/contentpackage' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'offloading/transporter/default/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_offloading_impl_transporter_offloading_default_transpo' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo',
        };
}
# @return ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo
#
sub com_adobe_granite_offloading_impl_transporter_offloading_default_transpo {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'default/transport/agent_to_worker/prefix'}) {
        $query_params->{'default.transport.agent-to-worker.prefix'} = $self->{api_client}->to_query_value($args{'default/transport/agent_to_worker/prefix'});
    }

    # query params
    if ( exists $args{'default/transport/agent_to_master/prefix'}) {
        $query_params->{'default.transport.agent-to-master.prefix'} = $self->{api_client}->to_query_value($args{'default/transport/agent_to_master/prefix'});
    }

    # query params
    if ( exists $args{'default/transport/input/package'}) {
        $query_params->{'default.transport.input.package'} = $self->{api_client}->to_query_value($args{'default/transport/input/package'});
    }

    # query params
    if ( exists $args{'default/transport/output/package'}) {
        $query_params->{'default.transport.output.package'} = $self->{api_client}->to_query_value($args{'default/transport/output/package'});
    }

    # query params
    if ( exists $args{'default/transport/replication/synchronous'}) {
        $query_params->{'default.transport.replication.synchronous'} = $self->{api_client}->to_query_value($args{'default/transport/replication/synchronous'});
    }

    # query params
    if ( exists $args{'default/transport/contentpackage'}) {
        $query_params->{'default.transport.contentpackage'} = $self->{api_client}->to_query_value($args{'default/transport/contentpackage'});
    }

    # query params
    if ( exists $args{'offloading/transporter/default/enabled'}) {
        $query_params->{'offloading.transporter.default.enabled'} = $self->{api_client}->to_query_value($args{'offloading/transporter/default/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_omnisearch_impl_core_omni_search_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $omnisearch/suggestion/requiretext/min  (optional)
# @param boolean $omnisearch/suggestion/spellcheck/require  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'omnisearch/suggestion/requiretext/min' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'omnisearch/suggestion/spellcheck/require' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_omnisearch_impl_core_omni_search_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo',
        };
}
# @return ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo
#
sub com_adobe_granite_omnisearch_impl_core_omni_search_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'omnisearch/suggestion/requiretext/min'}) {
        $query_params->{'omnisearch.suggestion.requiretext.min'} = $self->{api_client}->to_query_value($args{'omnisearch/suggestion/requiretext/min'});
    }

    # query params
    if ( exists $args{'omnisearch/suggestion/spellcheck/require'}) {
        $query_params->{'omnisearch.suggestion.spellcheck.require'} = $self->{api_client}->to_query_value($args{'omnisearch/suggestion/spellcheck/require'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_optout_impl_opt_out_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $optout/cookies  (optional)
# @param ARRAY[string] $optout/headers  (optional)
# @param ARRAY[string] $optout/whitelist/cookies  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'optout/cookies' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'optout/headers' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'optout/whitelist/cookies' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_optout_impl_opt_out_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteOptoutImplOptOutServiceImplInfo',
        };
}
# @return ComAdobeGraniteOptoutImplOptOutServiceImplInfo
#
sub com_adobe_granite_optout_impl_opt_out_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'optout/cookies'}) {
        $query_params->{'optout.cookies'} = $self->{api_client}->to_query_value($args{'optout/cookies'});
    }

    # query params
    if ( exists $args{'optout/headers'}) {
        $query_params->{'optout.headers'} = $self->{api_client}->to_query_value($args{'optout/headers'});
    }

    # query params
    if ( exists $args{'optout/whitelist/cookies'}) {
        $query_params->{'optout.whitelist.cookies'} = $self->{api_client}->to_query_value($args{'optout/whitelist/cookies'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteOptoutImplOptOutServiceImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_queries_impl_hc_async_index_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $indexing/critical/threshold  (optional)
# @param int $indexing/warn/threshold  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'indexing/critical/threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'indexing/warn/threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_queries_impl_hc_async_index_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo',
        };
}
# @return ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo
#
sub com_adobe_granite_queries_impl_hc_async_index_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'indexing/critical/threshold'}) {
        $query_params->{'indexing.critical.threshold'} = $self->{api_client}->to_query_value($args{'indexing/critical/threshold'});
    }

    # query params
    if ( exists $args{'indexing/warn/threshold'}) {
        $query_params->{'indexing.warn.threshold'} = $self->{api_client}->to_query_value($args{'indexing/warn/threshold'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_queries_impl_hc_large_index_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $large/index/critical/threshold  (optional)
# @param int $large/index/warn/threshold  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'large/index/critical/threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'large/index/warn/threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_queries_impl_hc_large_index_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo',
        };
}
# @return ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo
#
sub com_adobe_granite_queries_impl_hc_large_index_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'large/index/critical/threshold'}) {
        $query_params->{'large.index.critical.threshold'} = $self->{api_client}->to_query_value($args{'large/index/critical/threshold'});
    }

    # query params
    if ( exists $args{'large/index/warn/threshold'}) {
        $query_params->{'large.index.warn.threshold'} = $self->{api_client}->to_query_value($args{'large/index/warn/threshold'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_queries_impl_hc_queries_status_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_queries_impl_hc_queries_status_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo',
        };
}
# @return ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo
#
sub com_adobe_granite_queries_impl_hc_queries_status_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_queries_impl_hc_query_health_check_metrics
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $get_period  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'get_period' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_queries_impl_hc_query_health_check_metrics' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo',
        };
}
# @return ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo
#
sub com_adobe_granite_queries_impl_hc_query_health_check_metrics {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'get_period'}) {
        $query_params->{'getPeriod'} = $self->{api_client}->to_query_value($args{'get_period'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_queries_impl_hc_query_limits_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_queries_impl_hc_query_limits_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo',
        };
}
# @return ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo
#
sub com_adobe_granite_queries_impl_hc_query_limits_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_replication_hc_impl_replication_queue_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $number/of/retries/allowed  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'number/of/retries/allowed' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_replication_hc_impl_replication_queue_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo',
        };
}
# @return ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo
#
sub com_adobe_granite_replication_hc_impl_replication_queue_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'number/of/retries/allowed'}) {
        $query_params->{'number.of.retries.allowed'} = $self->{api_client}->to_query_value($args{'number/of/retries/allowed'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_replication_hc_impl_replication_transport_users_health_c
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_replication_hc_impl_replication_transport_users_health_c' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo',
        };
}
# @return ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo
#
sub com_adobe_granite_replication_hc_impl_replication_transport_users_health_c {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo',
        };
}
# @return ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo
#
sub com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
# @param ARRAY[string] $exclude/search/path  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'exclude/search/path' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo',
        };
}
# @return ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo
#
sub com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    # query params
    if ( exists $args{'exclude/search/path'}) {
        $query_params->{'exclude.search.path'} = $self->{api_client}->to_query_value($args{'exclude/search/path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_repository_hc_impl_continuous_rgc_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_repository_hc_impl_continuous_rgc_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo',
        };
}
# @return ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo
#
sub com_adobe_granite_repository_hc_impl_continuous_rgc_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo',
        };
}
# @return ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo
#
sub com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_repository_hc_impl_default_logins_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
# @param ARRAY[string] $account/logins  (optional)
# @param ARRAY[string] $console/logins  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'account/logins' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'console/logins' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_repository_hc_impl_default_logins_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo',
        };
}
# @return ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo
#
sub com_adobe_granite_repository_hc_impl_default_logins_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    # query params
    if ( exists $args{'account/logins'}) {
        $query_params->{'account.logins'} = $self->{api_client}->to_query_value($args{'account/logins'});
    }

    # query params
    if ( exists $args{'console/logins'}) {
        $query_params->{'console.logins'} = $self->{api_client}->to_query_value($args{'console/logins'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_repository_hc_impl_disk_space_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
# @param int $disk/space/warn/threshold  (optional)
# @param int $disk/space/error/threshold  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'disk/space/warn/threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'disk/space/error/threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_repository_hc_impl_disk_space_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo',
        };
}
# @return ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo
#
sub com_adobe_granite_repository_hc_impl_disk_space_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    # query params
    if ( exists $args{'disk/space/warn/threshold'}) {
        $query_params->{'disk.space.warn.threshold'} = $self->{api_client}->to_query_value($args{'disk/space/warn/threshold'});
    }

    # query params
    if ( exists $args{'disk/space/error/threshold'}) {
        $query_params->{'disk.space.error.threshold'} = $self->{api_client}->to_query_value($args{'disk/space/error/threshold'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_repository_hc_impl_observation_queue_length_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_repository_hc_impl_observation_queue_length_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo',
        };
}
# @return ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo
#
sub com_adobe_granite_repository_hc_impl_observation_queue_length_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_repository_impl_commit_stats_config
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enabled  (optional)
# @param int $interval_seconds  (optional)
# @param int $commits_per_interval_threshold  (optional)
# @param int $max_location_length  (optional)
# @param int $max_details_shown  (optional)
# @param int $min_details_percentage  (optional)
# @param ARRAY[string] $thread_matchers  (optional)
# @param int $max_greedy_depth  (optional)
# @param string $greedy_stack_matchers  (optional)
# @param ARRAY[string] $stack_filters  (optional)
# @param ARRAY[string] $stack_matchers  (optional)
# @param ARRAY[string] $stack_categorizers  (optional)
# @param ARRAY[string] $stack_shorteners  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'interval_seconds' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'commits_per_interval_threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'max_location_length' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'max_details_shown' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'min_details_percentage' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'thread_matchers' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'max_greedy_depth' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'greedy_stack_matchers' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'stack_filters' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'stack_matchers' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'stack_categorizers' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'stack_shorteners' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_repository_impl_commit_stats_config' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteRepositoryImplCommitStatsConfigInfo',
        };
}
# @return ComAdobeGraniteRepositoryImplCommitStatsConfigInfo
#
sub com_adobe_granite_repository_impl_commit_stats_config {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    # query params
    if ( exists $args{'interval_seconds'}) {
        $query_params->{'intervalSeconds'} = $self->{api_client}->to_query_value($args{'interval_seconds'});
    }

    # query params
    if ( exists $args{'commits_per_interval_threshold'}) {
        $query_params->{'commitsPerIntervalThreshold'} = $self->{api_client}->to_query_value($args{'commits_per_interval_threshold'});
    }

    # query params
    if ( exists $args{'max_location_length'}) {
        $query_params->{'maxLocationLength'} = $self->{api_client}->to_query_value($args{'max_location_length'});
    }

    # query params
    if ( exists $args{'max_details_shown'}) {
        $query_params->{'maxDetailsShown'} = $self->{api_client}->to_query_value($args{'max_details_shown'});
    }

    # query params
    if ( exists $args{'min_details_percentage'}) {
        $query_params->{'minDetailsPercentage'} = $self->{api_client}->to_query_value($args{'min_details_percentage'});
    }

    # query params
    if ( exists $args{'thread_matchers'}) {
        $query_params->{'threadMatchers'} = $self->{api_client}->to_query_value($args{'thread_matchers'});
    }

    # query params
    if ( exists $args{'max_greedy_depth'}) {
        $query_params->{'maxGreedyDepth'} = $self->{api_client}->to_query_value($args{'max_greedy_depth'});
    }

    # query params
    if ( exists $args{'greedy_stack_matchers'}) {
        $query_params->{'greedyStackMatchers'} = $self->{api_client}->to_query_value($args{'greedy_stack_matchers'});
    }

    # query params
    if ( exists $args{'stack_filters'}) {
        $query_params->{'stackFilters'} = $self->{api_client}->to_query_value($args{'stack_filters'});
    }

    # query params
    if ( exists $args{'stack_matchers'}) {
        $query_params->{'stackMatchers'} = $self->{api_client}->to_query_value($args{'stack_matchers'});
    }

    # query params
    if ( exists $args{'stack_categorizers'}) {
        $query_params->{'stackCategorizers'} = $self->{api_client}->to_query_value($args{'stack_categorizers'});
    }

    # query params
    if ( exists $args{'stack_shorteners'}) {
        $query_params->{'stackShorteners'} = $self->{api_client}->to_query_value($args{'stack_shorteners'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteRepositoryImplCommitStatsConfigInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_repository_service_user_configuration
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param boolean $serviceusers/simple_subject_population  (optional)
# @param ARRAY[string] $serviceusers/list  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'serviceusers/simple_subject_population' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'serviceusers/list' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_repository_service_user_configuration' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteRepositoryServiceUserConfigurationInfo',
        };
}
# @return ComAdobeGraniteRepositoryServiceUserConfigurationInfo
#
sub com_adobe_granite_repository_service_user_configuration {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'serviceusers/simple_subject_population'}) {
        $query_params->{'serviceusers.simpleSubjectPopulation'} = $self->{api_client}->to_query_value($args{'serviceusers/simple_subject_population'});
    }

    # query params
    if ( exists $args{'serviceusers/list'}) {
        $query_params->{'serviceusers.list'} = $self->{api_client}->to_query_value($args{'serviceusers/list'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteRepositoryServiceUserConfigurationInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo',
        };
}
# @return ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo
#
sub com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_resourcestatus_impl_composite_status_type
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param ARRAY[string] $types  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'types' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_resourcestatus_impl_composite_status_type' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo',
        };
}
# @return ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo
#
sub com_adobe_granite_resourcestatus_impl_composite_status_type {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'types'}) {
        $query_params->{'types'} = $self->{api_client}->to_query_value($args{'types'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_resourcestatus_impl_status_resource_provider_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $provider/root  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'provider/root' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_resourcestatus_impl_status_resource_provider_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo',
        };
}
# @return ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo
#
sub com_adobe_granite_resourcestatus_impl_status_resource_provider_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'provider/root'}) {
        $query_params->{'provider.root'} = $self->{api_client}->to_query_value($args{'provider/root'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_rest_assets_impl_asset_content_disposition_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $mime/allow_empty  (optional)
# @param ARRAY[string] $mime/allowed  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'mime/allow_empty' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'mime/allowed' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_rest_assets_impl_asset_content_disposition_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo',
        };
}
# @return ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo
#
sub com_adobe_granite_rest_assets_impl_asset_content_disposition_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'mime/allow_empty'}) {
        $query_params->{'mime.allowEmpty'} = $self->{api_client}->to_query_value($args{'mime/allow_empty'});
    }

    # query params
    if ( exists $args{'mime/allowed'}) {
        $query_params->{'mime.allowed'} = $self->{api_client}->to_query_value($args{'mime/allowed'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $provider/roots  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'provider/roots' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo',
        };
}
# @return ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo
#
sub com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'provider/roots'}) {
        $query_params->{'provider.roots'} = $self->{api_client}->to_query_value($args{'provider/roots'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_rest_impl_servlet_default_get_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $default/limit  (optional)
# @param boolean $use/absolute/uri  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'default/limit' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'use/absolute/uri' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_rest_impl_servlet_default_get_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteRestImplServletDefaultGETServletInfo',
        };
}
# @return ComAdobeGraniteRestImplServletDefaultGETServletInfo
#
sub com_adobe_granite_rest_impl_servlet_default_get_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'default/limit'}) {
        $query_params->{'default.limit'} = $self->{api_client}->to_query_value($args{'default/limit'});
    }

    # query params
    if ( exists $args{'use/absolute/uri'}) {
        $query_params->{'use.absolute.uri'} = $self->{api_client}->to_query_value($args{'use/absolute/uri'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteRestImplServletDefaultGETServletInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $hc/tags  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo',
        };
}
# @return ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo
#
sub com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_security_user_user_properties_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $adapter/condition  (optional)
# @param ARRAY[string] $granite/userproperties/nodetypes  (optional)
# @param ARRAY[string] $granite/userproperties/resourcetypes  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'adapter/condition' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'granite/userproperties/nodetypes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'granite/userproperties/resourcetypes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_security_user_user_properties_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteSecurityUserUserPropertiesServiceInfo',
        };
}
# @return ComAdobeGraniteSecurityUserUserPropertiesServiceInfo
#
sub com_adobe_granite_security_user_user_properties_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'adapter/condition'}) {
        $query_params->{'adapter.condition'} = $self->{api_client}->to_query_value($args{'adapter/condition'});
    }

    # query params
    if ( exists $args{'granite/userproperties/nodetypes'}) {
        $query_params->{'granite.userproperties.nodetypes'} = $self->{api_client}->to_query_value($args{'granite/userproperties/nodetypes'});
    }

    # query params
    if ( exists $args{'granite/userproperties/resourcetypes'}) {
        $query_params->{'granite.userproperties.resourcetypes'} = $self->{api_client}->to_query_value($args{'granite/userproperties/resourcetypes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteSecurityUserUserPropertiesServiceInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_socialgraph_impl_social_graph_factory_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $group2member/relationship/outgoing  (optional)
# @param ARRAY[string] $group2member/excluded/outgoing  (optional)
# @param string $group2member/relationship/incoming  (optional)
# @param ARRAY[string] $group2member/excluded/incoming  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'group2member/relationship/outgoing' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'group2member/excluded/outgoing' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'group2member/relationship/incoming' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'group2member/excluded/incoming' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_socialgraph_impl_social_graph_factory_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo',
        };
}
# @return ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo
#
sub com_adobe_granite_socialgraph_impl_social_graph_factory_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'group2member/relationship/outgoing'}) {
        $query_params->{'group2member.relationship.outgoing'} = $self->{api_client}->to_query_value($args{'group2member/relationship/outgoing'});
    }

    # query params
    if ( exists $args{'group2member/excluded/outgoing'}) {
        $query_params->{'group2member.excluded.outgoing'} = $self->{api_client}->to_query_value($args{'group2member/excluded/outgoing'});
    }

    # query params
    if ( exists $args{'group2member/relationship/incoming'}) {
        $query_params->{'group2member.relationship.incoming'} = $self->{api_client}->to_query_value($args{'group2member/relationship/incoming'});
    }

    # query params
    if ( exists $args{'group2member/excluded/incoming'}) {
        $query_params->{'group2member.excluded.incoming'} = $self->{api_client}->to_query_value($args{'group2member/excluded/incoming'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $scheduler/expression  (optional)
# @param string $jmx/objectname  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduler/expression' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jmx/objectname' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo',
        };
}
# @return ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo
#
sub com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scheduler/expression'}) {
        $query_params->{'scheduler.expression'} = $self->{api_client}->to_query_value($args{'scheduler/expression'});
    }

    # query params
    if ( exists $args{'jmx/objectname'}) {
        $query_params->{'jmx.objectname'} = $self->{api_client}->to_query_value($args{'jmx/objectname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $adapter/condition  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'adapter/condition' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo',
        };
}
# @return ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo
#
sub com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'adapter/condition'}) {
        $query_params->{'adapter.condition'} = $self->{api_client}->to_query_value($args{'adapter/condition'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_taskmanagement_impl_jcr_task_archive_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $archiving/enabled  (optional)
# @param string $scheduler/expression  (optional)
# @param int $archive/since/days/completed  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'archiving/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'scheduler/expression' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'archive/since/days/completed' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_taskmanagement_impl_jcr_task_archive_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo',
        };
}
# @return ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo
#
sub com_adobe_granite_taskmanagement_impl_jcr_task_archive_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'archiving/enabled'}) {
        $query_params->{'archiving.enabled'} = $self->{api_client}->to_query_value($args{'archiving/enabled'});
    }

    # query params
    if ( exists $args{'scheduler/expression'}) {
        $query_params->{'scheduler.expression'} = $self->{api_client}->to_query_value($args{'scheduler/expression'});
    }

    # query params
    if ( exists $args{'archive/since/days/completed'}) {
        $query_params->{'archive.since.days.completed'} = $self->{api_client}->to_query_value($args{'archive/since/days/completed'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $purge_completed  (optional)
# @param int $completed_age  (optional)
# @param boolean $purge_active  (optional)
# @param int $active_age  (optional)
# @param int $save_threshold  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'purge_completed' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'completed_age' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'purge_active' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'active_age' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'save_threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo',
        };
}
# @return ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo
#
sub com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'purge_completed'}) {
        $query_params->{'purgeCompleted'} = $self->{api_client}->to_query_value($args{'purge_completed'});
    }

    # query params
    if ( exists $args{'completed_age'}) {
        $query_params->{'completedAge'} = $self->{api_client}->to_query_value($args{'completed_age'});
    }

    # query params
    if ( exists $args{'purge_active'}) {
        $query_params->{'purgeActive'} = $self->{api_client}->to_query_value($args{'purge_active'});
    }

    # query params
    if ( exists $args{'active_age'}) {
        $query_params->{'activeAge'} = $self->{api_client}->to_query_value($args{'active_age'});
    }

    # query params
    if ( exists $args{'save_threshold'}) {
        $query_params->{'saveThreshold'} = $self->{api_client}->to_query_value($args{'save_threshold'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $adapter/condition  (optional)
# @param ARRAY[string] $taskmanager/admingroups  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'adapter/condition' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'taskmanager/admingroups' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo',
        };
}
# @return ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo
#
sub com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'adapter/condition'}) {
        $query_params->{'adapter.condition'} = $self->{api_client}->to_query_value($args{'adapter/condition'});
    }

    # query params
    if ( exists $args{'taskmanager/admingroups'}) {
        $query_params->{'taskmanager.admingroups'} = $self->{api_client}->to_query_value($args{'taskmanager/admingroups'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_threaddump_thread_dump_collector
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $scheduler/period  (optional)
# @param string $scheduler/run_on  (optional)
# @param boolean $granite/threaddump/enabled  (optional)
# @param int $granite/threaddump/dumps_per_file  (optional)
# @param boolean $granite/threaddump/enable_gzip_compression  (optional)
# @param boolean $granite/threaddump/enable_directories_compression  (optional)
# @param boolean $granite/threaddump/enable_j_stack  (optional)
# @param int $granite/threaddump/max_backup_days  (optional)
# @param string $granite/threaddump/backup_clean_trigger  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduler/period' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'scheduler/run_on' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'granite/threaddump/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'granite/threaddump/dumps_per_file' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'granite/threaddump/enable_gzip_compression' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'granite/threaddump/enable_directories_compression' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'granite/threaddump/enable_j_stack' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'granite/threaddump/max_backup_days' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'granite/threaddump/backup_clean_trigger' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_threaddump_thread_dump_collector' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteThreaddumpThreadDumpCollectorInfo',
        };
}
# @return ComAdobeGraniteThreaddumpThreadDumpCollectorInfo
#
sub com_adobe_granite_threaddump_thread_dump_collector {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scheduler/period'}) {
        $query_params->{'scheduler.period'} = $self->{api_client}->to_query_value($args{'scheduler/period'});
    }

    # query params
    if ( exists $args{'scheduler/run_on'}) {
        $query_params->{'scheduler.runOn'} = $self->{api_client}->to_query_value($args{'scheduler/run_on'});
    }

    # query params
    if ( exists $args{'granite/threaddump/enabled'}) {
        $query_params->{'granite.threaddump.enabled'} = $self->{api_client}->to_query_value($args{'granite/threaddump/enabled'});
    }

    # query params
    if ( exists $args{'granite/threaddump/dumps_per_file'}) {
        $query_params->{'granite.threaddump.dumpsPerFile'} = $self->{api_client}->to_query_value($args{'granite/threaddump/dumps_per_file'});
    }

    # query params
    if ( exists $args{'granite/threaddump/enable_gzip_compression'}) {
        $query_params->{'granite.threaddump.enableGzipCompression'} = $self->{api_client}->to_query_value($args{'granite/threaddump/enable_gzip_compression'});
    }

    # query params
    if ( exists $args{'granite/threaddump/enable_directories_compression'}) {
        $query_params->{'granite.threaddump.enableDirectoriesCompression'} = $self->{api_client}->to_query_value($args{'granite/threaddump/enable_directories_compression'});
    }

    # query params
    if ( exists $args{'granite/threaddump/enable_j_stack'}) {
        $query_params->{'granite.threaddump.enableJStack'} = $self->{api_client}->to_query_value($args{'granite/threaddump/enable_j_stack'});
    }

    # query params
    if ( exists $args{'granite/threaddump/max_backup_days'}) {
        $query_params->{'granite.threaddump.maxBackupDays'} = $self->{api_client}->to_query_value($args{'granite/threaddump/max_backup_days'});
    }

    # query params
    if ( exists $args{'granite/threaddump/backup_clean_trigger'}) {
        $query_params->{'granite.threaddump.backupCleanTrigger'} = $self->{api_client}->to_query_value($args{'granite/threaddump/backup_clean_trigger'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteThreaddumpThreadDumpCollectorInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $translation_factory  (optional)
# @param string $default_connector_label  (optional)
# @param string $default_connector_attribution  (optional)
# @param string $default_connector_workspace_id  (optional)
# @param string $default_connector_subscription_key  (optional)
# @param string $language_map_location  (optional)
# @param string $category_map_location  (optional)
# @param int $retry_attempts  (optional)
# @param int $timeout_count  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'translation_factory' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default_connector_label' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default_connector_attribution' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default_connector_workspace_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default_connector_subscription_key' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'language_map_location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'category_map_location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'retry_attempts' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'timeout_count' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo',
        };
}
# @return ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo
#
sub com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'translation_factory'}) {
        $query_params->{'translationFactory'} = $self->{api_client}->to_query_value($args{'translation_factory'});
    }

    # query params
    if ( exists $args{'default_connector_label'}) {
        $query_params->{'defaultConnectorLabel'} = $self->{api_client}->to_query_value($args{'default_connector_label'});
    }

    # query params
    if ( exists $args{'default_connector_attribution'}) {
        $query_params->{'defaultConnectorAttribution'} = $self->{api_client}->to_query_value($args{'default_connector_attribution'});
    }

    # query params
    if ( exists $args{'default_connector_workspace_id'}) {
        $query_params->{'defaultConnectorWorkspaceId'} = $self->{api_client}->to_query_value($args{'default_connector_workspace_id'});
    }

    # query params
    if ( exists $args{'default_connector_subscription_key'}) {
        $query_params->{'defaultConnectorSubscriptionKey'} = $self->{api_client}->to_query_value($args{'default_connector_subscription_key'});
    }

    # query params
    if ( exists $args{'language_map_location'}) {
        $query_params->{'languageMapLocation'} = $self->{api_client}->to_query_value($args{'language_map_location'});
    }

    # query params
    if ( exists $args{'category_map_location'}) {
        $query_params->{'categoryMapLocation'} = $self->{api_client}->to_query_value($args{'category_map_location'});
    }

    # query params
    if ( exists $args{'retry_attempts'}) {
        $query_params->{'retryAttempts'} = $self->{api_client}->to_query_value($args{'retry_attempts'});
    }

    # query params
    if ( exists $args{'timeout_count'}) {
        $query_params->{'timeoutCount'} = $self->{api_client}->to_query_value($args{'timeout_count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_translation_core_impl_translation_manager_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $default_connector_name  (optional)
# @param string $default_category  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'default_connector_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default_category' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_translation_core_impl_translation_manager_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo',
        };
}
# @return ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo
#
sub com_adobe_granite_translation_core_impl_translation_manager_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'default_connector_name'}) {
        $query_params->{'defaultConnectorName'} = $self->{api_client}->to_query_value($args{'default_connector_name'});
    }

    # query params
    if ( exists $args{'default_category'}) {
        $query_params->{'defaultCategory'} = $self->{api_client}->to_query_value($args{'default_category'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $htmllibmanager/timing  (optional)
# @param string $htmllibmanager/debug/init/js  (optional)
# @param boolean $htmllibmanager/minify  (optional)
# @param boolean $htmllibmanager/debug  (optional)
# @param boolean $htmllibmanager/gzip  (optional)
# @param int $htmllibmanager/max_data_uri_size  (optional)
# @param int $htmllibmanager/maxage  (optional)
# @param boolean $htmllibmanager/force_cq_url_info  (optional)
# @param string $htmllibmanager/defaultthemename  (optional)
# @param string $htmllibmanager/defaultuserthemename  (optional)
# @param string $htmllibmanager/clientmanager  (optional)
# @param ARRAY[string] $htmllibmanager/path/list  (optional)
# @param ARRAY[string] $htmllibmanager/excluded/path/list  (optional)
# @param ARRAY[string] $htmllibmanager/processor/js  (optional)
# @param ARRAY[string] $htmllibmanager/processor/css  (optional)
# @param ARRAY[string] $htmllibmanager/longcache/patterns  (optional)
# @param string $htmllibmanager/longcache/format  (optional)
# @param boolean $htmllibmanager/use_file_system_output_cache  (optional)
# @param string $htmllibmanager/file_system_output_cache_location  (optional)
# @param ARRAY[string] $htmllibmanager/disable/replacement  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'htmllibmanager/timing' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'htmllibmanager/debug/init/js' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'htmllibmanager/minify' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'htmllibmanager/debug' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'htmllibmanager/gzip' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'htmllibmanager/max_data_uri_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'htmllibmanager/maxage' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'htmllibmanager/force_cq_url_info' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'htmllibmanager/defaultthemename' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'htmllibmanager/defaultuserthemename' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'htmllibmanager/clientmanager' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'htmllibmanager/path/list' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'htmllibmanager/excluded/path/list' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'htmllibmanager/processor/js' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'htmllibmanager/processor/css' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'htmllibmanager/longcache/patterns' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'htmllibmanager/longcache/format' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'htmllibmanager/use_file_system_output_cache' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'htmllibmanager/file_system_output_cache_location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'htmllibmanager/disable/replacement' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo',
        };
}
# @return ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo
#
sub com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'htmllibmanager/timing'}) {
        $query_params->{'htmllibmanager.timing'} = $self->{api_client}->to_query_value($args{'htmllibmanager/timing'});
    }

    # query params
    if ( exists $args{'htmllibmanager/debug/init/js'}) {
        $query_params->{'htmllibmanager.debug.init.js'} = $self->{api_client}->to_query_value($args{'htmllibmanager/debug/init/js'});
    }

    # query params
    if ( exists $args{'htmllibmanager/minify'}) {
        $query_params->{'htmllibmanager.minify'} = $self->{api_client}->to_query_value($args{'htmllibmanager/minify'});
    }

    # query params
    if ( exists $args{'htmllibmanager/debug'}) {
        $query_params->{'htmllibmanager.debug'} = $self->{api_client}->to_query_value($args{'htmllibmanager/debug'});
    }

    # query params
    if ( exists $args{'htmllibmanager/gzip'}) {
        $query_params->{'htmllibmanager.gzip'} = $self->{api_client}->to_query_value($args{'htmllibmanager/gzip'});
    }

    # query params
    if ( exists $args{'htmllibmanager/max_data_uri_size'}) {
        $query_params->{'htmllibmanager.maxDataUriSize'} = $self->{api_client}->to_query_value($args{'htmllibmanager/max_data_uri_size'});
    }

    # query params
    if ( exists $args{'htmllibmanager/maxage'}) {
        $query_params->{'htmllibmanager.maxage'} = $self->{api_client}->to_query_value($args{'htmllibmanager/maxage'});
    }

    # query params
    if ( exists $args{'htmllibmanager/force_cq_url_info'}) {
        $query_params->{'htmllibmanager.forceCQUrlInfo'} = $self->{api_client}->to_query_value($args{'htmllibmanager/force_cq_url_info'});
    }

    # query params
    if ( exists $args{'htmllibmanager/defaultthemename'}) {
        $query_params->{'htmllibmanager.defaultthemename'} = $self->{api_client}->to_query_value($args{'htmllibmanager/defaultthemename'});
    }

    # query params
    if ( exists $args{'htmllibmanager/defaultuserthemename'}) {
        $query_params->{'htmllibmanager.defaultuserthemename'} = $self->{api_client}->to_query_value($args{'htmllibmanager/defaultuserthemename'});
    }

    # query params
    if ( exists $args{'htmllibmanager/clientmanager'}) {
        $query_params->{'htmllibmanager.clientmanager'} = $self->{api_client}->to_query_value($args{'htmllibmanager/clientmanager'});
    }

    # query params
    if ( exists $args{'htmllibmanager/path/list'}) {
        $query_params->{'htmllibmanager.path.list'} = $self->{api_client}->to_query_value($args{'htmllibmanager/path/list'});
    }

    # query params
    if ( exists $args{'htmllibmanager/excluded/path/list'}) {
        $query_params->{'htmllibmanager.excluded.path.list'} = $self->{api_client}->to_query_value($args{'htmllibmanager/excluded/path/list'});
    }

    # query params
    if ( exists $args{'htmllibmanager/processor/js'}) {
        $query_params->{'htmllibmanager.processor.js'} = $self->{api_client}->to_query_value($args{'htmllibmanager/processor/js'});
    }

    # query params
    if ( exists $args{'htmllibmanager/processor/css'}) {
        $query_params->{'htmllibmanager.processor.css'} = $self->{api_client}->to_query_value($args{'htmllibmanager/processor/css'});
    }

    # query params
    if ( exists $args{'htmllibmanager/longcache/patterns'}) {
        $query_params->{'htmllibmanager.longcache.patterns'} = $self->{api_client}->to_query_value($args{'htmllibmanager/longcache/patterns'});
    }

    # query params
    if ( exists $args{'htmllibmanager/longcache/format'}) {
        $query_params->{'htmllibmanager.longcache.format'} = $self->{api_client}->to_query_value($args{'htmllibmanager/longcache/format'});
    }

    # query params
    if ( exists $args{'htmllibmanager/use_file_system_output_cache'}) {
        $query_params->{'htmllibmanager.useFileSystemOutputCache'} = $self->{api_client}->to_query_value($args{'htmllibmanager/use_file_system_output_cache'});
    }

    # query params
    if ( exists $args{'htmllibmanager/file_system_output_cache_location'}) {
        $query_params->{'htmllibmanager.fileSystemOutputCacheLocation'} = $self->{api_client}->to_query_value($args{'htmllibmanager/file_system_output_cache_location'});
    }

    # query params
    if ( exists $args{'htmllibmanager/disable/replacement'}) {
        $query_params->{'htmllibmanager.disable.replacement'} = $self->{api_client}->to_query_value($args{'htmllibmanager/disable/replacement'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_workflow_console_frags_workflow_withdraw_feature
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_workflow_console_frags_workflow_withdraw_feature' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo',
        };
}
# @return ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo
#
sub com_adobe_granite_workflow_console_frags_workflow_withdraw_feature {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_workflow_console_publish_workflow_publish_event_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $granite/workflow/workflow_publish_event_service/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'granite/workflow/workflow_publish_event_service/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_workflow_console_publish_workflow_publish_event_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo',
        };
}
# @return ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo
#
sub com_adobe_granite_workflow_console_publish_workflow_publish_event_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'granite/workflow/workflow_publish_event_service/enabled'}) {
        $query_params->{'granite.workflow.WorkflowPublishEventService.enabled'} = $self->{api_client}->to_query_value($args{'granite/workflow/workflow_publish_event_service/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_workflow_core_jcr_workflow_bucket_manager
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $bucket_size  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'bucket_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_workflow_core_jcr_workflow_bucket_manager' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo',
        };
}
# @return ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo
#
sub com_adobe_granite_workflow_core_jcr_workflow_bucket_manager {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'bucket_size'}) {
        $query_params->{'bucketSize'} = $self->{api_client}->to_query_value($args{'bucket_size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_workflow_core_job_external_process_job_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $default/timeout  (optional)
# @param int $max/timeout  (optional)
# @param int $default/period  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'default/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'max/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'default/period' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_workflow_core_job_external_process_job_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo',
        };
}
# @return ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo
#
sub com_adobe_granite_workflow_core_job_external_process_job_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'default/timeout'}) {
        $query_params->{'default.timeout'} = $self->{api_client}->to_query_value($args{'default/timeout'});
    }

    # query params
    if ( exists $args{'max/timeout'}) {
        $query_params->{'max.timeout'} = $self->{api_client}->to_query_value($args{'max/timeout'});
    }

    # query params
    if ( exists $args{'default/period'}) {
        $query_params->{'default.period'} = $self->{api_client}->to_query_value($args{'default/period'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_workflow_core_job_job_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $job/topics  (optional)
# @param boolean $allow/self/process/termination  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'job/topics' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'allow/self/process/termination' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_workflow_core_job_job_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteWorkflowCoreJobJobHandlerInfo',
        };
}
# @return ComAdobeGraniteWorkflowCoreJobJobHandlerInfo
#
sub com_adobe_granite_workflow_core_job_job_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'job/topics'}) {
        $query_params->{'job.topics'} = $self->{api_client}->to_query_value($args{'job/topics'});
    }

    # query params
    if ( exists $args{'allow/self/process/termination'}) {
        $query_params->{'allow.self.process.termination'} = $self->{api_client}->to_query_value($args{'allow/self/process/termination'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteWorkflowCoreJobJobHandlerInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $job/topics  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'job/topics' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo',
        };
}
# @return ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo
#
sub com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'job/topics'}) {
        $query_params->{'job.topics'} = $self->{api_client}->to_query_value($args{'job/topics'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_workflow_core_payload_map_cache
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $get_system_workflow_models  (optional)
# @param string $get_package_root_path  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'get_system_workflow_models' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'get_package_root_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_workflow_core_payload_map_cache' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteWorkflowCorePayloadMapCacheInfo',
        };
}
# @return ComAdobeGraniteWorkflowCorePayloadMapCacheInfo
#
sub com_adobe_granite_workflow_core_payload_map_cache {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'get_system_workflow_models'}) {
        $query_params->{'getSystemWorkflowModels'} = $self->{api_client}->to_query_value($args{'get_system_workflow_models'});
    }

    # query params
    if ( exists $args{'get_package_root_path'}) {
        $query_params->{'getPackageRootPath'} = $self->{api_client}->to_query_value($args{'get_package_root_path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteWorkflowCorePayloadMapCacheInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_workflow_core_payloadmap_payload_move_listener
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $payload/move/white/list  (optional)
# @param boolean $payload/move/handle/from/workflow/process  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'payload/move/white/list' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'payload/move/handle/from/workflow/process' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_workflow_core_payloadmap_payload_move_listener' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo',
        };
}
# @return ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo
#
sub com_adobe_granite_workflow_core_payloadmap_payload_move_listener {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'payload/move/white/list'}) {
        $query_params->{'payload.move.white.list'} = $self->{api_client}->to_query_value($args{'payload/move/white/list'});
    }

    # query params
    if ( exists $args{'payload/move/handle/from/workflow/process'}) {
        $query_params->{'payload.move.handle.from.workflow.process'} = $self->{api_client}->to_query_value($args{'payload/move/handle/from/workflow/process'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_workflow_core_workflow_config
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/workflow/config/workflow/packages/root/path  (optional)
# @param boolean $cq/workflow/config/workflow/process/legacy/mode  (optional)
# @param boolean $cq/workflow/config/allow/locking  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/workflow/config/workflow/packages/root/path' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/workflow/config/workflow/process/legacy/mode' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cq/workflow/config/allow/locking' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_workflow_core_workflow_config' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteWorkflowCoreWorkflowConfigInfo',
        };
}
# @return ComAdobeGraniteWorkflowCoreWorkflowConfigInfo
#
sub com_adobe_granite_workflow_core_workflow_config {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/workflow/config/workflow/packages/root/path'}) {
        $query_params->{'cq.workflow.config.workflow.packages.root.path'} = $self->{api_client}->to_query_value($args{'cq/workflow/config/workflow/packages/root/path'});
    }

    # query params
    if ( exists $args{'cq/workflow/config/workflow/process/legacy/mode'}) {
        $query_params->{'cq.workflow.config.workflow.process.legacy.mode'} = $self->{api_client}->to_query_value($args{'cq/workflow/config/workflow/process/legacy/mode'});
    }

    # query params
    if ( exists $args{'cq/workflow/config/allow/locking'}) {
        $query_params->{'cq.workflow.config.allow.locking'} = $self->{api_client}->to_query_value($args{'cq/workflow/config/allow/locking'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteWorkflowCoreWorkflowConfigInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_workflow_core_workflow_session_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $granite/workflowinbox/sort/property_name  (optional)
# @param string $granite/workflowinbox/sort/order  (optional)
# @param int $cq/workflow/job/retry  (optional)
# @param ARRAY[string] $cq/workflow/superuser  (optional)
# @param int $granite/workflow/inbox_query_size  (optional)
# @param boolean $granite/workflow/admin_user_group_filter  (optional)
# @param boolean $granite/workflow/enforce_workitem_assignee_permissions  (optional)
# @param boolean $granite/workflow/enforce_workflow_initiator_permissions  (optional)
# @param boolean $granite/workflow/inject_tenant_id_in_job_topics  (optional)
# @param int $granite/workflow/max_purge_save_threshold  (optional)
# @param int $granite/workflow/max_purge_query_count  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'granite/workflowinbox/sort/property_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'granite/workflowinbox/sort/order' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/workflow/job/retry' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/workflow/superuser' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'granite/workflow/inbox_query_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'granite/workflow/admin_user_group_filter' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'granite/workflow/enforce_workitem_assignee_permissions' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'granite/workflow/enforce_workflow_initiator_permissions' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'granite/workflow/inject_tenant_id_in_job_topics' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'granite/workflow/max_purge_save_threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'granite/workflow/max_purge_query_count' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_workflow_core_workflow_session_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo',
        };
}
# @return ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo
#
sub com_adobe_granite_workflow_core_workflow_session_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'granite/workflowinbox/sort/property_name'}) {
        $query_params->{'granite.workflowinbox.sort.propertyName'} = $self->{api_client}->to_query_value($args{'granite/workflowinbox/sort/property_name'});
    }

    # query params
    if ( exists $args{'granite/workflowinbox/sort/order'}) {
        $query_params->{'granite.workflowinbox.sort.order'} = $self->{api_client}->to_query_value($args{'granite/workflowinbox/sort/order'});
    }

    # query params
    if ( exists $args{'cq/workflow/job/retry'}) {
        $query_params->{'cq.workflow.job.retry'} = $self->{api_client}->to_query_value($args{'cq/workflow/job/retry'});
    }

    # query params
    if ( exists $args{'cq/workflow/superuser'}) {
        $query_params->{'cq.workflow.superuser'} = $self->{api_client}->to_query_value($args{'cq/workflow/superuser'});
    }

    # query params
    if ( exists $args{'granite/workflow/inbox_query_size'}) {
        $query_params->{'granite.workflow.inboxQuerySize'} = $self->{api_client}->to_query_value($args{'granite/workflow/inbox_query_size'});
    }

    # query params
    if ( exists $args{'granite/workflow/admin_user_group_filter'}) {
        $query_params->{'granite.workflow.adminUserGroupFilter'} = $self->{api_client}->to_query_value($args{'granite/workflow/admin_user_group_filter'});
    }

    # query params
    if ( exists $args{'granite/workflow/enforce_workitem_assignee_permissions'}) {
        $query_params->{'granite.workflow.enforceWorkitemAssigneePermissions'} = $self->{api_client}->to_query_value($args{'granite/workflow/enforce_workitem_assignee_permissions'});
    }

    # query params
    if ( exists $args{'granite/workflow/enforce_workflow_initiator_permissions'}) {
        $query_params->{'granite.workflow.enforceWorkflowInitiatorPermissions'} = $self->{api_client}->to_query_value($args{'granite/workflow/enforce_workflow_initiator_permissions'});
    }

    # query params
    if ( exists $args{'granite/workflow/inject_tenant_id_in_job_topics'}) {
        $query_params->{'granite.workflow.injectTenantIdInJobTopics'} = $self->{api_client}->to_query_value($args{'granite/workflow/inject_tenant_id_in_job_topics'});
    }

    # query params
    if ( exists $args{'granite/workflow/max_purge_save_threshold'}) {
        $query_params->{'granite.workflow.maxPurgeSaveThreshold'} = $self->{api_client}->to_query_value($args{'granite/workflow/max_purge_save_threshold'});
    }

    # query params
    if ( exists $args{'granite/workflow/max_purge_query_count'}) {
        $query_params->{'granite.workflow.maxPurgeQueryCount'} = $self->{api_client}->to_query_value($args{'granite/workflow/max_purge_query_count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo', $response);
    return $_response_object;
}

#
# com_adobe_granite_workflow_purge_scheduler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $scheduledpurge/name  (optional)
# @param string $scheduledpurge/workflow_status  (optional)
# @param ARRAY[string] $scheduledpurge/model_ids  (optional)
# @param int $scheduledpurge/daysold  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduledpurge/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'scheduledpurge/workflow_status' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'scheduledpurge/model_ids' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduledpurge/daysold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_granite_workflow_purge_scheduler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeGraniteWorkflowPurgeSchedulerInfo',
        };
}
# @return ComAdobeGraniteWorkflowPurgeSchedulerInfo
#
sub com_adobe_granite_workflow_purge_scheduler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scheduledpurge/name'}) {
        $query_params->{'scheduledpurge.name'} = $self->{api_client}->to_query_value($args{'scheduledpurge/name'});
    }

    # query params
    if ( exists $args{'scheduledpurge/workflow_status'}) {
        $query_params->{'scheduledpurge.workflowStatus'} = $self->{api_client}->to_query_value($args{'scheduledpurge/workflow_status'});
    }

    # query params
    if ( exists $args{'scheduledpurge/model_ids'}) {
        $query_params->{'scheduledpurge.modelIds'} = $self->{api_client}->to_query_value($args{'scheduledpurge/model_ids'});
    }

    # query params
    if ( exists $args{'scheduledpurge/daysold'}) {
        $query_params->{'scheduledpurge.daysold'} = $self->{api_client}->to_query_value($args{'scheduledpurge/daysold'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeGraniteWorkflowPurgeSchedulerInfo', $response);
    return $_response_object;
}

#
# com_adobe_octopus_ncomm_bootstrap
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $max_connections  (optional)
# @param int $max_requests  (optional)
# @param int $request_timeout  (optional)
# @param int $request_retries  (optional)
# @param int $launch_timeout  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'max_connections' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'max_requests' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'request_timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'request_retries' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'launch_timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_octopus_ncomm_bootstrap' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeOctopusNcommBootstrapInfo',
        };
}
# @return ComAdobeOctopusNcommBootstrapInfo
#
sub com_adobe_octopus_ncomm_bootstrap {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'max_connections'}) {
        $query_params->{'maxConnections'} = $self->{api_client}->to_query_value($args{'max_connections'});
    }

    # query params
    if ( exists $args{'max_requests'}) {
        $query_params->{'maxRequests'} = $self->{api_client}->to_query_value($args{'max_requests'});
    }

    # query params
    if ( exists $args{'request_timeout'}) {
        $query_params->{'requestTimeout'} = $self->{api_client}->to_query_value($args{'request_timeout'});
    }

    # query params
    if ( exists $args{'request_retries'}) {
        $query_params->{'requestRetries'} = $self->{api_client}->to_query_value($args{'request_retries'});
    }

    # query params
    if ( exists $args{'launch_timeout'}) {
        $query_params->{'launchTimeout'} = $self->{api_client}->to_query_value($args{'launch_timeout'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeOctopusNcommBootstrapInfo', $response);
    return $_response_object;
}

#
# com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $communities/integration/livefyre/sling/event/filter  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'communities/integration/livefyre/sling/event/filter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo',
        };
}
# @return ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo
#
sub com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'communities/integration/livefyre/sling/event/filter'}) {
        $query_params->{'communities.integration.livefyre.sling.event.filter'} = $self->{api_client}->to_query_value($args{'communities/integration/livefyre/sling/event/filter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo', $response);
    return $_response_object;
}

#
# com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $max_connections  (optional)
# @param string $max_requests  (optional)
# @param string $request_timeout  (optional)
# @param string $log_dir  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'max_connections' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'max_requests' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'request_timeout' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'log_dir' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm' } = { 
    	summary => '',
        params => $params,
        returns => 'ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo',
        };
}
# @return ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo
#
sub com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'max_connections'}) {
        $query_params->{'maxConnections'} = $self->{api_client}->to_query_value($args{'max_connections'});
    }

    # query params
    if ( exists $args{'max_requests'}) {
        $query_params->{'maxRequests'} = $self->{api_client}->to_query_value($args{'max_requests'});
    }

    # query params
    if ( exists $args{'request_timeout'}) {
        $query_params->{'requestTimeout'} = $self->{api_client}->to_query_value($args{'request_timeout'});
    }

    # query params
    if ( exists $args{'log_dir'}) {
        $query_params->{'logDir'} = $self->{api_client}->to_query_value($args{'log_dir'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo', $response);
    return $_response_object;
}

#
# com_day_commons_datasource_jdbcpool_jdbc_pool_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $jdbc/driver/class  (optional)
# @param string $jdbc/connection/uri  (optional)
# @param string $jdbc/username  (optional)
# @param string $jdbc/password  (optional)
# @param string $jdbc/validation/query  (optional)
# @param boolean $default/readonly  (optional)
# @param boolean $default/autocommit  (optional)
# @param int $pool/size  (optional)
# @param int $pool/max/wait/msec  (optional)
# @param string $datasource/name  (optional)
# @param ARRAY[string] $datasource/svc/properties  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'jdbc/driver/class' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jdbc/connection/uri' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jdbc/username' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jdbc/password' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jdbc/validation/query' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default/readonly' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'default/autocommit' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'pool/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'pool/max/wait/msec' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'datasource/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'datasource/svc/properties' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_commons_datasource_jdbcpool_jdbc_pool_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo',
        };
}
# @return ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo
#
sub com_day_commons_datasource_jdbcpool_jdbc_pool_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'jdbc/driver/class'}) {
        $query_params->{'jdbc.driver.class'} = $self->{api_client}->to_query_value($args{'jdbc/driver/class'});
    }

    # query params
    if ( exists $args{'jdbc/connection/uri'}) {
        $query_params->{'jdbc.connection.uri'} = $self->{api_client}->to_query_value($args{'jdbc/connection/uri'});
    }

    # query params
    if ( exists $args{'jdbc/username'}) {
        $query_params->{'jdbc.username'} = $self->{api_client}->to_query_value($args{'jdbc/username'});
    }

    # query params
    if ( exists $args{'jdbc/password'}) {
        $query_params->{'jdbc.password'} = $self->{api_client}->to_query_value($args{'jdbc/password'});
    }

    # query params
    if ( exists $args{'jdbc/validation/query'}) {
        $query_params->{'jdbc.validation.query'} = $self->{api_client}->to_query_value($args{'jdbc/validation/query'});
    }

    # query params
    if ( exists $args{'default/readonly'}) {
        $query_params->{'default.readonly'} = $self->{api_client}->to_query_value($args{'default/readonly'});
    }

    # query params
    if ( exists $args{'default/autocommit'}) {
        $query_params->{'default.autocommit'} = $self->{api_client}->to_query_value($args{'default/autocommit'});
    }

    # query params
    if ( exists $args{'pool/size'}) {
        $query_params->{'pool.size'} = $self->{api_client}->to_query_value($args{'pool/size'});
    }

    # query params
    if ( exists $args{'pool/max/wait/msec'}) {
        $query_params->{'pool.max.wait.msec'} = $self->{api_client}->to_query_value($args{'pool/max/wait/msec'});
    }

    # query params
    if ( exists $args{'datasource/name'}) {
        $query_params->{'datasource.name'} = $self->{api_client}->to_query_value($args{'datasource/name'});
    }

    # query params
    if ( exists $args{'datasource/svc/properties'}) {
        $query_params->{'datasource.svc.properties'} = $self->{api_client}->to_query_value($args{'datasource/svc/properties'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo', $response);
    return $_response_object;
}

#
# com_day_commons_httpclient
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $proxy/enabled  (optional)
# @param string $proxy/host  (optional)
# @param string $proxy/user  (optional)
# @param string $proxy/password  (optional)
# @param string $proxy/ntlm/host  (optional)
# @param string $proxy/ntlm/domain  (optional)
# @param ARRAY[string] $proxy/exceptions  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'proxy/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'proxy/host' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'proxy/user' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'proxy/password' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'proxy/ntlm/host' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'proxy/ntlm/domain' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'proxy/exceptions' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_commons_httpclient' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCommonsHttpclientInfo',
        };
}
# @return ComDayCommonsHttpclientInfo
#
sub com_day_commons_httpclient {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.commons.httpclient';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'proxy/enabled'}) {
        $query_params->{'proxy.enabled'} = $self->{api_client}->to_query_value($args{'proxy/enabled'});
    }

    # query params
    if ( exists $args{'proxy/host'}) {
        $query_params->{'proxy.host'} = $self->{api_client}->to_query_value($args{'proxy/host'});
    }

    # query params
    if ( exists $args{'proxy/user'}) {
        $query_params->{'proxy.user'} = $self->{api_client}->to_query_value($args{'proxy/user'});
    }

    # query params
    if ( exists $args{'proxy/password'}) {
        $query_params->{'proxy.password'} = $self->{api_client}->to_query_value($args{'proxy/password'});
    }

    # query params
    if ( exists $args{'proxy/ntlm/host'}) {
        $query_params->{'proxy.ntlm.host'} = $self->{api_client}->to_query_value($args{'proxy/ntlm/host'});
    }

    # query params
    if ( exists $args{'proxy/ntlm/domain'}) {
        $query_params->{'proxy.ntlm.domain'} = $self->{api_client}->to_query_value($args{'proxy/ntlm/domain'});
    }

    # query params
    if ( exists $args{'proxy/exceptions'}) {
        $query_params->{'proxy.exceptions'} = $self->{api_client}->to_query_value($args{'proxy/exceptions'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCommonsHttpclientInfo', $response);
    return $_response_object;
}

#
# com_day_cq_analytics_impl_store_properties_change_listener
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/store/listener/additional_store_paths  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/store/listener/additional_store_paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_analytics_impl_store_properties_change_listener' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo',
        };
}
# @return ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo
#
sub com_day_cq_analytics_impl_store_properties_change_listener {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/store/listener/additional_store_paths'}) {
        $query_params->{'cq.store.listener.additionalStorePaths'} = $self->{api_client}->to_query_value($args{'cq/store/listener/additional_store_paths'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $allowed/paths  (optional)
# @param int $cq/analytics/saint/exporter/pagesize  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'allowed/paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/analytics/saint/exporter/pagesize' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo',
        };
}
# @return ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo
#
sub com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'allowed/paths'}) {
        $query_params->{'allowed.paths'} = $self->{api_client}->to_query_value($args{'allowed/paths'});
    }

    # query params
    if ( exists $args{'cq/analytics/saint/exporter/pagesize'}) {
        $query_params->{'cq.analytics.saint.exporter.pagesize'} = $self->{api_client}->to_query_value($args{'cq/analytics/saint/exporter/pagesize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo', $response);
    return $_response_object;
}

#
# com_day_cq_analytics_sitecatalyst_impl_importer_report_importer
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $report/fetch/attempts  (optional)
# @param int $report/fetch/delay  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'report/fetch/attempts' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'report/fetch/delay' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_analytics_sitecatalyst_impl_importer_report_importer' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo',
        };
}
# @return ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo
#
sub com_day_cq_analytics_sitecatalyst_impl_importer_report_importer {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'report/fetch/attempts'}) {
        $query_params->{'report.fetch.attempts'} = $self->{api_client}->to_query_value($args{'report/fetch/attempts'});
    }

    # query params
    if ( exists $args{'report/fetch/delay'}) {
        $query_params->{'report.fetch.delay'} = $self->{api_client}->to_query_value($args{'report/fetch/delay'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo', $response);
    return $_response_object;
}

#
# com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/analytics/adapterfactory/contextstores  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/analytics/adapterfactory/contextstores' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo',
        };
}
# @return ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo
#
sub com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/analytics/adapterfactory/contextstores'}) {
        $query_params->{'cq.analytics.adapterfactory.contextstores'} = $self->{api_client}->to_query_value($args{'cq/analytics/adapterfactory/contextstores'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo', $response);
    return $_response_object;
}

#
# com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/analytics/sitecatalyst/service/datacenter/url  (optional)
# @param ARRAY[string] $devhostnamepatterns  (optional)
# @param int $connection/timeout  (optional)
# @param int $socket/timeout  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/analytics/sitecatalyst/service/datacenter/url' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'devhostnamepatterns' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'connection/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'socket/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo',
        };
}
# @return ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo
#
sub com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/analytics/sitecatalyst/service/datacenter/url'}) {
        $query_params->{'cq.analytics.sitecatalyst.service.datacenter.url'} = $self->{api_client}->to_query_value($args{'cq/analytics/sitecatalyst/service/datacenter/url'});
    }

    # query params
    if ( exists $args{'devhostnamepatterns'}) {
        $query_params->{'devhostnamepatterns'} = $self->{api_client}->to_query_value($args{'devhostnamepatterns'});
    }

    # query params
    if ( exists $args{'connection/timeout'}) {
        $query_params->{'connection.timeout'} = $self->{api_client}->to_query_value($args{'connection/timeout'});
    }

    # query params
    if ( exists $args{'socket/timeout'}) {
        $query_params->{'socket.timeout'} = $self->{api_client}->to_query_value($args{'socket/timeout'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_analytics_testandtarget_impl_account_options_updater
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/analytics/testandtarget/accountoptionsupdater/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/analytics/testandtarget/accountoptionsupdater/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_analytics_testandtarget_impl_account_options_updater' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo',
        };
}
# @return ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo
#
sub com_day_cq_analytics_testandtarget_impl_account_options_updater {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/analytics/testandtarget/accountoptionsupdater/enabled'}) {
        $query_params->{'cq.analytics.testandtarget.accountoptionsupdater.enabled'} = $self->{api_client}->to_query_value($args{'cq/analytics/testandtarget/accountoptionsupdater/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo', $response);
    return $_response_object;
}

#
# com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/analytics/testandtarget/deleteauthoractivitylistener/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/analytics/testandtarget/deleteauthoractivitylistener/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo',
        };
}
# @return ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo
#
sub com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/analytics/testandtarget/deleteauthoractivitylistener/enabled'}) {
        $query_params->{'cq.analytics.testandtarget.deleteauthoractivitylistener.enabled'} = $self->{api_client}->to_query_value($args{'cq/analytics/testandtarget/deleteauthoractivitylistener/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/analytics/testandtarget/pushauthorcampaignpagelistener/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/analytics/testandtarget/pushauthorcampaignpagelistener/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo',
        };
}
# @return ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo
#
sub com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/analytics/testandtarget/pushauthorcampaignpagelistener/enabled'}) {
        $query_params->{'cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled'} = $self->{api_client}->to_query_value($args{'cq/analytics/testandtarget/pushauthorcampaignpagelistener/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_analytics_testandtarget_impl_segment_importer
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/analytics/testandtarget/segmentimporter/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/analytics/testandtarget/segmentimporter/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_analytics_testandtarget_impl_segment_importer' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo',
        };
}
# @return ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo
#
sub com_day_cq_analytics_testandtarget_impl_segment_importer {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/analytics/testandtarget/segmentimporter/enabled'}) {
        $query_params->{'cq.analytics.testandtarget.segmentimporter.enabled'} = $self->{api_client}->to_query_value($args{'cq/analytics/testandtarget/segmentimporter/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo', $response);
    return $_response_object;
}

#
# com_day_cq_analytics_testandtarget_impl_service_web_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $endpoint_uri  (optional)
# @param int $connection_timeout  (optional)
# @param int $socket_timeout  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'endpoint_uri' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'connection_timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'socket_timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_analytics_testandtarget_impl_service_web_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo',
        };
}
# @return ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo
#
sub com_day_cq_analytics_testandtarget_impl_service_web_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'endpoint_uri'}) {
        $query_params->{'endpointUri'} = $self->{api_client}->to_query_value($args{'endpoint_uri'});
    }

    # query params
    if ( exists $args{'connection_timeout'}) {
        $query_params->{'connectionTimeout'} = $self->{api_client}->to_query_value($args{'connection_timeout'});
    }

    # query params
    if ( exists $args{'socket_timeout'}) {
        $query_params->{'socketTimeout'} = $self->{api_client}->to_query_value($args{'socket_timeout'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $testandtarget/endpoint/url  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'testandtarget/endpoint/url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo',
        };
}
# @return ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo
#
sub com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'testandtarget/endpoint/url'}) {
        $query_params->{'testandtarget.endpoint.url'} = $self->{api_client}->to_query_value($args{'testandtarget/endpoint/url'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $cq/analytics/testandtarget/api/url  (optional)
# @param int $cq/analytics/testandtarget/timeout  (optional)
# @param int $cq/analytics/testandtarget/sockettimeout  (optional)
# @param string $cq/analytics/testandtarget/recommendations/url/replace  (optional)
# @param string $cq/analytics/testandtarget/recommendations/url/replacewith  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/analytics/testandtarget/api/url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/analytics/testandtarget/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/analytics/testandtarget/sockettimeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/analytics/testandtarget/recommendations/url/replace' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/analytics/testandtarget/recommendations/url/replacewith' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo',
        };
}
# @return ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo
#
sub com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/analytics/testandtarget/api/url'}) {
        $query_params->{'cq.analytics.testandtarget.api.url'} = $self->{api_client}->to_query_value($args{'cq/analytics/testandtarget/api/url'});
    }

    # query params
    if ( exists $args{'cq/analytics/testandtarget/timeout'}) {
        $query_params->{'cq.analytics.testandtarget.timeout'} = $self->{api_client}->to_query_value($args{'cq/analytics/testandtarget/timeout'});
    }

    # query params
    if ( exists $args{'cq/analytics/testandtarget/sockettimeout'}) {
        $query_params->{'cq.analytics.testandtarget.sockettimeout'} = $self->{api_client}->to_query_value($args{'cq/analytics/testandtarget/sockettimeout'});
    }

    # query params
    if ( exists $args{'cq/analytics/testandtarget/recommendations/url/replace'}) {
        $query_params->{'cq.analytics.testandtarget.recommendations.url.replace'} = $self->{api_client}->to_query_value($args{'cq/analytics/testandtarget/recommendations/url/replace'});
    }

    # query params
    if ( exists $args{'cq/analytics/testandtarget/recommendations/url/replacewith'}) {
        $query_params->{'cq.analytics.testandtarget.recommendations.url.replacewith'} = $self->{api_client}->to_query_value($args{'cq/analytics/testandtarget/recommendations/url/replacewith'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_auth_impl_cug_cug_support_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cug/exempted/principals  (optional)
# @param boolean $cug/enabled  (optional)
# @param string $cug/principals/regex  (optional)
# @param string $cug/principals/replacement  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cug/exempted/principals' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cug/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cug/principals/regex' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cug/principals/replacement' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_auth_impl_cug_cug_support_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqAuthImplCugCugSupportImplInfo',
        };
}
# @return ComDayCqAuthImplCugCugSupportImplInfo
#
sub com_day_cq_auth_impl_cug_cug_support_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cug/exempted/principals'}) {
        $query_params->{'cug.exempted.principals'} = $self->{api_client}->to_query_value($args{'cug/exempted/principals'});
    }

    # query params
    if ( exists $args{'cug/enabled'}) {
        $query_params->{'cug.enabled'} = $self->{api_client}->to_query_value($args{'cug/enabled'});
    }

    # query params
    if ( exists $args{'cug/principals/regex'}) {
        $query_params->{'cug.principals.regex'} = $self->{api_client}->to_query_value($args{'cug/principals/regex'});
    }

    # query params
    if ( exists $args{'cug/principals/replacement'}) {
        $query_params->{'cug.principals.replacement'} = $self->{api_client}->to_query_value($args{'cug/principals/replacement'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqAuthImplCugCugSupportImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_auth_impl_login_selector_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $path  (optional)
# @param int $service/ranking  (optional)
# @param ARRAY[string] $auth/loginselector/mappings  (optional)
# @param ARRAY[string] $auth/loginselector/changepw/mappings  (optional)
# @param string $auth/loginselector/defaultloginpage  (optional)
# @param string $auth/loginselector/defaultchangepwpage  (optional)
# @param ARRAY[string] $auth/loginselector/handle  (optional)
# @param boolean $auth/loginselector/handle/all/extensions  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'auth/loginselector/mappings' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'auth/loginselector/changepw/mappings' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'auth/loginselector/defaultloginpage' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auth/loginselector/defaultchangepwpage' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auth/loginselector/handle' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'auth/loginselector/handle/all/extensions' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_auth_impl_login_selector_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqAuthImplLoginSelectorHandlerInfo',
        };
}
# @return ComDayCqAuthImplLoginSelectorHandlerInfo
#
sub com_day_cq_auth_impl_login_selector_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'auth/loginselector/mappings'}) {
        $query_params->{'auth.loginselector.mappings'} = $self->{api_client}->to_query_value($args{'auth/loginselector/mappings'});
    }

    # query params
    if ( exists $args{'auth/loginselector/changepw/mappings'}) {
        $query_params->{'auth.loginselector.changepw.mappings'} = $self->{api_client}->to_query_value($args{'auth/loginselector/changepw/mappings'});
    }

    # query params
    if ( exists $args{'auth/loginselector/defaultloginpage'}) {
        $query_params->{'auth.loginselector.defaultloginpage'} = $self->{api_client}->to_query_value($args{'auth/loginselector/defaultloginpage'});
    }

    # query params
    if ( exists $args{'auth/loginselector/defaultchangepwpage'}) {
        $query_params->{'auth.loginselector.defaultchangepwpage'} = $self->{api_client}->to_query_value($args{'auth/loginselector/defaultchangepwpage'});
    }

    # query params
    if ( exists $args{'auth/loginselector/handle'}) {
        $query_params->{'auth.loginselector.handle'} = $self->{api_client}->to_query_value($args{'auth/loginselector/handle'});
    }

    # query params
    if ( exists $args{'auth/loginselector/handle/all/extensions'}) {
        $query_params->{'auth.loginselector.handle.all.extensions'} = $self->{api_client}->to_query_value($args{'auth/loginselector/handle/all/extensions'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqAuthImplLoginSelectorHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_commons_impl_externalizer_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $externalizer/domains  (optional)
# @param string $externalizer/host  (optional)
# @param string $externalizer/contextpath  (optional)
# @param boolean $externalizer/encodedpath  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'externalizer/domains' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'externalizer/host' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'externalizer/contextpath' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'externalizer/encodedpath' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_commons_impl_externalizer_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqCommonsImplExternalizerImplInfo',
        };
}
# @return ComDayCqCommonsImplExternalizerImplInfo
#
sub com_day_cq_commons_impl_externalizer_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'externalizer/domains'}) {
        $query_params->{'externalizer.domains'} = $self->{api_client}->to_query_value($args{'externalizer/domains'});
    }

    # query params
    if ( exists $args{'externalizer/host'}) {
        $query_params->{'externalizer.host'} = $self->{api_client}->to_query_value($args{'externalizer/host'});
    }

    # query params
    if ( exists $args{'externalizer/contextpath'}) {
        $query_params->{'externalizer.contextpath'} = $self->{api_client}->to_query_value($args{'externalizer/contextpath'});
    }

    # query params
    if ( exists $args{'externalizer/encodedpath'}) {
        $query_params->{'externalizer.encodedpath'} = $self->{api_client}->to_query_value($args{'externalizer/encodedpath'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqCommonsImplExternalizerImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_commons_servlets_root_mapping_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $rootmapping/target  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'rootmapping/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_commons_servlets_root_mapping_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqCommonsServletsRootMappingServletInfo',
        };
}
# @return ComDayCqCommonsServletsRootMappingServletInfo
#
sub com_day_cq_commons_servlets_root_mapping_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'rootmapping/target'}) {
        $query_params->{'rootmapping.target'} = $self->{api_client}->to_query_value($args{'rootmapping/target'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqCommonsServletsRootMappingServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $codeupgradetasks  (optional)
# @param ARRAY[string] $codeupgradetaskfilters  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'codeupgradetasks' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'codeupgradetaskfilters' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo',
        };
}
# @return ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo
#
sub com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'codeupgradetasks'}) {
        $query_params->{'codeupgradetasks'} = $self->{api_client}->to_query_value($args{'codeupgradetasks'});
    }

    # query params
    if ( exists $args{'codeupgradetaskfilters'}) {
        $query_params->{'codeupgradetaskfilters'} = $self->{api_client}->to_query_value($args{'codeupgradetaskfilters'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo', $response);
    return $_response_object;
}

#
# com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $upgrade_task_ignore_list  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'upgrade_task_ignore_list' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo',
        };
}
# @return ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo
#
sub com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'upgrade_task_ignore_list'}) {
        $query_params->{'upgradeTaskIgnoreList'} = $self->{api_client}->to_query_value($args{'upgrade_task_ignore_list'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo', $response);
    return $_response_object;
}

#
# com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $effective_bundle_list_path  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'effective_bundle_list_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo',
        };
}
# @return ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo
#
sub com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'effective_bundle_list_path'}) {
        $query_params->{'effectiveBundleListPath'} = $self->{api_client}->to_query_value($args{'effective_bundle_list_path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo', $response);
    return $_response_object;
}

#
# com_day_cq_contentsync_impl_content_sync_manager_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $contentsync/fallback/authorizable  (optional)
# @param string $contentsync/fallback/updateuser  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'contentsync/fallback/authorizable' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'contentsync/fallback/updateuser' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_contentsync_impl_content_sync_manager_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqContentsyncImplContentSyncManagerImplInfo',
        };
}
# @return ComDayCqContentsyncImplContentSyncManagerImplInfo
#
sub com_day_cq_contentsync_impl_content_sync_manager_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'contentsync/fallback/authorizable'}) {
        $query_params->{'contentsync.fallback.authorizable'} = $self->{api_client}->to_query_value($args{'contentsync/fallback/authorizable'});
    }

    # query params
    if ( exists $args{'contentsync/fallback/updateuser'}) {
        $query_params->{'contentsync.fallback.updateuser'} = $self->{api_client}->to_query_value($args{'contentsync/fallback/updateuser'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqContentsyncImplContentSyncManagerImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_commons_handler_standard_image_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $large_file_threshold  (optional)
# @param int $large_comment_threshold  (optional)
# @param boolean $cq/dam/enable/ext/meta/extraction  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'large_file_threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'large_comment_threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/enable/ext/meta/extraction' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_commons_handler_standard_image_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCommonsHandlerStandardImageHandlerInfo',
        };
}
# @return ComDayCqDamCommonsHandlerStandardImageHandlerInfo
#
sub com_day_cq_dam_commons_handler_standard_image_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'large_file_threshold'}) {
        $query_params->{'large_file_threshold'} = $self->{api_client}->to_query_value($args{'large_file_threshold'});
    }

    # query params
    if ( exists $args{'large_comment_threshold'}) {
        $query_params->{'large_comment_threshold'} = $self->{api_client}->to_query_value($args{'large_comment_threshold'});
    }

    # query params
    if ( exists $args{'cq/dam/enable/ext/meta/extraction'}) {
        $query_params->{'cq.dam.enable.ext.meta.extraction'} = $self->{api_client}->to_query_value($args{'cq/dam/enable/ext/meta/extraction'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCommonsHandlerStandardImageHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_commons_metadata_xmp_filter_black_white
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $xmp/filter/apply_whitelist  (optional)
# @param ARRAY[string] $xmp/filter/whitelist  (optional)
# @param boolean $xmp/filter/apply_blacklist  (optional)
# @param ARRAY[string] $xmp/filter/blacklist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'xmp/filter/apply_whitelist' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'xmp/filter/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'xmp/filter/apply_blacklist' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'xmp/filter/blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_commons_metadata_xmp_filter_black_white' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo',
        };
}
# @return ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo
#
sub com_day_cq_dam_commons_metadata_xmp_filter_black_white {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'xmp/filter/apply_whitelist'}) {
        $query_params->{'xmp.filter.apply_whitelist'} = $self->{api_client}->to_query_value($args{'xmp/filter/apply_whitelist'});
    }

    # query params
    if ( exists $args{'xmp/filter/whitelist'}) {
        $query_params->{'xmp.filter.whitelist'} = $self->{api_client}->to_query_value($args{'xmp/filter/whitelist'});
    }

    # query params
    if ( exists $args{'xmp/filter/apply_blacklist'}) {
        $query_params->{'xmp.filter.apply_blacklist'} = $self->{api_client}->to_query_value($args{'xmp/filter/apply_blacklist'});
    }

    # query params
    if ( exists $args{'xmp/filter/blacklist'}) {
        $query_params->{'xmp.filter.blacklist'} = $self->{api_client}->to_query_value($args{'xmp/filter/blacklist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_commons_util_impl_asset_cache_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $large/file/min  (optional)
# @param boolean $cache/apply  (optional)
# @param ARRAY[string] $mime/types  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'large/file/min' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cache/apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'mime/types' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_commons_util_impl_asset_cache_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCommonsUtilImplAssetCacheImplInfo',
        };
}
# @return ComDayCqDamCommonsUtilImplAssetCacheImplInfo
#
sub com_day_cq_dam_commons_util_impl_asset_cache_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'large/file/min'}) {
        $query_params->{'large.file.min'} = $self->{api_client}->to_query_value($args{'large/file/min'});
    }

    # query params
    if ( exists $args{'cache/apply'}) {
        $query_params->{'cache.apply'} = $self->{api_client}->to_query_value($args{'cache/apply'});
    }

    # query params
    if ( exists $args{'mime/types'}) {
        $query_params->{'mime.types'} = $self->{api_client}->to_query_value($args{'mime/types'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCommonsUtilImplAssetCacheImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $cq/dam/config/annotation/pdf/document/width  (optional)
# @param int $cq/dam/config/annotation/pdf/document/height  (optional)
# @param int $cq/dam/config/annotation/pdf/document/padding/horizontal  (optional)
# @param int $cq/dam/config/annotation/pdf/document/padding/vertical  (optional)
# @param int $cq/dam/config/annotation/pdf/font/size  (optional)
# @param string $cq/dam/config/annotation/pdf/font/color  (optional)
# @param string $cq/dam/config/annotation/pdf/font/family  (optional)
# @param string $cq/dam/config/annotation/pdf/font/light  (optional)
# @param int $cq/dam/config/annotation/pdf/margin_text_image  (optional)
# @param int $cq/dam/config/annotation/pdf/min_image_height  (optional)
# @param int $cq/dam/config/annotation/pdf/review_status/width  (optional)
# @param string $cq/dam/config/annotation/pdf/review_status/color/approved  (optional)
# @param string $cq/dam/config/annotation/pdf/review_status/color/rejected  (optional)
# @param string $cq/dam/config/annotation/pdf/review_status/color/changes_requested  (optional)
# @param int $cq/dam/config/annotation/pdf/annotation_marker/width  (optional)
# @param int $cq/dam/config/annotation/pdf/asset/minheight  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/config/annotation/pdf/document/width' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/config/annotation/pdf/document/height' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/config/annotation/pdf/document/padding/horizontal' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/config/annotation/pdf/document/padding/vertical' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/config/annotation/pdf/font/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/config/annotation/pdf/font/color' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/dam/config/annotation/pdf/font/family' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/dam/config/annotation/pdf/font/light' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/dam/config/annotation/pdf/margin_text_image' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/config/annotation/pdf/min_image_height' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/config/annotation/pdf/review_status/width' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/config/annotation/pdf/review_status/color/approved' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/dam/config/annotation/pdf/review_status/color/rejected' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/dam/config/annotation/pdf/review_status/color/changes_requested' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/dam/config/annotation/pdf/annotation_marker/width' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/config/annotation/pdf/asset/minheight' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo',
        };
}
# @return ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo
#
sub com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/config/annotation/pdf/document/width'}) {
        $query_params->{'cq.dam.config.annotation.pdf.document.width'} = $self->{api_client}->to_query_value($args{'cq/dam/config/annotation/pdf/document/width'});
    }

    # query params
    if ( exists $args{'cq/dam/config/annotation/pdf/document/height'}) {
        $query_params->{'cq.dam.config.annotation.pdf.document.height'} = $self->{api_client}->to_query_value($args{'cq/dam/config/annotation/pdf/document/height'});
    }

    # query params
    if ( exists $args{'cq/dam/config/annotation/pdf/document/padding/horizontal'}) {
        $query_params->{'cq.dam.config.annotation.pdf.document.padding.horizontal'} = $self->{api_client}->to_query_value($args{'cq/dam/config/annotation/pdf/document/padding/horizontal'});
    }

    # query params
    if ( exists $args{'cq/dam/config/annotation/pdf/document/padding/vertical'}) {
        $query_params->{'cq.dam.config.annotation.pdf.document.padding.vertical'} = $self->{api_client}->to_query_value($args{'cq/dam/config/annotation/pdf/document/padding/vertical'});
    }

    # query params
    if ( exists $args{'cq/dam/config/annotation/pdf/font/size'}) {
        $query_params->{'cq.dam.config.annotation.pdf.font.size'} = $self->{api_client}->to_query_value($args{'cq/dam/config/annotation/pdf/font/size'});
    }

    # query params
    if ( exists $args{'cq/dam/config/annotation/pdf/font/color'}) {
        $query_params->{'cq.dam.config.annotation.pdf.font.color'} = $self->{api_client}->to_query_value($args{'cq/dam/config/annotation/pdf/font/color'});
    }

    # query params
    if ( exists $args{'cq/dam/config/annotation/pdf/font/family'}) {
        $query_params->{'cq.dam.config.annotation.pdf.font.family'} = $self->{api_client}->to_query_value($args{'cq/dam/config/annotation/pdf/font/family'});
    }

    # query params
    if ( exists $args{'cq/dam/config/annotation/pdf/font/light'}) {
        $query_params->{'cq.dam.config.annotation.pdf.font.light'} = $self->{api_client}->to_query_value($args{'cq/dam/config/annotation/pdf/font/light'});
    }

    # query params
    if ( exists $args{'cq/dam/config/annotation/pdf/margin_text_image'}) {
        $query_params->{'cq.dam.config.annotation.pdf.marginTextImage'} = $self->{api_client}->to_query_value($args{'cq/dam/config/annotation/pdf/margin_text_image'});
    }

    # query params
    if ( exists $args{'cq/dam/config/annotation/pdf/min_image_height'}) {
        $query_params->{'cq.dam.config.annotation.pdf.minImageHeight'} = $self->{api_client}->to_query_value($args{'cq/dam/config/annotation/pdf/min_image_height'});
    }

    # query params
    if ( exists $args{'cq/dam/config/annotation/pdf/review_status/width'}) {
        $query_params->{'cq.dam.config.annotation.pdf.reviewStatus.width'} = $self->{api_client}->to_query_value($args{'cq/dam/config/annotation/pdf/review_status/width'});
    }

    # query params
    if ( exists $args{'cq/dam/config/annotation/pdf/review_status/color/approved'}) {
        $query_params->{'cq.dam.config.annotation.pdf.reviewStatus.color.approved'} = $self->{api_client}->to_query_value($args{'cq/dam/config/annotation/pdf/review_status/color/approved'});
    }

    # query params
    if ( exists $args{'cq/dam/config/annotation/pdf/review_status/color/rejected'}) {
        $query_params->{'cq.dam.config.annotation.pdf.reviewStatus.color.rejected'} = $self->{api_client}->to_query_value($args{'cq/dam/config/annotation/pdf/review_status/color/rejected'});
    }

    # query params
    if ( exists $args{'cq/dam/config/annotation/pdf/review_status/color/changes_requested'}) {
        $query_params->{'cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested'} = $self->{api_client}->to_query_value($args{'cq/dam/config/annotation/pdf/review_status/color/changes_requested'});
    }

    # query params
    if ( exists $args{'cq/dam/config/annotation/pdf/annotation_marker/width'}) {
        $query_params->{'cq.dam.config.annotation.pdf.annotationMarker.width'} = $self->{api_client}->to_query_value($args{'cq/dam/config/annotation/pdf/annotation_marker/width'});
    }

    # query params
    if ( exists $args{'cq/dam/config/annotation/pdf/asset/minheight'}) {
        $query_params->{'cq.dam.config.annotation.pdf.asset.minheight'} = $self->{api_client}->to_query_value($args{'cq/dam/config/annotation/pdf/asset/minheight'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_asset_move_listener
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_asset_move_listener' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplAssetMoveListenerInfo',
        };
}
# @return ComDayCqDamCoreImplAssetMoveListenerInfo
#
sub com_day_cq_dam_core_impl_asset_move_listener {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplAssetMoveListenerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_assethome_asset_home_page_configuration
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $is_enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'is_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_assethome_asset_home_page_configuration' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo',
        };
}
# @return ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo
#
sub com_day_cq_dam_core_impl_assethome_asset_home_page_configuration {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'is_enabled'}) {
        $query_params->{'isEnabled'} = $self->{api_client}->to_query_value($args{'is_enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $cq/dam/adhoc/asset/share/prezip/maxcontentsize  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/adhoc/asset/share/prezip/maxcontentsize' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo',
        };
}
# @return ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo
#
sub com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/adhoc/asset/share/prezip/maxcontentsize'}) {
        $query_params->{'cq.dam.adhoc.asset.share.prezip.maxcontentsize'} = $self->{api_client}->to_query_value($args{'cq/dam/adhoc/asset/share/prezip/maxcontentsize'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_cache_cq_buffered_image_cache
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $cq/dam/image/cache/max/memory  (optional)
# @param int $cq/dam/image/cache/max/age  (optional)
# @param string $cq/dam/image/cache/max/dimension  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/image/cache/max/memory' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/image/cache/max/age' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/image/cache/max/dimension' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_cache_cq_buffered_image_cache' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo',
        };
}
# @return ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo
#
sub com_day_cq_dam_core_impl_cache_cq_buffered_image_cache {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/image/cache/max/memory'}) {
        $query_params->{'cq.dam.image.cache.max.memory'} = $self->{api_client}->to_query_value($args{'cq/dam/image/cache/max/memory'});
    }

    # query params
    if ( exists $args{'cq/dam/image/cache/max/age'}) {
        $query_params->{'cq.dam.image.cache.max.age'} = $self->{api_client}->to_query_value($args{'cq/dam/image/cache/max/age'});
    }

    # query params
    if ( exists $args{'cq/dam/image/cache/max/dimension'}) {
        $query_params->{'cq.dam.image.cache.max.dimension'} = $self->{api_client}->to_query_value($args{'cq/dam/image/cache/max/dimension'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_dam_change_event_listener
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $changeeventlistener/observed/paths  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'changeeventlistener/observed/paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_dam_change_event_listener' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplDamChangeEventListenerInfo',
        };
}
# @return ComDayCqDamCoreImplDamChangeEventListenerInfo
#
sub com_day_cq_dam_core_impl_dam_change_event_listener {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'changeeventlistener/observed/paths'}) {
        $query_params->{'changeeventlistener.observed.paths'} = $self->{api_client}->to_query_value($args{'changeeventlistener/observed/paths'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplDamChangeEventListenerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_dam_event_purge_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $scheduler/expression  (optional)
# @param int $max_saved_activities  (optional)
# @param int $save_interval  (optional)
# @param boolean $enable_activity_purge  (optional)
# @param string $event_types  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduler/expression' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'max_saved_activities' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'save_interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'enable_activity_purge' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'event_types' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_dam_event_purge_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplDamEventPurgeServiceInfo',
        };
}
# @return ComDayCqDamCoreImplDamEventPurgeServiceInfo
#
sub com_day_cq_dam_core_impl_dam_event_purge_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scheduler/expression'}) {
        $query_params->{'scheduler.expression'} = $self->{api_client}->to_query_value($args{'scheduler/expression'});
    }

    # query params
    if ( exists $args{'max_saved_activities'}) {
        $query_params->{'maxSavedActivities'} = $self->{api_client}->to_query_value($args{'max_saved_activities'});
    }

    # query params
    if ( exists $args{'save_interval'}) {
        $query_params->{'saveInterval'} = $self->{api_client}->to_query_value($args{'save_interval'});
    }

    # query params
    if ( exists $args{'enable_activity_purge'}) {
        $query_params->{'enableActivityPurge'} = $self->{api_client}->to_query_value($args{'enable_activity_purge'});
    }

    # query params
    if ( exists $args{'event_types'}) {
        $query_params->{'eventTypes'} = $self->{api_client}->to_query_value($args{'event_types'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplDamEventPurgeServiceInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_dam_event_recorder_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $event/filter  (optional)
# @param int $event/queue/length  (optional)
# @param boolean $eventrecorder/enabled  (optional)
# @param ARRAY[string] $eventrecorder/blacklist  (optional)
# @param string $eventrecorder/eventtypes  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'event/filter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'event/queue/length' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'eventrecorder/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'eventrecorder/blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'eventrecorder/eventtypes' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_dam_event_recorder_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplDamEventRecorderImplInfo',
        };
}
# @return ComDayCqDamCoreImplDamEventRecorderImplInfo
#
sub com_day_cq_dam_core_impl_dam_event_recorder_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'event/filter'}) {
        $query_params->{'event.filter'} = $self->{api_client}->to_query_value($args{'event/filter'});
    }

    # query params
    if ( exists $args{'event/queue/length'}) {
        $query_params->{'event.queue.length'} = $self->{api_client}->to_query_value($args{'event/queue/length'});
    }

    # query params
    if ( exists $args{'eventrecorder/enabled'}) {
        $query_params->{'eventrecorder.enabled'} = $self->{api_client}->to_query_value($args{'eventrecorder/enabled'});
    }

    # query params
    if ( exists $args{'eventrecorder/blacklist'}) {
        $query_params->{'eventrecorder.blacklist'} = $self->{api_client}->to_query_value($args{'eventrecorder/blacklist'});
    }

    # query params
    if ( exists $args{'eventrecorder/eventtypes'}) {
        $query_params->{'eventrecorder.eventtypes'} = $self->{api_client}->to_query_value($args{'eventrecorder/eventtypes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplDamEventRecorderImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_event_dam_event_audit_listener
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $event/filter  (optional)
# @param boolean $enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'event/filter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_event_dam_event_audit_listener' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplEventDamEventAuditListenerInfo',
        };
}
# @return ComDayCqDamCoreImplEventDamEventAuditListenerInfo
#
sub com_day_cq_dam_core_impl_event_dam_event_audit_listener {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'event/filter'}) {
        $query_params->{'event.filter'} = $self->{api_client}->to_query_value($args{'event/filter'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplEventDamEventAuditListenerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_expiry_notification_job_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/dam/expiry/notification/scheduler/istimebased  (optional)
# @param string $cq/dam/expiry/notification/scheduler/timebased/rule  (optional)
# @param int $cq/dam/expiry/notification/scheduler/period/rule  (optional)
# @param boolean $send_email  (optional)
# @param int $asset_expired_limit  (optional)
# @param int $prior_notification_seconds  (optional)
# @param string $cq/dam/expiry/notification/url/protocol  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/expiry/notification/scheduler/istimebased' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cq/dam/expiry/notification/scheduler/timebased/rule' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/dam/expiry/notification/scheduler/period/rule' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'send_email' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'asset_expired_limit' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'prior_notification_seconds' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/expiry/notification/url/protocol' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_expiry_notification_job_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplExpiryNotificationJobImplInfo',
        };
}
# @return ComDayCqDamCoreImplExpiryNotificationJobImplInfo
#
sub com_day_cq_dam_core_impl_expiry_notification_job_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/expiry/notification/scheduler/istimebased'}) {
        $query_params->{'cq.dam.expiry.notification.scheduler.istimebased'} = $self->{api_client}->to_query_value($args{'cq/dam/expiry/notification/scheduler/istimebased'});
    }

    # query params
    if ( exists $args{'cq/dam/expiry/notification/scheduler/timebased/rule'}) {
        $query_params->{'cq.dam.expiry.notification.scheduler.timebased.rule'} = $self->{api_client}->to_query_value($args{'cq/dam/expiry/notification/scheduler/timebased/rule'});
    }

    # query params
    if ( exists $args{'cq/dam/expiry/notification/scheduler/period/rule'}) {
        $query_params->{'cq.dam.expiry.notification.scheduler.period.rule'} = $self->{api_client}->to_query_value($args{'cq/dam/expiry/notification/scheduler/period/rule'});
    }

    # query params
    if ( exists $args{'send_email'}) {
        $query_params->{'send_email'} = $self->{api_client}->to_query_value($args{'send_email'});
    }

    # query params
    if ( exists $args{'asset_expired_limit'}) {
        $query_params->{'asset_expired_limit'} = $self->{api_client}->to_query_value($args{'asset_expired_limit'});
    }

    # query params
    if ( exists $args{'prior_notification_seconds'}) {
        $query_params->{'prior_notification_seconds'} = $self->{api_client}->to_query_value($args{'prior_notification_seconds'});
    }

    # query params
    if ( exists $args{'cq/dam/expiry/notification/url/protocol'}) {
        $query_params->{'cq.dam.expiry.notification.url.protocol'} = $self->{api_client}->to_query_value($args{'cq/dam/expiry/notification/url/protocol'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplExpiryNotificationJobImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $is_enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'is_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo',
        };
}
# @return ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo
#
sub com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'is_enabled'}) {
        $query_params->{'isEnabled'} = $self->{api_client}->to_query_value($args{'is_enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_gfx_commons_gfx_renderer
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $skip/bufferedcache  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'skip/bufferedcache' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_gfx_commons_gfx_renderer' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplGfxCommonsGfxRendererInfo',
        };
}
# @return ComDayCqDamCoreImplGfxCommonsGfxRendererInfo
#
sub com_day_cq_dam_core_impl_gfx_commons_gfx_renderer {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'skip/bufferedcache'}) {
        $query_params->{'skip.bufferedcache'} = $self->{api_client}->to_query_value($args{'skip/bufferedcache'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplGfxCommonsGfxRendererInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_handler_eps_format_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $mimetype  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'mimetype' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_handler_eps_format_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo',
        };
}
# @return ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo
#
sub com_day_cq_dam_core_impl_handler_eps_format_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'mimetype'}) {
        $query_params->{'mimetype'} = $self->{api_client}->to_query_value($args{'mimetype'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_handler_indesign_format_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $mimetype  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'mimetype' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_handler_indesign_format_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo',
        };
}
# @return ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo
#
sub com_day_cq_dam_core_impl_handler_indesign_format_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'mimetype'}) {
        $query_params->{'mimetype'} = $self->{api_client}->to_query_value($args{'mimetype'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_handler_jpeg_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/dam/enable/ext/meta/extraction  (optional)
# @param int $large_file_threshold  (optional)
# @param int $large_comment_threshold  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/enable/ext/meta/extraction' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'large_file_threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'large_comment_threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_handler_jpeg_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplHandlerJpegHandlerInfo',
        };
}
# @return ComDayCqDamCoreImplHandlerJpegHandlerInfo
#
sub com_day_cq_dam_core_impl_handler_jpeg_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/enable/ext/meta/extraction'}) {
        $query_params->{'cq.dam.enable.ext.meta.extraction'} = $self->{api_client}->to_query_value($args{'cq/dam/enable/ext/meta/extraction'});
    }

    # query params
    if ( exists $args{'large_file_threshold'}) {
        $query_params->{'large_file_threshold'} = $self->{api_client}->to_query_value($args{'large_file_threshold'});
    }

    # query params
    if ( exists $args{'large_comment_threshold'}) {
        $query_params->{'large_comment_threshold'} = $self->{api_client}->to_query_value($args{'large_comment_threshold'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplHandlerJpegHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $xmphandler/cq/formats  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'xmphandler/cq/formats' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo',
        };
}
# @return ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo
#
sub com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'xmphandler/cq/formats'}) {
        $query_params->{'xmphandler.cq.formats'} = $self->{api_client}->to_query_value($args{'xmphandler/cq/formats'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_jmx_asset_index_update_monitor
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $jmx/objectname  (optional)
# @param boolean $property/measure/enabled  (optional)
# @param string $property/name  (optional)
# @param int $property/max/wait/ms  (optional)
# @param double $property/max/rate  (optional)
# @param boolean $fulltext/measure/enabled  (optional)
# @param string $fulltext/name  (optional)
# @param int $fulltext/max/wait/ms  (optional)
# @param double $fulltext/max/rate  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'jmx/objectname' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'property/measure/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'property/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'property/max/wait/ms' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'property/max/rate' => {
        data_type => 'double',
        description => '',
        required => '0',
    },
    'fulltext/measure/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'fulltext/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'fulltext/max/wait/ms' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'fulltext/max/rate' => {
        data_type => 'double',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_jmx_asset_index_update_monitor' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo',
        };
}
# @return ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo
#
sub com_day_cq_dam_core_impl_jmx_asset_index_update_monitor {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'jmx/objectname'}) {
        $query_params->{'jmx.objectname'} = $self->{api_client}->to_query_value($args{'jmx/objectname'});
    }

    # query params
    if ( exists $args{'property/measure/enabled'}) {
        $query_params->{'property.measure.enabled'} = $self->{api_client}->to_query_value($args{'property/measure/enabled'});
    }

    # query params
    if ( exists $args{'property/name'}) {
        $query_params->{'property.name'} = $self->{api_client}->to_query_value($args{'property/name'});
    }

    # query params
    if ( exists $args{'property/max/wait/ms'}) {
        $query_params->{'property.max.wait.ms'} = $self->{api_client}->to_query_value($args{'property/max/wait/ms'});
    }

    # query params
    if ( exists $args{'property/max/rate'}) {
        $query_params->{'property.max.rate'} = $self->{api_client}->to_query_value($args{'property/max/rate'});
    }

    # query params
    if ( exists $args{'fulltext/measure/enabled'}) {
        $query_params->{'fulltext.measure.enabled'} = $self->{api_client}->to_query_value($args{'fulltext/measure/enabled'});
    }

    # query params
    if ( exists $args{'fulltext/name'}) {
        $query_params->{'fulltext.name'} = $self->{api_client}->to_query_value($args{'fulltext/name'});
    }

    # query params
    if ( exists $args{'fulltext/max/wait/ms'}) {
        $query_params->{'fulltext.max.wait.ms'} = $self->{api_client}->to_query_value($args{'fulltext/max/wait/ms'});
    }

    # query params
    if ( exists $args{'fulltext/max/rate'}) {
        $query_params->{'fulltext.max.rate'} = $self->{api_client}->to_query_value($args{'fulltext/max/rate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $jmx/objectname  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'jmx/objectname' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo',
        };
}
# @return ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo
#
sub com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'jmx/objectname'}) {
        $query_params->{'jmx.objectname'} = $self->{api_client}->to_query_value($args{'jmx/objectname'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $jmx/objectname  (optional)
# @param boolean $active  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'jmx/objectname' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'active' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo',
        };
}
# @return ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo
#
sub com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'jmx/objectname'}) {
        $query_params->{'jmx.objectname'} = $self->{api_client}->to_query_value($args{'jmx/objectname'});
    }

    # query params
    if ( exists $args{'active'}) {
        $query_params->{'active'} = $self->{api_client}->to_query_value($args{'active'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $operation  (optional)
# @param boolean $email_enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'operation' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'email_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo',
        };
}
# @return ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo
#
sub com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'operation'}) {
        $query_params->{'operation'} = $self->{api_client}->to_query_value($args{'operation'});
    }

    # query params
    if ( exists $args{'email_enabled'}) {
        $query_params->{'emailEnabled'} = $self->{api_client}->to_query_value($args{'email_enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $operation  (optional)
# @param string $operation_icon  (optional)
# @param string $topic_name  (optional)
# @param boolean $email_enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'operation' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'operation_icon' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'topic_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'email_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo',
        };
}
# @return ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo
#
sub com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'operation'}) {
        $query_params->{'operation'} = $self->{api_client}->to_query_value($args{'operation'});
    }

    # query params
    if ( exists $args{'operation_icon'}) {
        $query_params->{'operationIcon'} = $self->{api_client}->to_query_value($args{'operation_icon'});
    }

    # query params
    if ( exists $args{'topic_name'}) {
        $query_params->{'topicName'} = $self->{api_client}->to_query_value($args{'topic_name'});
    }

    # query params
    if ( exists $args{'email_enabled'}) {
        $query_params->{'emailEnabled'} = $self->{api_client}->to_query_value($args{'email_enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_lightbox_lightbox_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $sling/servlet/paths  (optional)
# @param ARRAY[string] $sling/servlet/methods  (optional)
# @param boolean $cq/dam/enable/anonymous  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/servlet/paths' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/servlet/methods' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/enable/anonymous' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_lightbox_lightbox_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplLightboxLightboxServletInfo',
        };
}
# @return ComDayCqDamCoreImplLightboxLightboxServletInfo
#
sub com_day_cq_dam_core_impl_lightbox_lightbox_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/servlet/paths'}) {
        $query_params->{'sling.servlet.paths'} = $self->{api_client}->to_query_value($args{'sling/servlet/paths'});
    }

    # query params
    if ( exists $args{'sling/servlet/methods'}) {
        $query_params->{'sling.servlet.methods'} = $self->{api_client}->to_query_value($args{'sling/servlet/methods'});
    }

    # query params
    if ( exists $args{'cq/dam/enable/anonymous'}) {
        $query_params->{'cq.dam.enable.anonymous'} = $self->{api_client}->to_query_value($args{'cq/dam/enable/anonymous'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplLightboxLightboxServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_metadata_editor_select_component_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $granite:data  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'granite:data' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_metadata_editor_select_component_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo',
        };
}
# @return ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo
#
sub com_day_cq_dam_core_impl_metadata_editor_select_component_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'granite:data'}) {
        $query_params->{'granite:data'} = $self->{api_client}->to_query_value($args{'granite:data'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/dam/allow/all/mime  (optional)
# @param ARRAY[string] $cq/dam/allowed/asset/mimes  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/allow/all/mime' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cq/dam/allowed/asset/mimes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo',
        };
}
# @return ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo
#
sub com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/allow/all/mime'}) {
        $query_params->{'cq.dam.allow.all.mime'} = $self->{api_client}->to_query_value($args{'cq/dam/allow/all/mime'});
    }

    # query params
    if ( exists $args{'cq/dam/allowed/asset/mimes'}) {
        $query_params->{'cq.dam.allowed.asset.mimes'} = $self->{api_client}->to_query_value($args{'cq/dam/allowed/asset/mimes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/dam/detect/asset/mime/from/content  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/detect/asset/mime/from/content' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo',
        };
}
# @return ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo
#
sub com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/detect/asset/mime/from/content'}) {
        $query_params->{'cq.dam.detect.asset.mime.from.content'} = $self->{api_client}->to_query_value($args{'cq/dam/detect/asset/mime/from/content'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_missing_metadata_notification_job
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/dam/missingmetadata/notification/scheduler/istimebased  (optional)
# @param string $cq/dam/missingmetadata/notification/scheduler/timebased/rule  (optional)
# @param int $cq/dam/missingmetadata/notification/scheduler/period/rule  (optional)
# @param string $cq/dam/missingmetadata/notification/recipient  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/missingmetadata/notification/scheduler/istimebased' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cq/dam/missingmetadata/notification/scheduler/timebased/rule' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/dam/missingmetadata/notification/scheduler/period/rule' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/missingmetadata/notification/recipient' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_missing_metadata_notification_job' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplMissingMetadataNotificationJobInfo',
        };
}
# @return ComDayCqDamCoreImplMissingMetadataNotificationJobInfo
#
sub com_day_cq_dam_core_impl_missing_metadata_notification_job {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/missingmetadata/notification/scheduler/istimebased'}) {
        $query_params->{'cq.dam.missingmetadata.notification.scheduler.istimebased'} = $self->{api_client}->to_query_value($args{'cq/dam/missingmetadata/notification/scheduler/istimebased'});
    }

    # query params
    if ( exists $args{'cq/dam/missingmetadata/notification/scheduler/timebased/rule'}) {
        $query_params->{'cq.dam.missingmetadata.notification.scheduler.timebased.rule'} = $self->{api_client}->to_query_value($args{'cq/dam/missingmetadata/notification/scheduler/timebased/rule'});
    }

    # query params
    if ( exists $args{'cq/dam/missingmetadata/notification/scheduler/period/rule'}) {
        $query_params->{'cq.dam.missingmetadata.notification.scheduler.period.rule'} = $self->{api_client}->to_query_value($args{'cq/dam/missingmetadata/notification/scheduler/period/rule'});
    }

    # query params
    if ( exists $args{'cq/dam/missingmetadata/notification/recipient'}) {
        $query_params->{'cq.dam.missingmetadata.notification.recipient'} = $self->{api_client}->to_query_value($args{'cq/dam/missingmetadata/notification/recipient'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplMissingMetadataNotificationJobInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $process/label  (optional)
# @param boolean $notify_on_complete  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'process/label' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'notify_on_complete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo',
        };
}
# @return ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo
#
sub com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'process/label'}) {
        $query_params->{'process.label'} = $self->{api_client}->to_query_value($args{'process/label'});
    }

    # query params
    if ( exists $args{'notify_on_complete'}) {
        $query_params->{'Notify on Complete'} = $self->{api_client}->to_query_value($args{'notify_on_complete'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_process_text_extraction_process
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $mime_types  (optional)
# @param int $max_extract  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'mime_types' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'max_extract' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_process_text_extraction_process' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplProcessTextExtractionProcessInfo',
        };
}
# @return ComDayCqDamCoreImplProcessTextExtractionProcessInfo
#
sub com_day_cq_dam_core_impl_process_text_extraction_process {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'mime_types'}) {
        $query_params->{'mimeTypes'} = $self->{api_client}->to_query_value($args{'mime_types'});
    }

    # query params
    if ( exists $args{'max_extract'}) {
        $query_params->{'maxExtract'} = $self->{api_client}->to_query_value($args{'max_extract'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplProcessTextExtractionProcessInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_rendition_maker_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $xmp/propagate  (optional)
# @param ARRAY[string] $xmp/excludes  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'xmp/propagate' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'xmp/excludes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_rendition_maker_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplRenditionMakerImplInfo',
        };
}
# @return ComDayCqDamCoreImplRenditionMakerImplInfo
#
sub com_day_cq_dam_core_impl_rendition_maker_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'xmp/propagate'}) {
        $query_params->{'xmp.propagate'} = $self->{api_client}->to_query_value($args{'xmp/propagate'});
    }

    # query params
    if ( exists $args{'xmp/excludes'}) {
        $query_params->{'xmp.excludes'} = $self->{api_client}->to_query_value($args{'xmp/excludes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplRenditionMakerImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_reports_report_export_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $query_batch_size  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'query_batch_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_reports_report_export_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplReportsReportExportServiceInfo',
        };
}
# @return ComDayCqDamCoreImplReportsReportExportServiceInfo
#
sub com_day_cq_dam_core_impl_reports_report_export_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'query_batch_size'}) {
        $query_params->{'queryBatchSize'} = $self->{api_client}->to_query_value($args{'query_batch_size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplReportsReportExportServiceInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_reports_report_purge_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $scheduler/expression  (optional)
# @param int $max_saved_reports  (optional)
# @param int $time_duration  (optional)
# @param boolean $enable_report_purge  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduler/expression' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'max_saved_reports' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'time_duration' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'enable_report_purge' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_reports_report_purge_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplReportsReportPurgeServiceInfo',
        };
}
# @return ComDayCqDamCoreImplReportsReportPurgeServiceInfo
#
sub com_day_cq_dam_core_impl_reports_report_purge_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scheduler/expression'}) {
        $query_params->{'scheduler.expression'} = $self->{api_client}->to_query_value($args{'scheduler/expression'});
    }

    # query params
    if ( exists $args{'max_saved_reports'}) {
        $query_params->{'maxSavedReports'} = $self->{api_client}->to_query_value($args{'max_saved_reports'});
    }

    # query params
    if ( exists $args{'time_duration'}) {
        $query_params->{'timeDuration'} = $self->{api_client}->to_query_value($args{'time_duration'});
    }

    # query params
    if ( exists $args{'enable_report_purge'}) {
        $query_params->{'enableReportPurge'} = $self->{api_client}->to_query_value($args{'enable_report_purge'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplReportsReportPurgeServiceInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_servlet_asset_download_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_servlet_asset_download_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplServletAssetDownloadServletInfo',
        };
}
# @return ComDayCqDamCoreImplServletAssetDownloadServletInfo
#
sub com_day_cq_dam_core_impl_servlet_asset_download_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplServletAssetDownloadServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_servlet_asset_status_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $cq/dam/batch/status/maxassets  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/batch/status/maxassets' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_servlet_asset_status_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplServletAssetStatusServletInfo',
        };
}
# @return ComDayCqDamCoreImplServletAssetStatusServletInfo
#
sub com_day_cq_dam_core_impl_servlet_asset_status_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/batch/status/maxassets'}) {
        $query_params->{'cq.dam.batch.status.maxassets'} = $self->{api_client}->to_query_value($args{'cq/dam/batch/status/maxassets'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplServletAssetStatusServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $cq/dam/batch/indesign/maxassets  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/batch/indesign/maxassets' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplServletAssetXMPSearchServletInfo',
        };
}
# @return ComDayCqDamCoreImplServletAssetXMPSearchServletInfo
#
sub com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/batch/indesign/maxassets'}) {
        $query_params->{'cq.dam.batch.indesign.maxassets'} = $self->{api_client}->to_query_value($args{'cq/dam/batch/indesign/maxassets'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplServletAssetXMPSearchServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_servlet_batch_metadata_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/dam/batch/metadata/asset/default  (optional)
# @param ARRAY[string] $cq/dam/batch/metadata/collection/default  (optional)
# @param int $cq/dam/batch/metadata/maxresources  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/batch/metadata/asset/default' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/batch/metadata/collection/default' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/batch/metadata/maxresources' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_servlet_batch_metadata_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplServletBatchMetadataServletInfo',
        };
}
# @return ComDayCqDamCoreImplServletBatchMetadataServletInfo
#
sub com_day_cq_dam_core_impl_servlet_batch_metadata_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/batch/metadata/asset/default'}) {
        $query_params->{'cq.dam.batch.metadata.asset.default'} = $self->{api_client}->to_query_value($args{'cq/dam/batch/metadata/asset/default'});
    }

    # query params
    if ( exists $args{'cq/dam/batch/metadata/collection/default'}) {
        $query_params->{'cq.dam.batch.metadata.collection.default'} = $self->{api_client}->to_query_value($args{'cq/dam/batch/metadata/collection/default'});
    }

    # query params
    if ( exists $args{'cq/dam/batch/metadata/maxresources'}) {
        $query_params->{'cq.dam.batch.metadata.maxresources'} = $self->{api_client}->to_query_value($args{'cq/dam/batch/metadata/maxresources'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplServletBatchMetadataServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_servlet_binary_provider_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $sling/servlet/resource_types  (optional)
# @param ARRAY[string] $sling/servlet/methods  (optional)
# @param boolean $cq/dam/drm/enable  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/servlet/resource_types' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/servlet/methods' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/drm/enable' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_servlet_binary_provider_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplServletBinaryProviderServletInfo',
        };
}
# @return ComDayCqDamCoreImplServletBinaryProviderServletInfo
#
sub com_day_cq_dam_core_impl_servlet_binary_provider_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/servlet/resource_types'}) {
        $query_params->{'sling.servlet.resourceTypes'} = $self->{api_client}->to_query_value($args{'sling/servlet/resource_types'});
    }

    # query params
    if ( exists $args{'sling/servlet/methods'}) {
        $query_params->{'sling.servlet.methods'} = $self->{api_client}->to_query_value($args{'sling/servlet/methods'});
    }

    # query params
    if ( exists $args{'cq/dam/drm/enable'}) {
        $query_params->{'cq.dam.drm.enable'} = $self->{api_client}->to_query_value($args{'cq/dam/drm/enable'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplServletBinaryProviderServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_servlet_collection_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/dam/batch/collection/properties  (optional)
# @param int $cq/dam/batch/collection/maxcollections  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/batch/collection/properties' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/batch/collection/maxcollections' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_servlet_collection_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplServletCollectionServletInfo',
        };
}
# @return ComDayCqDamCoreImplServletCollectionServletInfo
#
sub com_day_cq_dam_core_impl_servlet_collection_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/batch/collection/properties'}) {
        $query_params->{'cq.dam.batch.collection.properties'} = $self->{api_client}->to_query_value($args{'cq/dam/batch/collection/properties'});
    }

    # query params
    if ( exists $args{'cq/dam/batch/collection/maxcollections'}) {
        $query_params->{'cq.dam.batch.collection.maxcollections'} = $self->{api_client}->to_query_value($args{'cq/dam/batch/collection/maxcollections'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplServletCollectionServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_servlet_collections_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/dam/batch/collections/properties  (optional)
# @param int $cq/dam/batch/collections/limit  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/batch/collections/properties' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/batch/collections/limit' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_servlet_collections_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplServletCollectionsServletInfo',
        };
}
# @return ComDayCqDamCoreImplServletCollectionsServletInfo
#
sub com_day_cq_dam_core_impl_servlet_collections_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/batch/collections/properties'}) {
        $query_params->{'cq.dam.batch.collections.properties'} = $self->{api_client}->to_query_value($args{'cq/dam/batch/collections/properties'});
    }

    # query params
    if ( exists $args{'cq/dam/batch/collections/limit'}) {
        $query_params->{'cq.dam.batch.collections.limit'} = $self->{api_client}->to_query_value($args{'cq/dam/batch/collections/limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplServletCollectionsServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_servlet_companion_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $more_info  (optional)
# @param string $/mnt/overlay/dam/gui/content/assets/moreinfo/html/__{path}  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'more_info' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '/mnt/overlay/dam/gui/content/assets/moreinfo/html/__{path}' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_servlet_companion_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplServletCompanionServletInfo',
        };
}
# @return ComDayCqDamCoreImplServletCompanionServletInfo
#
sub com_day_cq_dam_core_impl_servlet_companion_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'more_info'}) {
        $query_params->{'More Info'} = $self->{api_client}->to_query_value($args{'more_info'});
    }

    # query params
    if ( exists $args{'/mnt/overlay/dam/gui/content/assets/moreinfo/html/__{path}'}) {
        $query_params->{'/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}'} = $self->{api_client}->to_query_value($args{'/mnt/overlay/dam/gui/content/assets/moreinfo/html/__{path}'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplServletCompanionServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_servlet_create_asset_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $detect_duplicate  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'detect_duplicate' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_servlet_create_asset_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplServletCreateAssetServletInfo',
        };
}
# @return ComDayCqDamCoreImplServletCreateAssetServletInfo
#
sub com_day_cq_dam_core_impl_servlet_create_asset_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'detect_duplicate'}) {
        $query_params->{'detect_duplicate'} = $self->{api_client}->to_query_value($args{'detect_duplicate'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplServletCreateAssetServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/mime/type/blacklist  (optional)
# @param boolean $cq/dam/empty/mime  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/mime/type/blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/empty/mime' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplServletDamContentDispositionFilterInfo',
        };
}
# @return ComDayCqDamCoreImplServletDamContentDispositionFilterInfo
#
sub com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/mime/type/blacklist'}) {
        $query_params->{'cq.mime.type.blacklist'} = $self->{api_client}->to_query_value($args{'cq/mime/type/blacklist'});
    }

    # query params
    if ( exists $args{'cq/dam/empty/mime'}) {
        $query_params->{'cq.dam.empty.mime'} = $self->{api_client}->to_query_value($args{'cq/dam/empty/mime'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplServletDamContentDispositionFilterInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_servlet_guid_lookup_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/dam/core/guidlookupfilter/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/core/guidlookupfilter/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_servlet_guid_lookup_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplServletGuidLookupFilterInfo',
        };
}
# @return ComDayCqDamCoreImplServletGuidLookupFilterInfo
#
sub com_day_cq_dam_core_impl_servlet_guid_lookup_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/core/guidlookupfilter/enabled'}) {
        $query_params->{'cq.dam.core.guidlookupfilter.enabled'} = $self->{api_client}->to_query_value($args{'cq/dam/core/guidlookupfilter/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplServletGuidLookupFilterInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_servlet_health_check_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $cq/dam/sync/workflow/id  (optional)
# @param ARRAY[string] $cq/dam/sync/folder/types  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/sync/workflow/id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/dam/sync/folder/types' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_servlet_health_check_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplServletHealthCheckServletInfo',
        };
}
# @return ComDayCqDamCoreImplServletHealthCheckServletInfo
#
sub com_day_cq_dam_core_impl_servlet_health_check_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/sync/workflow/id'}) {
        $query_params->{'cq.dam.sync.workflow.id'} = $self->{api_client}->to_query_value($args{'cq/dam/sync/workflow/id'});
    }

    # query params
    if ( exists $args{'cq/dam/sync/folder/types'}) {
        $query_params->{'cq.dam.sync.folder.types'} = $self->{api_client}->to_query_value($args{'cq/dam/sync/folder/types'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplServletHealthCheckServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_servlet_metadata_get_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $sling/servlet/resource_types  (optional)
# @param string $sling/servlet/methods  (optional)
# @param string $sling/servlet/extensions  (optional)
# @param string $sling/servlet/selectors  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/servlet/resource_types' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/servlet/methods' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/servlet/extensions' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/servlet/selectors' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_servlet_metadata_get_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplServletMetadataGetServletInfo',
        };
}
# @return ComDayCqDamCoreImplServletMetadataGetServletInfo
#
sub com_day_cq_dam_core_impl_servlet_metadata_get_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/servlet/resource_types'}) {
        $query_params->{'sling.servlet.resourceTypes'} = $self->{api_client}->to_query_value($args{'sling/servlet/resource_types'});
    }

    # query params
    if ( exists $args{'sling/servlet/methods'}) {
        $query_params->{'sling.servlet.methods'} = $self->{api_client}->to_query_value($args{'sling/servlet/methods'});
    }

    # query params
    if ( exists $args{'sling/servlet/extensions'}) {
        $query_params->{'sling.servlet.extensions'} = $self->{api_client}->to_query_value($args{'sling/servlet/extensions'});
    }

    # query params
    if ( exists $args{'sling/servlet/selectors'}) {
        $query_params->{'sling.servlet.selectors'} = $self->{api_client}->to_query_value($args{'sling/servlet/selectors'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplServletMetadataGetServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/dam/drm/enable  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/drm/enable' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo',
        };
}
# @return ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo
#
sub com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/drm/enable'}) {
        $query_params->{'cq.dam.drm.enable'} = $self->{api_client}->to_query_value($args{'cq/dam/drm/enable'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_servlet_resource_collection_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $sling/servlet/resource_types  (optional)
# @param string $sling/servlet/methods  (optional)
# @param string $sling/servlet/selectors  (optional)
# @param string $download/config  (optional)
# @param string $view/selector  (optional)
# @param boolean $send_email  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/servlet/resource_types' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/servlet/methods' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/servlet/selectors' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'download/config' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'view/selector' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'send_email' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_servlet_resource_collection_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplServletResourceCollectionServletInfo',
        };
}
# @return ComDayCqDamCoreImplServletResourceCollectionServletInfo
#
sub com_day_cq_dam_core_impl_servlet_resource_collection_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/servlet/resource_types'}) {
        $query_params->{'sling.servlet.resourceTypes'} = $self->{api_client}->to_query_value($args{'sling/servlet/resource_types'});
    }

    # query params
    if ( exists $args{'sling/servlet/methods'}) {
        $query_params->{'sling.servlet.methods'} = $self->{api_client}->to_query_value($args{'sling/servlet/methods'});
    }

    # query params
    if ( exists $args{'sling/servlet/selectors'}) {
        $query_params->{'sling.servlet.selectors'} = $self->{api_client}->to_query_value($args{'sling/servlet/selectors'});
    }

    # query params
    if ( exists $args{'download/config'}) {
        $query_params->{'download.config'} = $self->{api_client}->to_query_value($args{'download/config'});
    }

    # query params
    if ( exists $args{'view/selector'}) {
        $query_params->{'view.selector'} = $self->{api_client}->to_query_value($args{'view/selector'});
    }

    # query params
    if ( exists $args{'send_email'}) {
        $query_params->{'send_email'} = $self->{api_client}->to_query_value($args{'send_email'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplServletResourceCollectionServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $create_preview_enabled  (optional)
# @param boolean $update_preview_enabled  (optional)
# @param int $queue_size  (optional)
# @param string $folder_preview_rendition_regex  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'create_preview_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'update_preview_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'queue_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'folder_preview_rendition_regex' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo',
        };
}
# @return ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo
#
sub com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'create_preview_enabled'}) {
        $query_params->{'createPreviewEnabled'} = $self->{api_client}->to_query_value($args{'create_preview_enabled'});
    }

    # query params
    if ( exists $args{'update_preview_enabled'}) {
        $query_params->{'updatePreviewEnabled'} = $self->{api_client}->to_query_value($args{'update_preview_enabled'});
    }

    # query params
    if ( exists $args{'queue_size'}) {
        $query_params->{'queueSize'} = $self->{api_client}->to_query_value($args{'queue_size'});
    }

    # query params
    if ( exists $args{'folder_preview_rendition_regex'}) {
        $query_params->{'folderPreviewRenditionRegex'} = $self->{api_client}->to_query_value($args{'folder_preview_rendition_regex'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_impl_unzip_unzip_config
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $cq/dam/config/unzip/maxuncompressedsize  (optional)
# @param string $cq/dam/config/unzip/encoding  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/config/unzip/maxuncompressedsize' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/config/unzip/encoding' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_impl_unzip_unzip_config' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreImplUnzipUnzipConfigInfo',
        };
}
# @return ComDayCqDamCoreImplUnzipUnzipConfigInfo
#
sub com_day_cq_dam_core_impl_unzip_unzip_config {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/config/unzip/maxuncompressedsize'}) {
        $query_params->{'cq.dam.config.unzip.maxuncompressedsize'} = $self->{api_client}->to_query_value($args{'cq/dam/config/unzip/maxuncompressedsize'});
    }

    # query params
    if ( exists $args{'cq/dam/config/unzip/encoding'}) {
        $query_params->{'cq.dam.config.unzip.encoding'} = $self->{api_client}->to_query_value($args{'cq/dam/config/unzip/encoding'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreImplUnzipUnzipConfigInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_process_exif_tool_extract_metadata_process
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $process/label  (optional)
# @param boolean $cq/dam/enable/sha1  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'process/label' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/dam/enable/sha1' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_process_exif_tool_extract_metadata_process' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo',
        };
}
# @return ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo
#
sub com_day_cq_dam_core_process_exif_tool_extract_metadata_process {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'process/label'}) {
        $query_params->{'process.label'} = $self->{api_client}->to_query_value($args{'process/label'});
    }

    # query params
    if ( exists $args{'cq/dam/enable/sha1'}) {
        $query_params->{'cq.dam.enable.sha1'} = $self->{api_client}->to_query_value($args{'cq/dam/enable/sha1'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_process_extract_metadata_process
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $process/label  (optional)
# @param boolean $cq/dam/enable/sha1  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'process/label' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/dam/enable/sha1' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_process_extract_metadata_process' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreProcessExtractMetadataProcessInfo',
        };
}
# @return ComDayCqDamCoreProcessExtractMetadataProcessInfo
#
sub com_day_cq_dam_core_process_extract_metadata_process {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'process/label'}) {
        $query_params->{'process.label'} = $self->{api_client}->to_query_value($args{'process/label'});
    }

    # query params
    if ( exists $args{'cq/dam/enable/sha1'}) {
        $query_params->{'cq.dam.enable.sha1'} = $self->{api_client}->to_query_value($args{'cq/dam/enable/sha1'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreProcessExtractMetadataProcessInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_core_process_metadata_processor_process
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $process/label  (optional)
# @param boolean $cq/dam/enable/sha1  (optional)
# @param ARRAY[string] $cq/dam/metadata/xssprotected/properties  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'process/label' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/dam/enable/sha1' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cq/dam/metadata/xssprotected/properties' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_core_process_metadata_processor_process' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamCoreProcessMetadataProcessorProcessInfo',
        };
}
# @return ComDayCqDamCoreProcessMetadataProcessorProcessInfo
#
sub com_day_cq_dam_core_process_metadata_processor_process {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'process/label'}) {
        $query_params->{'process.label'} = $self->{api_client}->to_query_value($args{'process/label'});
    }

    # query params
    if ( exists $args{'cq/dam/enable/sha1'}) {
        $query_params->{'cq.dam.enable.sha1'} = $self->{api_client}->to_query_value($args{'cq/dam/enable/sha1'});
    }

    # query params
    if ( exists $args{'cq/dam/metadata/xssprotected/properties'}) {
        $query_params->{'cq.dam.metadata.xssprotected.properties'} = $self->{api_client}->to_query_value($args{'cq/dam/metadata/xssprotected/properties'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamCoreProcessMetadataProcessorProcessInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_handler_ffmpeg_locator_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $executable/searchpath  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'executable/searchpath' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_handler_ffmpeg_locator_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamHandlerFfmpegLocatorImplInfo',
        };
}
# @return ComDayCqDamHandlerFfmpegLocatorImplInfo
#
sub com_day_cq_dam_handler_ffmpeg_locator_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'executable/searchpath'}) {
        $query_params->{'executable.searchpath'} = $self->{api_client}->to_query_value($args{'executable/searchpath'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamHandlerFfmpegLocatorImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $event/filter  (optional)
# @param ARRAY[string] $fontmgr/system/font/dir  (optional)
# @param string $fontmgr/adobe/font/dir  (optional)
# @param string $fontmgr/customer/font/dir  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'event/filter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'fontmgr/system/font/dir' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'fontmgr/adobe/font/dir' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'fontmgr/customer/font/dir' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo',
        };
}
# @return ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo
#
sub com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'event/filter'}) {
        $query_params->{'event.filter'} = $self->{api_client}->to_query_value($args{'event/filter'});
    }

    # query params
    if ( exists $args{'fontmgr/system/font/dir'}) {
        $query_params->{'fontmgr.system.font.dir'} = $self->{api_client}->to_query_value($args{'fontmgr/system/font/dir'});
    }

    # query params
    if ( exists $args{'fontmgr/adobe/font/dir'}) {
        $query_params->{'fontmgr.adobe.font.dir'} = $self->{api_client}->to_query_value($args{'fontmgr/adobe/font/dir'});
    }

    # query params
    if ( exists $args{'fontmgr/customer/font/dir'}) {
        $query_params->{'fontmgr.customer.font.dir'} = $self->{api_client}->to_query_value($args{'fontmgr/customer/font/dir'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_handler_standard_pdf_pdf_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $raster/annotation  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'raster/annotation' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_handler_standard_pdf_pdf_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamHandlerStandardPdfPdfHandlerInfo',
        };
}
# @return ComDayCqDamHandlerStandardPdfPdfHandlerInfo
#
sub com_day_cq_dam_handler_standard_pdf_pdf_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'raster/annotation'}) {
        $query_params->{'raster.annotation'} = $self->{api_client}->to_query_value($args{'raster/annotation'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamHandlerStandardPdfPdfHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_handler_standard_ps_post_script_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $raster/annotation  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'raster/annotation' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_handler_standard_ps_post_script_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamHandlerStandardPsPostScriptHandlerInfo',
        };
}
# @return ComDayCqDamHandlerStandardPsPostScriptHandlerInfo
#
sub com_day_cq_dam_handler_standard_ps_post_script_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'raster/annotation'}) {
        $query_params->{'raster.annotation'} = $self->{api_client}->to_query_value($args{'raster/annotation'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamHandlerStandardPsPostScriptHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_handler_standard_psd_psd_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $large_file_threshold  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'large_file_threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_handler_standard_psd_psd_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamHandlerStandardPsdPsdHandlerInfo',
        };
}
# @return ComDayCqDamHandlerStandardPsdPsdHandlerInfo
#
sub com_day_cq_dam_handler_standard_psd_psd_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'large_file_threshold'}) {
        $query_params->{'large_file_threshold'} = $self->{api_client}->to_query_value($args{'large_file_threshold'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamHandlerStandardPsdPsdHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_ids_impl_ids_job_processor
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enable/multisession  (optional)
# @param boolean $ids/cc/enable  (optional)
# @param boolean $enable/retry  (optional)
# @param boolean $enable/retry/scripterror  (optional)
# @param string $externalizer/domain/cqhost  (optional)
# @param string $externalizer/domain/http  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enable/multisession' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'ids/cc/enable' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'enable/retry' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'enable/retry/scripterror' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'externalizer/domain/cqhost' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'externalizer/domain/http' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_ids_impl_ids_job_processor' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamIdsImplIDSJobProcessorInfo',
        };
}
# @return ComDayCqDamIdsImplIDSJobProcessorInfo
#
sub com_day_cq_dam_ids_impl_ids_job_processor {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enable/multisession'}) {
        $query_params->{'enable.multisession'} = $self->{api_client}->to_query_value($args{'enable/multisession'});
    }

    # query params
    if ( exists $args{'ids/cc/enable'}) {
        $query_params->{'ids.cc.enable'} = $self->{api_client}->to_query_value($args{'ids/cc/enable'});
    }

    # query params
    if ( exists $args{'enable/retry'}) {
        $query_params->{'enable.retry'} = $self->{api_client}->to_query_value($args{'enable/retry'});
    }

    # query params
    if ( exists $args{'enable/retry/scripterror'}) {
        $query_params->{'enable.retry.scripterror'} = $self->{api_client}->to_query_value($args{'enable/retry/scripterror'});
    }

    # query params
    if ( exists $args{'externalizer/domain/cqhost'}) {
        $query_params->{'externalizer.domain.cqhost'} = $self->{api_client}->to_query_value($args{'externalizer/domain/cqhost'});
    }

    # query params
    if ( exists $args{'externalizer/domain/http'}) {
        $query_params->{'externalizer.domain.http'} = $self->{api_client}->to_query_value($args{'externalizer/domain/http'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamIdsImplIDSJobProcessorInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_ids_impl_ids_pool_manager_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $max/errors/to/blacklist  (optional)
# @param int $retry/interval/to/whitelist  (optional)
# @param int $connect/timeout  (optional)
# @param int $socket/timeout  (optional)
# @param string $process/label  (optional)
# @param int $connection/use/max  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'max/errors/to/blacklist' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'retry/interval/to/whitelist' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'connect/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'socket/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'process/label' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'connection/use/max' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_ids_impl_ids_pool_manager_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamIdsImplIDSPoolManagerImplInfo',
        };
}
# @return ComDayCqDamIdsImplIDSPoolManagerImplInfo
#
sub com_day_cq_dam_ids_impl_ids_pool_manager_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'max/errors/to/blacklist'}) {
        $query_params->{'max.errors.to.blacklist'} = $self->{api_client}->to_query_value($args{'max/errors/to/blacklist'});
    }

    # query params
    if ( exists $args{'retry/interval/to/whitelist'}) {
        $query_params->{'retry.interval.to.whitelist'} = $self->{api_client}->to_query_value($args{'retry/interval/to/whitelist'});
    }

    # query params
    if ( exists $args{'connect/timeout'}) {
        $query_params->{'connect.timeout'} = $self->{api_client}->to_query_value($args{'connect/timeout'});
    }

    # query params
    if ( exists $args{'socket/timeout'}) {
        $query_params->{'socket.timeout'} = $self->{api_client}->to_query_value($args{'socket/timeout'});
    }

    # query params
    if ( exists $args{'process/label'}) {
        $query_params->{'process.label'} = $self->{api_client}->to_query_value($args{'process/label'});
    }

    # query params
    if ( exists $args{'connection/use/max'}) {
        $query_params->{'connection.use.max'} = $self->{api_client}->to_query_value($args{'connection/use/max'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamIdsImplIDSPoolManagerImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_indd_impl_handler_indesign_xmp_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $process/label  (optional)
# @param boolean $extract/pages  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'process/label' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'extract/pages' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_indd_impl_handler_indesign_xmp_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo',
        };
}
# @return ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo
#
sub com_day_cq_dam_indd_impl_handler_indesign_xmp_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'process/label'}) {
        $query_params->{'process.label'} = $self->{api_client}->to_query_value($args{'process/label'});
    }

    # query params
    if ( exists $args{'extract/pages'}) {
        $query_params->{'extract.pages'} = $self->{api_client}->to_query_value($args{'extract/pages'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $snippetcreation/maxcollections  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'snippetcreation/maxcollections' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamInddImplServletSnippetCreationServletInfo',
        };
}
# @return ComDayCqDamInddImplServletSnippetCreationServletInfo
#
sub com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'snippetcreation/maxcollections'}) {
        $query_params->{'snippetcreation.maxcollections'} = $self->{api_client}->to_query_value($args{'snippetcreation/maxcollections'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamInddImplServletSnippetCreationServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_indd_process_indd_media_extract_process
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $process/label  (optional)
# @param string $cq/dam/indd/pages/regex  (optional)
# @param boolean $ids/job/decoupled  (optional)
# @param string $ids/job/workflow/model  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'process/label' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/dam/indd/pages/regex' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'ids/job/decoupled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'ids/job/workflow/model' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_indd_process_indd_media_extract_process' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamInddProcessINDDMediaExtractProcessInfo',
        };
}
# @return ComDayCqDamInddProcessINDDMediaExtractProcessInfo
#
sub com_day_cq_dam_indd_process_indd_media_extract_process {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'process/label'}) {
        $query_params->{'process.label'} = $self->{api_client}->to_query_value($args{'process/label'});
    }

    # query params
    if ( exists $args{'cq/dam/indd/pages/regex'}) {
        $query_params->{'cq.dam.indd.pages.regex'} = $self->{api_client}->to_query_value($args{'cq/dam/indd/pages/regex'});
    }

    # query params
    if ( exists $args{'ids/job/decoupled'}) {
        $query_params->{'ids.job.decoupled'} = $self->{api_client}->to_query_value($args{'ids/job/decoupled'});
    }

    # query params
    if ( exists $args{'ids/job/workflow/model'}) {
        $query_params->{'ids.job.workflow.model'} = $self->{api_client}->to_query_value($args{'ids/job/workflow/model'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamInddProcessINDDMediaExtractProcessInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_performance_internal_asset_performance_data_handler_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $batch/commit/size  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'batch/commit/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_performance_internal_asset_performance_data_handler_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo',
        };
}
# @return ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo
#
sub com_day_cq_dam_performance_internal_asset_performance_data_handler_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'batch/commit/size'}) {
        $query_params->{'batch.commit.size'} = $self->{api_client}->to_query_value($args{'batch/commit/size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_performance_internal_asset_performance_report_sync_job
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $scheduler/expression  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduler/expression' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_performance_internal_asset_performance_report_sync_job' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo',
        };
}
# @return ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo
#
sub com_day_cq_dam_performance_internal_asset_performance_report_sync_job {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scheduler/expression'}) {
        $query_params->{'scheduler.expression'} = $self->{api_client}->to_query_value($args{'scheduler/expression'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $delete/zip/file  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'delete/zip/file' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo',
        };
}
# @return ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo
#
sub com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'delete/zip/file'}) {
        $query_params->{'delete.zip.file'} = $self->{api_client}->to_query_value($args{'delete/zip/file'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/dam/s7dam/dynamicmediaconfigeventlistener/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/s7dam/dynamicmediaconfigeventlistener/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo',
        };
}
# @return ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo
#
sub com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/s7dam/dynamicmediaconfigeventlistener/enabled'}) {
        $query_params->{'cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled'} = $self->{api_client}->to_query_value($args{'cq/dam/s7dam/dynamicmediaconfigeventlistener/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $scheduler/expression  (optional)
# @param boolean $scheduler/concurrent  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduler/expression' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'scheduler/concurrent' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo',
        };
}
# @return ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo
#
sub com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scheduler/expression'}) {
        $query_params->{'scheduler.expression'} = $self->{api_client}->to_query_value($args{'scheduler/expression'});
    }

    # query params
    if ( exists $args{'scheduler/concurrent'}) {
        $query_params->{'scheduler.concurrent'} = $self->{api_client}->to_query_value($args{'scheduler/concurrent'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_s7dam_common_post_servlets_set_create_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $sling/post/operation  (optional)
# @param string $sling/servlet/methods  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/post/operation' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/servlet/methods' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_s7dam_common_post_servlets_set_create_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo',
        };
}
# @return ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo
#
sub com_day_cq_dam_s7dam_common_post_servlets_set_create_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/post/operation'}) {
        $query_params->{'sling.post.operation'} = $self->{api_client}->to_query_value($args{'sling/post/operation'});
    }

    # query params
    if ( exists $args{'sling/servlet/methods'}) {
        $query_params->{'sling.servlet.methods'} = $self->{api_client}->to_query_value($args{'sling/servlet/methods'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $sling/post/operation  (optional)
# @param string $sling/servlet/methods  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/post/operation' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/servlet/methods' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo',
        };
}
# @return ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo
#
sub com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/post/operation'}) {
        $query_params->{'sling.post.operation'} = $self->{api_client}->to_query_value($args{'sling/post/operation'});
    }

    # query params
    if ( exists $args{'sling/servlet/methods'}) {
        $query_params->{'sling.servlet.methods'} = $self->{api_client}->to_query_value($args{'sling/servlet/methods'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $process/label  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'process/label' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo',
        };
}
# @return ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo
#
sub com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'process/label'}) {
        $query_params->{'process.label'} = $self->{api_client}->to_query_value($args{'process/label'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/dam/s7dam/damchangeeventlistener/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/s7dam/damchangeeventlistener/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo',
        };
}
# @return ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo
#
sub com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/s7dam/damchangeeventlistener/enabled'}) {
        $query_params->{'cq.dam.s7dam.damchangeeventlistener.enabled'} = $self->{api_client}->to_query_value($args{'cq/dam/s7dam/damchangeeventlistener/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $sling/servlet/paths  (optional)
# @param string $sling/servlet/methods  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/servlet/paths' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/servlet/methods' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo',
        };
}
# @return ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo
#
sub com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/servlet/paths'}) {
        $query_params->{'sling.servlet.paths'} = $self->{api_client}->to_query_value($args{'sling/servlet/paths'});
    }

    # query params
    if ( exists $args{'sling/servlet/methods'}) {
        $query_params->{'sling.servlet.methods'} = $self->{api_client}->to_query_value($args{'sling/servlet/methods'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $cq/dam/s7dam/videoproxyclientservice/multipartupload/minsize/name  (optional)
# @param int $cq/dam/s7dam/videoproxyclientservice/multipartupload/partsize/name  (optional)
# @param int $cq/dam/s7dam/videoproxyclientservice/multipartupload/numthread/name  (optional)
# @param int $cq/dam/s7dam/videoproxyclientservice/http/readtimeout/name  (optional)
# @param int $cq/dam/s7dam/videoproxyclientservice/http/connectiontimeout/name  (optional)
# @param int $cq/dam/s7dam/videoproxyclientservice/http/maxretrycount/name  (optional)
# @param int $cq/dam/s7dam/videoproxyclientservice/uploadprogress/interval/name  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/s7dam/videoproxyclientservice/multipartupload/minsize/name' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/s7dam/videoproxyclientservice/multipartupload/partsize/name' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/s7dam/videoproxyclientservice/multipartupload/numthread/name' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/s7dam/videoproxyclientservice/http/readtimeout/name' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/s7dam/videoproxyclientservice/http/connectiontimeout/name' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/s7dam/videoproxyclientservice/http/maxretrycount/name' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/s7dam/videoproxyclientservice/uploadprogress/interval/name' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo',
        };
}
# @return ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo
#
sub com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/s7dam/videoproxyclientservice/multipartupload/minsize/name'}) {
        $query_params->{'cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name'} = $self->{api_client}->to_query_value($args{'cq/dam/s7dam/videoproxyclientservice/multipartupload/minsize/name'});
    }

    # query params
    if ( exists $args{'cq/dam/s7dam/videoproxyclientservice/multipartupload/partsize/name'}) {
        $query_params->{'cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name'} = $self->{api_client}->to_query_value($args{'cq/dam/s7dam/videoproxyclientservice/multipartupload/partsize/name'});
    }

    # query params
    if ( exists $args{'cq/dam/s7dam/videoproxyclientservice/multipartupload/numthread/name'}) {
        $query_params->{'cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name'} = $self->{api_client}->to_query_value($args{'cq/dam/s7dam/videoproxyclientservice/multipartupload/numthread/name'});
    }

    # query params
    if ( exists $args{'cq/dam/s7dam/videoproxyclientservice/http/readtimeout/name'}) {
        $query_params->{'cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name'} = $self->{api_client}->to_query_value($args{'cq/dam/s7dam/videoproxyclientservice/http/readtimeout/name'});
    }

    # query params
    if ( exists $args{'cq/dam/s7dam/videoproxyclientservice/http/connectiontimeout/name'}) {
        $query_params->{'cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name'} = $self->{api_client}->to_query_value($args{'cq/dam/s7dam/videoproxyclientservice/http/connectiontimeout/name'});
    }

    # query params
    if ( exists $args{'cq/dam/s7dam/videoproxyclientservice/http/maxretrycount/name'}) {
        $query_params->{'cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name'} = $self->{api_client}->to_query_value($args{'cq/dam/s7dam/videoproxyclientservice/http/maxretrycount/name'});
    }

    # query params
    if ( exists $args{'cq/dam/s7dam/videoproxyclientservice/uploadprogress/interval/name'}) {
        $query_params->{'cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name'} = $self->{api_client}->to_query_value($args{'cq/dam/s7dam/videoproxyclientservice/uploadprogress/interval/name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_scene7_impl_scene7_api_client_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $cq/dam/scene7/apiclient/recordsperpage/nofilter/name  (optional)
# @param int $cq/dam/scene7/apiclient/recordsperpage/withfilter/name  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/scene7/apiclient/recordsperpage/nofilter/name' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/scene7/apiclient/recordsperpage/withfilter/name' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_scene7_impl_scene7_api_client_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamScene7ImplScene7APIClientImplInfo',
        };
}
# @return ComDayCqDamScene7ImplScene7APIClientImplInfo
#
sub com_day_cq_dam_scene7_impl_scene7_api_client_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/scene7/apiclient/recordsperpage/nofilter/name'}) {
        $query_params->{'cq.dam.scene7.apiclient.recordsperpage.nofilter.name'} = $self->{api_client}->to_query_value($args{'cq/dam/scene7/apiclient/recordsperpage/nofilter/name'});
    }

    # query params
    if ( exists $args{'cq/dam/scene7/apiclient/recordsperpage/withfilter/name'}) {
        $query_params->{'cq.dam.scene7.apiclient.recordsperpage.withfilter.name'} = $self->{api_client}->to_query_value($args{'cq/dam/scene7/apiclient/recordsperpage/withfilter/name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamScene7ImplScene7APIClientImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/dam/scene7/assetmimetypeservice/mapping  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/scene7/assetmimetypeservice/mapping' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo',
        };
}
# @return ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo
#
sub com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/scene7/assetmimetypeservice/mapping'}) {
        $query_params->{'cq.dam.scene7.assetmimetypeservice.mapping'} = $self->{api_client}->to_query_value($args{'cq/dam/scene7/assetmimetypeservice/mapping'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_scene7_impl_scene7_configuration_event_listener
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/dam/scene7/configurationeventlistener/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/scene7/configurationeventlistener/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_scene7_impl_scene7_configuration_event_listener' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo',
        };
}
# @return ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo
#
sub com_day_cq_dam_scene7_impl_scene7_configuration_event_listener {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/scene7/configurationeventlistener/enabled'}) {
        $query_params->{'cq.dam.scene7.configurationeventlistener.enabled'} = $self->{api_client}->to_query_value($args{'cq/dam/scene7/configurationeventlistener/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/dam/scene7/damchangeeventlistener/enabled  (optional)
# @param ARRAY[string] $cq/dam/scene7/damchangeeventlistener/observed/paths  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/scene7/damchangeeventlistener/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cq/dam/scene7/damchangeeventlistener/observed/paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo',
        };
}
# @return ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo
#
sub com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/scene7/damchangeeventlistener/enabled'}) {
        $query_params->{'cq.dam.scene7.damchangeeventlistener.enabled'} = $self->{api_client}->to_query_value($args{'cq/dam/scene7/damchangeeventlistener/enabled'});
    }

    # query params
    if ( exists $args{'cq/dam/scene7/damchangeeventlistener/observed/paths'}) {
        $query_params->{'cq.dam.scene7.damchangeeventlistener.observed.paths'} = $self->{api_client}->to_query_value($args{'cq/dam/scene7/damchangeeventlistener/observed/paths'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $scene7_flash_templates/rti  (optional)
# @param string $scene7_flash_templates/rsi  (optional)
# @param string $scene7_flash_templates/rb  (optional)
# @param string $scene7_flash_templates/rurl  (optional)
# @param string $scene7_flash_template/url_format_parameter  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scene7_flash_templates/rti' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'scene7_flash_templates/rsi' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'scene7_flash_templates/rb' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'scene7_flash_templates/rurl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'scene7_flash_template/url_format_parameter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo',
        };
}
# @return ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo
#
sub com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scene7_flash_templates/rti'}) {
        $query_params->{'scene7FlashTemplates.rti'} = $self->{api_client}->to_query_value($args{'scene7_flash_templates/rti'});
    }

    # query params
    if ( exists $args{'scene7_flash_templates/rsi'}) {
        $query_params->{'scene7FlashTemplates.rsi'} = $self->{api_client}->to_query_value($args{'scene7_flash_templates/rsi'});
    }

    # query params
    if ( exists $args{'scene7_flash_templates/rb'}) {
        $query_params->{'scene7FlashTemplates.rb'} = $self->{api_client}->to_query_value($args{'scene7_flash_templates/rb'});
    }

    # query params
    if ( exists $args{'scene7_flash_templates/rurl'}) {
        $query_params->{'scene7FlashTemplates.rurl'} = $self->{api_client}->to_query_value($args{'scene7_flash_templates/rurl'});
    }

    # query params
    if ( exists $args{'scene7_flash_template/url_format_parameter'}) {
        $query_params->{'scene7FlashTemplate.urlFormatParameter'} = $self->{api_client}->to_query_value($args{'scene7_flash_template/url_format_parameter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_scene7_impl_scene7_upload_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $cq/dam/scene7/uploadservice/activejobtimeout/label  (optional)
# @param int $cq/dam/scene7/uploadservice/connectionmaxperroute/label  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/dam/scene7/uploadservice/activejobtimeout/label' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/dam/scene7/uploadservice/connectionmaxperroute/label' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_scene7_impl_scene7_upload_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamScene7ImplScene7UploadServiceImplInfo',
        };
}
# @return ComDayCqDamScene7ImplScene7UploadServiceImplInfo
#
sub com_day_cq_dam_scene7_impl_scene7_upload_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/dam/scene7/uploadservice/activejobtimeout/label'}) {
        $query_params->{'cq.dam.scene7.uploadservice.activejobtimeout.label'} = $self->{api_client}->to_query_value($args{'cq/dam/scene7/uploadservice/activejobtimeout/label'});
    }

    # query params
    if ( exists $args{'cq/dam/scene7/uploadservice/connectionmaxperroute/label'}) {
        $query_params->{'cq.dam.scene7.uploadservice.connectionmaxperroute.label'} = $self->{api_client}->to_query_value($args{'cq/dam/scene7/uploadservice/connectionmaxperroute/label'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamScene7ImplScene7UploadServiceImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $get_cache_expiration_unit  (optional)
# @param int $get_cache_expiration_value  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'get_cache_expiration_unit' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'get_cache_expiration_value' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo',
        };
}
# @return ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo
#
sub com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'get_cache_expiration_unit'}) {
        $query_params->{'getCacheExpirationUnit'} = $self->{api_client}->to_query_value($args{'get_cache_expiration_unit'});
    }

    # query params
    if ( exists $args{'get_cache_expiration_value'}) {
        $query_params->{'getCacheExpirationValue'} = $self->{api_client}->to_query_value($args{'get_cache_expiration_value'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_stock_integration_impl_configuration_stock_configuration
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $locale  (optional)
# @param string $ims_config  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'locale' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'ims_config' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_stock_integration_impl_configuration_stock_configuration' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo',
        };
}
# @return ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo
#
sub com_day_cq_dam_stock_integration_impl_configuration_stock_configuration {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'locale'}) {
        $query_params->{'locale'} = $self->{api_client}->to_query_value($args{'locale'});
    }

    # query params
    if ( exists $args{'ims_config'}) {
        $query_params->{'imsConfig'} = $self->{api_client}->to_query_value($args{'ims_config'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo', $response);
    return $_response_object;
}

#
# com_day_cq_dam_video_impl_servlet_video_test_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_dam_video_impl_servlet_video_test_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqDamVideoImplServletVideoTestServletInfo',
        };
}
# @return ComDayCqDamVideoImplServletVideoTestServletInfo
#
sub com_day_cq_dam_video_impl_servlet_video_test_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqDamVideoImplServletVideoTestServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_extwidget_servlets_image_sprite_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $max_width  (optional)
# @param int $max_height  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'max_width' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'max_height' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_extwidget_servlets_image_sprite_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqExtwidgetServletsImageSpriteServletInfo',
        };
}
# @return ComDayCqExtwidgetServletsImageSpriteServletInfo
#
sub com_day_cq_extwidget_servlets_image_sprite_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'max_width'}) {
        $query_params->{'maxWidth'} = $self->{api_client}->to_query_value($args{'max_width'});
    }

    # query params
    if ( exists $args{'max_height'}) {
        $query_params->{'maxHeight'} = $self->{api_client}->to_query_value($args{'max_height'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqExtwidgetServletsImageSpriteServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_image_internal_font_font_helper
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $fontpath  (optional)
# @param int $oversampling_factor  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'fontpath' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'oversampling_factor' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_image_internal_font_font_helper' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqImageInternalFontFontHelperInfo',
        };
}
# @return ComDayCqImageInternalFontFontHelperInfo
#
sub com_day_cq_image_internal_font_font_helper {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.image.internal.font.FontHelper';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'fontpath'}) {
        $query_params->{'fontpath'} = $self->{api_client}->to_query_value($args{'fontpath'});
    }

    # query params
    if ( exists $args{'oversampling_factor'}) {
        $query_params->{'oversamplingFactor'} = $self->{api_client}->to_query_value($args{'oversampling_factor'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqImageInternalFontFontHelperInfo', $response);
    return $_response_object;
}

#
# com_day_cq_jcrclustersupport_cluster_start_level_controller
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cluster/level/enable  (optional)
# @param int $cluster/master/level  (optional)
# @param int $cluster/slave/level  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cluster/level/enable' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cluster/master/level' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cluster/slave/level' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_jcrclustersupport_cluster_start_level_controller' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqJcrclustersupportClusterStartLevelControllerInfo',
        };
}
# @return ComDayCqJcrclustersupportClusterStartLevelControllerInfo
#
sub com_day_cq_jcrclustersupport_cluster_start_level_controller {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cluster/level/enable'}) {
        $query_params->{'cluster.level.enable'} = $self->{api_client}->to_query_value($args{'cluster/level/enable'});
    }

    # query params
    if ( exists $args{'cluster/master/level'}) {
        $query_params->{'cluster.master.level'} = $self->{api_client}->to_query_value($args{'cluster/master/level'});
    }

    # query params
    if ( exists $args{'cluster/slave/level'}) {
        $query_params->{'cluster.slave.level'} = $self->{api_client}->to_query_value($args{'cluster/slave/level'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqJcrclustersupportClusterStartLevelControllerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_mailer_default_mail_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $smtp/host  (optional)
# @param int $smtp/port  (optional)
# @param string $smtp/user  (optional)
# @param string $smtp/password  (optional)
# @param string $from/address  (optional)
# @param boolean $smtp/ssl  (optional)
# @param boolean $smtp/starttls  (optional)
# @param boolean $debug/email  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'smtp/host' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'smtp/port' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'smtp/user' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'smtp/password' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'from/address' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'smtp/ssl' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'smtp/starttls' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'debug/email' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_mailer_default_mail_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqMailerDefaultMailServiceInfo',
        };
}
# @return ComDayCqMailerDefaultMailServiceInfo
#
sub com_day_cq_mailer_default_mail_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.mailer.DefaultMailService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'smtp/host'}) {
        $query_params->{'smtp.host'} = $self->{api_client}->to_query_value($args{'smtp/host'});
    }

    # query params
    if ( exists $args{'smtp/port'}) {
        $query_params->{'smtp.port'} = $self->{api_client}->to_query_value($args{'smtp/port'});
    }

    # query params
    if ( exists $args{'smtp/user'}) {
        $query_params->{'smtp.user'} = $self->{api_client}->to_query_value($args{'smtp/user'});
    }

    # query params
    if ( exists $args{'smtp/password'}) {
        $query_params->{'smtp.password'} = $self->{api_client}->to_query_value($args{'smtp/password'});
    }

    # query params
    if ( exists $args{'from/address'}) {
        $query_params->{'from.address'} = $self->{api_client}->to_query_value($args{'from/address'});
    }

    # query params
    if ( exists $args{'smtp/ssl'}) {
        $query_params->{'smtp.ssl'} = $self->{api_client}->to_query_value($args{'smtp/ssl'});
    }

    # query params
    if ( exists $args{'smtp/starttls'}) {
        $query_params->{'smtp.starttls'} = $self->{api_client}->to_query_value($args{'smtp/starttls'});
    }

    # query params
    if ( exists $args{'debug/email'}) {
        $query_params->{'debug.email'} = $self->{api_client}->to_query_value($args{'debug/email'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqMailerDefaultMailServiceInfo', $response);
    return $_response_object;
}

#
# com_day_cq_mailer_impl_cq_mailing_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $max/recipient/count  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'max/recipient/count' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_mailer_impl_cq_mailing_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqMailerImplCqMailingServiceInfo',
        };
}
# @return ComDayCqMailerImplCqMailingServiceInfo
#
sub com_day_cq_mailer_impl_cq_mailing_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'max/recipient/count'}) {
        $query_params->{'max.recipient.count'} = $self->{api_client}->to_query_value($args{'max/recipient/count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqMailerImplCqMailingServiceInfo', $response);
    return $_response_object;
}

#
# com_day_cq_mailer_impl_email_cq_email_template_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $mailer/email/charset  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'mailer/email/charset' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_mailer_impl_email_cq_email_template_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo',
        };
}
# @return ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo
#
sub com_day_cq_mailer_impl_email_cq_email_template_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'mailer/email/charset'}) {
        $query_params->{'mailer.email.charset'} = $self->{api_client}->to_query_value($args{'mailer/email/charset'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo', $response);
    return $_response_object;
}

#
# com_day_cq_mailer_impl_email_cq_retriever_template_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $mailer/email/embed  (optional)
# @param string $mailer/email/charset  (optional)
# @param string $mailer/email/retriever_user_id  (optional)
# @param string $mailer/email/retriever_user_pwd  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'mailer/email/embed' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'mailer/email/charset' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'mailer/email/retriever_user_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'mailer/email/retriever_user_pwd' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_mailer_impl_email_cq_retriever_template_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo',
        };
}
# @return ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo
#
sub com_day_cq_mailer_impl_email_cq_retriever_template_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'mailer/email/embed'}) {
        $query_params->{'mailer.email.embed'} = $self->{api_client}->to_query_value($args{'mailer/email/embed'});
    }

    # query params
    if ( exists $args{'mailer/email/charset'}) {
        $query_params->{'mailer.email.charset'} = $self->{api_client}->to_query_value($args{'mailer/email/charset'});
    }

    # query params
    if ( exists $args{'mailer/email/retriever_user_id'}) {
        $query_params->{'mailer.email.retrieverUserID'} = $self->{api_client}->to_query_value($args{'mailer/email/retriever_user_id'});
    }

    # query params
    if ( exists $args{'mailer/email/retriever_user_pwd'}) {
        $query_params->{'mailer.email.retrieverUserPWD'} = $self->{api_client}->to_query_value($args{'mailer/email/retriever_user_pwd'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo', $response);
    return $_response_object;
}

#
# com_day_cq_mcm_campaign_impl_integration_config_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $aem/mcm/campaign/form_constraints  (optional)
# @param string $aem/mcm/campaign/public_url  (optional)
# @param boolean $aem/mcm/campaign/relaxed_ssl  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'aem/mcm/campaign/form_constraints' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'aem/mcm/campaign/public_url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'aem/mcm/campaign/relaxed_ssl' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_mcm_campaign_impl_integration_config_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqMcmCampaignImplIntegrationConfigImplInfo',
        };
}
# @return ComDayCqMcmCampaignImplIntegrationConfigImplInfo
#
sub com_day_cq_mcm_campaign_impl_integration_config_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'aem/mcm/campaign/form_constraints'}) {
        $query_params->{'aem.mcm.campaign.formConstraints'} = $self->{api_client}->to_query_value($args{'aem/mcm/campaign/form_constraints'});
    }

    # query params
    if ( exists $args{'aem/mcm/campaign/public_url'}) {
        $query_params->{'aem.mcm.campaign.publicUrl'} = $self->{api_client}->to_query_value($args{'aem/mcm/campaign/public_url'});
    }

    # query params
    if ( exists $args{'aem/mcm/campaign/relaxed_ssl'}) {
        $query_params->{'aem.mcm.campaign.relaxedSSL'} = $self->{api_client}->to_query_value($args{'aem/mcm/campaign/relaxed_ssl'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqMcmCampaignImplIntegrationConfigImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_mcm_campaign_importer_personalized_text_handler_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_mcm_campaign_importer_personalized_text_handler_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo',
        };
}
# @return ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo
#
sub com_day_cq_mcm_campaign_importer_personalized_text_handler_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo', $response);
    return $_response_object;
}

#
# com_day_cq_mcm_core_newsletter_newsletter_email_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $from/address  (optional)
# @param string $sender/host  (optional)
# @param string $max/bounce/count  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'from/address' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sender/host' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'max/bounce/count' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_mcm_core_newsletter_newsletter_email_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo',
        };
}
# @return ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo
#
sub com_day_cq_mcm_core_newsletter_newsletter_email_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'from/address'}) {
        $query_params->{'from.address'} = $self->{api_client}->to_query_value($args{'from/address'});
    }

    # query params
    if ( exists $args{'sender/host'}) {
        $query_params->{'sender.host'} = $self->{api_client}->to_query_value($args{'sender/host'});
    }

    # query params
    if ( exists $args{'max/bounce/count'}) {
        $query_params->{'max.bounce.count'} = $self->{api_client}->to_query_value($args{'max/bounce/count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_mcm_impl_mcm_configuration
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $experience/indirection  (optional)
# @param ARRAY[string] $touchpoint/indirection  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'experience/indirection' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'touchpoint/indirection' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_mcm_impl_mcm_configuration' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqMcmImplMCMConfigurationInfo',
        };
}
# @return ComDayCqMcmImplMCMConfigurationInfo
#
sub com_day_cq_mcm_impl_mcm_configuration {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'experience/indirection'}) {
        $query_params->{'experience.indirection'} = $self->{api_client}->to_query_value($args{'experience/indirection'});
    }

    # query params
    if ( exists $args{'touchpoint/indirection'}) {
        $query_params->{'touchpoint.indirection'} = $self->{api_client}->to_query_value($args{'touchpoint/indirection'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqMcmImplMCMConfigurationInfo', $response);
    return $_response_object;
}

#
# com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
# @param string $component/resource_type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'component/resource_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo',
        };
}
# @return ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo
#
sub com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    # query params
    if ( exists $args{'component/resource_type'}) {
        $query_params->{'component.resourceType'} = $self->{api_client}->to_query_value($args{'component/resource_type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo', $response);
    return $_response_object;
}

#
# com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
# @param string $component/resource_type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'component/resource_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo',
        };
}
# @return ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo
#
sub com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    # query params
    if ( exists $args{'component/resource_type'}) {
        $query_params->{'component.resourceType'} = $self->{api_client}->to_query_value($args{'component/resource_type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo', $response);
    return $_response_object;
}

#
# com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo',
        };
}
# @return ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo
#
sub com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo', $response);
    return $_response_object;
}

#
# com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo',
        };
}
# @return ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo
#
sub com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo', $response);
    return $_response_object;
}

#
# com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
# @param string $component/resource_type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'component/resource_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo',
        };
}
# @return ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo
#
sub com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    # query params
    if ( exists $args{'component/resource_type'}) {
        $query_params->{'component.resourceType'} = $self->{api_client}->to_query_value($args{'component/resource_type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo', $response);
    return $_response_object;
}

#
# com_day_cq_notification_impl_notification_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $event/filter  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'event/filter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_notification_impl_notification_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqNotificationImplNotificationServiceImplInfo',
        };
}
# @return ComDayCqNotificationImplNotificationServiceImplInfo
#
sub com_day_cq_notification_impl_notification_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'event/filter'}) {
        $query_params->{'event.filter'} = $self->{api_client}->to_query_value($args{'event/filter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqNotificationImplNotificationServiceImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_personalization_impl_servlets_targeting_configuration_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $forcelocation  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'forcelocation' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_personalization_impl_servlets_targeting_configuration_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo',
        };
}
# @return ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo
#
sub com_day_cq_personalization_impl_servlets_targeting_configuration_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'forcelocation'}) {
        $query_params->{'forcelocation'} = $self->{api_client}->to_query_value($args{'forcelocation'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_polling_importer_impl_managed_poll_config_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $id  (optional)
# @param boolean $enabled  (optional)
# @param boolean $reference  (optional)
# @param int $interval  (optional)
# @param string $expression  (optional)
# @param string $source  (optional)
# @param string $target  (optional)
# @param string $login  (optional)
# @param string $password  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'reference' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'expression' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'source' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'login' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'password' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_polling_importer_impl_managed_poll_config_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqPollingImporterImplManagedPollConfigImplInfo',
        };
}
# @return ComDayCqPollingImporterImplManagedPollConfigImplInfo
#
sub com_day_cq_polling_importer_impl_managed_poll_config_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    # query params
    if ( exists $args{'reference'}) {
        $query_params->{'reference'} = $self->{api_client}->to_query_value($args{'reference'});
    }

    # query params
    if ( exists $args{'interval'}) {
        $query_params->{'interval'} = $self->{api_client}->to_query_value($args{'interval'});
    }

    # query params
    if ( exists $args{'expression'}) {
        $query_params->{'expression'} = $self->{api_client}->to_query_value($args{'expression'});
    }

    # query params
    if ( exists $args{'source'}) {
        $query_params->{'source'} = $self->{api_client}->to_query_value($args{'source'});
    }

    # query params
    if ( exists $args{'target'}) {
        $query_params->{'target'} = $self->{api_client}->to_query_value($args{'target'});
    }

    # query params
    if ( exists $args{'login'}) {
        $query_params->{'login'} = $self->{api_client}->to_query_value($args{'login'});
    }

    # query params
    if ( exists $args{'password'}) {
        $query_params->{'password'} = $self->{api_client}->to_query_value($args{'password'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqPollingImporterImplManagedPollConfigImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_polling_importer_impl_managed_polling_importer_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $importer/user  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'importer/user' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_polling_importer_impl_managed_polling_importer_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqPollingImporterImplManagedPollingImporterImplInfo',
        };
}
# @return ComDayCqPollingImporterImplManagedPollingImporterImplInfo
#
sub com_day_cq_polling_importer_impl_managed_polling_importer_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'importer/user'}) {
        $query_params->{'importer.user'} = $self->{api_client}->to_query_value($args{'importer/user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqPollingImporterImplManagedPollingImporterImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_polling_importer_impl_polling_importer_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $importer/min/interval  (optional)
# @param string $importer/user  (optional)
# @param ARRAY[string] $exclude/paths  (optional)
# @param ARRAY[string] $include/paths  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'importer/min/interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'importer/user' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'exclude/paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'include/paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_polling_importer_impl_polling_importer_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqPollingImporterImplPollingImporterImplInfo',
        };
}
# @return ComDayCqPollingImporterImplPollingImporterImplInfo
#
sub com_day_cq_polling_importer_impl_polling_importer_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'importer/min/interval'}) {
        $query_params->{'importer.min.interval'} = $self->{api_client}->to_query_value($args{'importer/min/interval'});
    }

    # query params
    if ( exists $args{'importer/user'}) {
        $query_params->{'importer.user'} = $self->{api_client}->to_query_value($args{'importer/user'});
    }

    # query params
    if ( exists $args{'exclude/paths'}) {
        $query_params->{'exclude.paths'} = $self->{api_client}->to_query_value($args{'exclude/paths'});
    }

    # query params
    if ( exists $args{'include/paths'}) {
        $query_params->{'include.paths'} = $self->{api_client}->to_query_value($args{'include/paths'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqPollingImporterImplPollingImporterImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_replication_audit_replication_event_listener
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_replication_audit_replication_event_listener' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqReplicationAuditReplicationEventListenerInfo',
        };
}
# @return ComDayCqReplicationAuditReplicationEventListenerInfo
#
sub com_day_cq_replication_audit_replication_event_listener {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqReplicationAuditReplicationEventListenerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_replication_content_static_content_builder
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $host  (optional)
# @param int $port  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'host' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'port' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_replication_content_static_content_builder' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqReplicationContentStaticContentBuilderInfo',
        };
}
# @return ComDayCqReplicationContentStaticContentBuilderInfo
#
sub com_day_cq_replication_content_static_content_builder {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'host'}) {
        $query_params->{'host'} = $self->{api_client}->to_query_value($args{'host'});
    }

    # query params
    if ( exists $args{'port'}) {
        $query_params->{'port'} = $self->{api_client}->to_query_value($args{'port'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqReplicationContentStaticContentBuilderInfo', $response);
    return $_response_object;
}

#
# com_day_cq_replication_impl_agent_manager_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $job/topics  (optional)
# @param string $service_user/target  (optional)
# @param string $agent_provider/target  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'job/topics' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'service_user/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'agent_provider/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_replication_impl_agent_manager_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqReplicationImplAgentManagerImplInfo',
        };
}
# @return ComDayCqReplicationImplAgentManagerImplInfo
#
sub com_day_cq_replication_impl_agent_manager_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'job/topics'}) {
        $query_params->{'job.topics'} = $self->{api_client}->to_query_value($args{'job/topics'});
    }

    # query params
    if ( exists $args{'service_user/target'}) {
        $query_params->{'serviceUser.target'} = $self->{api_client}->to_query_value($args{'service_user/target'});
    }

    # query params
    if ( exists $args{'agent_provider/target'}) {
        $query_params->{'agentProvider.target'} = $self->{api_client}->to_query_value($args{'agent_provider/target'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqReplicationImplAgentManagerImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_replication_impl_content_durbo_binary_less_content_builder
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $binary/threshold  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'binary/threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_replication_impl_content_durbo_binary_less_content_builder' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo',
        };
}
# @return ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo
#
sub com_day_cq_replication_impl_content_durbo_binary_less_content_builder {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'binary/threshold'}) {
        $query_params->{'binary.threshold'} = $self->{api_client}->to_query_value($args{'binary/threshold'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo', $response);
    return $_response_object;
}

#
# com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $preserve/hierarchy/nodes  (optional)
# @param boolean $ignore/versioning  (optional)
# @param boolean $import/acl  (optional)
# @param int $save/threshold  (optional)
# @param boolean $preserve/user/paths  (optional)
# @param boolean $preserve/uuid  (optional)
# @param ARRAY[string] $preserve/uuid/nodetypes  (optional)
# @param ARRAY[string] $preserve/uuid/subtrees  (optional)
# @param boolean $auto/commit  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'preserve/hierarchy/nodes' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'ignore/versioning' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'import/acl' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'save/threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'preserve/user/paths' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'preserve/uuid' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'preserve/uuid/nodetypes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'preserve/uuid/subtrees' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'auto/commit' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo',
        };
}
# @return ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo
#
sub com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'preserve/hierarchy/nodes'}) {
        $query_params->{'preserve.hierarchy.nodes'} = $self->{api_client}->to_query_value($args{'preserve/hierarchy/nodes'});
    }

    # query params
    if ( exists $args{'ignore/versioning'}) {
        $query_params->{'ignore.versioning'} = $self->{api_client}->to_query_value($args{'ignore/versioning'});
    }

    # query params
    if ( exists $args{'import/acl'}) {
        $query_params->{'import.acl'} = $self->{api_client}->to_query_value($args{'import/acl'});
    }

    # query params
    if ( exists $args{'save/threshold'}) {
        $query_params->{'save.threshold'} = $self->{api_client}->to_query_value($args{'save/threshold'});
    }

    # query params
    if ( exists $args{'preserve/user/paths'}) {
        $query_params->{'preserve.user.paths'} = $self->{api_client}->to_query_value($args{'preserve/user/paths'});
    }

    # query params
    if ( exists $args{'preserve/uuid'}) {
        $query_params->{'preserve.uuid'} = $self->{api_client}->to_query_value($args{'preserve/uuid'});
    }

    # query params
    if ( exists $args{'preserve/uuid/nodetypes'}) {
        $query_params->{'preserve.uuid.nodetypes'} = $self->{api_client}->to_query_value($args{'preserve/uuid/nodetypes'});
    }

    # query params
    if ( exists $args{'preserve/uuid/subtrees'}) {
        $query_params->{'preserve.uuid.subtrees'} = $self->{api_client}->to_query_value($args{'preserve/uuid/subtrees'});
    }

    # query params
    if ( exists $args{'auto/commit'}) {
        $query_params->{'auto.commit'} = $self->{api_client}->to_query_value($args{'auto/commit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo', $response);
    return $_response_object;
}

#
# com_day_cq_replication_impl_replication_content_factory_provider_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $replication/content/use_file_storage  (optional)
# @param int $replication/content/max_commit_attempts  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'replication/content/use_file_storage' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'replication/content/max_commit_attempts' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_replication_impl_replication_content_factory_provider_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo',
        };
}
# @return ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo
#
sub com_day_cq_replication_impl_replication_content_factory_provider_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'replication/content/use_file_storage'}) {
        $query_params->{'replication.content.useFileStorage'} = $self->{api_client}->to_query_value($args{'replication/content/use_file_storage'});
    }

    # query params
    if ( exists $args{'replication/content/max_commit_attempts'}) {
        $query_params->{'replication.content.maxCommitAttempts'} = $self->{api_client}->to_query_value($args{'replication/content/max_commit_attempts'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_replication_impl_replication_receiver_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $receiver/tmpfile/threshold  (optional)
# @param boolean $receiver/packages/use/install  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'receiver/tmpfile/threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'receiver/packages/use/install' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_replication_impl_replication_receiver_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqReplicationImplReplicationReceiverImplInfo',
        };
}
# @return ComDayCqReplicationImplReplicationReceiverImplInfo
#
sub com_day_cq_replication_impl_replication_receiver_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'receiver/tmpfile/threshold'}) {
        $query_params->{'receiver.tmpfile.threshold'} = $self->{api_client}->to_query_value($args{'receiver/tmpfile/threshold'});
    }

    # query params
    if ( exists $args{'receiver/packages/use/install'}) {
        $query_params->{'receiver.packages.use.install'} = $self->{api_client}->to_query_value($args{'receiver/packages/use/install'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqReplicationImplReplicationReceiverImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_replication_impl_replicator_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $distribute_events  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'distribute_events' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_replication_impl_replicator_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqReplicationImplReplicatorImplInfo',
        };
}
# @return ComDayCqReplicationImplReplicatorImplInfo
#
sub com_day_cq_replication_impl_replicator_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'distribute_events'}) {
        $query_params->{'distribute_events'} = $self->{api_client}->to_query_value($args{'distribute_events'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqReplicationImplReplicatorImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_replication_impl_reverse_replicator
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $scheduler/period  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduler/period' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_replication_impl_reverse_replicator' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqReplicationImplReverseReplicatorInfo',
        };
}
# @return ComDayCqReplicationImplReverseReplicatorInfo
#
sub com_day_cq_replication_impl_reverse_replicator {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scheduler/period'}) {
        $query_params->{'scheduler.period'} = $self->{api_client}->to_query_value($args{'scheduler/period'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqReplicationImplReverseReplicatorInfo', $response);
    return $_response_object;
}

#
# com_day_cq_replication_impl_transport_binary_less_transport_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $disabled/cipher/suites  (optional)
# @param ARRAY[string] $enabled/cipher/suites  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'disabled/cipher/suites' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled/cipher/suites' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_replication_impl_transport_binary_less_transport_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo',
        };
}
# @return ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo
#
sub com_day_cq_replication_impl_transport_binary_less_transport_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'disabled/cipher/suites'}) {
        $query_params->{'disabled.cipher.suites'} = $self->{api_client}->to_query_value($args{'disabled/cipher/suites'});
    }

    # query params
    if ( exists $args{'enabled/cipher/suites'}) {
        $query_params->{'enabled.cipher.suites'} = $self->{api_client}->to_query_value($args{'enabled/cipher/suites'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_replication_impl_transport_http
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $disabled/cipher/suites  (optional)
# @param ARRAY[string] $enabled/cipher/suites  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'disabled/cipher/suites' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled/cipher/suites' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_replication_impl_transport_http' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqReplicationImplTransportHttpInfo',
        };
}
# @return ComDayCqReplicationImplTransportHttpInfo
#
sub com_day_cq_replication_impl_transport_http {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.replication.impl.transport.Http';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'disabled/cipher/suites'}) {
        $query_params->{'disabled.cipher.suites'} = $self->{api_client}->to_query_value($args{'disabled/cipher/suites'});
    }

    # query params
    if ( exists $args{'enabled/cipher/suites'}) {
        $query_params->{'enabled.cipher.suites'} = $self->{api_client}->to_query_value($args{'enabled/cipher/suites'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqReplicationImplTransportHttpInfo', $response);
    return $_response_object;
}

#
# com_day_cq_reporting_impl_cache_cache_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $repcache/enable  (optional)
# @param int $repcache/ttl  (optional)
# @param int $repcache/max  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'repcache/enable' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'repcache/ttl' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'repcache/max' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_reporting_impl_cache_cache_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqReportingImplCacheCacheImplInfo',
        };
}
# @return ComDayCqReportingImplCacheCacheImplInfo
#
sub com_day_cq_reporting_impl_cache_cache_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'repcache/enable'}) {
        $query_params->{'repcache.enable'} = $self->{api_client}->to_query_value($args{'repcache/enable'});
    }

    # query params
    if ( exists $args{'repcache/ttl'}) {
        $query_params->{'repcache.ttl'} = $self->{api_client}->to_query_value($args{'repcache/ttl'});
    }

    # query params
    if ( exists $args{'repcache/max'}) {
        $query_params->{'repcache.max'} = $self->{api_client}->to_query_value($args{'repcache/max'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqReportingImplCacheCacheImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_reporting_impl_config_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $repconf/timezone  (optional)
# @param string $repconf/locale  (optional)
# @param string $repconf/snapshots  (optional)
# @param string $repconf/repdir  (optional)
# @param int $repconf/hourofday  (optional)
# @param int $repconf/minofhour  (optional)
# @param int $repconf/maxrows  (optional)
# @param boolean $repconf/fakedata  (optional)
# @param string $repconf/snapshotuser  (optional)
# @param boolean $repconf/enforcesnapshotuser  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'repconf/timezone' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'repconf/locale' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'repconf/snapshots' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'repconf/repdir' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'repconf/hourofday' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'repconf/minofhour' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'repconf/maxrows' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'repconf/fakedata' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'repconf/snapshotuser' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'repconf/enforcesnapshotuser' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_reporting_impl_config_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqReportingImplConfigServiceImplInfo',
        };
}
# @return ComDayCqReportingImplConfigServiceImplInfo
#
sub com_day_cq_reporting_impl_config_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'repconf/timezone'}) {
        $query_params->{'repconf.timezone'} = $self->{api_client}->to_query_value($args{'repconf/timezone'});
    }

    # query params
    if ( exists $args{'repconf/locale'}) {
        $query_params->{'repconf.locale'} = $self->{api_client}->to_query_value($args{'repconf/locale'});
    }

    # query params
    if ( exists $args{'repconf/snapshots'}) {
        $query_params->{'repconf.snapshots'} = $self->{api_client}->to_query_value($args{'repconf/snapshots'});
    }

    # query params
    if ( exists $args{'repconf/repdir'}) {
        $query_params->{'repconf.repdir'} = $self->{api_client}->to_query_value($args{'repconf/repdir'});
    }

    # query params
    if ( exists $args{'repconf/hourofday'}) {
        $query_params->{'repconf.hourofday'} = $self->{api_client}->to_query_value($args{'repconf/hourofday'});
    }

    # query params
    if ( exists $args{'repconf/minofhour'}) {
        $query_params->{'repconf.minofhour'} = $self->{api_client}->to_query_value($args{'repconf/minofhour'});
    }

    # query params
    if ( exists $args{'repconf/maxrows'}) {
        $query_params->{'repconf.maxrows'} = $self->{api_client}->to_query_value($args{'repconf/maxrows'});
    }

    # query params
    if ( exists $args{'repconf/fakedata'}) {
        $query_params->{'repconf.fakedata'} = $self->{api_client}->to_query_value($args{'repconf/fakedata'});
    }

    # query params
    if ( exists $args{'repconf/snapshotuser'}) {
        $query_params->{'repconf.snapshotuser'} = $self->{api_client}->to_query_value($args{'repconf/snapshotuser'});
    }

    # query params
    if ( exists $args{'repconf/enforcesnapshotuser'}) {
        $query_params->{'repconf.enforcesnapshotuser'} = $self->{api_client}->to_query_value($args{'repconf/enforcesnapshotuser'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqReportingImplConfigServiceImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_reporting_impl_r_log_analyzer
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $request/log/output  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'request/log/output' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_reporting_impl_r_log_analyzer' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqReportingImplRLogAnalyzerInfo',
        };
}
# @return ComDayCqReportingImplRLogAnalyzerInfo
#
sub com_day_cq_reporting_impl_r_log_analyzer {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'request/log/output'}) {
        $query_params->{'request.log.output'} = $self->{api_client}->to_query_value($args{'request/log/output'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqReportingImplRLogAnalyzerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_rewriter_linkchecker_impl_link_checker_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $scheduler/period  (optional)
# @param boolean $scheduler/concurrent  (optional)
# @param int $service/bad_link_tolerance_interval  (optional)
# @param ARRAY[string] $service/check_override_patterns  (optional)
# @param boolean $service/cache_broken_internal_links  (optional)
# @param ARRAY[string] $service/special_link_prefix  (optional)
# @param ARRAY[string] $service/special_link_patterns  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduler/period' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'scheduler/concurrent' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'service/bad_link_tolerance_interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'service/check_override_patterns' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/cache_broken_internal_links' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'service/special_link_prefix' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/special_link_patterns' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_rewriter_linkchecker_impl_link_checker_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo',
        };
}
# @return ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo
#
sub com_day_cq_rewriter_linkchecker_impl_link_checker_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scheduler/period'}) {
        $query_params->{'scheduler.period'} = $self->{api_client}->to_query_value($args{'scheduler/period'});
    }

    # query params
    if ( exists $args{'scheduler/concurrent'}) {
        $query_params->{'scheduler.concurrent'} = $self->{api_client}->to_query_value($args{'scheduler/concurrent'});
    }

    # query params
    if ( exists $args{'service/bad_link_tolerance_interval'}) {
        $query_params->{'service.bad_link_tolerance_interval'} = $self->{api_client}->to_query_value($args{'service/bad_link_tolerance_interval'});
    }

    # query params
    if ( exists $args{'service/check_override_patterns'}) {
        $query_params->{'service.check_override_patterns'} = $self->{api_client}->to_query_value($args{'service/check_override_patterns'});
    }

    # query params
    if ( exists $args{'service/cache_broken_internal_links'}) {
        $query_params->{'service.cache_broken_internal_links'} = $self->{api_client}->to_query_value($args{'service/cache_broken_internal_links'});
    }

    # query params
    if ( exists $args{'service/special_link_prefix'}) {
        $query_params->{'service.special_link_prefix'} = $self->{api_client}->to_query_value($args{'service/special_link_prefix'});
    }

    # query params
    if ( exists $args{'service/special_link_patterns'}) {
        $query_params->{'service.special_link_patterns'} = $self->{api_client}->to_query_value($args{'service/special_link_patterns'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_rewriter_linkchecker_impl_link_checker_task
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $scheduler/period  (optional)
# @param boolean $scheduler/concurrent  (optional)
# @param int $good_link_test_interval  (optional)
# @param int $bad_link_test_interval  (optional)
# @param int $link_unused_interval  (optional)
# @param int $connection/timeout  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduler/period' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'scheduler/concurrent' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'good_link_test_interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'bad_link_test_interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'link_unused_interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'connection/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_rewriter_linkchecker_impl_link_checker_task' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo',
        };
}
# @return ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo
#
sub com_day_cq_rewriter_linkchecker_impl_link_checker_task {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scheduler/period'}) {
        $query_params->{'scheduler.period'} = $self->{api_client}->to_query_value($args{'scheduler/period'});
    }

    # query params
    if ( exists $args{'scheduler/concurrent'}) {
        $query_params->{'scheduler.concurrent'} = $self->{api_client}->to_query_value($args{'scheduler/concurrent'});
    }

    # query params
    if ( exists $args{'good_link_test_interval'}) {
        $query_params->{'good_link_test_interval'} = $self->{api_client}->to_query_value($args{'good_link_test_interval'});
    }

    # query params
    if ( exists $args{'bad_link_test_interval'}) {
        $query_params->{'bad_link_test_interval'} = $self->{api_client}->to_query_value($args{'bad_link_test_interval'});
    }

    # query params
    if ( exists $args{'link_unused_interval'}) {
        $query_params->{'link_unused_interval'} = $self->{api_client}->to_query_value($args{'link_unused_interval'});
    }

    # query params
    if ( exists $args{'connection/timeout'}) {
        $query_params->{'connection.timeout'} = $self->{api_client}->to_query_value($args{'connection/timeout'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo', $response);
    return $_response_object;
}

#
# com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $linkcheckertransformer/disable_rewriting  (optional)
# @param boolean $linkcheckertransformer/disable_checking  (optional)
# @param int $linkcheckertransformer/map_cache_size  (optional)
# @param boolean $linkcheckertransformer/strict_extension_check  (optional)
# @param boolean $linkcheckertransformer/strip_htmlt_extension  (optional)
# @param ARRAY[string] $linkcheckertransformer/rewrite_elements  (optional)
# @param ARRAY[string] $linkcheckertransformer/strip_extension_path_blacklist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'linkcheckertransformer/disable_rewriting' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'linkcheckertransformer/disable_checking' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'linkcheckertransformer/map_cache_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'linkcheckertransformer/strict_extension_check' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'linkcheckertransformer/strip_htmlt_extension' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'linkcheckertransformer/rewrite_elements' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'linkcheckertransformer/strip_extension_path_blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo',
        };
}
# @return ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo
#
sub com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'linkcheckertransformer/disable_rewriting'}) {
        $query_params->{'linkcheckertransformer.disableRewriting'} = $self->{api_client}->to_query_value($args{'linkcheckertransformer/disable_rewriting'});
    }

    # query params
    if ( exists $args{'linkcheckertransformer/disable_checking'}) {
        $query_params->{'linkcheckertransformer.disableChecking'} = $self->{api_client}->to_query_value($args{'linkcheckertransformer/disable_checking'});
    }

    # query params
    if ( exists $args{'linkcheckertransformer/map_cache_size'}) {
        $query_params->{'linkcheckertransformer.mapCacheSize'} = $self->{api_client}->to_query_value($args{'linkcheckertransformer/map_cache_size'});
    }

    # query params
    if ( exists $args{'linkcheckertransformer/strict_extension_check'}) {
        $query_params->{'linkcheckertransformer.strictExtensionCheck'} = $self->{api_client}->to_query_value($args{'linkcheckertransformer/strict_extension_check'});
    }

    # query params
    if ( exists $args{'linkcheckertransformer/strip_htmlt_extension'}) {
        $query_params->{'linkcheckertransformer.stripHtmltExtension'} = $self->{api_client}->to_query_value($args{'linkcheckertransformer/strip_htmlt_extension'});
    }

    # query params
    if ( exists $args{'linkcheckertransformer/rewrite_elements'}) {
        $query_params->{'linkcheckertransformer.rewriteElements'} = $self->{api_client}->to_query_value($args{'linkcheckertransformer/rewrite_elements'});
    }

    # query params
    if ( exists $args{'linkcheckertransformer/strip_extension_path_blacklist'}) {
        $query_params->{'linkcheckertransformer.stripExtensionPathBlacklist'} = $self->{api_client}->to_query_value($args{'linkcheckertransformer/strip_extension_path_blacklist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo', $response);
    return $_response_object;
}

#
# com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/max_links_per_host  (optional)
# @param boolean $service/save_external_link_references  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/max_links_per_host' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'service/save_external_link_references' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo',
        };
}
# @return ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo
#
sub com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/max_links_per_host'}) {
        $query_params->{'service.max_links_per_host'} = $self->{api_client}->to_query_value($args{'service/max_links_per_host'});
    }

    # query params
    if ( exists $args{'service/save_external_link_references'}) {
        $query_params->{'service.save_external_link_references'} = $self->{api_client}->to_query_value($args{'service/save_external_link_references'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_rewriter_processor_impl_html_parser_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $htmlparser/process_tags  (optional)
# @param boolean $htmlparser/preserve_camel_case  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'htmlparser/process_tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'htmlparser/preserve_camel_case' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_rewriter_processor_impl_html_parser_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqRewriterProcessorImplHtmlParserFactoryInfo',
        };
}
# @return ComDayCqRewriterProcessorImplHtmlParserFactoryInfo
#
sub com_day_cq_rewriter_processor_impl_html_parser_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'htmlparser/process_tags'}) {
        $query_params->{'htmlparser.processTags'} = $self->{api_client}->to_query_value($args{'htmlparser/process_tags'});
    }

    # query params
    if ( exists $args{'htmlparser/preserve_camel_case'}) {
        $query_params->{'htmlparser.preserveCamelCase'} = $self->{api_client}->to_query_value($args{'htmlparser/preserve_camel_case'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqRewriterProcessorImplHtmlParserFactoryInfo', $response);
    return $_response_object;
}

#
# com_day_cq_search_impl_builder_query_builder_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $excerpt/properties  (optional)
# @param int $cache/max/entries  (optional)
# @param int $cache/entry/lifetime  (optional)
# @param boolean $xpath/union  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'excerpt/properties' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cache/max/entries' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cache/entry/lifetime' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'xpath/union' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_search_impl_builder_query_builder_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqSearchImplBuilderQueryBuilderImplInfo',
        };
}
# @return ComDayCqSearchImplBuilderQueryBuilderImplInfo
#
sub com_day_cq_search_impl_builder_query_builder_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'excerpt/properties'}) {
        $query_params->{'excerpt.properties'} = $self->{api_client}->to_query_value($args{'excerpt/properties'});
    }

    # query params
    if ( exists $args{'cache/max/entries'}) {
        $query_params->{'cache.max.entries'} = $self->{api_client}->to_query_value($args{'cache/max/entries'});
    }

    # query params
    if ( exists $args{'cache/entry/lifetime'}) {
        $query_params->{'cache.entry.lifetime'} = $self->{api_client}->to_query_value($args{'cache/entry/lifetime'});
    }

    # query params
    if ( exists $args{'xpath/union'}) {
        $query_params->{'xpath.union'} = $self->{api_client}->to_query_value($args{'xpath/union'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqSearchImplBuilderQueryBuilderImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_search_suggest_impl_suggestion_index_manager_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $path_builder/target  (optional)
# @param string $suggest/basepath  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'path_builder/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'suggest/basepath' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_search_suggest_impl_suggestion_index_manager_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo',
        };
}
# @return ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo
#
sub com_day_cq_search_suggest_impl_suggestion_index_manager_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'path_builder/target'}) {
        $query_params->{'pathBuilder.target'} = $self->{api_client}->to_query_value($args{'path_builder/target'});
    }

    # query params
    if ( exists $args{'suggest/basepath'}) {
        $query_params->{'suggest.basepath'} = $self->{api_client}->to_query_value($args{'suggest/basepath'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_searchpromote_impl_publish_search_promote_config_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/searchpromote/confighandler/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/searchpromote/confighandler/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_searchpromote_impl_publish_search_promote_config_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo',
        };
}
# @return ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo
#
sub com_day_cq_searchpromote_impl_publish_search_promote_config_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/searchpromote/confighandler/enabled'}) {
        $query_params->{'cq.searchpromote.confighandler.enabled'} = $self->{api_client}->to_query_value($args{'cq/searchpromote/confighandler/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_searchpromote_impl_search_promote_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $cq/searchpromote/configuration/server/uri  (optional)
# @param string $cq/searchpromote/configuration/environment  (optional)
# @param int $connection/timeout  (optional)
# @param int $socket/timeout  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/searchpromote/configuration/server/uri' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/searchpromote/configuration/environment' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'connection/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'socket/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_searchpromote_impl_search_promote_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo',
        };
}
# @return ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo
#
sub com_day_cq_searchpromote_impl_search_promote_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/searchpromote/configuration/server/uri'}) {
        $query_params->{'cq.searchpromote.configuration.server.uri'} = $self->{api_client}->to_query_value($args{'cq/searchpromote/configuration/server/uri'});
    }

    # query params
    if ( exists $args{'cq/searchpromote/configuration/environment'}) {
        $query_params->{'cq.searchpromote.configuration.environment'} = $self->{api_client}->to_query_value($args{'cq/searchpromote/configuration/environment'});
    }

    # query params
    if ( exists $args{'connection/timeout'}) {
        $query_params->{'connection.timeout'} = $self->{api_client}->to_query_value($args{'connection/timeout'});
    }

    # query params
    if ( exists $args{'socket/timeout'}) {
        $query_params->{'socket.timeout'} = $self->{api_client}->to_query_value($args{'socket/timeout'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_security_acl_setup
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/aclsetup/rules  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/aclsetup/rules' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_security_acl_setup' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqSecurityACLSetupInfo',
        };
}
# @return ComDayCqSecurityACLSetupInfo
#
sub com_day_cq_security_acl_setup {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.security.ACLSetup';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/aclsetup/rules'}) {
        $query_params->{'cq.aclsetup.rules'} = $self->{api_client}->to_query_value($args{'cq/aclsetup/rules'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqSecurityACLSetupInfo', $response);
    return $_response_object;
}

#
# com_day_cq_statistics_impl_statistics_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $scheduler/period  (optional)
# @param boolean $scheduler/concurrent  (optional)
# @param string $path  (optional)
# @param string $workspace  (optional)
# @param string $keywords_path  (optional)
# @param boolean $async_entries  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduler/period' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'scheduler/concurrent' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'workspace' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'keywords_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'async_entries' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_statistics_impl_statistics_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqStatisticsImplStatisticsServiceImplInfo',
        };
}
# @return ComDayCqStatisticsImplStatisticsServiceImplInfo
#
sub com_day_cq_statistics_impl_statistics_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scheduler/period'}) {
        $query_params->{'scheduler.period'} = $self->{api_client}->to_query_value($args{'scheduler/period'});
    }

    # query params
    if ( exists $args{'scheduler/concurrent'}) {
        $query_params->{'scheduler.concurrent'} = $self->{api_client}->to_query_value($args{'scheduler/concurrent'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'workspace'}) {
        $query_params->{'workspace'} = $self->{api_client}->to_query_value($args{'workspace'});
    }

    # query params
    if ( exists $args{'keywords_path'}) {
        $query_params->{'keywordsPath'} = $self->{api_client}->to_query_value($args{'keywords_path'});
    }

    # query params
    if ( exists $args{'async_entries'}) {
        $query_params->{'asyncEntries'} = $self->{api_client}->to_query_value($args{'async_entries'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqStatisticsImplStatisticsServiceImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_tagging_impl_jcr_tag_manager_factory_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $validation/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'validation/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_tagging_impl_jcr_tag_manager_factory_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqTaggingImplJcrTagManagerFactoryImplInfo',
        };
}
# @return ComDayCqTaggingImplJcrTagManagerFactoryImplInfo
#
sub com_day_cq_tagging_impl_jcr_tag_manager_factory_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'validation/enabled'}) {
        $query_params->{'validation.enabled'} = $self->{api_client}->to_query_value($args{'validation/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqTaggingImplJcrTagManagerFactoryImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_tagging_impl_search_tag_predicate_evaluator
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $ignore_path  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'ignore_path' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_tagging_impl_search_tag_predicate_evaluator' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo',
        };
}
# @return ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo
#
sub com_day_cq_tagging_impl_search_tag_predicate_evaluator {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'ignore_path'}) {
        $query_params->{'ignore_path'} = $self->{api_client}->to_query_value($args{'ignore_path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo', $response);
    return $_response_object;
}

#
# com_day_cq_tagging_impl_tag_garbage_collector
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $scheduler/expression  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduler/expression' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_tagging_impl_tag_garbage_collector' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqTaggingImplTagGarbageCollectorInfo',
        };
}
# @return ComDayCqTaggingImplTagGarbageCollectorInfo
#
sub com_day_cq_tagging_impl_tag_garbage_collector {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scheduler/expression'}) {
        $query_params->{'scheduler.expression'} = $self->{api_client}->to_query_value($args{'scheduler/expression'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqTaggingImplTagGarbageCollectorInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_contentsync_impl_handler_pages_update_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/pagesupdatehandler/imageresourcetypes  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/pagesupdatehandler/imageresourcetypes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_contentsync_impl_handler_pages_update_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo',
        };
}
# @return ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo
#
sub com_day_cq_wcm_contentsync_impl_handler_pages_update_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/pagesupdatehandler/imageresourcetypes'}) {
        $query_params->{'cq.pagesupdatehandler.imageresourcetypes'} = $self->{api_client}->to_query_value($args{'cq/pagesupdatehandler/imageresourcetypes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/contentsync/pathrewritertransformer/mapping/links  (optional)
# @param ARRAY[string] $cq/contentsync/pathrewritertransformer/mapping/clientlibs  (optional)
# @param ARRAY[string] $cq/contentsync/pathrewritertransformer/mapping/images  (optional)
# @param string $cq/contentsync/pathrewritertransformer/attribute/pattern  (optional)
# @param string $cq/contentsync/pathrewritertransformer/clientlibrary/pattern  (optional)
# @param string $cq/contentsync/pathrewritertransformer/clientlibrary/replace  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/contentsync/pathrewritertransformer/mapping/links' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/contentsync/pathrewritertransformer/mapping/clientlibs' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/contentsync/pathrewritertransformer/mapping/images' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/contentsync/pathrewritertransformer/attribute/pattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/contentsync/pathrewritertransformer/clientlibrary/pattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/contentsync/pathrewritertransformer/clientlibrary/replace' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo',
        };
}
# @return ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo
#
sub com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/contentsync/pathrewritertransformer/mapping/links'}) {
        $query_params->{'cq.contentsync.pathrewritertransformer.mapping.links'} = $self->{api_client}->to_query_value($args{'cq/contentsync/pathrewritertransformer/mapping/links'});
    }

    # query params
    if ( exists $args{'cq/contentsync/pathrewritertransformer/mapping/clientlibs'}) {
        $query_params->{'cq.contentsync.pathrewritertransformer.mapping.clientlibs'} = $self->{api_client}->to_query_value($args{'cq/contentsync/pathrewritertransformer/mapping/clientlibs'});
    }

    # query params
    if ( exists $args{'cq/contentsync/pathrewritertransformer/mapping/images'}) {
        $query_params->{'cq.contentsync.pathrewritertransformer.mapping.images'} = $self->{api_client}->to_query_value($args{'cq/contentsync/pathrewritertransformer/mapping/images'});
    }

    # query params
    if ( exists $args{'cq/contentsync/pathrewritertransformer/attribute/pattern'}) {
        $query_params->{'cq.contentsync.pathrewritertransformer.attribute.pattern'} = $self->{api_client}->to_query_value($args{'cq/contentsync/pathrewritertransformer/attribute/pattern'});
    }

    # query params
    if ( exists $args{'cq/contentsync/pathrewritertransformer/clientlibrary/pattern'}) {
        $query_params->{'cq.contentsync.pathrewritertransformer.clientlibrary.pattern'} = $self->{api_client}->to_query_value($args{'cq/contentsync/pathrewritertransformer/clientlibrary/pattern'});
    }

    # query params
    if ( exists $args{'cq/contentsync/pathrewritertransformer/clientlibrary/replace'}) {
        $query_params->{'cq.contentsync.pathrewritertransformer.clientlibrary.replace'} = $self->{api_client}->to_query_value($args{'cq/contentsync/pathrewritertransformer/clientlibrary/replace'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $authoring_ui_mode_service/default  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'authoring_ui_mode_service/default' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo',
        };
}
# @return ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo
#
sub com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'authoring_ui_mode_service/default'}) {
        $query_params->{'authoringUIModeService.default'} = $self->{api_client}->to_query_value($args{'authoring_ui_mode_service/default'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_commands_wcm_command_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $wcmcommandservlet/delete_whitelist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'wcmcommandservlet/delete_whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_commands_wcm_command_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplCommandsWCMCommandServletInfo',
        };
}
# @return ComDayCqWcmCoreImplCommandsWCMCommandServletInfo
#
sub com_day_cq_wcm_core_impl_commands_wcm_command_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'wcmcommandservlet/delete_whitelist'}) {
        $query_params->{'wcmcommandservlet.delete_whitelist'} = $self->{api_client}->to_query_value($args{'wcmcommandservlet/delete_whitelist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplCommandsWCMCommandServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $dim/default/mode  (optional)
# @param boolean $dim/appcache/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'dim/default/mode' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'dim/appcache/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo',
        };
}
# @return ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo
#
sub com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'dim/default/mode'}) {
        $query_params->{'dim.default.mode'} = $self->{api_client}->to_query_value($args{'dim/default/mode'});
    }

    # query params
    if ( exists $args{'dim/appcache/enabled'}) {
        $query_params->{'dim.appcache.enabled'} = $self->{api_client}->to_query_value($args{'dim/appcache/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_event_page_event_audit_listener
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $configured  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'configured' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_event_page_event_audit_listener' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplEventPageEventAuditListenerInfo',
        };
}
# @return ComDayCqWcmCoreImplEventPageEventAuditListenerInfo
#
sub com_day_cq_wcm_core_impl_event_page_event_audit_listener {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'configured'}) {
        $query_params->{'configured'} = $self->{api_client}->to_query_value($args{'configured'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplEventPageEventAuditListenerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_event_page_post_processor
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $paths  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_event_page_post_processor' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplEventPagePostProcessorInfo',
        };
}
# @return ComDayCqWcmCoreImplEventPagePostProcessorInfo
#
sub com_day_cq_wcm_core_impl_event_page_post_processor {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'paths'}) {
        $query_params->{'paths'} = $self->{api_client}->to_query_value($args{'paths'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplEventPagePostProcessorInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_event_repository_change_event_listener
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $paths  (optional)
# @param ARRAY[string] $excluded_paths  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'excluded_paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_event_repository_change_event_listener' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo',
        };
}
# @return ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo
#
sub com_day_cq_wcm_core_impl_event_repository_change_event_listener {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'paths'}) {
        $query_params->{'paths'} = $self->{api_client}->to_query_value($args{'paths'});
    }

    # query params
    if ( exists $args{'excluded_paths'}) {
        $query_params->{'excludedPaths'} = $self->{api_client}->to_query_value($args{'excluded_paths'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_event_template_post_processor
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $paths  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'paths' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_event_template_post_processor' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplEventTemplatePostProcessorInfo',
        };
}
# @return ComDayCqWcmCoreImplEventTemplatePostProcessorInfo
#
sub com_day_cq_wcm_core_impl_event_template_post_processor {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'paths'}) {
        $query_params->{'paths'} = $self->{api_client}->to_query_value($args{'paths'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplEventTemplatePostProcessorInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_language_manager_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $langmgr/list/path  (optional)
# @param ARRAY[string] $langmgr/country/default  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'langmgr/list/path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'langmgr/country/default' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_language_manager_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplLanguageManagerImplInfo',
        };
}
# @return ComDayCqWcmCoreImplLanguageManagerImplInfo
#
sub com_day_cq_wcm_core_impl_language_manager_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'langmgr/list/path'}) {
        $query_params->{'langmgr.list.path'} = $self->{api_client}->to_query_value($args{'langmgr/list/path'});
    }

    # query params
    if ( exists $args{'langmgr/country/default'}) {
        $query_params->{'langmgr.country.default'} = $self->{api_client}->to_query_value($args{'langmgr/country/default'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplLanguageManagerImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $link/expired/prefix  (optional)
# @param boolean $link/expired/remove  (optional)
# @param string $link/expired/suffix  (optional)
# @param string $link/invalid/prefix  (optional)
# @param boolean $link/invalid/remove  (optional)
# @param string $link/invalid/suffix  (optional)
# @param string $link/predated/prefix  (optional)
# @param boolean $link/predated/remove  (optional)
# @param string $link/predated/suffix  (optional)
# @param ARRAY[string] $link/wcmmodes  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'link/expired/prefix' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'link/expired/remove' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'link/expired/suffix' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'link/invalid/prefix' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'link/invalid/remove' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'link/invalid/suffix' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'link/predated/prefix' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'link/predated/remove' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'link/predated/suffix' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'link/wcmmodes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo',
        };
}
# @return ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo
#
sub com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'link/expired/prefix'}) {
        $query_params->{'link.expired.prefix'} = $self->{api_client}->to_query_value($args{'link/expired/prefix'});
    }

    # query params
    if ( exists $args{'link/expired/remove'}) {
        $query_params->{'link.expired.remove'} = $self->{api_client}->to_query_value($args{'link/expired/remove'});
    }

    # query params
    if ( exists $args{'link/expired/suffix'}) {
        $query_params->{'link.expired.suffix'} = $self->{api_client}->to_query_value($args{'link/expired/suffix'});
    }

    # query params
    if ( exists $args{'link/invalid/prefix'}) {
        $query_params->{'link.invalid.prefix'} = $self->{api_client}->to_query_value($args{'link/invalid/prefix'});
    }

    # query params
    if ( exists $args{'link/invalid/remove'}) {
        $query_params->{'link.invalid.remove'} = $self->{api_client}->to_query_value($args{'link/invalid/remove'});
    }

    # query params
    if ( exists $args{'link/invalid/suffix'}) {
        $query_params->{'link.invalid.suffix'} = $self->{api_client}->to_query_value($args{'link/invalid/suffix'});
    }

    # query params
    if ( exists $args{'link/predated/prefix'}) {
        $query_params->{'link.predated.prefix'} = $self->{api_client}->to_query_value($args{'link/predated/prefix'});
    }

    # query params
    if ( exists $args{'link/predated/remove'}) {
        $query_params->{'link.predated.remove'} = $self->{api_client}->to_query_value($args{'link/predated/remove'});
    }

    # query params
    if ( exists $args{'link/predated/suffix'}) {
        $query_params->{'link.predated.suffix'} = $self->{api_client}->to_query_value($args{'link/predated/suffix'});
    }

    # query params
    if ( exists $args{'link/wcmmodes'}) {
        $query_params->{'link.wcmmodes'} = $self->{api_client}->to_query_value($args{'link/wcmmodes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_page_page_info_aggregator_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $page/info/provider/property/regex/default  (optional)
# @param string $page/info/provider/property/name  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'page/info/provider/property/regex/default' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'page/info/provider/property/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_page_page_info_aggregator_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo',
        };
}
# @return ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo
#
sub com_day_cq_wcm_core_impl_page_page_info_aggregator_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'page/info/provider/property/regex/default'}) {
        $query_params->{'page.info.provider.property.regex.default'} = $self->{api_client}->to_query_value($args{'page/info/provider/property/regex/default'});
    }

    # query params
    if ( exists $args{'page/info/provider/property/name'}) {
        $query_params->{'page.info.provider.property.name'} = $self->{api_client}->to_query_value($args{'page/info/provider/property/name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_page_page_manager_factory_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $illegal_char_mapping  (optional)
# @param boolean $page_sub_tree_activation_check  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'illegal_char_mapping' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'page_sub_tree_activation_check' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_page_page_manager_factory_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo',
        };
}
# @return ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo
#
sub com_day_cq_wcm_core_impl_page_page_manager_factory_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'illegal_char_mapping'}) {
        $query_params->{'illegalCharMapping'} = $self->{api_client}->to_query_value($args{'illegal_char_mapping'});
    }

    # query params
    if ( exists $args{'page_sub_tree_activation_check'}) {
        $query_params->{'pageSubTreeActivationCheck'} = $self->{api_client}->to_query_value($args{'page_sub_tree_activation_check'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_references_content_content_reference_config
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $content_reference_config/resource_types  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'content_reference_config/resource_types' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_references_content_content_reference_config' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo',
        };
}
# @return ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo
#
sub com_day_cq_wcm_core_impl_references_content_content_reference_config {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'content_reference_config/resource_types'}) {
        $query_params->{'contentReferenceConfig.resourceTypes'} = $self->{api_client}->to_query_value($args{'content_reference_config/resource_types'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $dam/showexpired  (optional)
# @param boolean $dam/showhidden  (optional)
# @param boolean $tag_title_search  (optional)
# @param string $guess_total  (optional)
# @param string $dam/expiry_property  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'dam/showexpired' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'dam/showhidden' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'tag_title_search' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'guess_total' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'dam/expiry_property' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo',
        };
}
# @return ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo
#
sub com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'dam/showexpired'}) {
        $query_params->{'dam.showexpired'} = $self->{api_client}->to_query_value($args{'dam/showexpired'});
    }

    # query params
    if ( exists $args{'dam/showhidden'}) {
        $query_params->{'dam.showhidden'} = $self->{api_client}->to_query_value($args{'dam/showhidden'});
    }

    # query params
    if ( exists $args{'tag_title_search'}) {
        $query_params->{'tagTitleSearch'} = $self->{api_client}->to_query_value($args{'tag_title_search'});
    }

    # query params
    if ( exists $args{'guess_total'}) {
        $query_params->{'guessTotal'} = $self->{api_client}->to_query_value($args{'guess_total'});
    }

    # query params
    if ( exists $args{'dam/expiry_property'}) {
        $query_params->{'dam.expiryProperty'} = $self->{api_client}->to_query_value($args{'dam/expiry_property'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $item/resource/types  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'item/resource/types' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo',
        };
}
# @return ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo
#
sub com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'item/resource/types'}) {
        $query_params->{'item.resource.types'} = $self->{api_client}->to_query_value($args{'item/resource/types'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $guess_total  (optional)
# @param boolean $tag_title_search  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'guess_total' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'tag_title_search' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo',
        };
}
# @return ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo
#
sub com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'guess_total'}) {
        $query_params->{'guessTotal'} = $self->{api_client}->to_query_value($args{'guess_total'});
    }

    # query params
    if ( exists $args{'tag_title_search'}) {
        $query_params->{'tagTitleSearch'} = $self->{api_client}->to_query_value($args{'tag_title_search'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_servlets_find_replace_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $scope  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scope' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_servlets_find_replace_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplServletsFindReplaceServletInfo',
        };
}
# @return ComDayCqWcmCoreImplServletsFindReplaceServletInfo
#
sub com_day_cq_wcm_core_impl_servlets_find_replace_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scope'}) {
        $query_params->{'scope'} = $self->{api_client}->to_query_value($args{'scope'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplServletsFindReplaceServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_servlets_reference_search_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $referencesearchservlet/max_references_per_page  (optional)
# @param int $referencesearchservlet/max_pages  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'referencesearchservlet/max_references_per_page' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'referencesearchservlet/max_pages' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_servlets_reference_search_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplServletsReferenceSearchServletInfo',
        };
}
# @return ComDayCqWcmCoreImplServletsReferenceSearchServletInfo
#
sub com_day_cq_wcm_core_impl_servlets_reference_search_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'referencesearchservlet/max_references_per_page'}) {
        $query_params->{'referencesearchservlet.maxReferencesPerPage'} = $self->{api_client}->to_query_value($args{'referencesearchservlet/max_references_per_page'});
    }

    # query params
    if ( exists $args{'referencesearchservlet/max_pages'}) {
        $query_params->{'referencesearchservlet.maxPages'} = $self->{api_client}->to_query_value($args{'referencesearchservlet/max_pages'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplServletsReferenceSearchServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_servlets_thumbnail_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $workspace  (optional)
# @param ARRAY[string] $dimensions  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'workspace' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'dimensions' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_servlets_thumbnail_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplServletsThumbnailServletInfo',
        };
}
# @return ComDayCqWcmCoreImplServletsThumbnailServletInfo
#
sub com_day_cq_wcm_core_impl_servlets_thumbnail_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'workspace'}) {
        $query_params->{'workspace'} = $self->{api_client}->to_query_value($args{'workspace'});
    }

    # query params
    if ( exists $args{'dimensions'}) {
        $query_params->{'dimensions'} = $self->{api_client}->to_query_value($args{'dimensions'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplServletsThumbnailServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_utils_default_page_name_validator
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $non_valid_chars  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'non_valid_chars' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_utils_default_page_name_validator' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo',
        };
}
# @return ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo
#
sub com_day_cq_wcm_core_impl_utils_default_page_name_validator {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'non_valid_chars'}) {
        $query_params->{'nonValidChars'} = $self->{api_client}->to_query_value($args{'non_valid_chars'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_variants_page_variants_provider_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $default/externalizer/domain  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'default/externalizer/domain' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_variants_page_variants_provider_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo',
        };
}
# @return ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo
#
sub com_day_cq_wcm_core_impl_variants_page_variants_provider_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'default/externalizer/domain'}) {
        $query_params->{'default.externalizer.domain'} = $self->{api_client}->to_query_value($args{'default/externalizer/domain'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_version_manager_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $versionmanager/create_version_on_activation  (optional)
# @param boolean $versionmanager/purging_enabled  (optional)
# @param ARRAY[string] $versionmanager/purge_paths  (optional)
# @param ARRAY[string] $versionmanager/iv_paths  (optional)
# @param int $versionmanager/max_age_days  (optional)
# @param int $versionmanager/max_number_versions  (optional)
# @param int $versionmanager/min_number_versions  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'versionmanager/create_version_on_activation' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'versionmanager/purging_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'versionmanager/purge_paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'versionmanager/iv_paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'versionmanager/max_age_days' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'versionmanager/max_number_versions' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'versionmanager/min_number_versions' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_version_manager_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplVersionManagerImplInfo',
        };
}
# @return ComDayCqWcmCoreImplVersionManagerImplInfo
#
sub com_day_cq_wcm_core_impl_version_manager_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'versionmanager/create_version_on_activation'}) {
        $query_params->{'versionmanager.createVersionOnActivation'} = $self->{api_client}->to_query_value($args{'versionmanager/create_version_on_activation'});
    }

    # query params
    if ( exists $args{'versionmanager/purging_enabled'}) {
        $query_params->{'versionmanager.purgingEnabled'} = $self->{api_client}->to_query_value($args{'versionmanager/purging_enabled'});
    }

    # query params
    if ( exists $args{'versionmanager/purge_paths'}) {
        $query_params->{'versionmanager.purgePaths'} = $self->{api_client}->to_query_value($args{'versionmanager/purge_paths'});
    }

    # query params
    if ( exists $args{'versionmanager/iv_paths'}) {
        $query_params->{'versionmanager.ivPaths'} = $self->{api_client}->to_query_value($args{'versionmanager/iv_paths'});
    }

    # query params
    if ( exists $args{'versionmanager/max_age_days'}) {
        $query_params->{'versionmanager.maxAgeDays'} = $self->{api_client}->to_query_value($args{'versionmanager/max_age_days'});
    }

    # query params
    if ( exists $args{'versionmanager/max_number_versions'}) {
        $query_params->{'versionmanager.maxNumberVersions'} = $self->{api_client}->to_query_value($args{'versionmanager/max_number_versions'});
    }

    # query params
    if ( exists $args{'versionmanager/min_number_versions'}) {
        $query_params->{'versionmanager.minNumberVersions'} = $self->{api_client}->to_query_value($args{'versionmanager/min_number_versions'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplVersionManagerImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_version_purge_task
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $versionpurge/paths  (optional)
# @param boolean $versionpurge/recursive  (optional)
# @param int $versionpurge/max_versions  (optional)
# @param int $versionpurge/min_versions  (optional)
# @param int $versionpurge/max_age_days  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'versionpurge/paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'versionpurge/recursive' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'versionpurge/max_versions' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'versionpurge/min_versions' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'versionpurge/max_age_days' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_version_purge_task' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplVersionPurgeTaskInfo',
        };
}
# @return ComDayCqWcmCoreImplVersionPurgeTaskInfo
#
sub com_day_cq_wcm_core_impl_version_purge_task {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'versionpurge/paths'}) {
        $query_params->{'versionpurge.paths'} = $self->{api_client}->to_query_value($args{'versionpurge/paths'});
    }

    # query params
    if ( exists $args{'versionpurge/recursive'}) {
        $query_params->{'versionpurge.recursive'} = $self->{api_client}->to_query_value($args{'versionpurge/recursive'});
    }

    # query params
    if ( exists $args{'versionpurge/max_versions'}) {
        $query_params->{'versionpurge.maxVersions'} = $self->{api_client}->to_query_value($args{'versionpurge/max_versions'});
    }

    # query params
    if ( exists $args{'versionpurge/min_versions'}) {
        $query_params->{'versionpurge.minVersions'} = $self->{api_client}->to_query_value($args{'versionpurge/min_versions'});
    }

    # query params
    if ( exists $args{'versionpurge/max_age_days'}) {
        $query_params->{'versionpurge.maxAgeDays'} = $self->{api_client}->to_query_value($args{'versionpurge/max_age_days'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplVersionPurgeTaskInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_warp_time_warp_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $filter/order  (optional)
# @param string $filter/scope  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'filter/order' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'filter/scope' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_warp_time_warp_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplWarpTimeWarpFilterInfo',
        };
}
# @return ComDayCqWcmCoreImplWarpTimeWarpFilterInfo
#
sub com_day_cq_wcm_core_impl_warp_time_warp_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'filter/order'}) {
        $query_params->{'filter.order'} = $self->{api_client}->to_query_value($args{'filter/order'});
    }

    # query params
    if ( exists $args{'filter/scope'}) {
        $query_params->{'filter.scope'} = $self->{api_client}->to_query_value($args{'filter/scope'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplWarpTimeWarpFilterInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_wcm_debug_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $wcmdbgfilter/enabled  (optional)
# @param boolean $wcmdbgfilter/jsp_debug  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'wcmdbgfilter/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'wcmdbgfilter/jsp_debug' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_wcm_debug_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplWCMDebugFilterInfo',
        };
}
# @return ComDayCqWcmCoreImplWCMDebugFilterInfo
#
sub com_day_cq_wcm_core_impl_wcm_debug_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'wcmdbgfilter/enabled'}) {
        $query_params->{'wcmdbgfilter.enabled'} = $self->{api_client}->to_query_value($args{'wcmdbgfilter/enabled'});
    }

    # query params
    if ( exists $args{'wcmdbgfilter/jsp_debug'}) {
        $query_params->{'wcmdbgfilter.jspDebug'} = $self->{api_client}->to_query_value($args{'wcmdbgfilter/jsp_debug'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplWCMDebugFilterInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_impl_wcm_developer_mode_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $wcmdevmodefilter/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'wcmdevmodefilter/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_impl_wcm_developer_mode_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo',
        };
}
# @return ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo
#
sub com_day_cq_wcm_core_impl_wcm_developer_mode_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'wcmdevmodefilter/enabled'}) {
        $query_params->{'wcmdevmodefilter.enabled'} = $self->{api_client}->to_query_value($args{'wcmdevmodefilter/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_mvt_mvt_statistics_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $mvtstatistics/trackingurl  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'mvtstatistics/trackingurl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_mvt_mvt_statistics_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreMvtMVTStatisticsImplInfo',
        };
}
# @return ComDayCqWcmCoreMvtMVTStatisticsImplInfo
#
sub com_day_cq_wcm_core_mvt_mvt_statistics_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'mvtstatistics/trackingurl'}) {
        $query_params->{'mvtstatistics.trackingurl'} = $self->{api_client}->to_query_value($args{'mvtstatistics/trackingurl'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreMvtMVTStatisticsImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_stats_page_view_statistics_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $pageviewstatistics/trackingurl  (optional)
# @param string $pageviewstatistics/trackingscript/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'pageviewstatistics/trackingurl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'pageviewstatistics/trackingscript/enabled' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_stats_page_view_statistics_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreStatsPageViewStatisticsImplInfo',
        };
}
# @return ComDayCqWcmCoreStatsPageViewStatisticsImplInfo
#
sub com_day_cq_wcm_core_stats_page_view_statistics_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'pageviewstatistics/trackingurl'}) {
        $query_params->{'pageviewstatistics.trackingurl'} = $self->{api_client}->to_query_value($args{'pageviewstatistics/trackingurl'});
    }

    # query params
    if ( exists $args{'pageviewstatistics/trackingscript/enabled'}) {
        $query_params->{'pageviewstatistics.trackingscript.enabled'} = $self->{api_client}->to_query_value($args{'pageviewstatistics/trackingscript/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreStatsPageViewStatisticsImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_core_wcm_request_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $wcmfilter/mode  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'wcmfilter/mode' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_core_wcm_request_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmCoreWCMRequestFilterInfo',
        };
}
# @return ComDayCqWcmCoreWCMRequestFilterInfo
#
sub com_day_cq_wcm_core_wcm_request_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'wcmfilter/mode'}) {
        $query_params->{'wcmfilter.mode'} = $self->{api_client}->to_query_value($args{'wcmfilter/mode'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmCoreWCMRequestFilterInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_design_package_importer
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $extract/filter  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'extract/filter' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_design_package_importer' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterDesignPackageImporterInfo',
        };
}
# @return ComDayCqWcmDesignimporterDesignPackageImporterInfo
#
sub com_day_cq_wcm_designimporter_design_package_importer {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'extract/filter'}) {
        $query_params->{'extract.filter'} = $self->{api_client}->to_query_value($args{'extract/filter'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterDesignPackageImporterInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_impl_canvas_builder_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $filepattern  (optional)
# @param boolean $build/page/nodes  (optional)
# @param boolean $build/client/libs  (optional)
# @param boolean $build/canvas/component  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'filepattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'build/page/nodes' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'build/client/libs' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'build/canvas/component' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_impl_canvas_builder_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo',
        };
}
# @return ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo
#
sub com_day_cq_wcm_designimporter_impl_canvas_builder_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'filepattern'}) {
        $query_params->{'filepattern'} = $self->{api_client}->to_query_value($args{'filepattern'});
    }

    # query params
    if ( exists $args{'build/page/nodes'}) {
        $query_params->{'build.page.nodes'} = $self->{api_client}->to_query_value($args{'build/page/nodes'});
    }

    # query params
    if ( exists $args{'build/client/libs'}) {
        $query_params->{'build.client.libs'} = $self->{api_client}->to_query_value($args{'build/client/libs'});
    }

    # query params
    if ( exists $args{'build/canvas/component'}) {
        $query_params->{'build.canvas.component'} = $self->{api_client}->to_query_value($args{'build/canvas/component'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $min_thread_pool_size  (optional)
# @param int $max_thread_pool_size  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'min_thread_pool_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'max_thread_pool_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo',
        };
}
# @return ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo
#
sub com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'min_thread_pool_size'}) {
        $query_params->{'minThreadPoolSize'} = $self->{api_client}->to_query_value($args{'min_thread_pool_size'});
    }

    # query params
    if ( exists $args{'max_thread_pool_size'}) {
        $query_params->{'maxThreadPoolSize'} = $self->{api_client}->to_query_value($args{'max_thread_pool_size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $search/pattern  (optional)
# @param string $replace/pattern  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'search/pattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'replace/pattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo',
        };
}
# @return ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo
#
sub com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'search/pattern'}) {
        $query_params->{'search.pattern'} = $self->{api_client}->to_query_value($args{'search/pattern'});
    }

    # query params
    if ( exists $args{'replace/pattern'}) {
        $query_params->{'replace.pattern'} = $self->{api_client}->to_query_value($args{'replace/pattern'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $filepattern  (optional)
# @param ARRAY[string] $device/groups  (optional)
# @param boolean $build/page/nodes  (optional)
# @param boolean $build/client/libs  (optional)
# @param boolean $build/canvas/component  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'filepattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'device/groups' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'build/page/nodes' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'build/client/libs' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'build/canvas/component' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo',
        };
}
# @return ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo
#
sub com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'filepattern'}) {
        $query_params->{'filepattern'} = $self->{api_client}->to_query_value($args{'filepattern'});
    }

    # query params
    if ( exists $args{'device/groups'}) {
        $query_params->{'device.groups'} = $self->{api_client}->to_query_value($args{'device/groups'});
    }

    # query params
    if ( exists $args{'build/page/nodes'}) {
        $query_params->{'build.page.nodes'} = $self->{api_client}->to_query_value($args{'build/page/nodes'});
    }

    # query params
    if ( exists $args{'build/client/libs'}) {
        $query_params->{'build.client.libs'} = $self->{api_client}->to_query_value($args{'build/client/libs'});
    }

    # query params
    if ( exists $args{'build/canvas/component'}) {
        $query_params->{'build.canvas.component'} = $self->{api_client}->to_query_value($args{'build/canvas/component'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo',
        };
}
# @return ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo
#
sub com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo',
        };
}
# @return ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo
#
sub com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo',
        };
}
# @return ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo
#
sub com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo',
        };
}
# @return ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo
#
sub com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo',
        };
}
# @return ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo
#
sub com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
# @param string $component/resource_type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'component/resource_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo',
        };
}
# @return ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo
#
sub com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    # query params
    if ( exists $args{'component/resource_type'}) {
        $query_params->{'component.resourceType'} = $self->{api_client}->to_query_value($args{'component/resource_type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo',
        };
}
# @return ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo
#
sub com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo',
        };
}
# @return ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo
#
sub com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo',
        };
}
# @return ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo
#
sub com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo',
        };
}
# @return ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo
#
sub com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo',
        };
}
# @return ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo
#
sub com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
# @param string $component/resource_type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'component/resource_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo',
        };
}
# @return ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo
#
sub com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    # query params
    if ( exists $args{'component/resource_type'}) {
        $query_params->{'component.resourceType'} = $self->{api_client}->to_query_value($args{'component/resource_type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo',
        };
}
# @return ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo
#
sub com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo',
        };
}
# @return ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo
#
sub com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
# @param string $component/resource_type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'component/resource_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo',
        };
}
# @return ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo
#
sub com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    # query params
    if ( exists $args{'component/resource_type'}) {
        $query_params->{'component.resourceType'} = $self->{api_client}->to_query_value($args{'component/resource_type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
# @param string $component/resource_type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'component/resource_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo',
        };
}
# @return ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo
#
sub com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    # query params
    if ( exists $args{'component/resource_type'}) {
        $query_params->{'component.resourceType'} = $self->{api_client}->to_query_value($args{'component/resource_type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $tagpattern  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'tagpattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo',
        };
}
# @return ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo
#
sub com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'tagpattern'}) {
        $query_params->{'tagpattern'} = $self->{api_client}->to_query_value($args{'tagpattern'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $service/name  (optional)
# @param string $sling/servlet/resource_types  (optional)
# @param string $sling/servlet/selectors  (optional)
# @param ARRAY[string] $sling/servlet/methods  (optional)
# @param boolean $forms/formchooserservlet/advansesearch/require  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/servlet/resource_types' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/servlet/selectors' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/servlet/methods' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'forms/formchooserservlet/advansesearch/require' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmFoundationFormsImplFormChooserServletInfo',
        };
}
# @return ComDayCqWcmFoundationFormsImplFormChooserServletInfo
#
sub com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/name'}) {
        $query_params->{'service.name'} = $self->{api_client}->to_query_value($args{'service/name'});
    }

    # query params
    if ( exists $args{'sling/servlet/resource_types'}) {
        $query_params->{'sling.servlet.resourceTypes'} = $self->{api_client}->to_query_value($args{'sling/servlet/resource_types'});
    }

    # query params
    if ( exists $args{'sling/servlet/selectors'}) {
        $query_params->{'sling.servlet.selectors'} = $self->{api_client}->to_query_value($args{'sling/servlet/selectors'});
    }

    # query params
    if ( exists $args{'sling/servlet/methods'}) {
        $query_params->{'sling.servlet.methods'} = $self->{api_client}->to_query_value($args{'sling/servlet/methods'});
    }

    # query params
    if ( exists $args{'forms/formchooserservlet/advansesearch/require'}) {
        $query_params->{'forms.formchooserservlet.advansesearch.require'} = $self->{api_client}->to_query_value($args{'forms/formchooserservlet/advansesearch/require'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmFoundationFormsImplFormChooserServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $forms/formparagraphpostprocessor/enabled  (optional)
# @param ARRAY[string] $forms/formparagraphpostprocessor/formresourcetypes  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'forms/formparagraphpostprocessor/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'forms/formparagraphpostprocessor/formresourcetypes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo',
        };
}
# @return ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo
#
sub com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'forms/formparagraphpostprocessor/enabled'}) {
        $query_params->{'forms.formparagraphpostprocessor.enabled'} = $self->{api_client}->to_query_value($args{'forms/formparagraphpostprocessor/enabled'});
    }

    # query params
    if ( exists $args{'forms/formparagraphpostprocessor/formresourcetypes'}) {
        $query_params->{'forms.formparagraphpostprocessor.formresourcetypes'} = $self->{api_client}->to_query_value($args{'forms/formparagraphpostprocessor/formresourcetypes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name/whitelist  (optional)
# @param boolean $allow/expressions  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name/whitelist' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'allow/expressions' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo',
        };
}
# @return ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo
#
sub com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name/whitelist'}) {
        $query_params->{'name.whitelist'} = $self->{api_client}->to_query_value($args{'name/whitelist'});
    }

    # query params
    if ( exists $args{'allow/expressions'}) {
        $query_params->{'allow.expressions'} = $self->{api_client}->to_query_value($args{'allow/expressions'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_foundation_forms_impl_mail_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $sling/servlet/resource_types  (optional)
# @param string $sling/servlet/selectors  (optional)
# @param ARRAY[string] $resource/whitelist  (optional)
# @param string $resource/blacklist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/servlet/resource_types' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/servlet/selectors' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'resource/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'resource/blacklist' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_foundation_forms_impl_mail_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmFoundationFormsImplMailServletInfo',
        };
}
# @return ComDayCqWcmFoundationFormsImplMailServletInfo
#
sub com_day_cq_wcm_foundation_forms_impl_mail_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/servlet/resource_types'}) {
        $query_params->{'sling.servlet.resourceTypes'} = $self->{api_client}->to_query_value($args{'sling/servlet/resource_types'});
    }

    # query params
    if ( exists $args{'sling/servlet/selectors'}) {
        $query_params->{'sling.servlet.selectors'} = $self->{api_client}->to_query_value($args{'sling/servlet/selectors'});
    }

    # query params
    if ( exists $args{'resource/whitelist'}) {
        $query_params->{'resource.whitelist'} = $self->{api_client}->to_query_value($args{'resource/whitelist'});
    }

    # query params
    if ( exists $args{'resource/blacklist'}) {
        $query_params->{'resource.blacklist'} = $self->{api_client}->to_query_value($args{'resource/blacklist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmFoundationFormsImplMailServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $adapt/supported/widths  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'adapt/supported/widths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo',
        };
}
# @return ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo
#
sub com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'adapt/supported/widths'}) {
        $query_params->{'adapt.supported.widths'} = $self->{api_client}->to_query_value($args{'adapt/supported/widths'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_foundation_impl_http_auth_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $path  (optional)
# @param boolean $auth/http/nologin  (optional)
# @param string $auth/http/realm  (optional)
# @param string $auth/default/loginpage  (optional)
# @param ARRAY[string] $auth/cred/form  (optional)
# @param ARRAY[string] $auth/cred/utf8  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auth/http/nologin' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'auth/http/realm' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auth/default/loginpage' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auth/cred/form' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'auth/cred/utf8' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_foundation_impl_http_auth_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmFoundationImplHTTPAuthHandlerInfo',
        };
}
# @return ComDayCqWcmFoundationImplHTTPAuthHandlerInfo
#
sub com_day_cq_wcm_foundation_impl_http_auth_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'auth/http/nologin'}) {
        $query_params->{'auth.http.nologin'} = $self->{api_client}->to_query_value($args{'auth/http/nologin'});
    }

    # query params
    if ( exists $args{'auth/http/realm'}) {
        $query_params->{'auth.http.realm'} = $self->{api_client}->to_query_value($args{'auth/http/realm'});
    }

    # query params
    if ( exists $args{'auth/default/loginpage'}) {
        $query_params->{'auth.default.loginpage'} = $self->{api_client}->to_query_value($args{'auth/default/loginpage'});
    }

    # query params
    if ( exists $args{'auth/cred/form'}) {
        $query_params->{'auth.cred.form'} = $self->{api_client}->to_query_value($args{'auth/cred/form'});
    }

    # query params
    if ( exists $args{'auth/cred/utf8'}) {
        $query_params->{'auth.cred.utf8'} = $self->{api_client}->to_query_value($args{'auth/cred/utf8'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmFoundationImplHTTPAuthHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_foundation_impl_page_impressions_tracker
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $sling/auth/requirements  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/auth/requirements' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_foundation_impl_page_impressions_tracker' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmFoundationImplPageImpressionsTrackerInfo',
        };
}
# @return ComDayCqWcmFoundationImplPageImpressionsTrackerInfo
#
sub com_day_cq_wcm_foundation_impl_page_impressions_tracker {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/auth/requirements'}) {
        $query_params->{'sling.auth.requirements'} = $self->{api_client}->to_query_value($args{'sling/auth/requirements'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmFoundationImplPageImpressionsTrackerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_foundation_impl_page_redirect_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $excluded/resource/types  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'excluded/resource/types' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_foundation_impl_page_redirect_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmFoundationImplPageRedirectServletInfo',
        };
}
# @return ComDayCqWcmFoundationImplPageRedirectServletInfo
#
sub com_day_cq_wcm_foundation_impl_page_redirect_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'excluded/resource/types'}) {
        $query_params->{'excluded.resource.types'} = $self->{api_client}->to_query_value($args{'excluded/resource/types'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmFoundationImplPageRedirectServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $default/attachment/type/blacklist  (optional)
# @param ARRAY[string] $baseline/attachment/type/blacklist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'default/attachment/type/blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'baseline/attachment/type/blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo',
        };
}
# @return ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo
#
sub com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'default/attachment/type/blacklist'}) {
        $query_params->{'default.attachment.type.blacklist'} = $self->{api_client}->to_query_value($args{'default/attachment/type/blacklist'});
    }

    # query params
    if ( exists $args{'baseline/attachment/type/blacklist'}) {
        $query_params->{'baseline.attachment.type.blacklist'} = $self->{api_client}->to_query_value($args{'baseline/attachment/type/blacklist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $parameter/whitelist  (optional)
# @param ARRAY[string] $parameter/whitelist/prefixes  (optional)
# @param ARRAY[string] $binary/parameter/whitelist  (optional)
# @param ARRAY[string] $modifier/whitelist  (optional)
# @param ARRAY[string] $operation/whitelist  (optional)
# @param ARRAY[string] $operation/whitelist/prefixes  (optional)
# @param ARRAY[string] $typehint/whitelist  (optional)
# @param ARRAY[string] $resourcetype/whitelist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'parameter/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'parameter/whitelist/prefixes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'binary/parameter/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'modifier/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'operation/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'operation/whitelist/prefixes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'typehint/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'resourcetype/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo',
        };
}
# @return ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo
#
sub com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'parameter/whitelist'}) {
        $query_params->{'parameter.whitelist'} = $self->{api_client}->to_query_value($args{'parameter/whitelist'});
    }

    # query params
    if ( exists $args{'parameter/whitelist/prefixes'}) {
        $query_params->{'parameter.whitelist.prefixes'} = $self->{api_client}->to_query_value($args{'parameter/whitelist/prefixes'});
    }

    # query params
    if ( exists $args{'binary/parameter/whitelist'}) {
        $query_params->{'binary.parameter.whitelist'} = $self->{api_client}->to_query_value($args{'binary/parameter/whitelist'});
    }

    # query params
    if ( exists $args{'modifier/whitelist'}) {
        $query_params->{'modifier.whitelist'} = $self->{api_client}->to_query_value($args{'modifier/whitelist'});
    }

    # query params
    if ( exists $args{'operation/whitelist'}) {
        $query_params->{'operation.whitelist'} = $self->{api_client}->to_query_value($args{'operation/whitelist'});
    }

    # query params
    if ( exists $args{'operation/whitelist/prefixes'}) {
        $query_params->{'operation.whitelist.prefixes'} = $self->{api_client}->to_query_value($args{'operation/whitelist/prefixes'});
    }

    # query params
    if ( exists $args{'typehint/whitelist'}) {
        $query_params->{'typehint.whitelist'} = $self->{api_client}->to_query_value($args{'typehint/whitelist'});
    }

    # query params
    if ( exists $args{'resourcetype/whitelist'}) {
        $query_params->{'resourcetype.whitelist'} = $self->{api_client}->to_query_value($args{'resourcetype/whitelist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $device/info/transformer/enabled  (optional)
# @param string $device/info/transformer/css/style  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'device/info/transformer/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'device/info/transformer/css/style' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo',
        };
}
# @return ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo
#
sub com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'device/info/transformer/enabled'}) {
        $query_params->{'device.info.transformer.enabled'} = $self->{api_client}->to_query_value($args{'device/info/transformer/enabled'});
    }

    # query params
    if ( exists $args{'device/info/transformer/css/style'}) {
        $query_params->{'device.info.transformer.css.style'} = $self->{api_client}->to_query_value($args{'device/info/transformer/css/style'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $redirect/enabled  (optional)
# @param boolean $redirect/stats/enabled  (optional)
# @param ARRAY[string] $redirect/extensions  (optional)
# @param ARRAY[string] $redirect/paths  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'redirect/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'redirect/stats/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'redirect/extensions' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'redirect/paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo',
        };
}
# @return ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo
#
sub com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'redirect/enabled'}) {
        $query_params->{'redirect.enabled'} = $self->{api_client}->to_query_value($args{'redirect/enabled'});
    }

    # query params
    if ( exists $args{'redirect/stats/enabled'}) {
        $query_params->{'redirect.stats.enabled'} = $self->{api_client}->to_query_value($args{'redirect/stats/enabled'});
    }

    # query params
    if ( exists $args{'redirect/extensions'}) {
        $query_params->{'redirect.extensions'} = $self->{api_client}->to_query_value($args{'redirect/extensions'});
    }

    # query params
    if ( exists $args{'redirect/paths'}) {
        $query_params->{'redirect.paths'} = $self->{api_client}->to_query_value($args{'redirect/paths'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_msm_impl_actions_content_copy_action_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludednodetypes  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludedparagraphitems  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludedprops  (optional)
# @param string $contentcopyaction/order/style  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludednodetypes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludedparagraphitems' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludedprops' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'contentcopyaction/order/style' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_msm_impl_actions_content_copy_action_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo',
        };
}
# @return ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo
#
sub com_day_cq_wcm_msm_impl_actions_content_copy_action_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludednodetypes'}) {
        $query_params->{'cq.wcm.msm.action.excludednodetypes'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludednodetypes'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludedparagraphitems'}) {
        $query_params->{'cq.wcm.msm.action.excludedparagraphitems'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludedparagraphitems'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludedprops'}) {
        $query_params->{'cq.wcm.msm.action.excludedprops'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludedprops'});
    }

    # query params
    if ( exists $args{'contentcopyaction/order/style'}) {
        $query_params->{'contentcopyaction.order.style'} = $self->{api_client}->to_query_value($args{'contentcopyaction/order/style'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_msm_impl_actions_content_delete_action_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludednodetypes  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludedparagraphitems  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludedprops  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludednodetypes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludedparagraphitems' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludedprops' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_msm_impl_actions_content_delete_action_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo',
        };
}
# @return ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo
#
sub com_day_cq_wcm_msm_impl_actions_content_delete_action_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludednodetypes'}) {
        $query_params->{'cq.wcm.msm.action.excludednodetypes'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludednodetypes'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludedparagraphitems'}) {
        $query_params->{'cq.wcm.msm.action.excludedparagraphitems'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludedparagraphitems'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludedprops'}) {
        $query_params->{'cq.wcm.msm.action.excludedprops'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludedprops'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_msm_impl_actions_content_update_action_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludednodetypes  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludedparagraphitems  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludedprops  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/ignored_mixin  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludednodetypes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludedparagraphitems' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludedprops' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/ignored_mixin' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_msm_impl_actions_content_update_action_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo',
        };
}
# @return ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo
#
sub com_day_cq_wcm_msm_impl_actions_content_update_action_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludednodetypes'}) {
        $query_params->{'cq.wcm.msm.action.excludednodetypes'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludednodetypes'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludedparagraphitems'}) {
        $query_params->{'cq.wcm.msm.action.excludedparagraphitems'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludedparagraphitems'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludedprops'}) {
        $query_params->{'cq.wcm.msm.action.excludedprops'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludedprops'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/ignored_mixin'}) {
        $query_params->{'cq.wcm.msm.action.ignoredMixin'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/ignored_mixin'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_msm_impl_actions_order_children_action_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludednodetypes  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludedparagraphitems  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludedprops  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludednodetypes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludedparagraphitems' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludedprops' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_msm_impl_actions_order_children_action_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo',
        };
}
# @return ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo
#
sub com_day_cq_wcm_msm_impl_actions_order_children_action_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludednodetypes'}) {
        $query_params->{'cq.wcm.msm.action.excludednodetypes'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludednodetypes'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludedparagraphitems'}) {
        $query_params->{'cq.wcm.msm.action.excludedparagraphitems'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludedparagraphitems'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludedprops'}) {
        $query_params->{'cq.wcm.msm.action.excludedprops'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludedprops'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_msm_impl_actions_page_move_action_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludednodetypes  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludedparagraphitems  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludedprops  (optional)
# @param boolean $cq/wcm/msm/impl/actions/pagemove/prop_reference_update  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludednodetypes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludedparagraphitems' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludedprops' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/impl/actions/pagemove/prop_reference_update' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_msm_impl_actions_page_move_action_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo',
        };
}
# @return ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo
#
sub com_day_cq_wcm_msm_impl_actions_page_move_action_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludednodetypes'}) {
        $query_params->{'cq.wcm.msm.action.excludednodetypes'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludednodetypes'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludedparagraphitems'}) {
        $query_params->{'cq.wcm.msm.action.excludedparagraphitems'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludedparagraphitems'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludedprops'}) {
        $query_params->{'cq.wcm.msm.action.excludedprops'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludedprops'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/impl/actions/pagemove/prop_reference_update'}) {
        $query_params->{'cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/impl/actions/pagemove/prop_reference_update'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_msm_impl_actions_references_update_action_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludednodetypes  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludedparagraphitems  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludedprops  (optional)
# @param boolean $cq/wcm/msm/impl/action/referencesupdate/prop_update_nested  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludednodetypes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludedparagraphitems' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludedprops' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/impl/action/referencesupdate/prop_update_nested' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_msm_impl_actions_references_update_action_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo',
        };
}
# @return ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo
#
sub com_day_cq_wcm_msm_impl_actions_references_update_action_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludednodetypes'}) {
        $query_params->{'cq.wcm.msm.action.excludednodetypes'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludednodetypes'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludedparagraphitems'}) {
        $query_params->{'cq.wcm.msm.action.excludedparagraphitems'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludedparagraphitems'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludedprops'}) {
        $query_params->{'cq.wcm.msm.action.excludedprops'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludedprops'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/impl/action/referencesupdate/prop_update_nested'}) {
        $query_params->{'cq.wcm.msm.impl.action.referencesupdate.prop_updateNested'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/impl/action/referencesupdate/prop_update_nested'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_msm_impl_actions_version_copy_action_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludednodetypes  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludedparagraphitems  (optional)
# @param ARRAY[string] $cq/wcm/msm/action/excludedprops  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludednodetypes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludedparagraphitems' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/msm/action/excludedprops' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_msm_impl_actions_version_copy_action_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo',
        };
}
# @return ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo
#
sub com_day_cq_wcm_msm_impl_actions_version_copy_action_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludednodetypes'}) {
        $query_params->{'cq.wcm.msm.action.excludednodetypes'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludednodetypes'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludedparagraphitems'}) {
        $query_params->{'cq.wcm.msm.action.excludedparagraphitems'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludedparagraphitems'});
    }

    # query params
    if ( exists $args{'cq/wcm/msm/action/excludedprops'}) {
        $query_params->{'cq.wcm.msm.action.excludedprops'} = $self->{api_client}->to_query_value($args{'cq/wcm/msm/action/excludedprops'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_msm_impl_live_relationship_manager_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $liverelationshipmgr/relationsconfig/default  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'liverelationshipmgr/relationsconfig/default' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_msm_impl_live_relationship_manager_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo',
        };
}
# @return ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo
#
sub com_day_cq_wcm_msm_impl_live_relationship_manager_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'liverelationshipmgr/relationsconfig/default'}) {
        $query_params->{'liverelationshipmgr.relationsconfig.default'} = $self->{api_client}->to_query_value($args{'liverelationshipmgr/relationsconfig/default'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_msm_impl_rollout_manager_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $event/filter  (optional)
# @param ARRAY[string] $rolloutmgr/excludedprops/default  (optional)
# @param ARRAY[string] $rolloutmgr/excludedparagraphprops/default  (optional)
# @param ARRAY[string] $rolloutmgr/excludednodetypes/default  (optional)
# @param int $rolloutmgr/threadpool/maxsize  (optional)
# @param int $rolloutmgr/threadpool/maxshutdowntime  (optional)
# @param string $rolloutmgr/threadpool/priority  (optional)
# @param int $rolloutmgr/commit/size  (optional)
# @param boolean $rolloutmgr/conflicthandling/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'event/filter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'rolloutmgr/excludedprops/default' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'rolloutmgr/excludedparagraphprops/default' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'rolloutmgr/excludednodetypes/default' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'rolloutmgr/threadpool/maxsize' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'rolloutmgr/threadpool/maxshutdowntime' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'rolloutmgr/threadpool/priority' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'rolloutmgr/commit/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'rolloutmgr/conflicthandling/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_msm_impl_rollout_manager_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmMsmImplRolloutManagerImplInfo',
        };
}
# @return ComDayCqWcmMsmImplRolloutManagerImplInfo
#
sub com_day_cq_wcm_msm_impl_rollout_manager_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'event/filter'}) {
        $query_params->{'event.filter'} = $self->{api_client}->to_query_value($args{'event/filter'});
    }

    # query params
    if ( exists $args{'rolloutmgr/excludedprops/default'}) {
        $query_params->{'rolloutmgr.excludedprops.default'} = $self->{api_client}->to_query_value($args{'rolloutmgr/excludedprops/default'});
    }

    # query params
    if ( exists $args{'rolloutmgr/excludedparagraphprops/default'}) {
        $query_params->{'rolloutmgr.excludedparagraphprops.default'} = $self->{api_client}->to_query_value($args{'rolloutmgr/excludedparagraphprops/default'});
    }

    # query params
    if ( exists $args{'rolloutmgr/excludednodetypes/default'}) {
        $query_params->{'rolloutmgr.excludednodetypes.default'} = $self->{api_client}->to_query_value($args{'rolloutmgr/excludednodetypes/default'});
    }

    # query params
    if ( exists $args{'rolloutmgr/threadpool/maxsize'}) {
        $query_params->{'rolloutmgr.threadpool.maxsize'} = $self->{api_client}->to_query_value($args{'rolloutmgr/threadpool/maxsize'});
    }

    # query params
    if ( exists $args{'rolloutmgr/threadpool/maxshutdowntime'}) {
        $query_params->{'rolloutmgr.threadpool.maxshutdowntime'} = $self->{api_client}->to_query_value($args{'rolloutmgr/threadpool/maxshutdowntime'});
    }

    # query params
    if ( exists $args{'rolloutmgr/threadpool/priority'}) {
        $query_params->{'rolloutmgr.threadpool.priority'} = $self->{api_client}->to_query_value($args{'rolloutmgr/threadpool/priority'});
    }

    # query params
    if ( exists $args{'rolloutmgr/commit/size'}) {
        $query_params->{'rolloutmgr.commit.size'} = $self->{api_client}->to_query_value($args{'rolloutmgr/commit/size'});
    }

    # query params
    if ( exists $args{'rolloutmgr/conflicthandling/enabled'}) {
        $query_params->{'rolloutmgr.conflicthandling.enabled'} = $self->{api_client}->to_query_value($args{'rolloutmgr/conflicthandling/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmMsmImplRolloutManagerImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_msm_impl_servlets_audit_log_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $auditlogservlet/default/events/count  (optional)
# @param string $auditlogservlet/default/path  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'auditlogservlet/default/events/count' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'auditlogservlet/default/path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_msm_impl_servlets_audit_log_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmMsmImplServletsAuditLogServletInfo',
        };
}
# @return ComDayCqWcmMsmImplServletsAuditLogServletInfo
#
sub com_day_cq_wcm_msm_impl_servlets_audit_log_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'auditlogservlet/default/events/count'}) {
        $query_params->{'auditlogservlet.default.events.count'} = $self->{api_client}->to_query_value($args{'auditlogservlet/default/events/count'});
    }

    # query params
    if ( exists $args{'auditlogservlet/default/path'}) {
        $query_params->{'auditlogservlet.default.path'} = $self->{api_client}->to_query_value($args{'auditlogservlet/default/path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmMsmImplServletsAuditLogServletInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_notification_email_impl_email_channel
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $email/from  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'email/from' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_notification_email_impl_email_channel' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmNotificationEmailImplEmailChannelInfo',
        };
}
# @return ComDayCqWcmNotificationEmailImplEmailChannelInfo
#
sub com_day_cq_wcm_notification_email_impl_email_channel {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'email/from'}) {
        $query_params->{'email.from'} = $self->{api_client}->to_query_value($args{'email/from'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmNotificationEmailImplEmailChannelInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_notification_impl_notification_manager_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $event/topics  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'event/topics' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_notification_impl_notification_manager_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmNotificationImplNotificationManagerImplInfo',
        };
}
# @return ComDayCqWcmNotificationImplNotificationManagerImplInfo
#
sub com_day_cq_wcm_notification_impl_notification_manager_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'event/topics'}) {
        $query_params->{'event.topics'} = $self->{api_client}->to_query_value($args{'event/topics'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmNotificationImplNotificationManagerImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_scripting_impl_bvp_manager
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $com/day/cq/wcm/scripting/bvp/script/engines  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'com/day/cq/wcm/scripting/bvp/script/engines' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_scripting_impl_bvp_manager' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmScriptingImplBVPManagerInfo',
        };
}
# @return ComDayCqWcmScriptingImplBVPManagerInfo
#
sub com_day_cq_wcm_scripting_impl_bvp_manager {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'com/day/cq/wcm/scripting/bvp/script/engines'}) {
        $query_params->{'com.day.cq.wcm.scripting.bvp.script.engines'} = $self->{api_client}->to_query_value($args{'com/day/cq/wcm/scripting/bvp/script/engines'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmScriptingImplBVPManagerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_undo_undo_config
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $cq/wcm/undo/enabled  (optional)
# @param string $cq/wcm/undo/path  (optional)
# @param int $cq/wcm/undo/validity  (optional)
# @param int $cq/wcm/undo/steps  (optional)
# @param string $cq/wcm/undo/persistence  (optional)
# @param boolean $cq/wcm/undo/persistence/mode  (optional)
# @param string $cq/wcm/undo/markermode  (optional)
# @param ARRAY[string] $cq/wcm/undo/whitelist  (optional)
# @param ARRAY[string] $cq/wcm/undo/blacklist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/undo/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cq/wcm/undo/path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/wcm/undo/validity' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/wcm/undo/steps' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/wcm/undo/persistence' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/wcm/undo/persistence/mode' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cq/wcm/undo/markermode' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'cq/wcm/undo/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cq/wcm/undo/blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_undo_undo_config' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmUndoUndoConfigInfo',
        };
}
# @return ComDayCqWcmUndoUndoConfigInfo
#
sub com_day_cq_wcm_undo_undo_config {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cq/wcm/undo/enabled'}) {
        $query_params->{'cq.wcm.undo.enabled'} = $self->{api_client}->to_query_value($args{'cq/wcm/undo/enabled'});
    }

    # query params
    if ( exists $args{'cq/wcm/undo/path'}) {
        $query_params->{'cq.wcm.undo.path'} = $self->{api_client}->to_query_value($args{'cq/wcm/undo/path'});
    }

    # query params
    if ( exists $args{'cq/wcm/undo/validity'}) {
        $query_params->{'cq.wcm.undo.validity'} = $self->{api_client}->to_query_value($args{'cq/wcm/undo/validity'});
    }

    # query params
    if ( exists $args{'cq/wcm/undo/steps'}) {
        $query_params->{'cq.wcm.undo.steps'} = $self->{api_client}->to_query_value($args{'cq/wcm/undo/steps'});
    }

    # query params
    if ( exists $args{'cq/wcm/undo/persistence'}) {
        $query_params->{'cq.wcm.undo.persistence'} = $self->{api_client}->to_query_value($args{'cq/wcm/undo/persistence'});
    }

    # query params
    if ( exists $args{'cq/wcm/undo/persistence/mode'}) {
        $query_params->{'cq.wcm.undo.persistence.mode'} = $self->{api_client}->to_query_value($args{'cq/wcm/undo/persistence/mode'});
    }

    # query params
    if ( exists $args{'cq/wcm/undo/markermode'}) {
        $query_params->{'cq.wcm.undo.markermode'} = $self->{api_client}->to_query_value($args{'cq/wcm/undo/markermode'});
    }

    # query params
    if ( exists $args{'cq/wcm/undo/whitelist'}) {
        $query_params->{'cq.wcm.undo.whitelist'} = $self->{api_client}->to_query_value($args{'cq/wcm/undo/whitelist'});
    }

    # query params
    if ( exists $args{'cq/wcm/undo/blacklist'}) {
        $query_params->{'cq.wcm.undo.blacklist'} = $self->{api_client}->to_query_value($args{'cq/wcm/undo/blacklist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmUndoUndoConfigInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_webservicesupport_impl_replication_event_listener
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $flush_agents  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'flush_agents' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_webservicesupport_impl_replication_event_listener' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo',
        };
}
# @return ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo
#
sub com_day_cq_wcm_webservicesupport_impl_replication_event_listener {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'flush_agents'}) {
        $query_params->{'Flush agents'} = $self->{api_client}->to_query_value($args{'flush_agents'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $event/filter  (optional)
# @param int $min_thread_pool_size  (optional)
# @param int $max_thread_pool_size  (optional)
# @param boolean $cq/wcm/workflow/terminate/on/activate  (optional)
# @param ARRAY[string] $cq/wcm/worklfow/terminate/exclusion/list  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'event/filter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'min_thread_pool_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'max_thread_pool_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cq/wcm/workflow/terminate/on/activate' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cq/wcm/worklfow/terminate/exclusion/list' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo',
        };
}
# @return ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo
#
sub com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'event/filter'}) {
        $query_params->{'event.filter'} = $self->{api_client}->to_query_value($args{'event/filter'});
    }

    # query params
    if ( exists $args{'min_thread_pool_size'}) {
        $query_params->{'minThreadPoolSize'} = $self->{api_client}->to_query_value($args{'min_thread_pool_size'});
    }

    # query params
    if ( exists $args{'max_thread_pool_size'}) {
        $query_params->{'maxThreadPoolSize'} = $self->{api_client}->to_query_value($args{'max_thread_pool_size'});
    }

    # query params
    if ( exists $args{'cq/wcm/workflow/terminate/on/activate'}) {
        $query_params->{'cq.wcm.workflow.terminate.on.activate'} = $self->{api_client}->to_query_value($args{'cq/wcm/workflow/terminate/on/activate'});
    }

    # query params
    if ( exists $args{'cq/wcm/worklfow/terminate/exclusion/list'}) {
        $query_params->{'cq.wcm.worklfow.terminate.exclusion.list'} = $self->{api_client}->to_query_value($args{'cq/wcm/worklfow/terminate/exclusion/list'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_wcm_workflow_impl_workflow_package_info_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $workflowpackageinfoprovider/filter  (optional)
# @param string $workflowpackageinfoprovider/filter/rootpath  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'workflowpackageinfoprovider/filter' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'workflowpackageinfoprovider/filter/rootpath' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_wcm_workflow_impl_workflow_package_info_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo',
        };
}
# @return ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo
#
sub com_day_cq_wcm_workflow_impl_workflow_package_info_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'workflowpackageinfoprovider/filter'}) {
        $query_params->{'workflowpackageinfoprovider.filter'} = $self->{api_client}->to_query_value($args{'workflowpackageinfoprovider/filter'});
    }

    # query params
    if ( exists $args{'workflowpackageinfoprovider/filter/rootpath'}) {
        $query_params->{'workflowpackageinfoprovider.filter.rootpath'} = $self->{api_client}->to_query_value($args{'workflowpackageinfoprovider/filter/rootpath'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo', $response);
    return $_response_object;
}

#
# com_day_cq_widget_impl_html_library_manager_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $htmllibmanager/clientmanager  (optional)
# @param boolean $htmllibmanager/debug  (optional)
# @param boolean $htmllibmanager/debug/console  (optional)
# @param string $htmllibmanager/debug/init/js  (optional)
# @param string $htmllibmanager/defaultthemename  (optional)
# @param string $htmllibmanager/defaultuserthemename  (optional)
# @param string $htmllibmanager/firebuglite/path  (optional)
# @param boolean $htmllibmanager/force_cq_url_info  (optional)
# @param boolean $htmllibmanager/gzip  (optional)
# @param int $htmllibmanager/maxage  (optional)
# @param int $htmllibmanager/max_data_uri_size  (optional)
# @param boolean $htmllibmanager/minify  (optional)
# @param ARRAY[string] $htmllibmanager/path/list  (optional)
# @param boolean $htmllibmanager/timing  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'htmllibmanager/clientmanager' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'htmllibmanager/debug' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'htmllibmanager/debug/console' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'htmllibmanager/debug/init/js' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'htmllibmanager/defaultthemename' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'htmllibmanager/defaultuserthemename' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'htmllibmanager/firebuglite/path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'htmllibmanager/force_cq_url_info' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'htmllibmanager/gzip' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'htmllibmanager/maxage' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'htmllibmanager/max_data_uri_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'htmllibmanager/minify' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'htmllibmanager/path/list' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'htmllibmanager/timing' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_widget_impl_html_library_manager_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWidgetImplHtmlLibraryManagerImplInfo',
        };
}
# @return ComDayCqWidgetImplHtmlLibraryManagerImplInfo
#
sub com_day_cq_widget_impl_html_library_manager_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'htmllibmanager/clientmanager'}) {
        $query_params->{'htmllibmanager.clientmanager'} = $self->{api_client}->to_query_value($args{'htmllibmanager/clientmanager'});
    }

    # query params
    if ( exists $args{'htmllibmanager/debug'}) {
        $query_params->{'htmllibmanager.debug'} = $self->{api_client}->to_query_value($args{'htmllibmanager/debug'});
    }

    # query params
    if ( exists $args{'htmllibmanager/debug/console'}) {
        $query_params->{'htmllibmanager.debug.console'} = $self->{api_client}->to_query_value($args{'htmllibmanager/debug/console'});
    }

    # query params
    if ( exists $args{'htmllibmanager/debug/init/js'}) {
        $query_params->{'htmllibmanager.debug.init.js'} = $self->{api_client}->to_query_value($args{'htmllibmanager/debug/init/js'});
    }

    # query params
    if ( exists $args{'htmllibmanager/defaultthemename'}) {
        $query_params->{'htmllibmanager.defaultthemename'} = $self->{api_client}->to_query_value($args{'htmllibmanager/defaultthemename'});
    }

    # query params
    if ( exists $args{'htmllibmanager/defaultuserthemename'}) {
        $query_params->{'htmllibmanager.defaultuserthemename'} = $self->{api_client}->to_query_value($args{'htmllibmanager/defaultuserthemename'});
    }

    # query params
    if ( exists $args{'htmllibmanager/firebuglite/path'}) {
        $query_params->{'htmllibmanager.firebuglite.path'} = $self->{api_client}->to_query_value($args{'htmllibmanager/firebuglite/path'});
    }

    # query params
    if ( exists $args{'htmllibmanager/force_cq_url_info'}) {
        $query_params->{'htmllibmanager.forceCQUrlInfo'} = $self->{api_client}->to_query_value($args{'htmllibmanager/force_cq_url_info'});
    }

    # query params
    if ( exists $args{'htmllibmanager/gzip'}) {
        $query_params->{'htmllibmanager.gzip'} = $self->{api_client}->to_query_value($args{'htmllibmanager/gzip'});
    }

    # query params
    if ( exists $args{'htmllibmanager/maxage'}) {
        $query_params->{'htmllibmanager.maxage'} = $self->{api_client}->to_query_value($args{'htmllibmanager/maxage'});
    }

    # query params
    if ( exists $args{'htmllibmanager/max_data_uri_size'}) {
        $query_params->{'htmllibmanager.maxDataUriSize'} = $self->{api_client}->to_query_value($args{'htmllibmanager/max_data_uri_size'});
    }

    # query params
    if ( exists $args{'htmllibmanager/minify'}) {
        $query_params->{'htmllibmanager.minify'} = $self->{api_client}->to_query_value($args{'htmllibmanager/minify'});
    }

    # query params
    if ( exists $args{'htmllibmanager/path/list'}) {
        $query_params->{'htmllibmanager.path.list'} = $self->{api_client}->to_query_value($args{'htmllibmanager/path/list'});
    }

    # query params
    if ( exists $args{'htmllibmanager/timing'}) {
        $query_params->{'htmllibmanager.timing'} = $self->{api_client}->to_query_value($args{'htmllibmanager/timing'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWidgetImplHtmlLibraryManagerImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_widget_impl_widget_extension_provider_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $extendable/widgets  (optional)
# @param boolean $widgetextensionprovider/debug  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'extendable/widgets' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'widgetextensionprovider/debug' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_widget_impl_widget_extension_provider_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWidgetImplWidgetExtensionProviderImplInfo',
        };
}
# @return ComDayCqWidgetImplWidgetExtensionProviderImplInfo
#
sub com_day_cq_widget_impl_widget_extension_provider_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'extendable/widgets'}) {
        $query_params->{'extendable.widgets'} = $self->{api_client}->to_query_value($args{'extendable/widgets'});
    }

    # query params
    if ( exists $args{'widgetextensionprovider/debug'}) {
        $query_params->{'widgetextensionprovider.debug'} = $self->{api_client}->to_query_value($args{'widgetextensionprovider/debug'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWidgetImplWidgetExtensionProviderImplInfo', $response);
    return $_response_object;
}

#
# com_day_cq_workflow_impl_email_e_mail_notification_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $from/address  (optional)
# @param string $host/prefix  (optional)
# @param boolean $notify/onabort  (optional)
# @param boolean $notify/oncomplete  (optional)
# @param boolean $notify/oncontainercomplete  (optional)
# @param boolean $notify/useronly  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'from/address' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'host/prefix' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'notify/onabort' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'notify/oncomplete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'notify/oncontainercomplete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'notify/useronly' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_workflow_impl_email_e_mail_notification_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWorkflowImplEmailEMailNotificationServiceInfo',
        };
}
# @return ComDayCqWorkflowImplEmailEMailNotificationServiceInfo
#
sub com_day_cq_workflow_impl_email_e_mail_notification_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'from/address'}) {
        $query_params->{'from.address'} = $self->{api_client}->to_query_value($args{'from/address'});
    }

    # query params
    if ( exists $args{'host/prefix'}) {
        $query_params->{'host.prefix'} = $self->{api_client}->to_query_value($args{'host/prefix'});
    }

    # query params
    if ( exists $args{'notify/onabort'}) {
        $query_params->{'notify.onabort'} = $self->{api_client}->to_query_value($args{'notify/onabort'});
    }

    # query params
    if ( exists $args{'notify/oncomplete'}) {
        $query_params->{'notify.oncomplete'} = $self->{api_client}->to_query_value($args{'notify/oncomplete'});
    }

    # query params
    if ( exists $args{'notify/oncontainercomplete'}) {
        $query_params->{'notify.oncontainercomplete'} = $self->{api_client}->to_query_value($args{'notify/oncontainercomplete'});
    }

    # query params
    if ( exists $args{'notify/useronly'}) {
        $query_params->{'notify.useronly'} = $self->{api_client}->to_query_value($args{'notify/useronly'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWorkflowImplEmailEMailNotificationServiceInfo', $response);
    return $_response_object;
}

#
# com_day_cq_workflow_impl_email_task_e_mail_notification_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $notify/onupdate  (optional)
# @param boolean $notify/oncomplete  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'notify/onupdate' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'notify/oncomplete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_cq_workflow_impl_email_task_e_mail_notification_service' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo',
        };
}
# @return ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo
#
sub com_day_cq_workflow_impl_email_task_e_mail_notification_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'notify/onupdate'}) {
        $query_params->{'notify.onupdate'} = $self->{api_client}->to_query_value($args{'notify/onupdate'});
    }

    # query params
    if ( exists $args{'notify/oncomplete'}) {
        $query_params->{'notify.oncomplete'} = $self->{api_client}->to_query_value($args{'notify/oncomplete'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo', $response);
    return $_response_object;
}

#
# com_day_crx_security_token_impl_impl_token_authentication_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $path  (optional)
# @param string $token/required/attr  (optional)
# @param string $token/alternate/url  (optional)
# @param boolean $token/encapsulated  (optional)
# @param ARRAY[string] $skip/token/refresh  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'token/required/attr' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'token/alternate/url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'token/encapsulated' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'skip/token/refresh' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_crx_security_token_impl_impl_token_authentication_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo',
        };
}
# @return ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo
#
sub com_day_crx_security_token_impl_impl_token_authentication_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'token/required/attr'}) {
        $query_params->{'token.required.attr'} = $self->{api_client}->to_query_value($args{'token/required/attr'});
    }

    # query params
    if ( exists $args{'token/alternate/url'}) {
        $query_params->{'token.alternate.url'} = $self->{api_client}->to_query_value($args{'token/alternate/url'});
    }

    # query params
    if ( exists $args{'token/encapsulated'}) {
        $query_params->{'token.encapsulated'} = $self->{api_client}->to_query_value($args{'token/encapsulated'});
    }

    # query params
    if ( exists $args{'skip/token/refresh'}) {
        $query_params->{'skip.token.refresh'} = $self->{api_client}->to_query_value($args{'skip/token/refresh'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo', $response);
    return $_response_object;
}

#
# com_day_crx_security_token_impl_token_cleanup_task
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enable/token/cleanup/task  (optional)
# @param string $scheduler/expression  (optional)
# @param int $batch/size  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enable/token/cleanup/task' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'scheduler/expression' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'batch/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'com_day_crx_security_token_impl_token_cleanup_task' } = { 
    	summary => '',
        params => $params,
        returns => 'ComDayCrxSecurityTokenImplTokenCleanupTaskInfo',
        };
}
# @return ComDayCrxSecurityTokenImplTokenCleanupTaskInfo
#
sub com_day_crx_security_token_impl_token_cleanup_task {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enable/token/cleanup/task'}) {
        $query_params->{'enable.token.cleanup.task'} = $self->{api_client}->to_query_value($args{'enable/token/cleanup/task'});
    }

    # query params
    if ( exists $args{'scheduler/expression'}) {
        $query_params->{'scheduler.expression'} = $self->{api_client}->to_query_value($args{'scheduler/expression'});
    }

    # query params
    if ( exists $args{'batch/size'}) {
        $query_params->{'batch.size'} = $self->{api_client}->to_query_value($args{'batch/size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComDayCrxSecurityTokenImplTokenCleanupTaskInfo', $response);
    return $_response_object;
}

#
# guide_localization_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $supported_locales  (optional)
# @param ARRAY[string] $localizable_properties  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'supported_locales' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'localizable_properties' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'guide_localization_service' } = { 
    	summary => '',
        params => $params,
        returns => 'GuideLocalizationServiceInfo',
        };
}
# @return GuideLocalizationServiceInfo
#
sub guide_localization_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/Guide Localization Service';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'supported_locales'}) {
        $query_params->{'supportedLocales'} = $self->{api_client}->to_query_value($args{'supported_locales'});
    }

    # query params
    if ( exists $args{'localizable_properties'}) {
        $query_params->{'Localizable Properties'} = $self->{api_client}->to_query_value($args{'localizable_properties'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GuideLocalizationServiceInfo', $response);
    return $_response_object;
}

#
# messaging_user_component_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $priority  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'priority' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'messaging_user_component_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'MessagingUserComponentFactoryInfo',
        };
}
# @return MessagingUserComponentFactoryInfo
#
sub messaging_user_component_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/MessagingUserComponentFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'priority'}) {
        $query_params->{'priority'} = $self->{api_client}->to_query_value($args{'priority'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MessagingUserComponentFactoryInfo', $response);
    return $_response_object;
}

#
# org_apache_aries_jmx_framework_state_config
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $attribute_change_notification_enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'attribute_change_notification_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_aries_jmx_framework_state_config' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheAriesJmxFrameworkStateConfigInfo',
        };
}
# @return OrgApacheAriesJmxFrameworkStateConfigInfo
#
sub org_apache_aries_jmx_framework_state_config {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'attribute_change_notification_enabled'}) {
        $query_params->{'attributeChangeNotificationEnabled'} = $self->{api_client}->to_query_value($args{'attribute_change_notification_enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheAriesJmxFrameworkStateConfigInfo', $response);
    return $_response_object;
}

#
# org_apache_felix_eventadmin_impl_event_admin
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $org/apache/felix/eventadmin/thread_pool_size  (optional)
# @param double $org/apache/felix/eventadmin/async_to_sync_thread_ratio  (optional)
# @param int $org/apache/felix/eventadmin/timeout  (optional)
# @param boolean $org/apache/felix/eventadmin/require_topic  (optional)
# @param ARRAY[string] $org/apache/felix/eventadmin/ignore_timeout  (optional)
# @param ARRAY[string] $org/apache/felix/eventadmin/ignore_topic  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/felix/eventadmin/thread_pool_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/felix/eventadmin/async_to_sync_thread_ratio' => {
        data_type => 'double',
        description => '',
        required => '0',
    },
    'org/apache/felix/eventadmin/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/felix/eventadmin/require_topic' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'org/apache/felix/eventadmin/ignore_timeout' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/felix/eventadmin/ignore_topic' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_felix_eventadmin_impl_event_admin' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheFelixEventadminImplEventAdminInfo',
        };
}
# @return OrgApacheFelixEventadminImplEventAdminInfo
#
sub org_apache_felix_eventadmin_impl_event_admin {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'org/apache/felix/eventadmin/thread_pool_size'}) {
        $query_params->{'org.apache.felix.eventadmin.ThreadPoolSize'} = $self->{api_client}->to_query_value($args{'org/apache/felix/eventadmin/thread_pool_size'});
    }

    # query params
    if ( exists $args{'org/apache/felix/eventadmin/async_to_sync_thread_ratio'}) {
        $query_params->{'org.apache.felix.eventadmin.AsyncToSyncThreadRatio'} = $self->{api_client}->to_query_value($args{'org/apache/felix/eventadmin/async_to_sync_thread_ratio'});
    }

    # query params
    if ( exists $args{'org/apache/felix/eventadmin/timeout'}) {
        $query_params->{'org.apache.felix.eventadmin.Timeout'} = $self->{api_client}->to_query_value($args{'org/apache/felix/eventadmin/timeout'});
    }

    # query params
    if ( exists $args{'org/apache/felix/eventadmin/require_topic'}) {
        $query_params->{'org.apache.felix.eventadmin.RequireTopic'} = $self->{api_client}->to_query_value($args{'org/apache/felix/eventadmin/require_topic'});
    }

    # query params
    if ( exists $args{'org/apache/felix/eventadmin/ignore_timeout'}) {
        $query_params->{'org.apache.felix.eventadmin.IgnoreTimeout'} = $self->{api_client}->to_query_value($args{'org/apache/felix/eventadmin/ignore_timeout'});
    }

    # query params
    if ( exists $args{'org/apache/felix/eventadmin/ignore_topic'}) {
        $query_params->{'org.apache.felix.eventadmin.IgnoreTopic'} = $self->{api_client}->to_query_value($args{'org/apache/felix/eventadmin/ignore_topic'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheFelixEventadminImplEventAdminInfo', $response);
    return $_response_object;
}

#
# org_apache_felix_http
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $org/apache/felix/http/host  (optional)
# @param boolean $org/apache/felix/http/enable  (optional)
# @param int $org/osgi/service/http/port  (optional)
# @param int $org/apache/felix/http/timeout  (optional)
# @param boolean $org/apache/felix/https/enable  (optional)
# @param int $org/osgi/service/http/port/secure  (optional)
# @param string $org/apache/felix/https/keystore  (optional)
# @param string $org/apache/felix/https/keystore/password  (optional)
# @param string $org/apache/felix/https/keystore/key/password  (optional)
# @param string $org/apache/felix/https/truststore  (optional)
# @param string $org/apache/felix/https/truststore/password  (optional)
# @param string $org/apache/felix/https/clientcertificate  (optional)
# @param string $org/apache/felix/http/context_path  (optional)
# @param boolean $org/apache/felix/http/mbeans  (optional)
# @param int $org/apache/felix/http/session/timeout  (optional)
# @param int $org/apache/felix/http/jetty/threadpool/max  (optional)
# @param int $org/apache/felix/http/jetty/acceptors  (optional)
# @param int $org/apache/felix/http/jetty/selectors  (optional)
# @param int $org/apache/felix/http/jetty/header_buffer_size  (optional)
# @param int $org/apache/felix/http/jetty/request_buffer_size  (optional)
# @param int $org/apache/felix/http/jetty/response_buffer_size  (optional)
# @param int $org/apache/felix/http/jetty/max_form_size  (optional)
# @param ARRAY[string] $org/apache/felix/http/path_exclusions  (optional)
# @param ARRAY[string] $org/apache/felix/https/jetty/ciphersuites/excluded  (optional)
# @param ARRAY[string] $org/apache/felix/https/jetty/ciphersuites/included  (optional)
# @param boolean $org/apache/felix/http/jetty/send_server_header  (optional)
# @param ARRAY[string] $org/apache/felix/https/jetty/protocols/included  (optional)
# @param ARRAY[string] $org/apache/felix/https/jetty/protocols/excluded  (optional)
# @param boolean $org/apache/felix/proxy/load/balancer/connection/enable  (optional)
# @param boolean $org/apache/felix/https/jetty/renegotiate_allowed  (optional)
# @param boolean $org/apache/felix/https/jetty/session/cookie/http_only  (optional)
# @param boolean $org/apache/felix/https/jetty/session/cookie/secure  (optional)
# @param string $org/eclipse/jetty/servlet/session_id_path_parameter_name  (optional)
# @param boolean $org/eclipse/jetty/servlet/checking_remote_session_id_encoding  (optional)
# @param string $org/eclipse/jetty/servlet/session_cookie  (optional)
# @param string $org/eclipse/jetty/servlet/session_domain  (optional)
# @param string $org/eclipse/jetty/servlet/session_path  (optional)
# @param int $org/eclipse/jetty/servlet/max_age  (optional)
# @param string $org/apache/felix/http/name  (optional)
# @param boolean $org/apache/felix/jetty/gziphandler/enable  (optional)
# @param int $org/apache/felix/jetty/gzip/min_gzip_size  (optional)
# @param int $org/apache/felix/jetty/gzip/compression_level  (optional)
# @param int $org/apache/felix/jetty/gzip/inflate_buffer_size  (optional)
# @param boolean $org/apache/felix/jetty/gzip/sync_flush  (optional)
# @param ARRAY[string] $org/apache/felix/jetty/gzip/excluded_user_agents  (optional)
# @param ARRAY[string] $org/apache/felix/jetty/gzip/included_methods  (optional)
# @param ARRAY[string] $org/apache/felix/jetty/gzip/excluded_methods  (optional)
# @param ARRAY[string] $org/apache/felix/jetty/gzip/included_paths  (optional)
# @param ARRAY[string] $org/apache/felix/jetty/gzip/excluded_paths  (optional)
# @param ARRAY[string] $org/apache/felix/jetty/gzip/included_mime_types  (optional)
# @param ARRAY[string] $org/apache/felix/jetty/gzip/excluded_mime_types  (optional)
# @param boolean $org/apache/felix/http/session/invalidate  (optional)
# @param boolean $org/apache/felix/http/session/uniqueid  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/felix/http/host' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/felix/http/enable' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'org/osgi/service/http/port' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/felix/http/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/felix/https/enable' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'org/osgi/service/http/port/secure' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/felix/https/keystore' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/felix/https/keystore/password' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/felix/https/keystore/key/password' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/felix/https/truststore' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/felix/https/truststore/password' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/felix/https/clientcertificate' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/felix/http/context_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/felix/http/mbeans' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'org/apache/felix/http/session/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/felix/http/jetty/threadpool/max' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/felix/http/jetty/acceptors' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/felix/http/jetty/selectors' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/felix/http/jetty/header_buffer_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/felix/http/jetty/request_buffer_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/felix/http/jetty/response_buffer_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/felix/http/jetty/max_form_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/felix/http/path_exclusions' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/felix/https/jetty/ciphersuites/excluded' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/felix/https/jetty/ciphersuites/included' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/felix/http/jetty/send_server_header' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'org/apache/felix/https/jetty/protocols/included' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/felix/https/jetty/protocols/excluded' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/felix/proxy/load/balancer/connection/enable' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'org/apache/felix/https/jetty/renegotiate_allowed' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'org/apache/felix/https/jetty/session/cookie/http_only' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'org/apache/felix/https/jetty/session/cookie/secure' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'org/eclipse/jetty/servlet/session_id_path_parameter_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/eclipse/jetty/servlet/checking_remote_session_id_encoding' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'org/eclipse/jetty/servlet/session_cookie' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/eclipse/jetty/servlet/session_domain' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/eclipse/jetty/servlet/session_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/eclipse/jetty/servlet/max_age' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/felix/http/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/felix/jetty/gziphandler/enable' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'org/apache/felix/jetty/gzip/min_gzip_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/felix/jetty/gzip/compression_level' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/felix/jetty/gzip/inflate_buffer_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/felix/jetty/gzip/sync_flush' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'org/apache/felix/jetty/gzip/excluded_user_agents' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/felix/jetty/gzip/included_methods' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/felix/jetty/gzip/excluded_methods' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/felix/jetty/gzip/included_paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/felix/jetty/gzip/excluded_paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/felix/jetty/gzip/included_mime_types' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/felix/jetty/gzip/excluded_mime_types' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/felix/http/session/invalidate' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'org/apache/felix/http/session/uniqueid' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_felix_http' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheFelixHttpInfo',
        };
}
# @return OrgApacheFelixHttpInfo
#
sub org_apache_felix_http {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.felix.http';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'org/apache/felix/http/host'}) {
        $query_params->{'org.apache.felix.http.host'} = $self->{api_client}->to_query_value($args{'org/apache/felix/http/host'});
    }

    # query params
    if ( exists $args{'org/apache/felix/http/enable'}) {
        $query_params->{'org.apache.felix.http.enable'} = $self->{api_client}->to_query_value($args{'org/apache/felix/http/enable'});
    }

    # query params
    if ( exists $args{'org/osgi/service/http/port'}) {
        $query_params->{'org.osgi.service.http.port'} = $self->{api_client}->to_query_value($args{'org/osgi/service/http/port'});
    }

    # query params
    if ( exists $args{'org/apache/felix/http/timeout'}) {
        $query_params->{'org.apache.felix.http.timeout'} = $self->{api_client}->to_query_value($args{'org/apache/felix/http/timeout'});
    }

    # query params
    if ( exists $args{'org/apache/felix/https/enable'}) {
        $query_params->{'org.apache.felix.https.enable'} = $self->{api_client}->to_query_value($args{'org/apache/felix/https/enable'});
    }

    # query params
    if ( exists $args{'org/osgi/service/http/port/secure'}) {
        $query_params->{'org.osgi.service.http.port.secure'} = $self->{api_client}->to_query_value($args{'org/osgi/service/http/port/secure'});
    }

    # query params
    if ( exists $args{'org/apache/felix/https/keystore'}) {
        $query_params->{'org.apache.felix.https.keystore'} = $self->{api_client}->to_query_value($args{'org/apache/felix/https/keystore'});
    }

    # query params
    if ( exists $args{'org/apache/felix/https/keystore/password'}) {
        $query_params->{'org.apache.felix.https.keystore.password'} = $self->{api_client}->to_query_value($args{'org/apache/felix/https/keystore/password'});
    }

    # query params
    if ( exists $args{'org/apache/felix/https/keystore/key/password'}) {
        $query_params->{'org.apache.felix.https.keystore.key.password'} = $self->{api_client}->to_query_value($args{'org/apache/felix/https/keystore/key/password'});
    }

    # query params
    if ( exists $args{'org/apache/felix/https/truststore'}) {
        $query_params->{'org.apache.felix.https.truststore'} = $self->{api_client}->to_query_value($args{'org/apache/felix/https/truststore'});
    }

    # query params
    if ( exists $args{'org/apache/felix/https/truststore/password'}) {
        $query_params->{'org.apache.felix.https.truststore.password'} = $self->{api_client}->to_query_value($args{'org/apache/felix/https/truststore/password'});
    }

    # query params
    if ( exists $args{'org/apache/felix/https/clientcertificate'}) {
        $query_params->{'org.apache.felix.https.clientcertificate'} = $self->{api_client}->to_query_value($args{'org/apache/felix/https/clientcertificate'});
    }

    # query params
    if ( exists $args{'org/apache/felix/http/context_path'}) {
        $query_params->{'org.apache.felix.http.context_path'} = $self->{api_client}->to_query_value($args{'org/apache/felix/http/context_path'});
    }

    # query params
    if ( exists $args{'org/apache/felix/http/mbeans'}) {
        $query_params->{'org.apache.felix.http.mbeans'} = $self->{api_client}->to_query_value($args{'org/apache/felix/http/mbeans'});
    }

    # query params
    if ( exists $args{'org/apache/felix/http/session/timeout'}) {
        $query_params->{'org.apache.felix.http.session.timeout'} = $self->{api_client}->to_query_value($args{'org/apache/felix/http/session/timeout'});
    }

    # query params
    if ( exists $args{'org/apache/felix/http/jetty/threadpool/max'}) {
        $query_params->{'org.apache.felix.http.jetty.threadpool.max'} = $self->{api_client}->to_query_value($args{'org/apache/felix/http/jetty/threadpool/max'});
    }

    # query params
    if ( exists $args{'org/apache/felix/http/jetty/acceptors'}) {
        $query_params->{'org.apache.felix.http.jetty.acceptors'} = $self->{api_client}->to_query_value($args{'org/apache/felix/http/jetty/acceptors'});
    }

    # query params
    if ( exists $args{'org/apache/felix/http/jetty/selectors'}) {
        $query_params->{'org.apache.felix.http.jetty.selectors'} = $self->{api_client}->to_query_value($args{'org/apache/felix/http/jetty/selectors'});
    }

    # query params
    if ( exists $args{'org/apache/felix/http/jetty/header_buffer_size'}) {
        $query_params->{'org.apache.felix.http.jetty.headerBufferSize'} = $self->{api_client}->to_query_value($args{'org/apache/felix/http/jetty/header_buffer_size'});
    }

    # query params
    if ( exists $args{'org/apache/felix/http/jetty/request_buffer_size'}) {
        $query_params->{'org.apache.felix.http.jetty.requestBufferSize'} = $self->{api_client}->to_query_value($args{'org/apache/felix/http/jetty/request_buffer_size'});
    }

    # query params
    if ( exists $args{'org/apache/felix/http/jetty/response_buffer_size'}) {
        $query_params->{'org.apache.felix.http.jetty.responseBufferSize'} = $self->{api_client}->to_query_value($args{'org/apache/felix/http/jetty/response_buffer_size'});
    }

    # query params
    if ( exists $args{'org/apache/felix/http/jetty/max_form_size'}) {
        $query_params->{'org.apache.felix.http.jetty.maxFormSize'} = $self->{api_client}->to_query_value($args{'org/apache/felix/http/jetty/max_form_size'});
    }

    # query params
    if ( exists $args{'org/apache/felix/http/path_exclusions'}) {
        $query_params->{'org.apache.felix.http.path_exclusions'} = $self->{api_client}->to_query_value($args{'org/apache/felix/http/path_exclusions'});
    }

    # query params
    if ( exists $args{'org/apache/felix/https/jetty/ciphersuites/excluded'}) {
        $query_params->{'org.apache.felix.https.jetty.ciphersuites.excluded'} = $self->{api_client}->to_query_value($args{'org/apache/felix/https/jetty/ciphersuites/excluded'});
    }

    # query params
    if ( exists $args{'org/apache/felix/https/jetty/ciphersuites/included'}) {
        $query_params->{'org.apache.felix.https.jetty.ciphersuites.included'} = $self->{api_client}->to_query_value($args{'org/apache/felix/https/jetty/ciphersuites/included'});
    }

    # query params
    if ( exists $args{'org/apache/felix/http/jetty/send_server_header'}) {
        $query_params->{'org.apache.felix.http.jetty.sendServerHeader'} = $self->{api_client}->to_query_value($args{'org/apache/felix/http/jetty/send_server_header'});
    }

    # query params
    if ( exists $args{'org/apache/felix/https/jetty/protocols/included'}) {
        $query_params->{'org.apache.felix.https.jetty.protocols.included'} = $self->{api_client}->to_query_value($args{'org/apache/felix/https/jetty/protocols/included'});
    }

    # query params
    if ( exists $args{'org/apache/felix/https/jetty/protocols/excluded'}) {
        $query_params->{'org.apache.felix.https.jetty.protocols.excluded'} = $self->{api_client}->to_query_value($args{'org/apache/felix/https/jetty/protocols/excluded'});
    }

    # query params
    if ( exists $args{'org/apache/felix/proxy/load/balancer/connection/enable'}) {
        $query_params->{'org.apache.felix.proxy.load.balancer.connection.enable'} = $self->{api_client}->to_query_value($args{'org/apache/felix/proxy/load/balancer/connection/enable'});
    }

    # query params
    if ( exists $args{'org/apache/felix/https/jetty/renegotiate_allowed'}) {
        $query_params->{'org.apache.felix.https.jetty.renegotiateAllowed'} = $self->{api_client}->to_query_value($args{'org/apache/felix/https/jetty/renegotiate_allowed'});
    }

    # query params
    if ( exists $args{'org/apache/felix/https/jetty/session/cookie/http_only'}) {
        $query_params->{'org.apache.felix.https.jetty.session.cookie.httpOnly'} = $self->{api_client}->to_query_value($args{'org/apache/felix/https/jetty/session/cookie/http_only'});
    }

    # query params
    if ( exists $args{'org/apache/felix/https/jetty/session/cookie/secure'}) {
        $query_params->{'org.apache.felix.https.jetty.session.cookie.secure'} = $self->{api_client}->to_query_value($args{'org/apache/felix/https/jetty/session/cookie/secure'});
    }

    # query params
    if ( exists $args{'org/eclipse/jetty/servlet/session_id_path_parameter_name'}) {
        $query_params->{'org.eclipse.jetty.servlet.SessionIdPathParameterName'} = $self->{api_client}->to_query_value($args{'org/eclipse/jetty/servlet/session_id_path_parameter_name'});
    }

    # query params
    if ( exists $args{'org/eclipse/jetty/servlet/checking_remote_session_id_encoding'}) {
        $query_params->{'org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding'} = $self->{api_client}->to_query_value($args{'org/eclipse/jetty/servlet/checking_remote_session_id_encoding'});
    }

    # query params
    if ( exists $args{'org/eclipse/jetty/servlet/session_cookie'}) {
        $query_params->{'org.eclipse.jetty.servlet.SessionCookie'} = $self->{api_client}->to_query_value($args{'org/eclipse/jetty/servlet/session_cookie'});
    }

    # query params
    if ( exists $args{'org/eclipse/jetty/servlet/session_domain'}) {
        $query_params->{'org.eclipse.jetty.servlet.SessionDomain'} = $self->{api_client}->to_query_value($args{'org/eclipse/jetty/servlet/session_domain'});
    }

    # query params
    if ( exists $args{'org/eclipse/jetty/servlet/session_path'}) {
        $query_params->{'org.eclipse.jetty.servlet.SessionPath'} = $self->{api_client}->to_query_value($args{'org/eclipse/jetty/servlet/session_path'});
    }

    # query params
    if ( exists $args{'org/eclipse/jetty/servlet/max_age'}) {
        $query_params->{'org.eclipse.jetty.servlet.MaxAge'} = $self->{api_client}->to_query_value($args{'org/eclipse/jetty/servlet/max_age'});
    }

    # query params
    if ( exists $args{'org/apache/felix/http/name'}) {
        $query_params->{'org.apache.felix.http.name'} = $self->{api_client}->to_query_value($args{'org/apache/felix/http/name'});
    }

    # query params
    if ( exists $args{'org/apache/felix/jetty/gziphandler/enable'}) {
        $query_params->{'org.apache.felix.jetty.gziphandler.enable'} = $self->{api_client}->to_query_value($args{'org/apache/felix/jetty/gziphandler/enable'});
    }

    # query params
    if ( exists $args{'org/apache/felix/jetty/gzip/min_gzip_size'}) {
        $query_params->{'org.apache.felix.jetty.gzip.minGzipSize'} = $self->{api_client}->to_query_value($args{'org/apache/felix/jetty/gzip/min_gzip_size'});
    }

    # query params
    if ( exists $args{'org/apache/felix/jetty/gzip/compression_level'}) {
        $query_params->{'org.apache.felix.jetty.gzip.compressionLevel'} = $self->{api_client}->to_query_value($args{'org/apache/felix/jetty/gzip/compression_level'});
    }

    # query params
    if ( exists $args{'org/apache/felix/jetty/gzip/inflate_buffer_size'}) {
        $query_params->{'org.apache.felix.jetty.gzip.inflateBufferSize'} = $self->{api_client}->to_query_value($args{'org/apache/felix/jetty/gzip/inflate_buffer_size'});
    }

    # query params
    if ( exists $args{'org/apache/felix/jetty/gzip/sync_flush'}) {
        $query_params->{'org.apache.felix.jetty.gzip.syncFlush'} = $self->{api_client}->to_query_value($args{'org/apache/felix/jetty/gzip/sync_flush'});
    }

    # query params
    if ( exists $args{'org/apache/felix/jetty/gzip/excluded_user_agents'}) {
        $query_params->{'org.apache.felix.jetty.gzip.excludedUserAgents'} = $self->{api_client}->to_query_value($args{'org/apache/felix/jetty/gzip/excluded_user_agents'});
    }

    # query params
    if ( exists $args{'org/apache/felix/jetty/gzip/included_methods'}) {
        $query_params->{'org.apache.felix.jetty.gzip.includedMethods'} = $self->{api_client}->to_query_value($args{'org/apache/felix/jetty/gzip/included_methods'});
    }

    # query params
    if ( exists $args{'org/apache/felix/jetty/gzip/excluded_methods'}) {
        $query_params->{'org.apache.felix.jetty.gzip.excludedMethods'} = $self->{api_client}->to_query_value($args{'org/apache/felix/jetty/gzip/excluded_methods'});
    }

    # query params
    if ( exists $args{'org/apache/felix/jetty/gzip/included_paths'}) {
        $query_params->{'org.apache.felix.jetty.gzip.includedPaths'} = $self->{api_client}->to_query_value($args{'org/apache/felix/jetty/gzip/included_paths'});
    }

    # query params
    if ( exists $args{'org/apache/felix/jetty/gzip/excluded_paths'}) {
        $query_params->{'org.apache.felix.jetty.gzip.excludedPaths'} = $self->{api_client}->to_query_value($args{'org/apache/felix/jetty/gzip/excluded_paths'});
    }

    # query params
    if ( exists $args{'org/apache/felix/jetty/gzip/included_mime_types'}) {
        $query_params->{'org.apache.felix.jetty.gzip.includedMimeTypes'} = $self->{api_client}->to_query_value($args{'org/apache/felix/jetty/gzip/included_mime_types'});
    }

    # query params
    if ( exists $args{'org/apache/felix/jetty/gzip/excluded_mime_types'}) {
        $query_params->{'org.apache.felix.jetty.gzip.excludedMimeTypes'} = $self->{api_client}->to_query_value($args{'org/apache/felix/jetty/gzip/excluded_mime_types'});
    }

    # query params
    if ( exists $args{'org/apache/felix/http/session/invalidate'}) {
        $query_params->{'org.apache.felix.http.session.invalidate'} = $self->{api_client}->to_query_value($args{'org/apache/felix/http/session/invalidate'});
    }

    # query params
    if ( exists $args{'org/apache/felix/http/session/uniqueid'}) {
        $query_params->{'org.apache.felix.http.session.uniqueid'} = $self->{api_client}->to_query_value($args{'org/apache/felix/http/session/uniqueid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheFelixHttpInfo', $response);
    return $_response_object;
}

#
# org_apache_felix_http_sslfilter_ssl_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $ssl_forward/header  (optional)
# @param string $ssl_forward/value  (optional)
# @param string $ssl_forward_cert/header  (optional)
# @param boolean $rewrite/absolute/urls  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'ssl_forward/header' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'ssl_forward/value' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'ssl_forward_cert/header' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'rewrite/absolute/urls' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_felix_http_sslfilter_ssl_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheFelixHttpSslfilterSslFilterInfo',
        };
}
# @return OrgApacheFelixHttpSslfilterSslFilterInfo
#
sub org_apache_felix_http_sslfilter_ssl_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'ssl_forward/header'}) {
        $query_params->{'ssl-forward.header'} = $self->{api_client}->to_query_value($args{'ssl_forward/header'});
    }

    # query params
    if ( exists $args{'ssl_forward/value'}) {
        $query_params->{'ssl-forward.value'} = $self->{api_client}->to_query_value($args{'ssl_forward/value'});
    }

    # query params
    if ( exists $args{'ssl_forward_cert/header'}) {
        $query_params->{'ssl-forward-cert.header'} = $self->{api_client}->to_query_value($args{'ssl_forward_cert/header'});
    }

    # query params
    if ( exists $args{'rewrite/absolute/urls'}) {
        $query_params->{'rewrite.absolute.urls'} = $self->{api_client}->to_query_value($args{'rewrite/absolute/urls'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheFelixHttpSslfilterSslFilterInfo', $response);
    return $_response_object;
}

#
# org_apache_felix_jaas_configuration_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $jaas/control_flag  (optional)
# @param int $jaas/ranking  (optional)
# @param string $jaas/realm_name  (optional)
# @param string $jaas/classname  (optional)
# @param ARRAY[string] $jaas/options  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'jaas/control_flag' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jaas/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'jaas/realm_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jaas/classname' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jaas/options' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_felix_jaas_configuration_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheFelixJaasConfigurationFactoryInfo',
        };
}
# @return OrgApacheFelixJaasConfigurationFactoryInfo
#
sub org_apache_felix_jaas_configuration_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.felix.jaas.Configuration.factory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'jaas/control_flag'}) {
        $query_params->{'jaas.controlFlag'} = $self->{api_client}->to_query_value($args{'jaas/control_flag'});
    }

    # query params
    if ( exists $args{'jaas/ranking'}) {
        $query_params->{'jaas.ranking'} = $self->{api_client}->to_query_value($args{'jaas/ranking'});
    }

    # query params
    if ( exists $args{'jaas/realm_name'}) {
        $query_params->{'jaas.realmName'} = $self->{api_client}->to_query_value($args{'jaas/realm_name'});
    }

    # query params
    if ( exists $args{'jaas/classname'}) {
        $query_params->{'jaas.classname'} = $self->{api_client}->to_query_value($args{'jaas/classname'});
    }

    # query params
    if ( exists $args{'jaas/options'}) {
        $query_params->{'jaas.options'} = $self->{api_client}->to_query_value($args{'jaas/options'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheFelixJaasConfigurationFactoryInfo', $response);
    return $_response_object;
}

#
# org_apache_felix_jaas_configuration_spi
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $jaas/default_realm_name  (optional)
# @param string $jaas/config_provider_name  (optional)
# @param string $jaas/global_config_policy  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'jaas/default_realm_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jaas/config_provider_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jaas/global_config_policy' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_felix_jaas_configuration_spi' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheFelixJaasConfigurationSpiInfo',
        };
}
# @return OrgApacheFelixJaasConfigurationSpiInfo
#
sub org_apache_felix_jaas_configuration_spi {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'jaas/default_realm_name'}) {
        $query_params->{'jaas.defaultRealmName'} = $self->{api_client}->to_query_value($args{'jaas/default_realm_name'});
    }

    # query params
    if ( exists $args{'jaas/config_provider_name'}) {
        $query_params->{'jaas.configProviderName'} = $self->{api_client}->to_query_value($args{'jaas/config_provider_name'});
    }

    # query params
    if ( exists $args{'jaas/global_config_policy'}) {
        $query_params->{'jaas.globalConfigPolicy'} = $self->{api_client}->to_query_value($args{'jaas/global_config_policy'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheFelixJaasConfigurationSpiInfo', $response);
    return $_response_object;
}

#
# org_apache_felix_scr_scr_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $ds/loglevel  (optional)
# @param boolean $ds/factory/enabled  (optional)
# @param boolean $ds/delayed/keep_instances  (optional)
# @param int $ds/lock/timeout/milliseconds  (optional)
# @param int $ds/stop/timeout/milliseconds  (optional)
# @param boolean $ds/global/extender  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'ds/loglevel' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'ds/factory/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'ds/delayed/keep_instances' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'ds/lock/timeout/milliseconds' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'ds/stop/timeout/milliseconds' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'ds/global/extender' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_felix_scr_scr_service' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheFelixScrScrServiceInfo',
        };
}
# @return OrgApacheFelixScrScrServiceInfo
#
sub org_apache_felix_scr_scr_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.felix.scr.ScrService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'ds/loglevel'}) {
        $query_params->{'ds.loglevel'} = $self->{api_client}->to_query_value($args{'ds/loglevel'});
    }

    # query params
    if ( exists $args{'ds/factory/enabled'}) {
        $query_params->{'ds.factory.enabled'} = $self->{api_client}->to_query_value($args{'ds/factory/enabled'});
    }

    # query params
    if ( exists $args{'ds/delayed/keep_instances'}) {
        $query_params->{'ds.delayed.keepInstances'} = $self->{api_client}->to_query_value($args{'ds/delayed/keep_instances'});
    }

    # query params
    if ( exists $args{'ds/lock/timeout/milliseconds'}) {
        $query_params->{'ds.lock.timeout.milliseconds'} = $self->{api_client}->to_query_value($args{'ds/lock/timeout/milliseconds'});
    }

    # query params
    if ( exists $args{'ds/stop/timeout/milliseconds'}) {
        $query_params->{'ds.stop.timeout.milliseconds'} = $self->{api_client}->to_query_value($args{'ds/stop/timeout/milliseconds'});
    }

    # query params
    if ( exists $args{'ds/global/extender'}) {
        $query_params->{'ds.global.extender'} = $self->{api_client}->to_query_value($args{'ds/global/extender'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheFelixScrScrServiceInfo', $response);
    return $_response_object;
}

#
# org_apache_felix_systemready_impl_components_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $components/list  (optional)
# @param string $type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'components/list' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_felix_systemready_impl_components_check' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheFelixSystemreadyImplComponentsCheckInfo',
        };
}
# @return OrgApacheFelixSystemreadyImplComponentsCheckInfo
#
sub org_apache_felix_systemready_impl_components_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'components/list'}) {
        $query_params->{'components.list'} = $self->{api_client}->to_query_value($args{'components/list'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheFelixSystemreadyImplComponentsCheckInfo', $response);
    return $_response_object;
}

#
# org_apache_felix_systemready_impl_framework_start_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $timeout  (optional)
# @param int $target/start/level  (optional)
# @param string $target/start/level/prop/name  (optional)
# @param string $type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'target/start/level' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'target/start/level/prop/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_felix_systemready_impl_framework_start_check' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo',
        };
}
# @return OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo
#
sub org_apache_felix_systemready_impl_framework_start_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'timeout'}) {
        $query_params->{'timeout'} = $self->{api_client}->to_query_value($args{'timeout'});
    }

    # query params
    if ( exists $args{'target/start/level'}) {
        $query_params->{'target.start.level'} = $self->{api_client}->to_query_value($args{'target/start/level'});
    }

    # query params
    if ( exists $args{'target/start/level/prop/name'}) {
        $query_params->{'target.start.level.prop.name'} = $self->{api_client}->to_query_value($args{'target/start/level/prop/name'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo', $response);
    return $_response_object;
}

#
# org_apache_felix_systemready_impl_services_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $services/list  (optional)
# @param string $type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'services/list' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_felix_systemready_impl_services_check' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheFelixSystemreadyImplServicesCheckInfo',
        };
}
# @return OrgApacheFelixSystemreadyImplServicesCheckInfo
#
sub org_apache_felix_systemready_impl_services_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'services/list'}) {
        $query_params->{'services.list'} = $self->{api_client}->to_query_value($args{'services/list'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheFelixSystemreadyImplServicesCheckInfo', $response);
    return $_response_object;
}

#
# org_apache_felix_systemready_impl_servlet_system_alive_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $osgi/http/whiteboard/servlet/pattern  (optional)
# @param string $osgi/http/whiteboard/context/select  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'osgi/http/whiteboard/servlet/pattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'osgi/http/whiteboard/context/select' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_felix_systemready_impl_servlet_system_alive_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo',
        };
}
# @return OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo
#
sub org_apache_felix_systemready_impl_servlet_system_alive_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'osgi/http/whiteboard/servlet/pattern'}) {
        $query_params->{'osgi.http.whiteboard.servlet.pattern'} = $self->{api_client}->to_query_value($args{'osgi/http/whiteboard/servlet/pattern'});
    }

    # query params
    if ( exists $args{'osgi/http/whiteboard/context/select'}) {
        $query_params->{'osgi.http.whiteboard.context.select'} = $self->{api_client}->to_query_value($args{'osgi/http/whiteboard/context/select'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo', $response);
    return $_response_object;
}

#
# org_apache_felix_systemready_impl_servlet_system_ready_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $osgi/http/whiteboard/servlet/pattern  (optional)
# @param string $osgi/http/whiteboard/context/select  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'osgi/http/whiteboard/servlet/pattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'osgi/http/whiteboard/context/select' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_felix_systemready_impl_servlet_system_ready_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo',
        };
}
# @return OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo
#
sub org_apache_felix_systemready_impl_servlet_system_ready_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'osgi/http/whiteboard/servlet/pattern'}) {
        $query_params->{'osgi.http.whiteboard.servlet.pattern'} = $self->{api_client}->to_query_value($args{'osgi/http/whiteboard/servlet/pattern'});
    }

    # query params
    if ( exists $args{'osgi/http/whiteboard/context/select'}) {
        $query_params->{'osgi.http.whiteboard.context.select'} = $self->{api_client}->to_query_value($args{'osgi/http/whiteboard/context/select'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo', $response);
    return $_response_object;
}

#
# org_apache_felix_systemready_system_ready_monitor
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $poll/interval  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'poll/interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_felix_systemready_system_ready_monitor' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheFelixSystemreadySystemReadyMonitorInfo',
        };
}
# @return OrgApacheFelixSystemreadySystemReadyMonitorInfo
#
sub org_apache_felix_systemready_system_ready_monitor {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'poll/interval'}) {
        $query_params->{'poll.interval'} = $self->{api_client}->to_query_value($args{'poll/interval'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheFelixSystemreadySystemReadyMonitorInfo', $response);
    return $_response_object;
}

#
# org_apache_felix_webconsole_internal_servlet_osgi_manager
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $manager/root  (optional)
# @param string $http/service/filter  (optional)
# @param string $default/render  (optional)
# @param string $realm  (optional)
# @param string $username  (optional)
# @param string $password  (optional)
# @param string $category  (optional)
# @param string $locale  (optional)
# @param int $loglevel  (optional)
# @param string $plugins  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'manager/root' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'http/service/filter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default/render' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'realm' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'username' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'password' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'category' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'locale' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'loglevel' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'plugins' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_felix_webconsole_internal_servlet_osgi_manager' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo',
        };
}
# @return OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo
#
sub org_apache_felix_webconsole_internal_servlet_osgi_manager {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'manager/root'}) {
        $query_params->{'manager.root'} = $self->{api_client}->to_query_value($args{'manager/root'});
    }

    # query params
    if ( exists $args{'http/service/filter'}) {
        $query_params->{'http.service.filter'} = $self->{api_client}->to_query_value($args{'http/service/filter'});
    }

    # query params
    if ( exists $args{'default/render'}) {
        $query_params->{'default.render'} = $self->{api_client}->to_query_value($args{'default/render'});
    }

    # query params
    if ( exists $args{'realm'}) {
        $query_params->{'realm'} = $self->{api_client}->to_query_value($args{'realm'});
    }

    # query params
    if ( exists $args{'username'}) {
        $query_params->{'username'} = $self->{api_client}->to_query_value($args{'username'});
    }

    # query params
    if ( exists $args{'password'}) {
        $query_params->{'password'} = $self->{api_client}->to_query_value($args{'password'});
    }

    # query params
    if ( exists $args{'category'}) {
        $query_params->{'category'} = $self->{api_client}->to_query_value($args{'category'});
    }

    # query params
    if ( exists $args{'locale'}) {
        $query_params->{'locale'} = $self->{api_client}->to_query_value($args{'locale'});
    }

    # query params
    if ( exists $args{'loglevel'}) {
        $query_params->{'loglevel'} = $self->{api_client}->to_query_value($args{'loglevel'});
    }

    # query params
    if ( exists $args{'plugins'}) {
        $query_params->{'plugins'} = $self->{api_client}->to_query_value($args{'plugins'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo', $response);
    return $_response_object;
}

#
# org_apache_felix_webconsole_plugins_event_internal_plugin_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $max/size  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'max/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_felix_webconsole_plugins_event_internal_plugin_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo',
        };
}
# @return OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo
#
sub org_apache_felix_webconsole_plugins_event_internal_plugin_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'max/size'}) {
        $query_params->{'max.size'} = $self->{api_client}->to_query_value($args{'max/size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo', $response);
    return $_response_object;
}

#
# org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $felix/memoryusage/dump/threshold  (optional)
# @param int $felix/memoryusage/dump/interval  (optional)
# @param string $felix/memoryusage/dump/location  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'felix/memoryusage/dump/threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'felix/memoryusage/dump/interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'felix/memoryusage/dump/location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo',
        };
}
# @return OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo
#
sub org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'felix/memoryusage/dump/threshold'}) {
        $query_params->{'felix.memoryusage.dump.threshold'} = $self->{api_client}->to_query_value($args{'felix/memoryusage/dump/threshold'});
    }

    # query params
    if ( exists $args{'felix/memoryusage/dump/interval'}) {
        $query_params->{'felix.memoryusage.dump.interval'} = $self->{api_client}->to_query_value($args{'felix/memoryusage/dump/interval'});
    }

    # query params
    if ( exists $args{'felix/memoryusage/dump/location'}) {
        $query_params->{'felix.memoryusage.dump.location'} = $self->{api_client}->to_query_value($args{'felix/memoryusage/dump/location'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo', $response);
    return $_response_object;
}

#
# org_apache_http_proxyconfigurator
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $proxy/enabled  (optional)
# @param string $proxy/host  (optional)
# @param int $proxy/port  (optional)
# @param string $proxy/user  (optional)
# @param string $proxy/password  (optional)
# @param ARRAY[string] $proxy/exceptions  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'proxy/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'proxy/host' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'proxy/port' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'proxy/user' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'proxy/password' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'proxy/exceptions' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_http_proxyconfigurator' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheHttpProxyconfiguratorInfo',
        };
}
# @return OrgApacheHttpProxyconfiguratorInfo
#
sub org_apache_http_proxyconfigurator {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.http.proxyconfigurator';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'proxy/enabled'}) {
        $query_params->{'proxy.enabled'} = $self->{api_client}->to_query_value($args{'proxy/enabled'});
    }

    # query params
    if ( exists $args{'proxy/host'}) {
        $query_params->{'proxy.host'} = $self->{api_client}->to_query_value($args{'proxy/host'});
    }

    # query params
    if ( exists $args{'proxy/port'}) {
        $query_params->{'proxy.port'} = $self->{api_client}->to_query_value($args{'proxy/port'});
    }

    # query params
    if ( exists $args{'proxy/user'}) {
        $query_params->{'proxy.user'} = $self->{api_client}->to_query_value($args{'proxy/user'});
    }

    # query params
    if ( exists $args{'proxy/password'}) {
        $query_params->{'proxy.password'} = $self->{api_client}->to_query_value($args{'proxy/password'});
    }

    # query params
    if ( exists $args{'proxy/exceptions'}) {
        $query_params->{'proxy.exceptions'} = $self->{api_client}->to_query_value($args{'proxy/exceptions'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheHttpProxyconfiguratorInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $dir  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'dir' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo',
        };
}
# @return OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo
#
sub org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'dir'}) {
        $query_params->{'dir'} = $self->{api_client}->to_query_value($args{'dir'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $path  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo',
        };
}
# @return OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo
#
sub org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_plugins_document_document_node_store_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $mongouri  (optional)
# @param string $db  (optional)
# @param boolean $socket_keep_alive  (optional)
# @param int $cache  (optional)
# @param int $node_cache_percentage  (optional)
# @param int $prev_doc_cache_percentage  (optional)
# @param int $children_cache_percentage  (optional)
# @param int $diff_cache_percentage  (optional)
# @param int $cache_segment_count  (optional)
# @param int $cache_stack_move_distance  (optional)
# @param int $blob_cache_size  (optional)
# @param string $persistent_cache  (optional)
# @param string $journal_cache  (optional)
# @param boolean $custom_blob_store  (optional)
# @param int $journal_gc_interval  (optional)
# @param int $journal_gc_max_age  (optional)
# @param boolean $prefetch_external_changes  (optional)
# @param string $role  (optional)
# @param int $version_gc_max_age_in_secs  (optional)
# @param string $version_gc_expression  (optional)
# @param int $version_gc_time_limit_in_secs  (optional)
# @param int $blob_gc_max_age_in_secs  (optional)
# @param int $blob_track_snapshot_interval_in_secs  (optional)
# @param string $repository/home  (optional)
# @param int $max_replication_lag_in_secs  (optional)
# @param string $document_store_type  (optional)
# @param boolean $bundling_disabled  (optional)
# @param int $update_limit  (optional)
# @param ARRAY[string] $persistent_cache_includes  (optional)
# @param string $lease_check_mode  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'mongouri' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'db' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'socket_keep_alive' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cache' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'node_cache_percentage' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'prev_doc_cache_percentage' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'children_cache_percentage' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'diff_cache_percentage' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cache_segment_count' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cache_stack_move_distance' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'blob_cache_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'persistent_cache' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'journal_cache' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'custom_blob_store' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'journal_gc_interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'journal_gc_max_age' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'prefetch_external_changes' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'role' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'version_gc_max_age_in_secs' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'version_gc_expression' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'version_gc_time_limit_in_secs' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'blob_gc_max_age_in_secs' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'blob_track_snapshot_interval_in_secs' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'repository/home' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'max_replication_lag_in_secs' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'document_store_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'bundling_disabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'update_limit' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'persistent_cache_includes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'lease_check_mode' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_plugins_document_document_node_store_service' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo',
        };
}
# @return OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo
#
sub org_apache_jackrabbit_oak_plugins_document_document_node_store_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'mongouri'}) {
        $query_params->{'mongouri'} = $self->{api_client}->to_query_value($args{'mongouri'});
    }

    # query params
    if ( exists $args{'db'}) {
        $query_params->{'db'} = $self->{api_client}->to_query_value($args{'db'});
    }

    # query params
    if ( exists $args{'socket_keep_alive'}) {
        $query_params->{'socketKeepAlive'} = $self->{api_client}->to_query_value($args{'socket_keep_alive'});
    }

    # query params
    if ( exists $args{'cache'}) {
        $query_params->{'cache'} = $self->{api_client}->to_query_value($args{'cache'});
    }

    # query params
    if ( exists $args{'node_cache_percentage'}) {
        $query_params->{'nodeCachePercentage'} = $self->{api_client}->to_query_value($args{'node_cache_percentage'});
    }

    # query params
    if ( exists $args{'prev_doc_cache_percentage'}) {
        $query_params->{'prevDocCachePercentage'} = $self->{api_client}->to_query_value($args{'prev_doc_cache_percentage'});
    }

    # query params
    if ( exists $args{'children_cache_percentage'}) {
        $query_params->{'childrenCachePercentage'} = $self->{api_client}->to_query_value($args{'children_cache_percentage'});
    }

    # query params
    if ( exists $args{'diff_cache_percentage'}) {
        $query_params->{'diffCachePercentage'} = $self->{api_client}->to_query_value($args{'diff_cache_percentage'});
    }

    # query params
    if ( exists $args{'cache_segment_count'}) {
        $query_params->{'cacheSegmentCount'} = $self->{api_client}->to_query_value($args{'cache_segment_count'});
    }

    # query params
    if ( exists $args{'cache_stack_move_distance'}) {
        $query_params->{'cacheStackMoveDistance'} = $self->{api_client}->to_query_value($args{'cache_stack_move_distance'});
    }

    # query params
    if ( exists $args{'blob_cache_size'}) {
        $query_params->{'blobCacheSize'} = $self->{api_client}->to_query_value($args{'blob_cache_size'});
    }

    # query params
    if ( exists $args{'persistent_cache'}) {
        $query_params->{'persistentCache'} = $self->{api_client}->to_query_value($args{'persistent_cache'});
    }

    # query params
    if ( exists $args{'journal_cache'}) {
        $query_params->{'journalCache'} = $self->{api_client}->to_query_value($args{'journal_cache'});
    }

    # query params
    if ( exists $args{'custom_blob_store'}) {
        $query_params->{'customBlobStore'} = $self->{api_client}->to_query_value($args{'custom_blob_store'});
    }

    # query params
    if ( exists $args{'journal_gc_interval'}) {
        $query_params->{'journalGCInterval'} = $self->{api_client}->to_query_value($args{'journal_gc_interval'});
    }

    # query params
    if ( exists $args{'journal_gc_max_age'}) {
        $query_params->{'journalGCMaxAge'} = $self->{api_client}->to_query_value($args{'journal_gc_max_age'});
    }

    # query params
    if ( exists $args{'prefetch_external_changes'}) {
        $query_params->{'prefetchExternalChanges'} = $self->{api_client}->to_query_value($args{'prefetch_external_changes'});
    }

    # query params
    if ( exists $args{'role'}) {
        $query_params->{'role'} = $self->{api_client}->to_query_value($args{'role'});
    }

    # query params
    if ( exists $args{'version_gc_max_age_in_secs'}) {
        $query_params->{'versionGcMaxAgeInSecs'} = $self->{api_client}->to_query_value($args{'version_gc_max_age_in_secs'});
    }

    # query params
    if ( exists $args{'version_gc_expression'}) {
        $query_params->{'versionGCExpression'} = $self->{api_client}->to_query_value($args{'version_gc_expression'});
    }

    # query params
    if ( exists $args{'version_gc_time_limit_in_secs'}) {
        $query_params->{'versionGCTimeLimitInSecs'} = $self->{api_client}->to_query_value($args{'version_gc_time_limit_in_secs'});
    }

    # query params
    if ( exists $args{'blob_gc_max_age_in_secs'}) {
        $query_params->{'blobGcMaxAgeInSecs'} = $self->{api_client}->to_query_value($args{'blob_gc_max_age_in_secs'});
    }

    # query params
    if ( exists $args{'blob_track_snapshot_interval_in_secs'}) {
        $query_params->{'blobTrackSnapshotIntervalInSecs'} = $self->{api_client}->to_query_value($args{'blob_track_snapshot_interval_in_secs'});
    }

    # query params
    if ( exists $args{'repository/home'}) {
        $query_params->{'repository.home'} = $self->{api_client}->to_query_value($args{'repository/home'});
    }

    # query params
    if ( exists $args{'max_replication_lag_in_secs'}) {
        $query_params->{'maxReplicationLagInSecs'} = $self->{api_client}->to_query_value($args{'max_replication_lag_in_secs'});
    }

    # query params
    if ( exists $args{'document_store_type'}) {
        $query_params->{'documentStoreType'} = $self->{api_client}->to_query_value($args{'document_store_type'});
    }

    # query params
    if ( exists $args{'bundling_disabled'}) {
        $query_params->{'bundlingDisabled'} = $self->{api_client}->to_query_value($args{'bundling_disabled'});
    }

    # query params
    if ( exists $args{'update_limit'}) {
        $query_params->{'updateLimit'} = $self->{api_client}->to_query_value($args{'update_limit'});
    }

    # query params
    if ( exists $args{'persistent_cache_includes'}) {
        $query_params->{'persistentCacheIncludes'} = $self->{api_client}->to_query_value($args{'persistent_cache_includes'});
    }

    # query params
    if ( exists $args{'lease_check_mode'}) {
        $query_params->{'leaseCheckMode'} = $self->{api_client}->to_query_value($args{'lease_check_mode'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $persistent_cache_includes  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'persistent_cache_includes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo',
        };
}
# @return OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo
#
sub org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'persistent_cache_includes'}) {
        $query_params->{'persistentCacheIncludes'} = $self->{api_client}->to_query_value($args{'persistent_cache_includes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $included_paths  (optional)
# @param boolean $enable_async_observer  (optional)
# @param int $observer_queue_size  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'included_paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enable_async_observer' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'observer_queue_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo',
        };
}
# @return OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo
#
sub org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'included_paths'}) {
        $query_params->{'includedPaths'} = $self->{api_client}->to_query_value($args{'included_paths'});
    }

    # query params
    if ( exists $args{'enable_async_observer'}) {
        $query_params->{'enableAsyncObserver'} = $self->{api_client}->to_query_value($args{'enable_async_observer'});
    }

    # query params
    if ( exists $args{'observer_queue_size'}) {
        $query_params->{'observerQueueSize'} = $self->{api_client}->to_query_value($args{'observer_queue_size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_plugins_index_async_indexer_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $async_configs  (optional)
# @param int $lease_time_out_minutes  (optional)
# @param int $failing_index_timeout_seconds  (optional)
# @param int $error_warn_interval_seconds  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'async_configs' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'lease_time_out_minutes' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'failing_index_timeout_seconds' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'error_warn_interval_seconds' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_plugins_index_async_indexer_service' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo',
        };
}
# @return OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo
#
sub org_apache_jackrabbit_oak_plugins_index_async_indexer_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'async_configs'}) {
        $query_params->{'asyncConfigs'} = $self->{api_client}->to_query_value($args{'async_configs'});
    }

    # query params
    if ( exists $args{'lease_time_out_minutes'}) {
        $query_params->{'leaseTimeOutMinutes'} = $self->{api_client}->to_query_value($args{'lease_time_out_minutes'});
    }

    # query params
    if ( exists $args{'failing_index_timeout_seconds'}) {
        $query_params->{'failingIndexTimeoutSeconds'} = $self->{api_client}->to_query_value($args{'failing_index_timeout_seconds'});
    }

    # query params
    if ( exists $args{'error_warn_interval_seconds'}) {
        $query_params->{'errorWarnIntervalSeconds'} = $self->{api_client}->to_query_value($args{'error_warn_interval_seconds'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $disabled  (optional)
# @param boolean $debug  (optional)
# @param string $local_index_dir  (optional)
# @param boolean $enable_open_index_async  (optional)
# @param int $thread_pool_size  (optional)
# @param boolean $prefetch_index_files  (optional)
# @param int $extracted_text_cache_size_in_mb  (optional)
# @param int $extracted_text_cache_expiry_in_secs  (optional)
# @param boolean $always_use_pre_extracted_cache  (optional)
# @param int $boolean_clause_limit  (optional)
# @param boolean $enable_hybrid_indexing  (optional)
# @param int $hybrid_queue_size  (optional)
# @param boolean $disable_stored_index_definition  (optional)
# @param boolean $deleted_blobs_collection_enabled  (optional)
# @param int $prop_index_cleaner_interval_in_secs  (optional)
# @param boolean $enable_single_blob_index_files  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'disabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'debug' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'local_index_dir' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'enable_open_index_async' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'thread_pool_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'prefetch_index_files' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'extracted_text_cache_size_in_mb' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'extracted_text_cache_expiry_in_secs' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'always_use_pre_extracted_cache' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'boolean_clause_limit' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'enable_hybrid_indexing' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'hybrid_queue_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'disable_stored_index_definition' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'deleted_blobs_collection_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'prop_index_cleaner_interval_in_secs' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'enable_single_blob_index_files' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo',
        };
}
# @return OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo
#
sub org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'disabled'}) {
        $query_params->{'disabled'} = $self->{api_client}->to_query_value($args{'disabled'});
    }

    # query params
    if ( exists $args{'debug'}) {
        $query_params->{'debug'} = $self->{api_client}->to_query_value($args{'debug'});
    }

    # query params
    if ( exists $args{'local_index_dir'}) {
        $query_params->{'localIndexDir'} = $self->{api_client}->to_query_value($args{'local_index_dir'});
    }

    # query params
    if ( exists $args{'enable_open_index_async'}) {
        $query_params->{'enableOpenIndexAsync'} = $self->{api_client}->to_query_value($args{'enable_open_index_async'});
    }

    # query params
    if ( exists $args{'thread_pool_size'}) {
        $query_params->{'threadPoolSize'} = $self->{api_client}->to_query_value($args{'thread_pool_size'});
    }

    # query params
    if ( exists $args{'prefetch_index_files'}) {
        $query_params->{'prefetchIndexFiles'} = $self->{api_client}->to_query_value($args{'prefetch_index_files'});
    }

    # query params
    if ( exists $args{'extracted_text_cache_size_in_mb'}) {
        $query_params->{'extractedTextCacheSizeInMB'} = $self->{api_client}->to_query_value($args{'extracted_text_cache_size_in_mb'});
    }

    # query params
    if ( exists $args{'extracted_text_cache_expiry_in_secs'}) {
        $query_params->{'extractedTextCacheExpiryInSecs'} = $self->{api_client}->to_query_value($args{'extracted_text_cache_expiry_in_secs'});
    }

    # query params
    if ( exists $args{'always_use_pre_extracted_cache'}) {
        $query_params->{'alwaysUsePreExtractedCache'} = $self->{api_client}->to_query_value($args{'always_use_pre_extracted_cache'});
    }

    # query params
    if ( exists $args{'boolean_clause_limit'}) {
        $query_params->{'booleanClauseLimit'} = $self->{api_client}->to_query_value($args{'boolean_clause_limit'});
    }

    # query params
    if ( exists $args{'enable_hybrid_indexing'}) {
        $query_params->{'enableHybridIndexing'} = $self->{api_client}->to_query_value($args{'enable_hybrid_indexing'});
    }

    # query params
    if ( exists $args{'hybrid_queue_size'}) {
        $query_params->{'hybridQueueSize'} = $self->{api_client}->to_query_value($args{'hybrid_queue_size'});
    }

    # query params
    if ( exists $args{'disable_stored_index_definition'}) {
        $query_params->{'disableStoredIndexDefinition'} = $self->{api_client}->to_query_value($args{'disable_stored_index_definition'});
    }

    # query params
    if ( exists $args{'deleted_blobs_collection_enabled'}) {
        $query_params->{'deletedBlobsCollectionEnabled'} = $self->{api_client}->to_query_value($args{'deleted_blobs_collection_enabled'});
    }

    # query params
    if ( exists $args{'prop_index_cleaner_interval_in_secs'}) {
        $query_params->{'propIndexCleanerIntervalInSecs'} = $self->{api_client}->to_query_value($args{'prop_index_cleaner_interval_in_secs'});
    }

    # query params
    if ( exists $args{'enable_single_blob_index_files'}) {
        $query_params->{'enableSingleBlobIndexFiles'} = $self->{api_client}->to_query_value($args{'enable_single_blob_index_files'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $solr/home/path  (optional)
# @param string $solr/core/name  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'solr/home/path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'solr/core/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo',
        };
}
# @return OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo
#
sub org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'solr/home/path'}) {
        $query_params->{'solr.home.path'} = $self->{api_client}->to_query_value($args{'solr/home/path'});
    }

    # query params
    if ( exists $args{'solr/core/name'}) {
        $query_params->{'solr.core.name'} = $self->{api_client}->to_query_value($args{'solr/core/name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo',
        };
}
# @return OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo
#
sub org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $path/desc/field  (optional)
# @param string $path/child/field  (optional)
# @param string $path/parent/field  (optional)
# @param string $path/exact/field  (optional)
# @param string $catch/all/field  (optional)
# @param string $collapsed/path/field  (optional)
# @param string $path/depth/field  (optional)
# @param string $commit/policy  (optional)
# @param int $rows  (optional)
# @param boolean $path/restrictions  (optional)
# @param boolean $property/restrictions  (optional)
# @param boolean $primarytypes/restrictions  (optional)
# @param ARRAY[string] $ignored/properties  (optional)
# @param ARRAY[string] $used/properties  (optional)
# @param ARRAY[string] $type/mappings  (optional)
# @param ARRAY[string] $property/mappings  (optional)
# @param boolean $collapse/jcrcontent/nodes  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'path/desc/field' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'path/child/field' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'path/parent/field' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'path/exact/field' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'catch/all/field' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'collapsed/path/field' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'path/depth/field' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'commit/policy' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'rows' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'path/restrictions' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'property/restrictions' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'primarytypes/restrictions' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'ignored/properties' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'used/properties' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'type/mappings' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'property/mappings' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'collapse/jcrcontent/nodes' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo',
        };
}
# @return OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo
#
sub org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'path/desc/field'}) {
        $query_params->{'path.desc.field'} = $self->{api_client}->to_query_value($args{'path/desc/field'});
    }

    # query params
    if ( exists $args{'path/child/field'}) {
        $query_params->{'path.child.field'} = $self->{api_client}->to_query_value($args{'path/child/field'});
    }

    # query params
    if ( exists $args{'path/parent/field'}) {
        $query_params->{'path.parent.field'} = $self->{api_client}->to_query_value($args{'path/parent/field'});
    }

    # query params
    if ( exists $args{'path/exact/field'}) {
        $query_params->{'path.exact.field'} = $self->{api_client}->to_query_value($args{'path/exact/field'});
    }

    # query params
    if ( exists $args{'catch/all/field'}) {
        $query_params->{'catch.all.field'} = $self->{api_client}->to_query_value($args{'catch/all/field'});
    }

    # query params
    if ( exists $args{'collapsed/path/field'}) {
        $query_params->{'collapsed.path.field'} = $self->{api_client}->to_query_value($args{'collapsed/path/field'});
    }

    # query params
    if ( exists $args{'path/depth/field'}) {
        $query_params->{'path.depth.field'} = $self->{api_client}->to_query_value($args{'path/depth/field'});
    }

    # query params
    if ( exists $args{'commit/policy'}) {
        $query_params->{'commit.policy'} = $self->{api_client}->to_query_value($args{'commit/policy'});
    }

    # query params
    if ( exists $args{'rows'}) {
        $query_params->{'rows'} = $self->{api_client}->to_query_value($args{'rows'});
    }

    # query params
    if ( exists $args{'path/restrictions'}) {
        $query_params->{'path.restrictions'} = $self->{api_client}->to_query_value($args{'path/restrictions'});
    }

    # query params
    if ( exists $args{'property/restrictions'}) {
        $query_params->{'property.restrictions'} = $self->{api_client}->to_query_value($args{'property/restrictions'});
    }

    # query params
    if ( exists $args{'primarytypes/restrictions'}) {
        $query_params->{'primarytypes.restrictions'} = $self->{api_client}->to_query_value($args{'primarytypes/restrictions'});
    }

    # query params
    if ( exists $args{'ignored/properties'}) {
        $query_params->{'ignored.properties'} = $self->{api_client}->to_query_value($args{'ignored/properties'});
    }

    # query params
    if ( exists $args{'used/properties'}) {
        $query_params->{'used.properties'} = $self->{api_client}->to_query_value($args{'used/properties'});
    }

    # query params
    if ( exists $args{'type/mappings'}) {
        $query_params->{'type.mappings'} = $self->{api_client}->to_query_value($args{'type/mappings'});
    }

    # query params
    if ( exists $args{'property/mappings'}) {
        $query_params->{'property.mappings'} = $self->{api_client}->to_query_value($args{'property/mappings'});
    }

    # query params
    if ( exists $args{'collapse/jcrcontent/nodes'}) {
        $query_params->{'collapse.jcrcontent.nodes'} = $self->{api_client}->to_query_value($args{'collapse/jcrcontent/nodes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $solr/http/url  (optional)
# @param string $solr/zk/host  (optional)
# @param string $solr/collection  (optional)
# @param int $solr/socket/timeout  (optional)
# @param int $solr/connection/timeout  (optional)
# @param int $solr/shards/no  (optional)
# @param int $solr/replication/factor  (optional)
# @param string $solr/conf/dir  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'solr/http/url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'solr/zk/host' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'solr/collection' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'solr/socket/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'solr/connection/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'solr/shards/no' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'solr/replication/factor' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'solr/conf/dir' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo',
        };
}
# @return OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo
#
sub org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'solr/http/url'}) {
        $query_params->{'solr.http.url'} = $self->{api_client}->to_query_value($args{'solr/http/url'});
    }

    # query params
    if ( exists $args{'solr/zk/host'}) {
        $query_params->{'solr.zk.host'} = $self->{api_client}->to_query_value($args{'solr/zk/host'});
    }

    # query params
    if ( exists $args{'solr/collection'}) {
        $query_params->{'solr.collection'} = $self->{api_client}->to_query_value($args{'solr/collection'});
    }

    # query params
    if ( exists $args{'solr/socket/timeout'}) {
        $query_params->{'solr.socket.timeout'} = $self->{api_client}->to_query_value($args{'solr/socket/timeout'});
    }

    # query params
    if ( exists $args{'solr/connection/timeout'}) {
        $query_params->{'solr.connection.timeout'} = $self->{api_client}->to_query_value($args{'solr/connection/timeout'});
    }

    # query params
    if ( exists $args{'solr/shards/no'}) {
        $query_params->{'solr.shards.no'} = $self->{api_client}->to_query_value($args{'solr/shards/no'});
    }

    # query params
    if ( exists $args{'solr/replication/factor'}) {
        $query_params->{'solr.replication.factor'} = $self->{api_client}->to_query_value($args{'solr/replication/factor'});
    }

    # query params
    if ( exists $args{'solr/conf/dir'}) {
        $query_params->{'solr.conf.dir'} = $self->{api_client}->to_query_value($args{'solr/conf/dir'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $query/aggregation  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'query/aggregation' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo',
        };
}
# @return OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo
#
sub org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'query/aggregation'}) {
        $query_params->{'query.aggregation'} = $self->{api_client}->to_query_value($args{'query/aggregation'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $server/type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'server/type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo',
        };
}
# @return OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo
#
sub org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'server/type'}) {
        $query_params->{'server.type'} = $self->{api_client}->to_query_value($args{'server/type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $provider_type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'provider_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo',
        };
}
# @return OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo
#
sub org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'provider_type'}) {
        $query_params->{'providerType'} = $self->{api_client}->to_query_value($args{'provider_type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_plugins_observation_change_collector_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $max_items  (optional)
# @param int $max_path_depth  (optional)
# @param boolean $enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'max_items' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'max_path_depth' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_plugins_observation_change_collector_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo',
        };
}
# @return OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo
#
sub org_apache_jackrabbit_oak_plugins_observation_change_collector_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'max_items'}) {
        $query_params->{'maxItems'} = $self->{api_client}->to_query_value($args{'max_items'});
    }

    # query params
    if ( exists $args{'max_path_depth'}) {
        $query_params->{'maxPathDepth'} = $self->{api_client}->to_query_value($args{'max_path_depth'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_query_query_engine_settings_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $query_limit_in_memory  (optional)
# @param int $query_limit_reads  (optional)
# @param boolean $query_fail_traversal  (optional)
# @param boolean $fast_query_size  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'query_limit_in_memory' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'query_limit_reads' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'query_fail_traversal' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'fast_query_size' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_query_query_engine_settings_service' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo',
        };
}
# @return OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo
#
sub org_apache_jackrabbit_oak_query_query_engine_settings_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'query_limit_in_memory'}) {
        $query_params->{'queryLimitInMemory'} = $self->{api_client}->to_query_value($args{'query_limit_in_memory'});
    }

    # query params
    if ( exists $args{'query_limit_reads'}) {
        $query_params->{'queryLimitReads'} = $self->{api_client}->to_query_value($args{'query_limit_reads'});
    }

    # query params
    if ( exists $args{'query_fail_traversal'}) {
        $query_params->{'queryFailTraversal'} = $self->{api_client}->to_query_value($args{'query_fail_traversal'});
    }

    # query params
    if ( exists $args{'fast_query_size'}) {
        $query_params->{'fastQuerySize'} = $self->{api_client}->to_query_value($args{'fast_query_size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_security_authentication_authentication_config
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $org/apache/jackrabbit/oak/authentication/app_name  (optional)
# @param string $org/apache/jackrabbit/oak/authentication/config_spi_name  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/jackrabbit/oak/authentication/app_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/jackrabbit/oak/authentication/config_spi_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_security_authentication_authentication_config' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo',
        };
}
# @return OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo
#
sub org_apache_jackrabbit_oak_security_authentication_authentication_config {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'org/apache/jackrabbit/oak/authentication/app_name'}) {
        $query_params->{'org.apache.jackrabbit.oak.authentication.appName'} = $self->{api_client}->to_query_value($args{'org/apache/jackrabbit/oak/authentication/app_name'});
    }

    # query params
    if ( exists $args{'org/apache/jackrabbit/oak/authentication/config_spi_name'}) {
        $query_params->{'org.apache.jackrabbit.oak.authentication.configSpiName'} = $self->{api_client}->to_query_value($args{'org/apache/jackrabbit/oak/authentication/config_spi_name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $provider/name  (optional)
# @param string $host/name  (optional)
# @param int $host/port  (optional)
# @param boolean $host/ssl  (optional)
# @param boolean $host/tls  (optional)
# @param boolean $host/no_cert_check  (optional)
# @param string $bind/dn  (optional)
# @param string $bind/password  (optional)
# @param string $search_timeout  (optional)
# @param int $admin_pool/max_active  (optional)
# @param boolean $admin_pool/lookup_on_validate  (optional)
# @param int $user_pool/max_active  (optional)
# @param boolean $user_pool/lookup_on_validate  (optional)
# @param string $user/base_dn  (optional)
# @param ARRAY[string] $user/objectclass  (optional)
# @param string $user/id_attribute  (optional)
# @param string $user/extra_filter  (optional)
# @param boolean $user/make_dn_path  (optional)
# @param string $group/base_dn  (optional)
# @param ARRAY[string] $group/objectclass  (optional)
# @param string $group/name_attribute  (optional)
# @param string $group/extra_filter  (optional)
# @param boolean $group/make_dn_path  (optional)
# @param string $group/member_attribute  (optional)
# @param boolean $use_uid_for_ext_id  (optional)
# @param ARRAY[string] $customattributes  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'provider/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'host/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'host/port' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'host/ssl' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'host/tls' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'host/no_cert_check' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'bind/dn' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'bind/password' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'search_timeout' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'admin_pool/max_active' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'admin_pool/lookup_on_validate' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'user_pool/max_active' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'user_pool/lookup_on_validate' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'user/base_dn' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'user/objectclass' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'user/id_attribute' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'user/extra_filter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'user/make_dn_path' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'group/base_dn' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'group/objectclass' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'group/name_attribute' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'group/extra_filter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'group/make_dn_path' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'group/member_attribute' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'use_uid_for_ext_id' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'customattributes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo',
        };
}
# @return OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo
#
sub org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'provider/name'}) {
        $query_params->{'provider.name'} = $self->{api_client}->to_query_value($args{'provider/name'});
    }

    # query params
    if ( exists $args{'host/name'}) {
        $query_params->{'host.name'} = $self->{api_client}->to_query_value($args{'host/name'});
    }

    # query params
    if ( exists $args{'host/port'}) {
        $query_params->{'host.port'} = $self->{api_client}->to_query_value($args{'host/port'});
    }

    # query params
    if ( exists $args{'host/ssl'}) {
        $query_params->{'host.ssl'} = $self->{api_client}->to_query_value($args{'host/ssl'});
    }

    # query params
    if ( exists $args{'host/tls'}) {
        $query_params->{'host.tls'} = $self->{api_client}->to_query_value($args{'host/tls'});
    }

    # query params
    if ( exists $args{'host/no_cert_check'}) {
        $query_params->{'host.noCertCheck'} = $self->{api_client}->to_query_value($args{'host/no_cert_check'});
    }

    # query params
    if ( exists $args{'bind/dn'}) {
        $query_params->{'bind.dn'} = $self->{api_client}->to_query_value($args{'bind/dn'});
    }

    # query params
    if ( exists $args{'bind/password'}) {
        $query_params->{'bind.password'} = $self->{api_client}->to_query_value($args{'bind/password'});
    }

    # query params
    if ( exists $args{'search_timeout'}) {
        $query_params->{'searchTimeout'} = $self->{api_client}->to_query_value($args{'search_timeout'});
    }

    # query params
    if ( exists $args{'admin_pool/max_active'}) {
        $query_params->{'adminPool.maxActive'} = $self->{api_client}->to_query_value($args{'admin_pool/max_active'});
    }

    # query params
    if ( exists $args{'admin_pool/lookup_on_validate'}) {
        $query_params->{'adminPool.lookupOnValidate'} = $self->{api_client}->to_query_value($args{'admin_pool/lookup_on_validate'});
    }

    # query params
    if ( exists $args{'user_pool/max_active'}) {
        $query_params->{'userPool.maxActive'} = $self->{api_client}->to_query_value($args{'user_pool/max_active'});
    }

    # query params
    if ( exists $args{'user_pool/lookup_on_validate'}) {
        $query_params->{'userPool.lookupOnValidate'} = $self->{api_client}->to_query_value($args{'user_pool/lookup_on_validate'});
    }

    # query params
    if ( exists $args{'user/base_dn'}) {
        $query_params->{'user.baseDN'} = $self->{api_client}->to_query_value($args{'user/base_dn'});
    }

    # query params
    if ( exists $args{'user/objectclass'}) {
        $query_params->{'user.objectclass'} = $self->{api_client}->to_query_value($args{'user/objectclass'});
    }

    # query params
    if ( exists $args{'user/id_attribute'}) {
        $query_params->{'user.idAttribute'} = $self->{api_client}->to_query_value($args{'user/id_attribute'});
    }

    # query params
    if ( exists $args{'user/extra_filter'}) {
        $query_params->{'user.extraFilter'} = $self->{api_client}->to_query_value($args{'user/extra_filter'});
    }

    # query params
    if ( exists $args{'user/make_dn_path'}) {
        $query_params->{'user.makeDnPath'} = $self->{api_client}->to_query_value($args{'user/make_dn_path'});
    }

    # query params
    if ( exists $args{'group/base_dn'}) {
        $query_params->{'group.baseDN'} = $self->{api_client}->to_query_value($args{'group/base_dn'});
    }

    # query params
    if ( exists $args{'group/objectclass'}) {
        $query_params->{'group.objectclass'} = $self->{api_client}->to_query_value($args{'group/objectclass'});
    }

    # query params
    if ( exists $args{'group/name_attribute'}) {
        $query_params->{'group.nameAttribute'} = $self->{api_client}->to_query_value($args{'group/name_attribute'});
    }

    # query params
    if ( exists $args{'group/extra_filter'}) {
        $query_params->{'group.extraFilter'} = $self->{api_client}->to_query_value($args{'group/extra_filter'});
    }

    # query params
    if ( exists $args{'group/make_dn_path'}) {
        $query_params->{'group.makeDnPath'} = $self->{api_client}->to_query_value($args{'group/make_dn_path'});
    }

    # query params
    if ( exists $args{'group/member_attribute'}) {
        $query_params->{'group.memberAttribute'} = $self->{api_client}->to_query_value($args{'group/member_attribute'});
    }

    # query params
    if ( exists $args{'use_uid_for_ext_id'}) {
        $query_params->{'useUidForExtId'} = $self->{api_client}->to_query_value($args{'use_uid_for_ext_id'});
    }

    # query params
    if ( exists $args{'customattributes'}) {
        $query_params->{'customattributes'} = $self->{api_client}->to_query_value($args{'customattributes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_security_authentication_token_token_configura
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $token_expiration  (optional)
# @param string $token_length  (optional)
# @param boolean $token_refresh  (optional)
# @param int $token_cleanup_threshold  (optional)
# @param string $password_hash_algorithm  (optional)
# @param int $password_hash_iterations  (optional)
# @param int $password_salt_size  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'token_expiration' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'token_length' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'token_refresh' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'token_cleanup_threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'password_hash_algorithm' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'password_hash_iterations' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'password_salt_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_security_authentication_token_token_configura' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo',
        };
}
# @return OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo
#
sub org_apache_jackrabbit_oak_security_authentication_token_token_configura {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'token_expiration'}) {
        $query_params->{'tokenExpiration'} = $self->{api_client}->to_query_value($args{'token_expiration'});
    }

    # query params
    if ( exists $args{'token_length'}) {
        $query_params->{'tokenLength'} = $self->{api_client}->to_query_value($args{'token_length'});
    }

    # query params
    if ( exists $args{'token_refresh'}) {
        $query_params->{'tokenRefresh'} = $self->{api_client}->to_query_value($args{'token_refresh'});
    }

    # query params
    if ( exists $args{'token_cleanup_threshold'}) {
        $query_params->{'tokenCleanupThreshold'} = $self->{api_client}->to_query_value($args{'token_cleanup_threshold'});
    }

    # query params
    if ( exists $args{'password_hash_algorithm'}) {
        $query_params->{'passwordHashAlgorithm'} = $self->{api_client}->to_query_value($args{'password_hash_algorithm'});
    }

    # query params
    if ( exists $args{'password_hash_iterations'}) {
        $query_params->{'passwordHashIterations'} = $self->{api_client}->to_query_value($args{'password_hash_iterations'});
    }

    # query params
    if ( exists $args{'password_salt_size'}) {
        $query_params->{'passwordSaltSize'} = $self->{api_client}->to_query_value($args{'password_salt_size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_security_authorization_authorization_configur
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $permissions_jr2  (optional)
# @param string $import_behavior  (optional)
# @param ARRAY[string] $read_paths  (optional)
# @param ARRAY[string] $administrative_principals  (optional)
# @param int $configuration_ranking  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'permissions_jr2' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'import_behavior' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'read_paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'administrative_principals' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'configuration_ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_security_authorization_authorization_configur' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo',
        };
}
# @return OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo
#
sub org_apache_jackrabbit_oak_security_authorization_authorization_configur {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'permissions_jr2'}) {
        $query_params->{'permissionsJr2'} = $self->{api_client}->to_query_value($args{'permissions_jr2'});
    }

    # query params
    if ( exists $args{'import_behavior'}) {
        $query_params->{'importBehavior'} = $self->{api_client}->to_query_value($args{'import_behavior'});
    }

    # query params
    if ( exists $args{'read_paths'}) {
        $query_params->{'readPaths'} = $self->{api_client}->to_query_value($args{'read_paths'});
    }

    # query params
    if ( exists $args{'administrative_principals'}) {
        $query_params->{'administrativePrincipals'} = $self->{api_client}->to_query_value($args{'administrative_principals'});
    }

    # query params
    if ( exists $args{'configuration_ranking'}) {
        $query_params->{'configurationRanking'} = $self->{api_client}->to_query_value($args{'configuration_ranking'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_security_internal_security_provider_registrati
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $required_service_pids  (optional)
# @param string $authorization_composition_type  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'required_service_pids' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'authorization_composition_type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_security_internal_security_provider_registrati' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo',
        };
}
# @return OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo
#
sub org_apache_jackrabbit_oak_security_internal_security_provider_registrati {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'required_service_pids'}) {
        $query_params->{'requiredServicePids'} = $self->{api_client}->to_query_value($args{'required_service_pids'});
    }

    # query params
    if ( exists $args{'authorization_composition_type'}) {
        $query_params->{'authorizationCompositionType'} = $self->{api_client}->to_query_value($args{'authorization_composition_type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_security_user_random_authorizable_node_name
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $length  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'length' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_security_user_random_authorizable_node_name' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo',
        };
}
# @return OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo
#
sub org_apache_jackrabbit_oak_security_user_random_authorizable_node_name {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'length'}) {
        $query_params->{'length'} = $self->{api_client}->to_query_value($args{'length'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_security_user_user_configuration_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $users_path  (optional)
# @param string $groups_path  (optional)
# @param string $system_relative_path  (optional)
# @param int $default_depth  (optional)
# @param string $import_behavior  (optional)
# @param string $password_hash_algorithm  (optional)
# @param int $password_hash_iterations  (optional)
# @param int $password_salt_size  (optional)
# @param boolean $omit_admin_pw  (optional)
# @param boolean $support_auto_save  (optional)
# @param int $password_max_age  (optional)
# @param boolean $initial_password_change  (optional)
# @param int $password_history_size  (optional)
# @param boolean $password_expiry_for_admin  (optional)
# @param int $cache_expiration  (optional)
# @param boolean $enable_rfc7613_usercase_mapped_profile  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'users_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'groups_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'system_relative_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default_depth' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'import_behavior' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'password_hash_algorithm' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'password_hash_iterations' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'password_salt_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'omit_admin_pw' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'support_auto_save' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'password_max_age' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'initial_password_change' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'password_history_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'password_expiry_for_admin' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cache_expiration' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'enable_rfc7613_usercase_mapped_profile' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_security_user_user_configuration_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo',
        };
}
# @return OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo
#
sub org_apache_jackrabbit_oak_security_user_user_configuration_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'users_path'}) {
        $query_params->{'usersPath'} = $self->{api_client}->to_query_value($args{'users_path'});
    }

    # query params
    if ( exists $args{'groups_path'}) {
        $query_params->{'groupsPath'} = $self->{api_client}->to_query_value($args{'groups_path'});
    }

    # query params
    if ( exists $args{'system_relative_path'}) {
        $query_params->{'systemRelativePath'} = $self->{api_client}->to_query_value($args{'system_relative_path'});
    }

    # query params
    if ( exists $args{'default_depth'}) {
        $query_params->{'defaultDepth'} = $self->{api_client}->to_query_value($args{'default_depth'});
    }

    # query params
    if ( exists $args{'import_behavior'}) {
        $query_params->{'importBehavior'} = $self->{api_client}->to_query_value($args{'import_behavior'});
    }

    # query params
    if ( exists $args{'password_hash_algorithm'}) {
        $query_params->{'passwordHashAlgorithm'} = $self->{api_client}->to_query_value($args{'password_hash_algorithm'});
    }

    # query params
    if ( exists $args{'password_hash_iterations'}) {
        $query_params->{'passwordHashIterations'} = $self->{api_client}->to_query_value($args{'password_hash_iterations'});
    }

    # query params
    if ( exists $args{'password_salt_size'}) {
        $query_params->{'passwordSaltSize'} = $self->{api_client}->to_query_value($args{'password_salt_size'});
    }

    # query params
    if ( exists $args{'omit_admin_pw'}) {
        $query_params->{'omitAdminPw'} = $self->{api_client}->to_query_value($args{'omit_admin_pw'});
    }

    # query params
    if ( exists $args{'support_auto_save'}) {
        $query_params->{'supportAutoSave'} = $self->{api_client}->to_query_value($args{'support_auto_save'});
    }

    # query params
    if ( exists $args{'password_max_age'}) {
        $query_params->{'passwordMaxAge'} = $self->{api_client}->to_query_value($args{'password_max_age'});
    }

    # query params
    if ( exists $args{'initial_password_change'}) {
        $query_params->{'initialPasswordChange'} = $self->{api_client}->to_query_value($args{'initial_password_change'});
    }

    # query params
    if ( exists $args{'password_history_size'}) {
        $query_params->{'passwordHistorySize'} = $self->{api_client}->to_query_value($args{'password_history_size'});
    }

    # query params
    if ( exists $args{'password_expiry_for_admin'}) {
        $query_params->{'passwordExpiryForAdmin'} = $self->{api_client}->to_query_value($args{'password_expiry_for_admin'});
    }

    # query params
    if ( exists $args{'cache_expiration'}) {
        $query_params->{'cacheExpiration'} = $self->{api_client}->to_query_value($args{'cache_expiration'});
    }

    # query params
    if ( exists $args{'enable_rfc7613_usercase_mapped_profile'}) {
        $query_params->{'enableRFC7613UsercaseMappedProfile'} = $self->{api_client}->to_query_value($args{'enable_rfc7613_usercase_mapped_profile'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $account_name  (optional)
# @param string $container_name  (optional)
# @param string $access_key  (optional)
# @param string $root_path  (optional)
# @param string $connection_url  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'account_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'container_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'access_key' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'root_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'connection_url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo',
        };
}
# @return OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo
#
sub org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'account_name'}) {
        $query_params->{'accountName'} = $self->{api_client}->to_query_value($args{'account_name'});
    }

    # query params
    if ( exists $args{'container_name'}) {
        $query_params->{'containerName'} = $self->{api_client}->to_query_value($args{'container_name'});
    }

    # query params
    if ( exists $args{'access_key'}) {
        $query_params->{'accessKey'} = $self->{api_client}->to_query_value($args{'access_key'});
    }

    # query params
    if ( exists $args{'root_path'}) {
        $query_params->{'rootPath'} = $self->{api_client}->to_query_value($args{'root_path'});
    }

    # query params
    if ( exists $args{'connection_url'}) {
        $query_params->{'connectionURL'} = $self->{api_client}->to_query_value($args{'connection_url'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_segment_segment_node_store_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $repository/home  (optional)
# @param string $tarmk/mode  (optional)
# @param int $tarmk/size  (optional)
# @param int $segment_cache/size  (optional)
# @param int $string_cache/size  (optional)
# @param int $template_cache/size  (optional)
# @param int $string_deduplication_cache/size  (optional)
# @param int $template_deduplication_cache/size  (optional)
# @param int $node_deduplication_cache/size  (optional)
# @param boolean $pause_compaction  (optional)
# @param int $compaction/retry_count  (optional)
# @param int $compaction/force/timeout  (optional)
# @param int $compaction/size_delta_estimation  (optional)
# @param boolean $compaction/disable_estimation  (optional)
# @param int $compaction/retained_generations  (optional)
# @param int $compaction/memory_threshold  (optional)
# @param int $compaction/progress_log  (optional)
# @param boolean $standby  (optional)
# @param boolean $custom_blob_store  (optional)
# @param boolean $custom_segment_store  (optional)
# @param boolean $split_persistence  (optional)
# @param string $repository/backup/dir  (optional)
# @param int $blob_gc_max_age_in_secs  (optional)
# @param int $blob_track_snapshot_interval_in_secs  (optional)
# @param string $role  (optional)
# @param boolean $register_descriptors  (optional)
# @param boolean $dispatch_changes  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'repository/home' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'tarmk/mode' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'tarmk/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'segment_cache/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'string_cache/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'template_cache/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'string_deduplication_cache/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'template_deduplication_cache/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'node_deduplication_cache/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'pause_compaction' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'compaction/retry_count' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'compaction/force/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'compaction/size_delta_estimation' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'compaction/disable_estimation' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'compaction/retained_generations' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'compaction/memory_threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'compaction/progress_log' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'standby' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'custom_blob_store' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'custom_segment_store' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'split_persistence' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'repository/backup/dir' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'blob_gc_max_age_in_secs' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'blob_track_snapshot_interval_in_secs' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'role' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'register_descriptors' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'dispatch_changes' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_segment_segment_node_store_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo',
        };
}
# @return OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo
#
sub org_apache_jackrabbit_oak_segment_segment_node_store_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'repository/home'}) {
        $query_params->{'repository.home'} = $self->{api_client}->to_query_value($args{'repository/home'});
    }

    # query params
    if ( exists $args{'tarmk/mode'}) {
        $query_params->{'tarmk.mode'} = $self->{api_client}->to_query_value($args{'tarmk/mode'});
    }

    # query params
    if ( exists $args{'tarmk/size'}) {
        $query_params->{'tarmk.size'} = $self->{api_client}->to_query_value($args{'tarmk/size'});
    }

    # query params
    if ( exists $args{'segment_cache/size'}) {
        $query_params->{'segmentCache.size'} = $self->{api_client}->to_query_value($args{'segment_cache/size'});
    }

    # query params
    if ( exists $args{'string_cache/size'}) {
        $query_params->{'stringCache.size'} = $self->{api_client}->to_query_value($args{'string_cache/size'});
    }

    # query params
    if ( exists $args{'template_cache/size'}) {
        $query_params->{'templateCache.size'} = $self->{api_client}->to_query_value($args{'template_cache/size'});
    }

    # query params
    if ( exists $args{'string_deduplication_cache/size'}) {
        $query_params->{'stringDeduplicationCache.size'} = $self->{api_client}->to_query_value($args{'string_deduplication_cache/size'});
    }

    # query params
    if ( exists $args{'template_deduplication_cache/size'}) {
        $query_params->{'templateDeduplicationCache.size'} = $self->{api_client}->to_query_value($args{'template_deduplication_cache/size'});
    }

    # query params
    if ( exists $args{'node_deduplication_cache/size'}) {
        $query_params->{'nodeDeduplicationCache.size'} = $self->{api_client}->to_query_value($args{'node_deduplication_cache/size'});
    }

    # query params
    if ( exists $args{'pause_compaction'}) {
        $query_params->{'pauseCompaction'} = $self->{api_client}->to_query_value($args{'pause_compaction'});
    }

    # query params
    if ( exists $args{'compaction/retry_count'}) {
        $query_params->{'compaction.retryCount'} = $self->{api_client}->to_query_value($args{'compaction/retry_count'});
    }

    # query params
    if ( exists $args{'compaction/force/timeout'}) {
        $query_params->{'compaction.force.timeout'} = $self->{api_client}->to_query_value($args{'compaction/force/timeout'});
    }

    # query params
    if ( exists $args{'compaction/size_delta_estimation'}) {
        $query_params->{'compaction.sizeDeltaEstimation'} = $self->{api_client}->to_query_value($args{'compaction/size_delta_estimation'});
    }

    # query params
    if ( exists $args{'compaction/disable_estimation'}) {
        $query_params->{'compaction.disableEstimation'} = $self->{api_client}->to_query_value($args{'compaction/disable_estimation'});
    }

    # query params
    if ( exists $args{'compaction/retained_generations'}) {
        $query_params->{'compaction.retainedGenerations'} = $self->{api_client}->to_query_value($args{'compaction/retained_generations'});
    }

    # query params
    if ( exists $args{'compaction/memory_threshold'}) {
        $query_params->{'compaction.memoryThreshold'} = $self->{api_client}->to_query_value($args{'compaction/memory_threshold'});
    }

    # query params
    if ( exists $args{'compaction/progress_log'}) {
        $query_params->{'compaction.progressLog'} = $self->{api_client}->to_query_value($args{'compaction/progress_log'});
    }

    # query params
    if ( exists $args{'standby'}) {
        $query_params->{'standby'} = $self->{api_client}->to_query_value($args{'standby'});
    }

    # query params
    if ( exists $args{'custom_blob_store'}) {
        $query_params->{'customBlobStore'} = $self->{api_client}->to_query_value($args{'custom_blob_store'});
    }

    # query params
    if ( exists $args{'custom_segment_store'}) {
        $query_params->{'customSegmentStore'} = $self->{api_client}->to_query_value($args{'custom_segment_store'});
    }

    # query params
    if ( exists $args{'split_persistence'}) {
        $query_params->{'splitPersistence'} = $self->{api_client}->to_query_value($args{'split_persistence'});
    }

    # query params
    if ( exists $args{'repository/backup/dir'}) {
        $query_params->{'repository.backup.dir'} = $self->{api_client}->to_query_value($args{'repository/backup/dir'});
    }

    # query params
    if ( exists $args{'blob_gc_max_age_in_secs'}) {
        $query_params->{'blobGcMaxAgeInSecs'} = $self->{api_client}->to_query_value($args{'blob_gc_max_age_in_secs'});
    }

    # query params
    if ( exists $args{'blob_track_snapshot_interval_in_secs'}) {
        $query_params->{'blobTrackSnapshotIntervalInSecs'} = $self->{api_client}->to_query_value($args{'blob_track_snapshot_interval_in_secs'});
    }

    # query params
    if ( exists $args{'role'}) {
        $query_params->{'role'} = $self->{api_client}->to_query_value($args{'role'});
    }

    # query params
    if ( exists $args{'register_descriptors'}) {
        $query_params->{'registerDescriptors'} = $self->{api_client}->to_query_value($args{'register_descriptors'});
    }

    # query params
    if ( exists $args{'dispatch_changes'}) {
        $query_params->{'dispatchChanges'} = $self->{api_client}->to_query_value($args{'dispatch_changes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $commits_tracker_writer_groups  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'commits_tracker_writer_groups' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo',
        };
}
# @return OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo
#
sub org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'commits_tracker_writer_groups'}) {
        $query_params->{'commitsTrackerWriterGroups'} = $self->{api_client}->to_query_value($args{'commits_tracker_writer_groups'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_segment_segment_node_store_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $repository/home  (optional)
# @param string $tarmk/mode  (optional)
# @param int $tarmk/size  (optional)
# @param int $segment_cache/size  (optional)
# @param int $string_cache/size  (optional)
# @param int $template_cache/size  (optional)
# @param int $string_deduplication_cache/size  (optional)
# @param int $template_deduplication_cache/size  (optional)
# @param int $node_deduplication_cache/size  (optional)
# @param boolean $pause_compaction  (optional)
# @param int $compaction/retry_count  (optional)
# @param int $compaction/force/timeout  (optional)
# @param int $compaction/size_delta_estimation  (optional)
# @param boolean $compaction/disable_estimation  (optional)
# @param int $compaction/retained_generations  (optional)
# @param int $compaction/memory_threshold  (optional)
# @param int $compaction/progress_log  (optional)
# @param boolean $standby  (optional)
# @param boolean $custom_blob_store  (optional)
# @param boolean $custom_segment_store  (optional)
# @param boolean $split_persistence  (optional)
# @param string $repository/backup/dir  (optional)
# @param int $blob_gc_max_age_in_secs  (optional)
# @param int $blob_track_snapshot_interval_in_secs  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'repository/home' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'tarmk/mode' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'tarmk/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'segment_cache/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'string_cache/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'template_cache/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'string_deduplication_cache/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'template_deduplication_cache/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'node_deduplication_cache/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'pause_compaction' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'compaction/retry_count' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'compaction/force/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'compaction/size_delta_estimation' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'compaction/disable_estimation' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'compaction/retained_generations' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'compaction/memory_threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'compaction/progress_log' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'standby' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'custom_blob_store' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'custom_segment_store' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'split_persistence' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'repository/backup/dir' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'blob_gc_max_age_in_secs' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'blob_track_snapshot_interval_in_secs' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_segment_segment_node_store_service' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo',
        };
}
# @return OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo
#
sub org_apache_jackrabbit_oak_segment_segment_node_store_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'repository/home'}) {
        $query_params->{'repository.home'} = $self->{api_client}->to_query_value($args{'repository/home'});
    }

    # query params
    if ( exists $args{'tarmk/mode'}) {
        $query_params->{'tarmk.mode'} = $self->{api_client}->to_query_value($args{'tarmk/mode'});
    }

    # query params
    if ( exists $args{'tarmk/size'}) {
        $query_params->{'tarmk.size'} = $self->{api_client}->to_query_value($args{'tarmk/size'});
    }

    # query params
    if ( exists $args{'segment_cache/size'}) {
        $query_params->{'segmentCache.size'} = $self->{api_client}->to_query_value($args{'segment_cache/size'});
    }

    # query params
    if ( exists $args{'string_cache/size'}) {
        $query_params->{'stringCache.size'} = $self->{api_client}->to_query_value($args{'string_cache/size'});
    }

    # query params
    if ( exists $args{'template_cache/size'}) {
        $query_params->{'templateCache.size'} = $self->{api_client}->to_query_value($args{'template_cache/size'});
    }

    # query params
    if ( exists $args{'string_deduplication_cache/size'}) {
        $query_params->{'stringDeduplicationCache.size'} = $self->{api_client}->to_query_value($args{'string_deduplication_cache/size'});
    }

    # query params
    if ( exists $args{'template_deduplication_cache/size'}) {
        $query_params->{'templateDeduplicationCache.size'} = $self->{api_client}->to_query_value($args{'template_deduplication_cache/size'});
    }

    # query params
    if ( exists $args{'node_deduplication_cache/size'}) {
        $query_params->{'nodeDeduplicationCache.size'} = $self->{api_client}->to_query_value($args{'node_deduplication_cache/size'});
    }

    # query params
    if ( exists $args{'pause_compaction'}) {
        $query_params->{'pauseCompaction'} = $self->{api_client}->to_query_value($args{'pause_compaction'});
    }

    # query params
    if ( exists $args{'compaction/retry_count'}) {
        $query_params->{'compaction.retryCount'} = $self->{api_client}->to_query_value($args{'compaction/retry_count'});
    }

    # query params
    if ( exists $args{'compaction/force/timeout'}) {
        $query_params->{'compaction.force.timeout'} = $self->{api_client}->to_query_value($args{'compaction/force/timeout'});
    }

    # query params
    if ( exists $args{'compaction/size_delta_estimation'}) {
        $query_params->{'compaction.sizeDeltaEstimation'} = $self->{api_client}->to_query_value($args{'compaction/size_delta_estimation'});
    }

    # query params
    if ( exists $args{'compaction/disable_estimation'}) {
        $query_params->{'compaction.disableEstimation'} = $self->{api_client}->to_query_value($args{'compaction/disable_estimation'});
    }

    # query params
    if ( exists $args{'compaction/retained_generations'}) {
        $query_params->{'compaction.retainedGenerations'} = $self->{api_client}->to_query_value($args{'compaction/retained_generations'});
    }

    # query params
    if ( exists $args{'compaction/memory_threshold'}) {
        $query_params->{'compaction.memoryThreshold'} = $self->{api_client}->to_query_value($args{'compaction/memory_threshold'});
    }

    # query params
    if ( exists $args{'compaction/progress_log'}) {
        $query_params->{'compaction.progressLog'} = $self->{api_client}->to_query_value($args{'compaction/progress_log'});
    }

    # query params
    if ( exists $args{'standby'}) {
        $query_params->{'standby'} = $self->{api_client}->to_query_value($args{'standby'});
    }

    # query params
    if ( exists $args{'custom_blob_store'}) {
        $query_params->{'customBlobStore'} = $self->{api_client}->to_query_value($args{'custom_blob_store'});
    }

    # query params
    if ( exists $args{'custom_segment_store'}) {
        $query_params->{'customSegmentStore'} = $self->{api_client}->to_query_value($args{'custom_segment_store'});
    }

    # query params
    if ( exists $args{'split_persistence'}) {
        $query_params->{'splitPersistence'} = $self->{api_client}->to_query_value($args{'split_persistence'});
    }

    # query params
    if ( exists $args{'repository/backup/dir'}) {
        $query_params->{'repository.backup.dir'} = $self->{api_client}->to_query_value($args{'repository/backup/dir'});
    }

    # query params
    if ( exists $args{'blob_gc_max_age_in_secs'}) {
        $query_params->{'blobGcMaxAgeInSecs'} = $self->{api_client}->to_query_value($args{'blob_gc_max_age_in_secs'});
    }

    # query params
    if ( exists $args{'blob_track_snapshot_interval_in_secs'}) {
        $query_params->{'blobTrackSnapshotIntervalInSecs'} = $self->{api_client}->to_query_value($args{'blob_track_snapshot_interval_in_secs'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_segment_standby_store_standby_store_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $org/apache/sling/installer/configuration/persist  (optional)
# @param string $mode  (optional)
# @param int $port  (optional)
# @param string $primary/host  (optional)
# @param int $interval  (optional)
# @param ARRAY[string] $primary/allowed_client_ip_ranges  (optional)
# @param boolean $secure  (optional)
# @param int $standby/readtimeout  (optional)
# @param boolean $standby/autoclean  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/sling/installer/configuration/persist' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'mode' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'port' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'primary/host' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'primary/allowed_client_ip_ranges' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'secure' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'standby/readtimeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'standby/autoclean' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_segment_standby_store_standby_store_service' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo',
        };
}
# @return OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo
#
sub org_apache_jackrabbit_oak_segment_standby_store_standby_store_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'org/apache/sling/installer/configuration/persist'}) {
        $query_params->{'org.apache.sling.installer.configuration.persist'} = $self->{api_client}->to_query_value($args{'org/apache/sling/installer/configuration/persist'});
    }

    # query params
    if ( exists $args{'mode'}) {
        $query_params->{'mode'} = $self->{api_client}->to_query_value($args{'mode'});
    }

    # query params
    if ( exists $args{'port'}) {
        $query_params->{'port'} = $self->{api_client}->to_query_value($args{'port'});
    }

    # query params
    if ( exists $args{'primary/host'}) {
        $query_params->{'primary.host'} = $self->{api_client}->to_query_value($args{'primary/host'});
    }

    # query params
    if ( exists $args{'interval'}) {
        $query_params->{'interval'} = $self->{api_client}->to_query_value($args{'interval'});
    }

    # query params
    if ( exists $args{'primary/allowed_client_ip_ranges'}) {
        $query_params->{'primary.allowed-client-ip-ranges'} = $self->{api_client}->to_query_value($args{'primary/allowed_client_ip_ranges'});
    }

    # query params
    if ( exists $args{'secure'}) {
        $query_params->{'secure'} = $self->{api_client}->to_query_value($args{'secure'});
    }

    # query params
    if ( exists $args{'standby/readtimeout'}) {
        $query_params->{'standby.readtimeout'} = $self->{api_client}->to_query_value($args{'standby/readtimeout'});
    }

    # query params
    if ( exists $args{'standby/autoclean'}) {
        $query_params->{'standby.autoclean'} = $self->{api_client}->to_query_value($args{'standby/autoclean'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $handler/name  (optional)
# @param string $user/expiration_time  (optional)
# @param ARRAY[string] $user/auto_membership  (optional)
# @param ARRAY[string] $user/property_mapping  (optional)
# @param string $user/path_prefix  (optional)
# @param string $user/membership_exp_time  (optional)
# @param int $user/membership_nesting_depth  (optional)
# @param boolean $user/dynamic_membership  (optional)
# @param boolean $user/disable_missing  (optional)
# @param string $group/expiration_time  (optional)
# @param ARRAY[string] $group/auto_membership  (optional)
# @param ARRAY[string] $group/property_mapping  (optional)
# @param string $group/path_prefix  (optional)
# @param boolean $enable_rfc7613_usercase_mapped_profile  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'handler/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'user/expiration_time' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'user/auto_membership' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'user/property_mapping' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'user/path_prefix' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'user/membership_exp_time' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'user/membership_nesting_depth' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'user/dynamic_membership' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'user/disable_missing' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'group/expiration_time' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'group/auto_membership' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'group/property_mapping' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'group/path_prefix' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'enable_rfc7613_usercase_mapped_profile' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo',
        };
}
# @return OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo
#
sub org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'handler/name'}) {
        $query_params->{'handler.name'} = $self->{api_client}->to_query_value($args{'handler/name'});
    }

    # query params
    if ( exists $args{'user/expiration_time'}) {
        $query_params->{'user.expirationTime'} = $self->{api_client}->to_query_value($args{'user/expiration_time'});
    }

    # query params
    if ( exists $args{'user/auto_membership'}) {
        $query_params->{'user.autoMembership'} = $self->{api_client}->to_query_value($args{'user/auto_membership'});
    }

    # query params
    if ( exists $args{'user/property_mapping'}) {
        $query_params->{'user.propertyMapping'} = $self->{api_client}->to_query_value($args{'user/property_mapping'});
    }

    # query params
    if ( exists $args{'user/path_prefix'}) {
        $query_params->{'user.pathPrefix'} = $self->{api_client}->to_query_value($args{'user/path_prefix'});
    }

    # query params
    if ( exists $args{'user/membership_exp_time'}) {
        $query_params->{'user.membershipExpTime'} = $self->{api_client}->to_query_value($args{'user/membership_exp_time'});
    }

    # query params
    if ( exists $args{'user/membership_nesting_depth'}) {
        $query_params->{'user.membershipNestingDepth'} = $self->{api_client}->to_query_value($args{'user/membership_nesting_depth'});
    }

    # query params
    if ( exists $args{'user/dynamic_membership'}) {
        $query_params->{'user.dynamicMembership'} = $self->{api_client}->to_query_value($args{'user/dynamic_membership'});
    }

    # query params
    if ( exists $args{'user/disable_missing'}) {
        $query_params->{'user.disableMissing'} = $self->{api_client}->to_query_value($args{'user/disable_missing'});
    }

    # query params
    if ( exists $args{'group/expiration_time'}) {
        $query_params->{'group.expirationTime'} = $self->{api_client}->to_query_value($args{'group/expiration_time'});
    }

    # query params
    if ( exists $args{'group/auto_membership'}) {
        $query_params->{'group.autoMembership'} = $self->{api_client}->to_query_value($args{'group/auto_membership'});
    }

    # query params
    if ( exists $args{'group/property_mapping'}) {
        $query_params->{'group.propertyMapping'} = $self->{api_client}->to_query_value($args{'group/property_mapping'});
    }

    # query params
    if ( exists $args{'group/path_prefix'}) {
        $query_params->{'group.pathPrefix'} = $self->{api_client}->to_query_value($args{'group/path_prefix'});
    }

    # query params
    if ( exists $args{'enable_rfc7613_usercase_mapped_profile'}) {
        $query_params->{'enableRFC7613UsercaseMappedProfile'} = $self->{api_client}->to_query_value($args{'enable_rfc7613_usercase_mapped_profile'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $jaas/ranking  (optional)
# @param string $jaas/control_flag  (optional)
# @param string $jaas/realm_name  (optional)
# @param string $idp/name  (optional)
# @param string $sync/handler_name  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'jaas/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'jaas/control_flag' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jaas/realm_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'idp/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sync/handler_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo',
        };
}
# @return OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo
#
sub org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'jaas/ranking'}) {
        $query_params->{'jaas.ranking'} = $self->{api_client}->to_query_value($args{'jaas/ranking'});
    }

    # query params
    if ( exists $args{'jaas/control_flag'}) {
        $query_params->{'jaas.controlFlag'} = $self->{api_client}->to_query_value($args{'jaas/control_flag'});
    }

    # query params
    if ( exists $args{'jaas/realm_name'}) {
        $query_params->{'jaas.realmName'} = $self->{api_client}->to_query_value($args{'jaas/realm_name'});
    }

    # query params
    if ( exists $args{'idp/name'}) {
        $query_params->{'idp.name'} = $self->{api_client}->to_query_value($args{'idp/name'});
    }

    # query params
    if ( exists $args{'sync/handler_name'}) {
        $query_params->{'sync.handlerName'} = $self->{api_client}->to_query_value($args{'sync/handler_name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $protect_external_id  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'protect_external_id' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo',
        };
}
# @return OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo
#
sub org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'protect_external_id'}) {
        $query_params->{'protectExternalId'} = $self->{api_client}->to_query_value($args{'protect_external_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $cug_supported_paths  (optional)
# @param boolean $cug_enabled  (optional)
# @param int $configuration_ranking  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cug_supported_paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'cug_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'configuration_ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo',
        };
}
# @return OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo
#
sub org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'cug_supported_paths'}) {
        $query_params->{'cugSupportedPaths'} = $self->{api_client}->to_query_value($args{'cug_supported_paths'});
    }

    # query params
    if ( exists $args{'cug_enabled'}) {
        $query_params->{'cugEnabled'} = $self->{api_client}->to_query_value($args{'cug_enabled'});
    }

    # query params
    if ( exists $args{'configuration_ranking'}) {
        $query_params->{'configurationRanking'} = $self->{api_client}->to_query_value($args{'configuration_ranking'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $principal_names  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'principal_names' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo',
        };
}
# @return OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo
#
sub org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'principal_names'}) {
        $query_params->{'principalNames'} = $self->{api_client}->to_query_value($args{'principal_names'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $enabled_actions  (optional)
# @param ARRAY[string] $user_privilege_names  (optional)
# @param ARRAY[string] $group_privilege_names  (optional)
# @param string $constraint  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled_actions' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'user_privilege_names' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'group_privilege_names' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'constraint' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo',
        };
}
# @return OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo
#
sub org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enabled_actions'}) {
        $query_params->{'enabledActions'} = $self->{api_client}->to_query_value($args{'enabled_actions'});
    }

    # query params
    if ( exists $args{'user_privilege_names'}) {
        $query_params->{'userPrivilegeNames'} = $self->{api_client}->to_query_value($args{'user_privilege_names'});
    }

    # query params
    if ( exists $args{'group_privilege_names'}) {
        $query_params->{'groupPrivilegeNames'} = $self->{api_client}->to_query_value($args{'group_privilege_names'});
    }

    # query params
    if ( exists $args{'constraint'}) {
        $query_params->{'constraint'} = $self->{api_client}->to_query_value($args{'constraint'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_vault_packaging_impl_packaging_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $package_roots  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'package_roots' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_vault_packaging_impl_packaging_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo',
        };
}
# @return OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo
#
sub org_apache_jackrabbit_vault_packaging_impl_packaging_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'package_roots'}) {
        $query_params->{'packageRoots'} = $self->{api_client}->to_query_value($args{'package_roots'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo', $response);
    return $_response_object;
}

#
# org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $home_path  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'home_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo',
        };
}
# @return OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo
#
sub org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'home_path'}) {
        $query_params->{'homePath'} = $self->{api_client}->to_query_value($args{'home_path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_auth_core_impl_logout_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $sling/servlet/methods  (optional)
# @param string $sling/servlet/paths  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/servlet/methods' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/servlet/paths' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_auth_core_impl_logout_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingAuthCoreImplLogoutServletInfo',
        };
}
# @return OrgApacheSlingAuthCoreImplLogoutServletInfo
#
sub org_apache_sling_auth_core_impl_logout_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/servlet/methods'}) {
        $query_params->{'sling.servlet.methods'} = $self->{api_client}->to_query_value($args{'sling/servlet/methods'});
    }

    # query params
    if ( exists $args{'sling/servlet/paths'}) {
        $query_params->{'sling.servlet.paths'} = $self->{api_client}->to_query_value($args{'sling/servlet/paths'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingAuthCoreImplLogoutServletInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_caconfig_impl_configuration_bindings_value_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_caconfig_impl_configuration_bindings_value_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo',
        };
}
# @return OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo
#
sub org_apache_sling_caconfig_impl_configuration_bindings_value_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_caconfig_impl_configuration_resolver_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $config_bucket_names  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'config_bucket_names' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_caconfig_impl_configuration_resolver_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingCaconfigImplConfigurationResolverImplInfo',
        };
}
# @return OrgApacheSlingCaconfigImplConfigurationResolverImplInfo
#
sub org_apache_sling_caconfig_impl_configuration_resolver_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'config_bucket_names'}) {
        $query_params->{'configBucketNames'} = $self->{api_client}->to_query_value($args{'config_bucket_names'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingCaconfigImplConfigurationResolverImplInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enabled  (optional)
# @param ARRAY[string] $config_property_inheritance_property_names  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'config_property_inheritance_property_names' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo',
        };
}
# @return OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo
#
sub org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    # query params
    if ( exists $args{'config_property_inheritance_property_names'}) {
        $query_params->{'configPropertyInheritancePropertyNames'} = $self->{api_client}->to_query_value($args{'config_property_inheritance_property_names'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo',
        };
}
# @return OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo
#
sub org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $description  (optional)
# @param ARRAY[string] $overrides  (optional)
# @param boolean $enabled  (optional)
# @param int $service/ranking  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'description' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'overrides' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo',
        };
}
# @return OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo
#
sub org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'description'}) {
        $query_params->{'description'} = $self->{api_client}->to_query_value($args{'description'});
    }

    # query params
    if ( exists $args{'overrides'}) {
        $query_params->{'overrides'} = $self->{api_client}->to_query_value($args{'overrides'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_caconfig_impl_override_system_property_configuration_ove
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enabled  (optional)
# @param int $service/ranking  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_caconfig_impl_override_system_property_configuration_ove' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo',
        };
}
# @return OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo
#
sub org_apache_sling_caconfig_impl_override_system_property_configuration_ove {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_caconfig_management_impl_configuration_management_setti
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $ignore_property_name_regex  (optional)
# @param ARRAY[string] $config_collection_properties_resource_names  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'ignore_property_name_regex' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'config_collection_properties_resource_names' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_caconfig_management_impl_configuration_management_setti' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo',
        };
}
# @return OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo
#
sub org_apache_sling_caconfig_management_impl_configuration_management_setti {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'ignore_property_name_regex'}) {
        $query_params->{'ignorePropertyNameRegex'} = $self->{api_client}->to_query_value($args{'ignore_property_name_regex'});
    }

    # query params
    if ( exists $args{'config_collection_properties_resource_names'}) {
        $query_params->{'configCollectionPropertiesResourceNames'} = $self->{api_client}->to_query_value($args{'config_collection_properties_resource_names'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_caconfig_resource_impl_def_default_configuration_resour
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enabled  (optional)
# @param string $config_path  (optional)
# @param ARRAY[string] $fallback_paths  (optional)
# @param ARRAY[string] $config_collection_inheritance_property_names  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'config_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'fallback_paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'config_collection_inheritance_property_names' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_caconfig_resource_impl_def_default_configuration_resour' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo',
        };
}
# @return OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo
#
sub org_apache_sling_caconfig_resource_impl_def_default_configuration_resour {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    # query params
    if ( exists $args{'config_path'}) {
        $query_params->{'configPath'} = $self->{api_client}->to_query_value($args{'config_path'});
    }

    # query params
    if ( exists $args{'fallback_paths'}) {
        $query_params->{'fallbackPaths'} = $self->{api_client}->to_query_value($args{'fallback_paths'});
    }

    # query params
    if ( exists $args{'config_collection_inheritance_property_names'}) {
        $query_params->{'configCollectionInheritancePropertyNames'} = $self->{api_client}->to_query_value($args{'config_collection_inheritance_property_names'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $enabled  (optional)
# @param ARRAY[string] $config_ref_resource_names  (optional)
# @param ARRAY[string] $config_ref_property_names  (optional)
# @param int $service/ranking  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'config_ref_resource_names' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'config_ref_property_names' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo',
        };
}
# @return OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo
#
sub org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    # query params
    if ( exists $args{'config_ref_resource_names'}) {
        $query_params->{'configRefResourceNames'} = $self->{api_client}->to_query_value($args{'config_ref_resource_names'});
    }

    # query params
    if ( exists $args{'config_ref_property_names'}) {
        $query_params->{'configRefPropertyNames'} = $self->{api_client}->to_query_value($args{'config_ref_property_names'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_commons_html_internal_tagsoup_html_parser
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $parser/features  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'parser/features' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_commons_html_internal_tagsoup_html_parser' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo',
        };
}
# @return OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo
#
sub org_apache_sling_commons_html_internal_tagsoup_html_parser {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'parser/features'}) {
        $query_params->{'parser.features'} = $self->{api_client}->to_query_value($args{'parser/features'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_commons_log_log_manager
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $org/apache/sling/commons/log/level  (optional)
# @param string $org/apache/sling/commons/log/file  (optional)
# @param int $org/apache/sling/commons/log/file/number  (optional)
# @param string $org/apache/sling/commons/log/file/size  (optional)
# @param string $org/apache/sling/commons/log/pattern  (optional)
# @param string $org/apache/sling/commons/log/configuration_file  (optional)
# @param boolean $org/apache/sling/commons/log/packaging_data_enabled  (optional)
# @param int $org/apache/sling/commons/log/max_caller_data_depth  (optional)
# @param int $org/apache/sling/commons/log/max_old_file_count_in_dump  (optional)
# @param int $org/apache/sling/commons/log/num_of_lines  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/level' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/file' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/file/number' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/file/size' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/pattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/configuration_file' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/packaging_data_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/max_caller_data_depth' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/max_old_file_count_in_dump' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/num_of_lines' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_commons_log_log_manager' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingCommonsLogLogManagerInfo',
        };
}
# @return OrgApacheSlingCommonsLogLogManagerInfo
#
sub org_apache_sling_commons_log_log_manager {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.commons.log.LogManager';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/level'}) {
        $query_params->{'org.apache.sling.commons.log.level'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/level'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/file'}) {
        $query_params->{'org.apache.sling.commons.log.file'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/file'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/file/number'}) {
        $query_params->{'org.apache.sling.commons.log.file.number'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/file/number'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/file/size'}) {
        $query_params->{'org.apache.sling.commons.log.file.size'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/file/size'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/pattern'}) {
        $query_params->{'org.apache.sling.commons.log.pattern'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/pattern'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/configuration_file'}) {
        $query_params->{'org.apache.sling.commons.log.configurationFile'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/configuration_file'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/packaging_data_enabled'}) {
        $query_params->{'org.apache.sling.commons.log.packagingDataEnabled'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/packaging_data_enabled'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/max_caller_data_depth'}) {
        $query_params->{'org.apache.sling.commons.log.maxCallerDataDepth'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/max_caller_data_depth'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/max_old_file_count_in_dump'}) {
        $query_params->{'org.apache.sling.commons.log.maxOldFileCountInDump'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/max_old_file_count_in_dump'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/num_of_lines'}) {
        $query_params->{'org.apache.sling.commons.log.numOfLines'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/num_of_lines'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingCommonsLogLogManagerInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_commons_log_log_manager_factory_config
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $org/apache/sling/commons/log/level  (optional)
# @param string $org/apache/sling/commons/log/file  (optional)
# @param string $org/apache/sling/commons/log/pattern  (optional)
# @param ARRAY[string] $org/apache/sling/commons/log/names  (optional)
# @param boolean $org/apache/sling/commons/log/additiv  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/level' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/file' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/pattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/names' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/additiv' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_commons_log_log_manager_factory_config' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo',
        };
}
# @return OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo
#
sub org_apache_sling_commons_log_log_manager_factory_config {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/level'}) {
        $query_params->{'org.apache.sling.commons.log.level'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/level'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/file'}) {
        $query_params->{'org.apache.sling.commons.log.file'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/file'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/pattern'}) {
        $query_params->{'org.apache.sling.commons.log.pattern'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/pattern'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/names'}) {
        $query_params->{'org.apache.sling.commons.log.names'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/names'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/additiv'}) {
        $query_params->{'org.apache.sling.commons.log.additiv'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/additiv'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_commons_log_log_manager_factory_writer
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $org/apache/sling/commons/log/file  (optional)
# @param int $org/apache/sling/commons/log/file/number  (optional)
# @param string $org/apache/sling/commons/log/file/size  (optional)
# @param boolean $org/apache/sling/commons/log/file/buffered  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/file' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/file/number' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/file/size' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/commons/log/file/buffered' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_commons_log_log_manager_factory_writer' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo',
        };
}
# @return OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo
#
sub org_apache_sling_commons_log_log_manager_factory_writer {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/file'}) {
        $query_params->{'org.apache.sling.commons.log.file'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/file'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/file/number'}) {
        $query_params->{'org.apache.sling.commons.log.file.number'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/file/number'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/file/size'}) {
        $query_params->{'org.apache.sling.commons.log.file.size'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/file/size'});
    }

    # query params
    if ( exists $args{'org/apache/sling/commons/log/file/buffered'}) {
        $query_params->{'org.apache.sling.commons.log.file.buffered'} = $self->{api_client}->to_query_value($args{'org/apache/sling/commons/log/file/buffered'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_commons_metrics_internal_log_reporter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $period  (optional)
# @param string $time_unit  (optional)
# @param string $level  (optional)
# @param string $logger_name  (optional)
# @param string $prefix  (optional)
# @param string $pattern  (optional)
# @param string $registry_name  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'period' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'time_unit' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'level' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'logger_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'prefix' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'pattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'registry_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_commons_metrics_internal_log_reporter' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingCommonsMetricsInternalLogReporterInfo',
        };
}
# @return OrgApacheSlingCommonsMetricsInternalLogReporterInfo
#
sub org_apache_sling_commons_metrics_internal_log_reporter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'period'}) {
        $query_params->{'period'} = $self->{api_client}->to_query_value($args{'period'});
    }

    # query params
    if ( exists $args{'time_unit'}) {
        $query_params->{'timeUnit'} = $self->{api_client}->to_query_value($args{'time_unit'});
    }

    # query params
    if ( exists $args{'level'}) {
        $query_params->{'level'} = $self->{api_client}->to_query_value($args{'level'});
    }

    # query params
    if ( exists $args{'logger_name'}) {
        $query_params->{'loggerName'} = $self->{api_client}->to_query_value($args{'logger_name'});
    }

    # query params
    if ( exists $args{'prefix'}) {
        $query_params->{'prefix'} = $self->{api_client}->to_query_value($args{'prefix'});
    }

    # query params
    if ( exists $args{'pattern'}) {
        $query_params->{'pattern'} = $self->{api_client}->to_query_value($args{'pattern'});
    }

    # query params
    if ( exists $args{'registry_name'}) {
        $query_params->{'registryName'} = $self->{api_client}->to_query_value($args{'registry_name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingCommonsMetricsInternalLogReporterInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $datasources  (optional)
# @param int $step  (optional)
# @param ARRAY[string] $archives  (optional)
# @param string $path  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'datasources' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'step' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'archives' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo',
        };
}
# @return OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo
#
sub org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'datasources'}) {
        $query_params->{'datasources'} = $self->{api_client}->to_query_value($args{'datasources'});
    }

    # query params
    if ( exists $args{'step'}) {
        $query_params->{'step'} = $self->{api_client}->to_query_value($args{'step'});
    }

    # query params
    if ( exists $args{'archives'}) {
        $query_params->{'archives'} = $self->{api_client}->to_query_value($args{'archives'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_commons_mime_internal_mime_type_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $mime/types  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'mime/types' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_commons_mime_internal_mime_type_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo',
        };
}
# @return OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo
#
sub org_apache_sling_commons_mime_internal_mime_type_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'mime/types'}) {
        $query_params->{'mime.types'} = $self->{api_client}->to_query_value($args{'mime/types'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_commons_scheduler_impl_quartz_scheduler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $pool_name  (optional)
# @param ARRAY[string] $allowed_pool_names  (optional)
# @param boolean $scheduler/useleaderforsingle  (optional)
# @param ARRAY[string] $metrics/filters  (optional)
# @param int $slow_threshold_millis  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'pool_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'allowed_pool_names' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduler/useleaderforsingle' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'metrics/filters' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'slow_threshold_millis' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_commons_scheduler_impl_quartz_scheduler' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo',
        };
}
# @return OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo
#
sub org_apache_sling_commons_scheduler_impl_quartz_scheduler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'pool_name'}) {
        $query_params->{'poolName'} = $self->{api_client}->to_query_value($args{'pool_name'});
    }

    # query params
    if ( exists $args{'allowed_pool_names'}) {
        $query_params->{'allowedPoolNames'} = $self->{api_client}->to_query_value($args{'allowed_pool_names'});
    }

    # query params
    if ( exists $args{'scheduler/useleaderforsingle'}) {
        $query_params->{'scheduler.useleaderforsingle'} = $self->{api_client}->to_query_value($args{'scheduler/useleaderforsingle'});
    }

    # query params
    if ( exists $args{'metrics/filters'}) {
        $query_params->{'metrics.filters'} = $self->{api_client}->to_query_value($args{'metrics/filters'});
    }

    # query params
    if ( exists $args{'slow_threshold_millis'}) {
        $query_params->{'slowThresholdMillis'} = $self->{api_client}->to_query_value($args{'slow_threshold_millis'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_commons_scheduler_impl_scheduler_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $max/quartz_job/duration/acceptable  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'max/quartz_job/duration/acceptable' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_commons_scheduler_impl_scheduler_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo',
        };
}
# @return OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo
#
sub org_apache_sling_commons_scheduler_impl_scheduler_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'max/quartz_job/duration/acceptable'}) {
        $query_params->{'max.quartzJob.duration.acceptable'} = $self->{api_client}->to_query_value($args{'max/quartz_job/duration/acceptable'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_commons_threads_impl_default_thread_pool_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param int $min_pool_size  (optional)
# @param int $max_pool_size  (optional)
# @param int $queue_size  (optional)
# @param int $max_thread_age  (optional)
# @param int $keep_alive_time  (optional)
# @param string $block_policy  (optional)
# @param boolean $shutdown_graceful  (optional)
# @param boolean $daemon  (optional)
# @param int $shutdown_wait_time  (optional)
# @param string $priority  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'min_pool_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'max_pool_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'queue_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'max_thread_age' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'keep_alive_time' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'block_policy' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'shutdown_graceful' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'daemon' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'shutdown_wait_time' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'priority' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_commons_threads_impl_default_thread_pool_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo',
        };
}
# @return OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo
#
sub org_apache_sling_commons_threads_impl_default_thread_pool_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'min_pool_size'}) {
        $query_params->{'minPoolSize'} = $self->{api_client}->to_query_value($args{'min_pool_size'});
    }

    # query params
    if ( exists $args{'max_pool_size'}) {
        $query_params->{'maxPoolSize'} = $self->{api_client}->to_query_value($args{'max_pool_size'});
    }

    # query params
    if ( exists $args{'queue_size'}) {
        $query_params->{'queueSize'} = $self->{api_client}->to_query_value($args{'queue_size'});
    }

    # query params
    if ( exists $args{'max_thread_age'}) {
        $query_params->{'maxThreadAge'} = $self->{api_client}->to_query_value($args{'max_thread_age'});
    }

    # query params
    if ( exists $args{'keep_alive_time'}) {
        $query_params->{'keepAliveTime'} = $self->{api_client}->to_query_value($args{'keep_alive_time'});
    }

    # query params
    if ( exists $args{'block_policy'}) {
        $query_params->{'blockPolicy'} = $self->{api_client}->to_query_value($args{'block_policy'});
    }

    # query params
    if ( exists $args{'shutdown_graceful'}) {
        $query_params->{'shutdownGraceful'} = $self->{api_client}->to_query_value($args{'shutdown_graceful'});
    }

    # query params
    if ( exists $args{'daemon'}) {
        $query_params->{'daemon'} = $self->{api_client}->to_query_value($args{'daemon'});
    }

    # query params
    if ( exists $args{'shutdown_wait_time'}) {
        $query_params->{'shutdownWaitTime'} = $self->{api_client}->to_query_value($args{'shutdown_wait_time'});
    }

    # query params
    if ( exists $args{'priority'}) {
        $query_params->{'priority'} = $self->{api_client}->to_query_value($args{'priority'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_datasource_data_source_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $datasource/name  (optional)
# @param string $datasource/svc/prop/name  (optional)
# @param string $driver_class_name  (optional)
# @param string $url  (optional)
# @param string $username  (optional)
# @param string $password  (optional)
# @param string $default_auto_commit  (optional)
# @param string $default_read_only  (optional)
# @param string $default_transaction_isolation  (optional)
# @param string $default_catalog  (optional)
# @param int $max_active  (optional)
# @param int $max_idle  (optional)
# @param int $min_idle  (optional)
# @param int $initial_size  (optional)
# @param int $max_wait  (optional)
# @param int $max_age  (optional)
# @param boolean $test_on_borrow  (optional)
# @param boolean $test_on_return  (optional)
# @param boolean $test_while_idle  (optional)
# @param string $validation_query  (optional)
# @param int $validation_query_timeout  (optional)
# @param int $time_between_eviction_runs_millis  (optional)
# @param int $min_evictable_idle_time_millis  (optional)
# @param string $connection_properties  (optional)
# @param string $init_sql  (optional)
# @param string $jdbc_interceptors  (optional)
# @param int $validation_interval  (optional)
# @param boolean $log_validation_errors  (optional)
# @param ARRAY[string] $datasource/svc/properties  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'datasource/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'datasource/svc/prop/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'driver_class_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'username' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'password' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default_auto_commit' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default_read_only' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default_transaction_isolation' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'default_catalog' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'max_active' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'max_idle' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'min_idle' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'initial_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'max_wait' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'max_age' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'test_on_borrow' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'test_on_return' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'test_while_idle' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'validation_query' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'validation_query_timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'time_between_eviction_runs_millis' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'min_evictable_idle_time_millis' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'connection_properties' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'init_sql' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jdbc_interceptors' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'validation_interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'log_validation_errors' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'datasource/svc/properties' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_datasource_data_source_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDatasourceDataSourceFactoryInfo',
        };
}
# @return OrgApacheSlingDatasourceDataSourceFactoryInfo
#
sub org_apache_sling_datasource_data_source_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'datasource/name'}) {
        $query_params->{'datasource.name'} = $self->{api_client}->to_query_value($args{'datasource/name'});
    }

    # query params
    if ( exists $args{'datasource/svc/prop/name'}) {
        $query_params->{'datasource.svc.prop.name'} = $self->{api_client}->to_query_value($args{'datasource/svc/prop/name'});
    }

    # query params
    if ( exists $args{'driver_class_name'}) {
        $query_params->{'driverClassName'} = $self->{api_client}->to_query_value($args{'driver_class_name'});
    }

    # query params
    if ( exists $args{'url'}) {
        $query_params->{'url'} = $self->{api_client}->to_query_value($args{'url'});
    }

    # query params
    if ( exists $args{'username'}) {
        $query_params->{'username'} = $self->{api_client}->to_query_value($args{'username'});
    }

    # query params
    if ( exists $args{'password'}) {
        $query_params->{'password'} = $self->{api_client}->to_query_value($args{'password'});
    }

    # query params
    if ( exists $args{'default_auto_commit'}) {
        $query_params->{'defaultAutoCommit'} = $self->{api_client}->to_query_value($args{'default_auto_commit'});
    }

    # query params
    if ( exists $args{'default_read_only'}) {
        $query_params->{'defaultReadOnly'} = $self->{api_client}->to_query_value($args{'default_read_only'});
    }

    # query params
    if ( exists $args{'default_transaction_isolation'}) {
        $query_params->{'defaultTransactionIsolation'} = $self->{api_client}->to_query_value($args{'default_transaction_isolation'});
    }

    # query params
    if ( exists $args{'default_catalog'}) {
        $query_params->{'defaultCatalog'} = $self->{api_client}->to_query_value($args{'default_catalog'});
    }

    # query params
    if ( exists $args{'max_active'}) {
        $query_params->{'maxActive'} = $self->{api_client}->to_query_value($args{'max_active'});
    }

    # query params
    if ( exists $args{'max_idle'}) {
        $query_params->{'maxIdle'} = $self->{api_client}->to_query_value($args{'max_idle'});
    }

    # query params
    if ( exists $args{'min_idle'}) {
        $query_params->{'minIdle'} = $self->{api_client}->to_query_value($args{'min_idle'});
    }

    # query params
    if ( exists $args{'initial_size'}) {
        $query_params->{'initialSize'} = $self->{api_client}->to_query_value($args{'initial_size'});
    }

    # query params
    if ( exists $args{'max_wait'}) {
        $query_params->{'maxWait'} = $self->{api_client}->to_query_value($args{'max_wait'});
    }

    # query params
    if ( exists $args{'max_age'}) {
        $query_params->{'maxAge'} = $self->{api_client}->to_query_value($args{'max_age'});
    }

    # query params
    if ( exists $args{'test_on_borrow'}) {
        $query_params->{'testOnBorrow'} = $self->{api_client}->to_query_value($args{'test_on_borrow'});
    }

    # query params
    if ( exists $args{'test_on_return'}) {
        $query_params->{'testOnReturn'} = $self->{api_client}->to_query_value($args{'test_on_return'});
    }

    # query params
    if ( exists $args{'test_while_idle'}) {
        $query_params->{'testWhileIdle'} = $self->{api_client}->to_query_value($args{'test_while_idle'});
    }

    # query params
    if ( exists $args{'validation_query'}) {
        $query_params->{'validationQuery'} = $self->{api_client}->to_query_value($args{'validation_query'});
    }

    # query params
    if ( exists $args{'validation_query_timeout'}) {
        $query_params->{'validationQueryTimeout'} = $self->{api_client}->to_query_value($args{'validation_query_timeout'});
    }

    # query params
    if ( exists $args{'time_between_eviction_runs_millis'}) {
        $query_params->{'timeBetweenEvictionRunsMillis'} = $self->{api_client}->to_query_value($args{'time_between_eviction_runs_millis'});
    }

    # query params
    if ( exists $args{'min_evictable_idle_time_millis'}) {
        $query_params->{'minEvictableIdleTimeMillis'} = $self->{api_client}->to_query_value($args{'min_evictable_idle_time_millis'});
    }

    # query params
    if ( exists $args{'connection_properties'}) {
        $query_params->{'connectionProperties'} = $self->{api_client}->to_query_value($args{'connection_properties'});
    }

    # query params
    if ( exists $args{'init_sql'}) {
        $query_params->{'initSQL'} = $self->{api_client}->to_query_value($args{'init_sql'});
    }

    # query params
    if ( exists $args{'jdbc_interceptors'}) {
        $query_params->{'jdbcInterceptors'} = $self->{api_client}->to_query_value($args{'jdbc_interceptors'});
    }

    # query params
    if ( exists $args{'validation_interval'}) {
        $query_params->{'validationInterval'} = $self->{api_client}->to_query_value($args{'validation_interval'});
    }

    # query params
    if ( exists $args{'log_validation_errors'}) {
        $query_params->{'logValidationErrors'} = $self->{api_client}->to_query_value($args{'log_validation_errors'});
    }

    # query params
    if ( exists $args{'datasource/svc/properties'}) {
        $query_params->{'datasource.svc.properties'} = $self->{api_client}->to_query_value($args{'datasource/svc/properties'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDatasourceDataSourceFactoryInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_datasource_jndi_data_source_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $datasource/name  (optional)
# @param string $datasource/svc/prop/name  (optional)
# @param string $datasource/jndi/name  (optional)
# @param ARRAY[string] $jndi/properties  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'datasource/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'datasource/svc/prop/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'datasource/jndi/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jndi/properties' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_datasource_jndi_data_source_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo',
        };
}
# @return OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo
#
sub org_apache_sling_datasource_jndi_data_source_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'datasource/name'}) {
        $query_params->{'datasource.name'} = $self->{api_client}->to_query_value($args{'datasource/name'});
    }

    # query params
    if ( exists $args{'datasource/svc/prop/name'}) {
        $query_params->{'datasource.svc.prop.name'} = $self->{api_client}->to_query_value($args{'datasource/svc/prop/name'});
    }

    # query params
    if ( exists $args{'datasource/jndi/name'}) {
        $query_params->{'datasource.jndi.name'} = $self->{api_client}->to_query_value($args{'datasource/jndi/name'});
    }

    # query params
    if ( exists $args{'jndi/properties'}) {
        $query_params->{'jndi.properties'} = $self->{api_client}->to_query_value($args{'jndi/properties'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_discovery_oak_config
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $connector_ping_timeout  (optional)
# @param int $connector_ping_interval  (optional)
# @param int $discovery_lite_check_interval  (optional)
# @param int $cluster_sync_service_timeout  (optional)
# @param int $cluster_sync_service_interval  (optional)
# @param boolean $enable_sync_token  (optional)
# @param int $min_event_delay  (optional)
# @param int $socket_connect_timeout  (optional)
# @param int $so_timeout  (optional)
# @param ARRAY[string] $topology_connector_urls  (optional)
# @param ARRAY[string] $topology_connector_whitelist  (optional)
# @param boolean $auto_stop_local_loop_enabled  (optional)
# @param boolean $gzip_connector_requests_enabled  (optional)
# @param boolean $hmac_enabled  (optional)
# @param boolean $enable_encryption  (optional)
# @param string $shared_key  (optional)
# @param int $hmac_shared_key_ttl  (optional)
# @param string $backoff_standby_factor  (optional)
# @param string $backoff_stable_factor  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'connector_ping_timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'connector_ping_interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'discovery_lite_check_interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cluster_sync_service_timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cluster_sync_service_interval' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'enable_sync_token' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'min_event_delay' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'socket_connect_timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'so_timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'topology_connector_urls' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'topology_connector_whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'auto_stop_local_loop_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'gzip_connector_requests_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'hmac_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'enable_encryption' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'shared_key' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'hmac_shared_key_ttl' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'backoff_standby_factor' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'backoff_stable_factor' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_discovery_oak_config' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDiscoveryOakConfigInfo',
        };
}
# @return OrgApacheSlingDiscoveryOakConfigInfo
#
sub org_apache_sling_discovery_oak_config {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.discovery.oak.Config';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'connector_ping_timeout'}) {
        $query_params->{'connectorPingTimeout'} = $self->{api_client}->to_query_value($args{'connector_ping_timeout'});
    }

    # query params
    if ( exists $args{'connector_ping_interval'}) {
        $query_params->{'connectorPingInterval'} = $self->{api_client}->to_query_value($args{'connector_ping_interval'});
    }

    # query params
    if ( exists $args{'discovery_lite_check_interval'}) {
        $query_params->{'discoveryLiteCheckInterval'} = $self->{api_client}->to_query_value($args{'discovery_lite_check_interval'});
    }

    # query params
    if ( exists $args{'cluster_sync_service_timeout'}) {
        $query_params->{'clusterSyncServiceTimeout'} = $self->{api_client}->to_query_value($args{'cluster_sync_service_timeout'});
    }

    # query params
    if ( exists $args{'cluster_sync_service_interval'}) {
        $query_params->{'clusterSyncServiceInterval'} = $self->{api_client}->to_query_value($args{'cluster_sync_service_interval'});
    }

    # query params
    if ( exists $args{'enable_sync_token'}) {
        $query_params->{'enableSyncToken'} = $self->{api_client}->to_query_value($args{'enable_sync_token'});
    }

    # query params
    if ( exists $args{'min_event_delay'}) {
        $query_params->{'minEventDelay'} = $self->{api_client}->to_query_value($args{'min_event_delay'});
    }

    # query params
    if ( exists $args{'socket_connect_timeout'}) {
        $query_params->{'socketConnectTimeout'} = $self->{api_client}->to_query_value($args{'socket_connect_timeout'});
    }

    # query params
    if ( exists $args{'so_timeout'}) {
        $query_params->{'soTimeout'} = $self->{api_client}->to_query_value($args{'so_timeout'});
    }

    # query params
    if ( exists $args{'topology_connector_urls'}) {
        $query_params->{'topologyConnectorUrls'} = $self->{api_client}->to_query_value($args{'topology_connector_urls'});
    }

    # query params
    if ( exists $args{'topology_connector_whitelist'}) {
        $query_params->{'topologyConnectorWhitelist'} = $self->{api_client}->to_query_value($args{'topology_connector_whitelist'});
    }

    # query params
    if ( exists $args{'auto_stop_local_loop_enabled'}) {
        $query_params->{'autoStopLocalLoopEnabled'} = $self->{api_client}->to_query_value($args{'auto_stop_local_loop_enabled'});
    }

    # query params
    if ( exists $args{'gzip_connector_requests_enabled'}) {
        $query_params->{'gzipConnectorRequestsEnabled'} = $self->{api_client}->to_query_value($args{'gzip_connector_requests_enabled'});
    }

    # query params
    if ( exists $args{'hmac_enabled'}) {
        $query_params->{'hmacEnabled'} = $self->{api_client}->to_query_value($args{'hmac_enabled'});
    }

    # query params
    if ( exists $args{'enable_encryption'}) {
        $query_params->{'enableEncryption'} = $self->{api_client}->to_query_value($args{'enable_encryption'});
    }

    # query params
    if ( exists $args{'shared_key'}) {
        $query_params->{'sharedKey'} = $self->{api_client}->to_query_value($args{'shared_key'});
    }

    # query params
    if ( exists $args{'hmac_shared_key_ttl'}) {
        $query_params->{'hmacSharedKeyTTL'} = $self->{api_client}->to_query_value($args{'hmac_shared_key_ttl'});
    }

    # query params
    if ( exists $args{'backoff_standby_factor'}) {
        $query_params->{'backoffStandbyFactor'} = $self->{api_client}->to_query_value($args{'backoff_standby_factor'});
    }

    # query params
    if ( exists $args{'backoff_stable_factor'}) {
        $query_params->{'backoffStableFactor'} = $self->{api_client}->to_query_value($args{'backoff_stable_factor'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDiscoveryOakConfigInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_discovery_oak_synchronized_clocks_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $hc/name  (optional)
# @param ARRAY[string] $hc/tags  (optional)
# @param string $hc/mbean/name  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/mbean/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_discovery_oak_synchronized_clocks_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo',
        };
}
# @return OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo
#
sub org_apache_sling_discovery_oak_synchronized_clocks_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/name'}) {
        $query_params->{'hc.name'} = $self->{api_client}->to_query_value($args{'hc/name'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    # query params
    if ( exists $args{'hc/mbean/name'}) {
        $query_params->{'hc.mbean.name'} = $self->{api_client}->to_query_value($args{'hc/mbean/name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $title  (optional)
# @param string $details  (optional)
# @param boolean $enabled  (optional)
# @param string $service_name  (optional)
# @param string $log/level  (optional)
# @param ARRAY[string] $allowed/roots  (optional)
# @param boolean $queue/processing/enabled  (optional)
# @param ARRAY[string] $package_importer/endpoints  (optional)
# @param ARRAY[string] $passive_queues  (optional)
# @param ARRAY[string] $priority_queues  (optional)
# @param string $retry/strategy  (optional)
# @param int $retry/attempts  (optional)
# @param string $request_authorization_strategy/target  (optional)
# @param string $transport_secret_provider/target  (optional)
# @param string $package_builder/target  (optional)
# @param string $triggers/target  (optional)
# @param string $queue/provider  (optional)
# @param boolean $async/delivery  (optional)
# @param int $http/conn/timeout  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'title' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'details' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'service_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'log/level' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'allowed/roots' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'queue/processing/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'package_importer/endpoints' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'passive_queues' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'priority_queues' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'retry/strategy' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'retry/attempts' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'request_authorization_strategy/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'transport_secret_provider/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'package_builder/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'triggers/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'queue/provider' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'async/delivery' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'http/conn/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo',
        };
}
# @return OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo
#
sub org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'title'}) {
        $query_params->{'title'} = $self->{api_client}->to_query_value($args{'title'});
    }

    # query params
    if ( exists $args{'details'}) {
        $query_params->{'details'} = $self->{api_client}->to_query_value($args{'details'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    # query params
    if ( exists $args{'service_name'}) {
        $query_params->{'serviceName'} = $self->{api_client}->to_query_value($args{'service_name'});
    }

    # query params
    if ( exists $args{'log/level'}) {
        $query_params->{'log.level'} = $self->{api_client}->to_query_value($args{'log/level'});
    }

    # query params
    if ( exists $args{'allowed/roots'}) {
        $query_params->{'allowed.roots'} = $self->{api_client}->to_query_value($args{'allowed/roots'});
    }

    # query params
    if ( exists $args{'queue/processing/enabled'}) {
        $query_params->{'queue.processing.enabled'} = $self->{api_client}->to_query_value($args{'queue/processing/enabled'});
    }

    # query params
    if ( exists $args{'package_importer/endpoints'}) {
        $query_params->{'packageImporter.endpoints'} = $self->{api_client}->to_query_value($args{'package_importer/endpoints'});
    }

    # query params
    if ( exists $args{'passive_queues'}) {
        $query_params->{'passiveQueues'} = $self->{api_client}->to_query_value($args{'passive_queues'});
    }

    # query params
    if ( exists $args{'priority_queues'}) {
        $query_params->{'priorityQueues'} = $self->{api_client}->to_query_value($args{'priority_queues'});
    }

    # query params
    if ( exists $args{'retry/strategy'}) {
        $query_params->{'retry.strategy'} = $self->{api_client}->to_query_value($args{'retry/strategy'});
    }

    # query params
    if ( exists $args{'retry/attempts'}) {
        $query_params->{'retry.attempts'} = $self->{api_client}->to_query_value($args{'retry/attempts'});
    }

    # query params
    if ( exists $args{'request_authorization_strategy/target'}) {
        $query_params->{'requestAuthorizationStrategy.target'} = $self->{api_client}->to_query_value($args{'request_authorization_strategy/target'});
    }

    # query params
    if ( exists $args{'transport_secret_provider/target'}) {
        $query_params->{'transportSecretProvider.target'} = $self->{api_client}->to_query_value($args{'transport_secret_provider/target'});
    }

    # query params
    if ( exists $args{'package_builder/target'}) {
        $query_params->{'packageBuilder.target'} = $self->{api_client}->to_query_value($args{'package_builder/target'});
    }

    # query params
    if ( exists $args{'triggers/target'}) {
        $query_params->{'triggers.target'} = $self->{api_client}->to_query_value($args{'triggers/target'});
    }

    # query params
    if ( exists $args{'queue/provider'}) {
        $query_params->{'queue.provider'} = $self->{api_client}->to_query_value($args{'queue/provider'});
    }

    # query params
    if ( exists $args{'async/delivery'}) {
        $query_params->{'async.delivery'} = $self->{api_client}->to_query_value($args{'async/delivery'});
    }

    # query params
    if ( exists $args{'http/conn/timeout'}) {
        $query_params->{'http.conn.timeout'} = $self->{api_client}->to_query_value($args{'http/conn/timeout'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_agent_impl_privilege_distribution_request_a
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $jcr_privilege  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jcr_privilege' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_agent_impl_privilege_distribution_request_a' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo',
        };
}
# @return OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo
#
sub org_apache_sling_distribution_agent_impl_privilege_distribution_request_a {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'jcr_privilege'}) {
        $query_params->{'jcrPrivilege'} = $self->{api_client}->to_query_value($args{'jcr_privilege'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $title  (optional)
# @param string $details  (optional)
# @param boolean $enabled  (optional)
# @param string $service_name  (optional)
# @param string $log/level  (optional)
# @param ARRAY[string] $allowed/roots  (optional)
# @param string $request_authorization_strategy/target  (optional)
# @param string $queue_provider_factory/target  (optional)
# @param string $package_builder/target  (optional)
# @param string $triggers/target  (optional)
# @param ARRAY[string] $priority_queues  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'title' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'details' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'service_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'log/level' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'allowed/roots' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'request_authorization_strategy/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'queue_provider_factory/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'package_builder/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'triggers/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'priority_queues' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo',
        };
}
# @return OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo
#
sub org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'title'}) {
        $query_params->{'title'} = $self->{api_client}->to_query_value($args{'title'});
    }

    # query params
    if ( exists $args{'details'}) {
        $query_params->{'details'} = $self->{api_client}->to_query_value($args{'details'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    # query params
    if ( exists $args{'service_name'}) {
        $query_params->{'serviceName'} = $self->{api_client}->to_query_value($args{'service_name'});
    }

    # query params
    if ( exists $args{'log/level'}) {
        $query_params->{'log.level'} = $self->{api_client}->to_query_value($args{'log/level'});
    }

    # query params
    if ( exists $args{'allowed/roots'}) {
        $query_params->{'allowed.roots'} = $self->{api_client}->to_query_value($args{'allowed/roots'});
    }

    # query params
    if ( exists $args{'request_authorization_strategy/target'}) {
        $query_params->{'requestAuthorizationStrategy.target'} = $self->{api_client}->to_query_value($args{'request_authorization_strategy/target'});
    }

    # query params
    if ( exists $args{'queue_provider_factory/target'}) {
        $query_params->{'queueProviderFactory.target'} = $self->{api_client}->to_query_value($args{'queue_provider_factory/target'});
    }

    # query params
    if ( exists $args{'package_builder/target'}) {
        $query_params->{'packageBuilder.target'} = $self->{api_client}->to_query_value($args{'package_builder/target'});
    }

    # query params
    if ( exists $args{'triggers/target'}) {
        $query_params->{'triggers.target'} = $self->{api_client}->to_query_value($args{'triggers/target'});
    }

    # query params
    if ( exists $args{'priority_queues'}) {
        $query_params->{'priorityQueues'} = $self->{api_client}->to_query_value($args{'priority_queues'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $title  (optional)
# @param string $details  (optional)
# @param boolean $enabled  (optional)
# @param string $service_name  (optional)
# @param string $log/level  (optional)
# @param boolean $queue/processing/enabled  (optional)
# @param ARRAY[string] $package_exporter/endpoints  (optional)
# @param int $pull/items  (optional)
# @param int $http/conn/timeout  (optional)
# @param string $request_authorization_strategy/target  (optional)
# @param string $transport_secret_provider/target  (optional)
# @param string $package_builder/target  (optional)
# @param string $triggers/target  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'title' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'details' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'service_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'log/level' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'queue/processing/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'package_exporter/endpoints' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'pull/items' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'http/conn/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'request_authorization_strategy/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'transport_secret_provider/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'package_builder/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'triggers/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo',
        };
}
# @return OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo
#
sub org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'title'}) {
        $query_params->{'title'} = $self->{api_client}->to_query_value($args{'title'});
    }

    # query params
    if ( exists $args{'details'}) {
        $query_params->{'details'} = $self->{api_client}->to_query_value($args{'details'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    # query params
    if ( exists $args{'service_name'}) {
        $query_params->{'serviceName'} = $self->{api_client}->to_query_value($args{'service_name'});
    }

    # query params
    if ( exists $args{'log/level'}) {
        $query_params->{'log.level'} = $self->{api_client}->to_query_value($args{'log/level'});
    }

    # query params
    if ( exists $args{'queue/processing/enabled'}) {
        $query_params->{'queue.processing.enabled'} = $self->{api_client}->to_query_value($args{'queue/processing/enabled'});
    }

    # query params
    if ( exists $args{'package_exporter/endpoints'}) {
        $query_params->{'packageExporter.endpoints'} = $self->{api_client}->to_query_value($args{'package_exporter/endpoints'});
    }

    # query params
    if ( exists $args{'pull/items'}) {
        $query_params->{'pull.items'} = $self->{api_client}->to_query_value($args{'pull/items'});
    }

    # query params
    if ( exists $args{'http/conn/timeout'}) {
        $query_params->{'http.conn.timeout'} = $self->{api_client}->to_query_value($args{'http/conn/timeout'});
    }

    # query params
    if ( exists $args{'request_authorization_strategy/target'}) {
        $query_params->{'requestAuthorizationStrategy.target'} = $self->{api_client}->to_query_value($args{'request_authorization_strategy/target'});
    }

    # query params
    if ( exists $args{'transport_secret_provider/target'}) {
        $query_params->{'transportSecretProvider.target'} = $self->{api_client}->to_query_value($args{'transport_secret_provider/target'});
    }

    # query params
    if ( exists $args{'package_builder/target'}) {
        $query_params->{'packageBuilder.target'} = $self->{api_client}->to_query_value($args{'package_builder/target'});
    }

    # query params
    if ( exists $args{'triggers/target'}) {
        $query_params->{'triggers.target'} = $self->{api_client}->to_query_value($args{'triggers/target'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $title  (optional)
# @param string $details  (optional)
# @param boolean $enabled  (optional)
# @param string $service_name  (optional)
# @param string $log/level  (optional)
# @param boolean $queue/processing/enabled  (optional)
# @param string $package_exporter/target  (optional)
# @param string $package_importer/target  (optional)
# @param string $request_authorization_strategy/target  (optional)
# @param string $triggers/target  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'title' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'details' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'service_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'log/level' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'queue/processing/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'package_exporter/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'package_importer/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'request_authorization_strategy/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'triggers/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo',
        };
}
# @return OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo
#
sub org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'title'}) {
        $query_params->{'title'} = $self->{api_client}->to_query_value($args{'title'});
    }

    # query params
    if ( exists $args{'details'}) {
        $query_params->{'details'} = $self->{api_client}->to_query_value($args{'details'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    # query params
    if ( exists $args{'service_name'}) {
        $query_params->{'serviceName'} = $self->{api_client}->to_query_value($args{'service_name'});
    }

    # query params
    if ( exists $args{'log/level'}) {
        $query_params->{'log.level'} = $self->{api_client}->to_query_value($args{'log/level'});
    }

    # query params
    if ( exists $args{'queue/processing/enabled'}) {
        $query_params->{'queue.processing.enabled'} = $self->{api_client}->to_query_value($args{'queue/processing/enabled'});
    }

    # query params
    if ( exists $args{'package_exporter/target'}) {
        $query_params->{'packageExporter.target'} = $self->{api_client}->to_query_value($args{'package_exporter/target'});
    }

    # query params
    if ( exists $args{'package_importer/target'}) {
        $query_params->{'packageImporter.target'} = $self->{api_client}->to_query_value($args{'package_importer/target'});
    }

    # query params
    if ( exists $args{'request_authorization_strategy/target'}) {
        $query_params->{'requestAuthorizationStrategy.target'} = $self->{api_client}->to_query_value($args{'request_authorization_strategy/target'});
    }

    # query params
    if ( exists $args{'triggers/target'}) {
        $query_params->{'triggers.target'} = $self->{api_client}->to_query_value($args{'triggers/target'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $title  (optional)
# @param string $details  (optional)
# @param boolean $enabled  (optional)
# @param string $service_name  (optional)
# @param string $log/level  (optional)
# @param boolean $queue/processing/enabled  (optional)
# @param ARRAY[string] $passive_queues  (optional)
# @param ARRAY[string] $package_exporter/endpoints  (optional)
# @param ARRAY[string] $package_importer/endpoints  (optional)
# @param string $retry/strategy  (optional)
# @param int $retry/attempts  (optional)
# @param int $pull/items  (optional)
# @param int $http/conn/timeout  (optional)
# @param string $request_authorization_strategy/target  (optional)
# @param string $transport_secret_provider/target  (optional)
# @param string $package_builder/target  (optional)
# @param string $triggers/target  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'title' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'details' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'service_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'log/level' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'queue/processing/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'passive_queues' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'package_exporter/endpoints' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'package_importer/endpoints' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'retry/strategy' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'retry/attempts' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'pull/items' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'http/conn/timeout' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'request_authorization_strategy/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'transport_secret_provider/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'package_builder/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'triggers/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo',
        };
}
# @return OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo
#
sub org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'title'}) {
        $query_params->{'title'} = $self->{api_client}->to_query_value($args{'title'});
    }

    # query params
    if ( exists $args{'details'}) {
        $query_params->{'details'} = $self->{api_client}->to_query_value($args{'details'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    # query params
    if ( exists $args{'service_name'}) {
        $query_params->{'serviceName'} = $self->{api_client}->to_query_value($args{'service_name'});
    }

    # query params
    if ( exists $args{'log/level'}) {
        $query_params->{'log.level'} = $self->{api_client}->to_query_value($args{'log/level'});
    }

    # query params
    if ( exists $args{'queue/processing/enabled'}) {
        $query_params->{'queue.processing.enabled'} = $self->{api_client}->to_query_value($args{'queue/processing/enabled'});
    }

    # query params
    if ( exists $args{'passive_queues'}) {
        $query_params->{'passiveQueues'} = $self->{api_client}->to_query_value($args{'passive_queues'});
    }

    # query params
    if ( exists $args{'package_exporter/endpoints'}) {
        $query_params->{'packageExporter.endpoints'} = $self->{api_client}->to_query_value($args{'package_exporter/endpoints'});
    }

    # query params
    if ( exists $args{'package_importer/endpoints'}) {
        $query_params->{'packageImporter.endpoints'} = $self->{api_client}->to_query_value($args{'package_importer/endpoints'});
    }

    # query params
    if ( exists $args{'retry/strategy'}) {
        $query_params->{'retry.strategy'} = $self->{api_client}->to_query_value($args{'retry/strategy'});
    }

    # query params
    if ( exists $args{'retry/attempts'}) {
        $query_params->{'retry.attempts'} = $self->{api_client}->to_query_value($args{'retry/attempts'});
    }

    # query params
    if ( exists $args{'pull/items'}) {
        $query_params->{'pull.items'} = $self->{api_client}->to_query_value($args{'pull/items'});
    }

    # query params
    if ( exists $args{'http/conn/timeout'}) {
        $query_params->{'http.conn.timeout'} = $self->{api_client}->to_query_value($args{'http/conn/timeout'});
    }

    # query params
    if ( exists $args{'request_authorization_strategy/target'}) {
        $query_params->{'requestAuthorizationStrategy.target'} = $self->{api_client}->to_query_value($args{'request_authorization_strategy/target'});
    }

    # query params
    if ( exists $args{'transport_secret_provider/target'}) {
        $query_params->{'transportSecretProvider.target'} = $self->{api_client}->to_query_value($args{'transport_secret_provider/target'});
    }

    # query params
    if ( exists $args{'package_builder/target'}) {
        $query_params->{'packageBuilder.target'} = $self->{api_client}->to_query_value($args{'package_builder/target'});
    }

    # query params
    if ( exists $args{'triggers/target'}) {
        $query_params->{'triggers.target'} = $self->{api_client}->to_query_value($args{'triggers/target'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_monitor_distribution_queue_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $hc/name  (optional)
# @param ARRAY[string] $hc/tags  (optional)
# @param string $hc/mbean/name  (optional)
# @param int $number_of_retries_allowed  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/mbean/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'number_of_retries_allowed' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_monitor_distribution_queue_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo',
        };
}
# @return OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo
#
sub org_apache_sling_distribution_monitor_distribution_queue_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/name'}) {
        $query_params->{'hc.name'} = $self->{api_client}->to_query_value($args{'hc/name'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    # query params
    if ( exists $args{'hc/mbean/name'}) {
        $query_params->{'hc.mbean.name'} = $self->{api_client}->to_query_value($args{'hc/mbean/name'});
    }

    # query params
    if ( exists $args{'number_of_retries_allowed'}) {
        $query_params->{'numberOfRetriesAllowed'} = $self->{api_client}->to_query_value($args{'number_of_retries_allowed'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_packaging_impl_exporter_agent_distributio
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $queue  (optional)
# @param boolean $drop/invalid/items  (optional)
# @param string $agent/target  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'queue' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'drop/invalid/items' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'agent/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_packaging_impl_exporter_agent_distributio' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo',
        };
}
# @return OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo
#
sub org_apache_sling_distribution_packaging_impl_exporter_agent_distributio {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'queue'}) {
        $query_params->{'queue'} = $self->{api_client}->to_query_value($args{'queue'});
    }

    # query params
    if ( exists $args{'drop/invalid/items'}) {
        $query_params->{'drop.invalid.items'} = $self->{api_client}->to_query_value($args{'drop/invalid/items'});
    }

    # query params
    if ( exists $args{'agent/target'}) {
        $query_params->{'agent.target'} = $self->{api_client}->to_query_value($args{'agent/target'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_packaging_impl_exporter_local_distributio
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $package_builder/target  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'package_builder/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_packaging_impl_exporter_local_distributio' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo',
        };
}
# @return OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo
#
sub org_apache_sling_distribution_packaging_impl_exporter_local_distributio {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'package_builder/target'}) {
        $query_params->{'packageBuilder.target'} = $self->{api_client}->to_query_value($args{'package_builder/target'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_packaging_impl_exporter_remote_distributi
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param ARRAY[string] $endpoints  (optional)
# @param int $pull/items  (optional)
# @param string $package_builder/target  (optional)
# @param string $transport_secret_provider/target  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'endpoints' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'pull/items' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'package_builder/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'transport_secret_provider/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_packaging_impl_exporter_remote_distributi' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo',
        };
}
# @return OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo
#
sub org_apache_sling_distribution_packaging_impl_exporter_remote_distributi {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'endpoints'}) {
        $query_params->{'endpoints'} = $self->{api_client}->to_query_value($args{'endpoints'});
    }

    # query params
    if ( exists $args{'pull/items'}) {
        $query_params->{'pull.items'} = $self->{api_client}->to_query_value($args{'pull/items'});
    }

    # query params
    if ( exists $args{'package_builder/target'}) {
        $query_params->{'packageBuilder.target'} = $self->{api_client}->to_query_value($args{'package_builder/target'});
    }

    # query params
    if ( exists $args{'transport_secret_provider/target'}) {
        $query_params->{'transportSecretProvider.target'} = $self->{api_client}->to_query_value($args{'transport_secret_provider/target'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_packaging_impl_importer_local_distributio
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $package_builder/target  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'package_builder/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_packaging_impl_importer_local_distributio' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo',
        };
}
# @return OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo
#
sub org_apache_sling_distribution_packaging_impl_importer_local_distributio {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'package_builder/target'}) {
        $query_params->{'packageBuilder.target'} = $self->{api_client}->to_query_value($args{'package_builder/target'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_packaging_impl_importer_remote_distributi
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param ARRAY[string] $endpoints  (optional)
# @param string $transport_secret_provider/target  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'endpoints' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'transport_secret_provider/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_packaging_impl_importer_remote_distributi' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo',
        };
}
# @return OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo
#
sub org_apache_sling_distribution_packaging_impl_importer_remote_distributi {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'endpoints'}) {
        $query_params->{'endpoints'} = $self->{api_client}->to_query_value($args{'endpoints'});
    }

    # query params
    if ( exists $args{'transport_secret_provider/target'}) {
        $query_params->{'transportSecretProvider.target'} = $self->{api_client}->to_query_value($args{'transport_secret_provider/target'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_packaging_impl_importer_repository_distri
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $service/name  (optional)
# @param string $path  (optional)
# @param string $privilege/name  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'service/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'privilege/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_packaging_impl_importer_repository_distri' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo',
        };
}
# @return OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo
#
sub org_apache_sling_distribution_packaging_impl_importer_repository_distri {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'service/name'}) {
        $query_params->{'service.name'} = $self->{api_client}->to_query_value($args{'service/name'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'privilege/name'}) {
        $query_params->{'privilege.name'} = $self->{api_client}->to_query_value($args{'privilege/name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_resources_impl_distribution_configuration
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $provider/roots  (optional)
# @param string $kind  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'provider/roots' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'kind' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_resources_impl_distribution_configuration' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo',
        };
}
# @return OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo
#
sub org_apache_sling_distribution_resources_impl_distribution_configuration {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'provider/roots'}) {
        $query_params->{'provider.roots'} = $self->{api_client}->to_query_value($args{'provider/roots'});
    }

    # query params
    if ( exists $args{'kind'}) {
        $query_params->{'kind'} = $self->{api_client}->to_query_value($args{'kind'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_resources_impl_distribution_service_resour
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $provider/roots  (optional)
# @param string $kind  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'provider/roots' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'kind' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_resources_impl_distribution_service_resour' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo',
        };
}
# @return OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo
#
sub org_apache_sling_distribution_resources_impl_distribution_service_resour {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'provider/roots'}) {
        $query_params->{'provider.roots'} = $self->{api_client}->to_query_value($args{'provider/roots'});
    }

    # query params
    if ( exists $args{'kind'}) {
        $query_params->{'kind'} = $self->{api_client}->to_query_value($args{'kind'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_serialization_impl_distribution_package_bu
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $type  (optional)
# @param string $format/target  (optional)
# @param string $temp_fs_folder  (optional)
# @param int $file_threshold  (optional)
# @param string $memory_unit  (optional)
# @param boolean $use_off_heap_memory  (optional)
# @param string $digest_algorithm  (optional)
# @param int $monitoring_queue_size  (optional)
# @param int $cleanup_delay  (optional)
# @param ARRAY[string] $package/filters  (optional)
# @param ARRAY[string] $property/filters  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'format/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'temp_fs_folder' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'file_threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'memory_unit' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'use_off_heap_memory' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'digest_algorithm' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'monitoring_queue_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cleanup_delay' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'package/filters' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'property/filters' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_serialization_impl_distribution_package_bu' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo',
        };
}
# @return OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo
#
sub org_apache_sling_distribution_serialization_impl_distribution_package_bu {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'format/target'}) {
        $query_params->{'format.target'} = $self->{api_client}->to_query_value($args{'format/target'});
    }

    # query params
    if ( exists $args{'temp_fs_folder'}) {
        $query_params->{'tempFsFolder'} = $self->{api_client}->to_query_value($args{'temp_fs_folder'});
    }

    # query params
    if ( exists $args{'file_threshold'}) {
        $query_params->{'fileThreshold'} = $self->{api_client}->to_query_value($args{'file_threshold'});
    }

    # query params
    if ( exists $args{'memory_unit'}) {
        $query_params->{'memoryUnit'} = $self->{api_client}->to_query_value($args{'memory_unit'});
    }

    # query params
    if ( exists $args{'use_off_heap_memory'}) {
        $query_params->{'useOffHeapMemory'} = $self->{api_client}->to_query_value($args{'use_off_heap_memory'});
    }

    # query params
    if ( exists $args{'digest_algorithm'}) {
        $query_params->{'digestAlgorithm'} = $self->{api_client}->to_query_value($args{'digest_algorithm'});
    }

    # query params
    if ( exists $args{'monitoring_queue_size'}) {
        $query_params->{'monitoringQueueSize'} = $self->{api_client}->to_query_value($args{'monitoring_queue_size'});
    }

    # query params
    if ( exists $args{'cleanup_delay'}) {
        $query_params->{'cleanupDelay'} = $self->{api_client}->to_query_value($args{'cleanup_delay'});
    }

    # query params
    if ( exists $args{'package/filters'}) {
        $query_params->{'package.filters'} = $self->{api_client}->to_query_value($args{'package/filters'});
    }

    # query params
    if ( exists $args{'property/filters'}) {
        $query_params->{'property.filters'} = $self->{api_client}->to_query_value($args{'property/filters'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_serialization_impl_vlt_vault_distribution
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $type  (optional)
# @param string $import_mode  (optional)
# @param string $acl_handling  (optional)
# @param string $package/roots  (optional)
# @param ARRAY[string] $package/filters  (optional)
# @param ARRAY[string] $property/filters  (optional)
# @param string $temp_fs_folder  (optional)
# @param boolean $use_binary_references  (optional)
# @param int $auto_save_threshold  (optional)
# @param int $cleanup_delay  (optional)
# @param int $file_threshold  (optional)
# @param string $mega_bytes  (optional)
# @param boolean $use_off_heap_memory  (optional)
# @param string $digest_algorithm  (optional)
# @param int $monitoring_queue_size  (optional)
# @param ARRAY[string] $paths_mapping  (optional)
# @param boolean $strict_import  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'import_mode' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'acl_handling' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'package/roots' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'package/filters' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'property/filters' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'temp_fs_folder' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'use_binary_references' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'auto_save_threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cleanup_delay' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'file_threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'mega_bytes' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'use_off_heap_memory' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'digest_algorithm' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'monitoring_queue_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'paths_mapping' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'strict_import' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_serialization_impl_vlt_vault_distribution' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo',
        };
}
# @return OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo
#
sub org_apache_sling_distribution_serialization_impl_vlt_vault_distribution {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'import_mode'}) {
        $query_params->{'importMode'} = $self->{api_client}->to_query_value($args{'import_mode'});
    }

    # query params
    if ( exists $args{'acl_handling'}) {
        $query_params->{'aclHandling'} = $self->{api_client}->to_query_value($args{'acl_handling'});
    }

    # query params
    if ( exists $args{'package/roots'}) {
        $query_params->{'package.roots'} = $self->{api_client}->to_query_value($args{'package/roots'});
    }

    # query params
    if ( exists $args{'package/filters'}) {
        $query_params->{'package.filters'} = $self->{api_client}->to_query_value($args{'package/filters'});
    }

    # query params
    if ( exists $args{'property/filters'}) {
        $query_params->{'property.filters'} = $self->{api_client}->to_query_value($args{'property/filters'});
    }

    # query params
    if ( exists $args{'temp_fs_folder'}) {
        $query_params->{'tempFsFolder'} = $self->{api_client}->to_query_value($args{'temp_fs_folder'});
    }

    # query params
    if ( exists $args{'use_binary_references'}) {
        $query_params->{'useBinaryReferences'} = $self->{api_client}->to_query_value($args{'use_binary_references'});
    }

    # query params
    if ( exists $args{'auto_save_threshold'}) {
        $query_params->{'autoSaveThreshold'} = $self->{api_client}->to_query_value($args{'auto_save_threshold'});
    }

    # query params
    if ( exists $args{'cleanup_delay'}) {
        $query_params->{'cleanupDelay'} = $self->{api_client}->to_query_value($args{'cleanup_delay'});
    }

    # query params
    if ( exists $args{'file_threshold'}) {
        $query_params->{'fileThreshold'} = $self->{api_client}->to_query_value($args{'file_threshold'});
    }

    # query params
    if ( exists $args{'mega_bytes'}) {
        $query_params->{'MEGA_BYTES'} = $self->{api_client}->to_query_value($args{'mega_bytes'});
    }

    # query params
    if ( exists $args{'use_off_heap_memory'}) {
        $query_params->{'useOffHeapMemory'} = $self->{api_client}->to_query_value($args{'use_off_heap_memory'});
    }

    # query params
    if ( exists $args{'digest_algorithm'}) {
        $query_params->{'digestAlgorithm'} = $self->{api_client}->to_query_value($args{'digest_algorithm'});
    }

    # query params
    if ( exists $args{'monitoring_queue_size'}) {
        $query_params->{'monitoringQueueSize'} = $self->{api_client}->to_query_value($args{'monitoring_queue_size'});
    }

    # query params
    if ( exists $args{'paths_mapping'}) {
        $query_params->{'pathsMapping'} = $self->{api_client}->to_query_value($args{'paths_mapping'});
    }

    # query params
    if ( exists $args{'strict_import'}) {
        $query_params->{'strictImport'} = $self->{api_client}->to_query_value($args{'strict_import'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_transport_impl_user_credentials_distributi
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $username  (optional)
# @param string $password  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'username' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'password' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_transport_impl_user_credentials_distributi' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo',
        };
}
# @return OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo
#
sub org_apache_sling_distribution_transport_impl_user_credentials_distributi {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'username'}) {
        $query_params->{'username'} = $self->{api_client}->to_query_value($args{'username'});
    }

    # query params
    if ( exists $args{'password'}) {
        $query_params->{'password'} = $self->{api_client}->to_query_value($args{'password'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_trigger_impl_distribution_event_distribute
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $path  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_trigger_impl_distribution_event_distribute' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo',
        };
}
# @return OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo
#
sub org_apache_sling_distribution_trigger_impl_distribution_event_distribute {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $path  (optional)
# @param ARRAY[string] $ignored_paths_patterns  (optional)
# @param string $service_name  (optional)
# @param boolean $deep  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'ignored_paths_patterns' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'deep' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo',
        };
}
# @return OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo
#
sub org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'ignored_paths_patterns'}) {
        $query_params->{'ignoredPathsPatterns'} = $self->{api_client}->to_query_value($args{'ignored_paths_patterns'});
    }

    # query params
    if ( exists $args{'service_name'}) {
        $query_params->{'serviceName'} = $self->{api_client}->to_query_value($args{'service_name'});
    }

    # query params
    if ( exists $args{'deep'}) {
        $query_params->{'deep'} = $self->{api_client}->to_query_value($args{'deep'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $path  (optional)
# @param string $service_name  (optional)
# @param string $nuggets_path  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'service_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'nuggets_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo',
        };
}
# @return OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo
#
sub org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'service_name'}) {
        $query_params->{'serviceName'} = $self->{api_client}->to_query_value($args{'service_name'});
    }

    # query params
    if ( exists $args{'nuggets_path'}) {
        $query_params->{'nuggetsPath'} = $self->{api_client}->to_query_value($args{'nuggets_path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $endpoint  (optional)
# @param string $transport_secret_provider/target  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'endpoint' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'transport_secret_provider/target' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo',
        };
}
# @return OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo
#
sub org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'endpoint'}) {
        $query_params->{'endpoint'} = $self->{api_client}->to_query_value($args{'endpoint'});
    }

    # query params
    if ( exists $args{'transport_secret_provider/target'}) {
        $query_params->{'transportSecretProvider.target'} = $self->{api_client}->to_query_value($args{'transport_secret_provider/target'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $path  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo',
        };
}
# @return OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo
#
sub org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $path  (optional)
# @param string $seconds  (optional)
# @param string $service_name  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'seconds' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'service_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo',
        };
}
# @return OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo
#
sub org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'seconds'}) {
        $query_params->{'seconds'} = $self->{api_client}->to_query_value($args{'seconds'});
    }

    # query params
    if ( exists $args{'service_name'}) {
        $query_params->{'serviceName'} = $self->{api_client}->to_query_value($args{'service_name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_engine_impl_auth_sling_authenticator
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $osgi/http/whiteboard/context/select  (optional)
# @param string $osgi/http/whiteboard/listener  (optional)
# @param string $auth/sudo/cookie  (optional)
# @param string $auth/sudo/parameter  (optional)
# @param boolean $auth/annonymous  (optional)
# @param ARRAY[string] $sling/auth/requirements  (optional)
# @param string $sling/auth/anonymous/user  (optional)
# @param string $sling/auth/anonymous/password  (optional)
# @param string $auth/http  (optional)
# @param string $auth/http/realm  (optional)
# @param ARRAY[string] $auth/uri/suffix  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'osgi/http/whiteboard/context/select' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'osgi/http/whiteboard/listener' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auth/sudo/cookie' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auth/sudo/parameter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auth/annonymous' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'sling/auth/requirements' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/auth/anonymous/user' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/auth/anonymous/password' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auth/http' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auth/http/realm' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'auth/uri/suffix' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_engine_impl_auth_sling_authenticator' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo',
        };
}
# @return OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo
#
sub org_apache_sling_engine_impl_auth_sling_authenticator {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'osgi/http/whiteboard/context/select'}) {
        $query_params->{'osgi.http.whiteboard.context.select'} = $self->{api_client}->to_query_value($args{'osgi/http/whiteboard/context/select'});
    }

    # query params
    if ( exists $args{'osgi/http/whiteboard/listener'}) {
        $query_params->{'osgi.http.whiteboard.listener'} = $self->{api_client}->to_query_value($args{'osgi/http/whiteboard/listener'});
    }

    # query params
    if ( exists $args{'auth/sudo/cookie'}) {
        $query_params->{'auth.sudo.cookie'} = $self->{api_client}->to_query_value($args{'auth/sudo/cookie'});
    }

    # query params
    if ( exists $args{'auth/sudo/parameter'}) {
        $query_params->{'auth.sudo.parameter'} = $self->{api_client}->to_query_value($args{'auth/sudo/parameter'});
    }

    # query params
    if ( exists $args{'auth/annonymous'}) {
        $query_params->{'auth.annonymous'} = $self->{api_client}->to_query_value($args{'auth/annonymous'});
    }

    # query params
    if ( exists $args{'sling/auth/requirements'}) {
        $query_params->{'sling.auth.requirements'} = $self->{api_client}->to_query_value($args{'sling/auth/requirements'});
    }

    # query params
    if ( exists $args{'sling/auth/anonymous/user'}) {
        $query_params->{'sling.auth.anonymous.user'} = $self->{api_client}->to_query_value($args{'sling/auth/anonymous/user'});
    }

    # query params
    if ( exists $args{'sling/auth/anonymous/password'}) {
        $query_params->{'sling.auth.anonymous.password'} = $self->{api_client}->to_query_value($args{'sling/auth/anonymous/password'});
    }

    # query params
    if ( exists $args{'auth/http'}) {
        $query_params->{'auth.http'} = $self->{api_client}->to_query_value($args{'auth/http'});
    }

    # query params
    if ( exists $args{'auth/http/realm'}) {
        $query_params->{'auth.http.realm'} = $self->{api_client}->to_query_value($args{'auth/http/realm'});
    }

    # query params
    if ( exists $args{'auth/uri/suffix'}) {
        $query_params->{'auth.uri.suffix'} = $self->{api_client}->to_query_value($args{'auth/uri/suffix'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $extensions  (optional)
# @param int $min_duration_ms  (optional)
# @param int $max_duration_ms  (optional)
# @param boolean $compact_log_format  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'extensions' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'min_duration_ms' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'max_duration_ms' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'compact_log_format' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo',
        };
}
# @return OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo
#
sub org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'extensions'}) {
        $query_params->{'extensions'} = $self->{api_client}->to_query_value($args{'extensions'});
    }

    # query params
    if ( exists $args{'min_duration_ms'}) {
        $query_params->{'minDurationMs'} = $self->{api_client}->to_query_value($args{'min_duration_ms'});
    }

    # query params
    if ( exists $args{'max_duration_ms'}) {
        $query_params->{'maxDurationMs'} = $self->{api_client}->to_query_value($args{'max_duration_ms'});
    }

    # query params
    if ( exists $args{'compact_log_format'}) {
        $query_params->{'compactLogFormat'} = $self->{api_client}->to_query_value($args{'compact_log_format'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_engine_impl_log_request_logger
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $request/log/output  (optional)
# @param int $request/log/outputtype  (optional)
# @param boolean $request/log/enabled  (optional)
# @param string $access/log/output  (optional)
# @param int $access/log/outputtype  (optional)
# @param boolean $access/log/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'request/log/output' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'request/log/outputtype' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'request/log/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'access/log/output' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'access/log/outputtype' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'access/log/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_engine_impl_log_request_logger' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingEngineImplLogRequestLoggerInfo',
        };
}
# @return OrgApacheSlingEngineImplLogRequestLoggerInfo
#
sub org_apache_sling_engine_impl_log_request_logger {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'request/log/output'}) {
        $query_params->{'request.log.output'} = $self->{api_client}->to_query_value($args{'request/log/output'});
    }

    # query params
    if ( exists $args{'request/log/outputtype'}) {
        $query_params->{'request.log.outputtype'} = $self->{api_client}->to_query_value($args{'request/log/outputtype'});
    }

    # query params
    if ( exists $args{'request/log/enabled'}) {
        $query_params->{'request.log.enabled'} = $self->{api_client}->to_query_value($args{'request/log/enabled'});
    }

    # query params
    if ( exists $args{'access/log/output'}) {
        $query_params->{'access.log.output'} = $self->{api_client}->to_query_value($args{'access/log/output'});
    }

    # query params
    if ( exists $args{'access/log/outputtype'}) {
        $query_params->{'access.log.outputtype'} = $self->{api_client}->to_query_value($args{'access/log/outputtype'});
    }

    # query params
    if ( exists $args{'access/log/enabled'}) {
        $query_params->{'access.log.enabled'} = $self->{api_client}->to_query_value($args{'access/log/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingEngineImplLogRequestLoggerInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_engine_impl_log_request_logger_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $request/log/service/format  (optional)
# @param string $request/log/service/output  (optional)
# @param int $request/log/service/outputtype  (optional)
# @param boolean $request/log/service/onentry  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'request/log/service/format' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'request/log/service/output' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'request/log/service/outputtype' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'request/log/service/onentry' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_engine_impl_log_request_logger_service' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingEngineImplLogRequestLoggerServiceInfo',
        };
}
# @return OrgApacheSlingEngineImplLogRequestLoggerServiceInfo
#
sub org_apache_sling_engine_impl_log_request_logger_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'request/log/service/format'}) {
        $query_params->{'request.log.service.format'} = $self->{api_client}->to_query_value($args{'request/log/service/format'});
    }

    # query params
    if ( exists $args{'request/log/service/output'}) {
        $query_params->{'request.log.service.output'} = $self->{api_client}->to_query_value($args{'request/log/service/output'});
    }

    # query params
    if ( exists $args{'request/log/service/outputtype'}) {
        $query_params->{'request.log.service.outputtype'} = $self->{api_client}->to_query_value($args{'request/log/service/outputtype'});
    }

    # query params
    if ( exists $args{'request/log/service/onentry'}) {
        $query_params->{'request.log.service.onentry'} = $self->{api_client}->to_query_value($args{'request/log/service/onentry'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingEngineImplLogRequestLoggerServiceInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_engine_impl_sling_main_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $sling/max/calls  (optional)
# @param int $sling/max/inclusions  (optional)
# @param boolean $sling/trace/allow  (optional)
# @param int $sling/max/record/requests  (optional)
# @param ARRAY[string] $sling/store/pattern/requests  (optional)
# @param string $sling/serverinfo  (optional)
# @param ARRAY[string] $sling/additional/response/headers  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/max/calls' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'sling/max/inclusions' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'sling/trace/allow' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'sling/max/record/requests' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'sling/store/pattern/requests' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/serverinfo' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/additional/response/headers' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_engine_impl_sling_main_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingEngineImplSlingMainServletInfo',
        };
}
# @return OrgApacheSlingEngineImplSlingMainServletInfo
#
sub org_apache_sling_engine_impl_sling_main_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/max/calls'}) {
        $query_params->{'sling.max.calls'} = $self->{api_client}->to_query_value($args{'sling/max/calls'});
    }

    # query params
    if ( exists $args{'sling/max/inclusions'}) {
        $query_params->{'sling.max.inclusions'} = $self->{api_client}->to_query_value($args{'sling/max/inclusions'});
    }

    # query params
    if ( exists $args{'sling/trace/allow'}) {
        $query_params->{'sling.trace.allow'} = $self->{api_client}->to_query_value($args{'sling/trace/allow'});
    }

    # query params
    if ( exists $args{'sling/max/record/requests'}) {
        $query_params->{'sling.max.record.requests'} = $self->{api_client}->to_query_value($args{'sling/max/record/requests'});
    }

    # query params
    if ( exists $args{'sling/store/pattern/requests'}) {
        $query_params->{'sling.store.pattern.requests'} = $self->{api_client}->to_query_value($args{'sling/store/pattern/requests'});
    }

    # query params
    if ( exists $args{'sling/serverinfo'}) {
        $query_params->{'sling.serverinfo'} = $self->{api_client}->to_query_value($args{'sling/serverinfo'});
    }

    # query params
    if ( exists $args{'sling/additional/response/headers'}) {
        $query_params->{'sling.additional.response.headers'} = $self->{api_client}->to_query_value($args{'sling/additional/response/headers'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingEngineImplSlingMainServletInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_engine_parameters
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $sling/default/parameter/encoding  (optional)
# @param int $sling/default/max/parameters  (optional)
# @param string $file/location  (optional)
# @param int $file/threshold  (optional)
# @param int $file/max  (optional)
# @param int $request/max  (optional)
# @param boolean $sling/default/parameter/check_for_additional_container_parameters  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/default/parameter/encoding' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/default/max/parameters' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'file/location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'file/threshold' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'file/max' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'request/max' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'sling/default/parameter/check_for_additional_container_parameters' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_engine_parameters' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingEngineParametersInfo',
        };
}
# @return OrgApacheSlingEngineParametersInfo
#
sub org_apache_sling_engine_parameters {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.engine.parameters';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/default/parameter/encoding'}) {
        $query_params->{'sling.default.parameter.encoding'} = $self->{api_client}->to_query_value($args{'sling/default/parameter/encoding'});
    }

    # query params
    if ( exists $args{'sling/default/max/parameters'}) {
        $query_params->{'sling.default.max.parameters'} = $self->{api_client}->to_query_value($args{'sling/default/max/parameters'});
    }

    # query params
    if ( exists $args{'file/location'}) {
        $query_params->{'file.location'} = $self->{api_client}->to_query_value($args{'file/location'});
    }

    # query params
    if ( exists $args{'file/threshold'}) {
        $query_params->{'file.threshold'} = $self->{api_client}->to_query_value($args{'file/threshold'});
    }

    # query params
    if ( exists $args{'file/max'}) {
        $query_params->{'file.max'} = $self->{api_client}->to_query_value($args{'file/max'});
    }

    # query params
    if ( exists $args{'request/max'}) {
        $query_params->{'request.max'} = $self->{api_client}->to_query_value($args{'request/max'});
    }

    # query params
    if ( exists $args{'sling/default/parameter/check_for_additional_container_parameters'}) {
        $query_params->{'sling.default.parameter.checkForAdditionalContainerParameters'} = $self->{api_client}->to_query_value($args{'sling/default/parameter/check_for_additional_container_parameters'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingEngineParametersInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_event_impl_eventing_thread_pool
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $min_pool_size  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'min_pool_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_event_impl_eventing_thread_pool' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingEventImplEventingThreadPoolInfo',
        };
}
# @return OrgApacheSlingEventImplEventingThreadPoolInfo
#
sub org_apache_sling_event_impl_eventing_thread_pool {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'min_pool_size'}) {
        $query_params->{'minPoolSize'} = $self->{api_client}->to_query_value($args{'min_pool_size'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingEventImplEventingThreadPoolInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_event_impl_jobs_default_job_manager
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $queue/priority  (optional)
# @param int $queue/retries  (optional)
# @param int $queue/retrydelay  (optional)
# @param int $queue/maxparallel  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'queue/priority' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'queue/retries' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'queue/retrydelay' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'queue/maxparallel' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_event_impl_jobs_default_job_manager' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingEventImplJobsDefaultJobManagerInfo',
        };
}
# @return OrgApacheSlingEventImplJobsDefaultJobManagerInfo
#
sub org_apache_sling_event_impl_jobs_default_job_manager {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'queue/priority'}) {
        $query_params->{'queue.priority'} = $self->{api_client}->to_query_value($args{'queue/priority'});
    }

    # query params
    if ( exists $args{'queue/retries'}) {
        $query_params->{'queue.retries'} = $self->{api_client}->to_query_value($args{'queue/retries'});
    }

    # query params
    if ( exists $args{'queue/retrydelay'}) {
        $query_params->{'queue.retrydelay'} = $self->{api_client}->to_query_value($args{'queue/retrydelay'});
    }

    # query params
    if ( exists $args{'queue/maxparallel'}) {
        $query_params->{'queue.maxparallel'} = $self->{api_client}->to_query_value($args{'queue/maxparallel'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingEventImplJobsDefaultJobManagerInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_event_impl_jobs_jcr_persistence_handler
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $job/consumermanager/disable_distribution  (optional)
# @param int $startup/delay  (optional)
# @param int $cleanup/period  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'job/consumermanager/disable_distribution' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'startup/delay' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cleanup/period' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_event_impl_jobs_jcr_persistence_handler' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo',
        };
}
# @return OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo
#
sub org_apache_sling_event_impl_jobs_jcr_persistence_handler {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'job/consumermanager/disable_distribution'}) {
        $query_params->{'job.consumermanager.disableDistribution'} = $self->{api_client}->to_query_value($args{'job/consumermanager/disable_distribution'});
    }

    # query params
    if ( exists $args{'startup/delay'}) {
        $query_params->{'startup.delay'} = $self->{api_client}->to_query_value($args{'startup/delay'});
    }

    # query params
    if ( exists $args{'cleanup/period'}) {
        $query_params->{'cleanup.period'} = $self->{api_client}->to_query_value($args{'cleanup/period'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_event_impl_jobs_job_consumer_manager
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $org/apache/sling/installer/configuration/persist  (optional)
# @param ARRAY[string] $job/consumermanager/whitelist  (optional)
# @param ARRAY[string] $job/consumermanager/blacklist  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/sling/installer/configuration/persist' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'job/consumermanager/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'job/consumermanager/blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_event_impl_jobs_job_consumer_manager' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingEventImplJobsJobConsumerManagerInfo',
        };
}
# @return OrgApacheSlingEventImplJobsJobConsumerManagerInfo
#
sub org_apache_sling_event_impl_jobs_job_consumer_manager {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'org/apache/sling/installer/configuration/persist'}) {
        $query_params->{'org.apache.sling.installer.configuration.persist'} = $self->{api_client}->to_query_value($args{'org/apache/sling/installer/configuration/persist'});
    }

    # query params
    if ( exists $args{'job/consumermanager/whitelist'}) {
        $query_params->{'job.consumermanager.whitelist'} = $self->{api_client}->to_query_value($args{'job/consumermanager/whitelist'});
    }

    # query params
    if ( exists $args{'job/consumermanager/blacklist'}) {
        $query_params->{'job.consumermanager.blacklist'} = $self->{api_client}->to_query_value($args{'job/consumermanager/blacklist'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingEventImplJobsJobConsumerManagerInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_event_jobs_queue_configuration
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $queue/name  (optional)
# @param ARRAY[string] $queue/topics  (optional)
# @param string $queue/type  (optional)
# @param string $queue/priority  (optional)
# @param int $queue/retries  (optional)
# @param int $queue/retrydelay  (optional)
# @param double $queue/maxparallel  (optional)
# @param boolean $queue/keep_jobs  (optional)
# @param boolean $queue/prefer_run_on_creation_instance  (optional)
# @param int $queue/thread_pool_size  (optional)
# @param int $service/ranking  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'queue/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'queue/topics' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'queue/type' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'queue/priority' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'queue/retries' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'queue/retrydelay' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'queue/maxparallel' => {
        data_type => 'double',
        description => '',
        required => '0',
    },
    'queue/keep_jobs' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'queue/prefer_run_on_creation_instance' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'queue/thread_pool_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_event_jobs_queue_configuration' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingEventJobsQueueConfigurationInfo',
        };
}
# @return OrgApacheSlingEventJobsQueueConfigurationInfo
#
sub org_apache_sling_event_jobs_queue_configuration {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'queue/name'}) {
        $query_params->{'queue.name'} = $self->{api_client}->to_query_value($args{'queue/name'});
    }

    # query params
    if ( exists $args{'queue/topics'}) {
        $query_params->{'queue.topics'} = $self->{api_client}->to_query_value($args{'queue/topics'});
    }

    # query params
    if ( exists $args{'queue/type'}) {
        $query_params->{'queue.type'} = $self->{api_client}->to_query_value($args{'queue/type'});
    }

    # query params
    if ( exists $args{'queue/priority'}) {
        $query_params->{'queue.priority'} = $self->{api_client}->to_query_value($args{'queue/priority'});
    }

    # query params
    if ( exists $args{'queue/retries'}) {
        $query_params->{'queue.retries'} = $self->{api_client}->to_query_value($args{'queue/retries'});
    }

    # query params
    if ( exists $args{'queue/retrydelay'}) {
        $query_params->{'queue.retrydelay'} = $self->{api_client}->to_query_value($args{'queue/retrydelay'});
    }

    # query params
    if ( exists $args{'queue/maxparallel'}) {
        $query_params->{'queue.maxparallel'} = $self->{api_client}->to_query_value($args{'queue/maxparallel'});
    }

    # query params
    if ( exists $args{'queue/keep_jobs'}) {
        $query_params->{'queue.keepJobs'} = $self->{api_client}->to_query_value($args{'queue/keep_jobs'});
    }

    # query params
    if ( exists $args{'queue/prefer_run_on_creation_instance'}) {
        $query_params->{'queue.preferRunOnCreationInstance'} = $self->{api_client}->to_query_value($args{'queue/prefer_run_on_creation_instance'});
    }

    # query params
    if ( exists $args{'queue/thread_pool_size'}) {
        $query_params->{'queue.threadPoolSize'} = $self->{api_client}->to_query_value($args{'queue/thread_pool_size'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingEventJobsQueueConfigurationInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $users  (optional)
# @param ARRAY[string] $groups  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'users' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'groups' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo',
        };
}
# @return OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo
#
sub org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'users'}) {
        $query_params->{'users'} = $self->{api_client}->to_query_value($args{'users'});
    }

    # query params
    if ( exists $args{'groups'}) {
        $query_params->{'groups'} = $self->{api_client}->to_query_value($args{'groups'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_featureflags_feature
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $description  (optional)
# @param boolean $enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'description' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_featureflags_feature' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingFeatureflagsFeatureInfo',
        };
}
# @return OrgApacheSlingFeatureflagsFeatureInfo
#
sub org_apache_sling_featureflags_feature {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.featureflags.Feature';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'description'}) {
        $query_params->{'description'} = $self->{api_client}->to_query_value($args{'description'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingFeatureflagsFeatureInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_featureflags_impl_configured_feature
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $name  (optional)
# @param string $description  (optional)
# @param boolean $enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'description' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_featureflags_impl_configured_feature' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo',
        };
}
# @return OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo
#
sub org_apache_sling_featureflags_impl_configured_feature {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'description'}) {
        $query_params->{'description'} = $self->{api_client}->to_query_value($args{'description'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_hapi_impl_h_api_util_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $org/apache/sling/hapi/tools/resourcetype  (optional)
# @param string $org/apache/sling/hapi/tools/collectionresourcetype  (optional)
# @param ARRAY[string] $org/apache/sling/hapi/tools/searchpaths  (optional)
# @param string $org/apache/sling/hapi/tools/externalurl  (optional)
# @param boolean $org/apache/sling/hapi/tools/enabled  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/sling/hapi/tools/resourcetype' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/hapi/tools/collectionresourcetype' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/hapi/tools/searchpaths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/sling/hapi/tools/externalurl' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'org/apache/sling/hapi/tools/enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_hapi_impl_h_api_util_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingHapiImplHApiUtilImplInfo',
        };
}
# @return OrgApacheSlingHapiImplHApiUtilImplInfo
#
sub org_apache_sling_hapi_impl_h_api_util_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'org/apache/sling/hapi/tools/resourcetype'}) {
        $query_params->{'org.apache.sling.hapi.tools.resourcetype'} = $self->{api_client}->to_query_value($args{'org/apache/sling/hapi/tools/resourcetype'});
    }

    # query params
    if ( exists $args{'org/apache/sling/hapi/tools/collectionresourcetype'}) {
        $query_params->{'org.apache.sling.hapi.tools.collectionresourcetype'} = $self->{api_client}->to_query_value($args{'org/apache/sling/hapi/tools/collectionresourcetype'});
    }

    # query params
    if ( exists $args{'org/apache/sling/hapi/tools/searchpaths'}) {
        $query_params->{'org.apache.sling.hapi.tools.searchpaths'} = $self->{api_client}->to_query_value($args{'org/apache/sling/hapi/tools/searchpaths'});
    }

    # query params
    if ( exists $args{'org/apache/sling/hapi/tools/externalurl'}) {
        $query_params->{'org.apache.sling.hapi.tools.externalurl'} = $self->{api_client}->to_query_value($args{'org/apache/sling/hapi/tools/externalurl'});
    }

    # query params
    if ( exists $args{'org/apache/sling/hapi/tools/enabled'}) {
        $query_params->{'org.apache.sling.hapi.tools.enabled'} = $self->{api_client}->to_query_value($args{'org/apache/sling/hapi/tools/enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingHapiImplHApiUtilImplInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_hc_core_impl_composite_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $hc/name  (optional)
# @param ARRAY[string] $hc/tags  (optional)
# @param string $hc/mbean/name  (optional)
# @param ARRAY[string] $filter/tags  (optional)
# @param boolean $filter/combine_tags_with_or  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/mbean/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'filter/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'filter/combine_tags_with_or' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_hc_core_impl_composite_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingHcCoreImplCompositeHealthCheckInfo',
        };
}
# @return OrgApacheSlingHcCoreImplCompositeHealthCheckInfo
#
sub org_apache_sling_hc_core_impl_composite_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/name'}) {
        $query_params->{'hc.name'} = $self->{api_client}->to_query_value($args{'hc/name'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    # query params
    if ( exists $args{'hc/mbean/name'}) {
        $query_params->{'hc.mbean.name'} = $self->{api_client}->to_query_value($args{'hc/mbean/name'});
    }

    # query params
    if ( exists $args{'filter/tags'}) {
        $query_params->{'filter.tags'} = $self->{api_client}->to_query_value($args{'filter/tags'});
    }

    # query params
    if ( exists $args{'filter/combine_tags_with_or'}) {
        $query_params->{'filter.combineTagsWithOr'} = $self->{api_client}->to_query_value($args{'filter/combine_tags_with_or'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingHcCoreImplCompositeHealthCheckInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_hc_core_impl_executor_health_check_executor_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $timeout_in_ms  (optional)
# @param int $long_running_future_threshold_for_critical_ms  (optional)
# @param int $result_cache_ttl_in_ms  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'timeout_in_ms' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'long_running_future_threshold_for_critical_ms' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'result_cache_ttl_in_ms' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_hc_core_impl_executor_health_check_executor_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo',
        };
}
# @return OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo
#
sub org_apache_sling_hc_core_impl_executor_health_check_executor_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'timeout_in_ms'}) {
        $query_params->{'timeoutInMs'} = $self->{api_client}->to_query_value($args{'timeout_in_ms'});
    }

    # query params
    if ( exists $args{'long_running_future_threshold_for_critical_ms'}) {
        $query_params->{'longRunningFutureThresholdForCriticalMs'} = $self->{api_client}->to_query_value($args{'long_running_future_threshold_for_critical_ms'});
    }

    # query params
    if ( exists $args{'result_cache_ttl_in_ms'}) {
        $query_params->{'resultCacheTtlInMs'} = $self->{api_client}->to_query_value($args{'result_cache_ttl_in_ms'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_hc_core_impl_jmx_attribute_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $hc/name  (optional)
# @param ARRAY[string] $hc/tags  (optional)
# @param string $hc/mbean/name  (optional)
# @param string $mbean/name  (optional)
# @param string $attribute/name  (optional)
# @param string $attribute/value/constraint  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/mbean/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'mbean/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'attribute/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'attribute/value/constraint' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_hc_core_impl_jmx_attribute_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo',
        };
}
# @return OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo
#
sub org_apache_sling_hc_core_impl_jmx_attribute_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/name'}) {
        $query_params->{'hc.name'} = $self->{api_client}->to_query_value($args{'hc/name'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    # query params
    if ( exists $args{'hc/mbean/name'}) {
        $query_params->{'hc.mbean.name'} = $self->{api_client}->to_query_value($args{'hc/mbean/name'});
    }

    # query params
    if ( exists $args{'mbean/name'}) {
        $query_params->{'mbean.name'} = $self->{api_client}->to_query_value($args{'mbean/name'});
    }

    # query params
    if ( exists $args{'attribute/name'}) {
        $query_params->{'attribute.name'} = $self->{api_client}->to_query_value($args{'attribute/name'});
    }

    # query params
    if ( exists $args{'attribute/value/constraint'}) {
        $query_params->{'attribute.value.constraint'} = $self->{api_client}->to_query_value($args{'attribute/value/constraint'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_hc_core_impl_scriptable_health_check
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $hc/name  (optional)
# @param ARRAY[string] $hc/tags  (optional)
# @param string $hc/mbean/name  (optional)
# @param string $expression  (optional)
# @param string $language/extension  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'hc/tags' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'hc/mbean/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'expression' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'language/extension' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_hc_core_impl_scriptable_health_check' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingHcCoreImplScriptableHealthCheckInfo',
        };
}
# @return OrgApacheSlingHcCoreImplScriptableHealthCheckInfo
#
sub org_apache_sling_hc_core_impl_scriptable_health_check {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'hc/name'}) {
        $query_params->{'hc.name'} = $self->{api_client}->to_query_value($args{'hc/name'});
    }

    # query params
    if ( exists $args{'hc/tags'}) {
        $query_params->{'hc.tags'} = $self->{api_client}->to_query_value($args{'hc/tags'});
    }

    # query params
    if ( exists $args{'hc/mbean/name'}) {
        $query_params->{'hc.mbean.name'} = $self->{api_client}->to_query_value($args{'hc/mbean/name'});
    }

    # query params
    if ( exists $args{'expression'}) {
        $query_params->{'expression'} = $self->{api_client}->to_query_value($args{'expression'});
    }

    # query params
    if ( exists $args{'language/extension'}) {
        $query_params->{'language.extension'} = $self->{api_client}->to_query_value($args{'language/extension'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingHcCoreImplScriptableHealthCheckInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $servlet_path  (optional)
# @param boolean $disabled  (optional)
# @param string $cors/access_control_allow_origin  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'servlet_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'disabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'cors/access_control_allow_origin' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo',
        };
}
# @return OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo
#
sub org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'servlet_path'}) {
        $query_params->{'servletPath'} = $self->{api_client}->to_query_value($args{'servlet_path'});
    }

    # query params
    if ( exists $args{'disabled'}) {
        $query_params->{'disabled'} = $self->{api_client}->to_query_value($args{'disabled'});
    }

    # query params
    if ( exists $args{'cors/access_control_allow_origin'}) {
        $query_params->{'cors.accessControlAllowOrigin'} = $self->{api_client}->to_query_value($args{'cors/access_control_allow_origin'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $total_width  (optional)
# @param int $col_width_name  (optional)
# @param int $col_width_result  (optional)
# @param int $col_width_timing  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'total_width' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'col_width_name' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'col_width_result' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'col_width_timing' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo',
        };
}
# @return OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo
#
sub org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'total_width'}) {
        $query_params->{'totalWidth'} = $self->{api_client}->to_query_value($args{'total_width'});
    }

    # query params
    if ( exists $args{'col_width_name'}) {
        $query_params->{'colWidthName'} = $self->{api_client}->to_query_value($args{'col_width_name'});
    }

    # query params
    if ( exists $args{'col_width_result'}) {
        $query_params->{'colWidthResult'} = $self->{api_client}->to_query_value($args{'col_width_result'});
    }

    # query params
    if ( exists $args{'col_width_timing'}) {
        $query_params->{'colWidthTiming'} = $self->{api_client}->to_query_value($args{'col_width_timing'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_i18n_impl_i18_n_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param ARRAY[string] $sling/filter/scope  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'sling/filter/scope' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_i18n_impl_i18_n_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingI18nImplI18NFilterInfo',
        };
}
# @return OrgApacheSlingI18nImplI18NFilterInfo
#
sub org_apache_sling_i18n_impl_i18_n_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'sling/filter/scope'}) {
        $query_params->{'sling.filter.scope'} = $self->{api_client}->to_query_value($args{'sling/filter/scope'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingI18nImplI18NFilterInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_i18n_impl_jcr_resource_bundle_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $locale/default  (optional)
# @param boolean $preload/bundles  (optional)
# @param int $invalidation/delay  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'locale/default' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'preload/bundles' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'invalidation/delay' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_i18n_impl_jcr_resource_bundle_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingI18nImplJcrResourceBundleProviderInfo',
        };
}
# @return OrgApacheSlingI18nImplJcrResourceBundleProviderInfo
#
sub org_apache_sling_i18n_impl_jcr_resource_bundle_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'locale/default'}) {
        $query_params->{'locale.default'} = $self->{api_client}->to_query_value($args{'locale/default'});
    }

    # query params
    if ( exists $args{'preload/bundles'}) {
        $query_params->{'preload.bundles'} = $self->{api_client}->to_query_value($args{'preload/bundles'});
    }

    # query params
    if ( exists $args{'invalidation/delay'}) {
        $query_params->{'invalidation.delay'} = $self->{api_client}->to_query_value($args{'invalidation/delay'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingI18nImplJcrResourceBundleProviderInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_installer_provider_jcr_impl_jcr_installer
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $handler/schemes  (optional)
# @param string $sling/jcrinstall/folder/name/regexp  (optional)
# @param int $sling/jcrinstall/folder/max/depth  (optional)
# @param ARRAY[string] $sling/jcrinstall/search/path  (optional)
# @param string $sling/jcrinstall/new/config/path  (optional)
# @param string $sling/jcrinstall/signal/path  (optional)
# @param boolean $sling/jcrinstall/enable/writeback  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'handler/schemes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/jcrinstall/folder/name/regexp' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/jcrinstall/folder/max/depth' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'sling/jcrinstall/search/path' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/jcrinstall/new/config/path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/jcrinstall/signal/path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/jcrinstall/enable/writeback' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_installer_provider_jcr_impl_jcr_installer' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo',
        };
}
# @return OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo
#
sub org_apache_sling_installer_provider_jcr_impl_jcr_installer {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'handler/schemes'}) {
        $query_params->{'handler.schemes'} = $self->{api_client}->to_query_value($args{'handler/schemes'});
    }

    # query params
    if ( exists $args{'sling/jcrinstall/folder/name/regexp'}) {
        $query_params->{'sling.jcrinstall.folder.name.regexp'} = $self->{api_client}->to_query_value($args{'sling/jcrinstall/folder/name/regexp'});
    }

    # query params
    if ( exists $args{'sling/jcrinstall/folder/max/depth'}) {
        $query_params->{'sling.jcrinstall.folder.max.depth'} = $self->{api_client}->to_query_value($args{'sling/jcrinstall/folder/max/depth'});
    }

    # query params
    if ( exists $args{'sling/jcrinstall/search/path'}) {
        $query_params->{'sling.jcrinstall.search.path'} = $self->{api_client}->to_query_value($args{'sling/jcrinstall/search/path'});
    }

    # query params
    if ( exists $args{'sling/jcrinstall/new/config/path'}) {
        $query_params->{'sling.jcrinstall.new.config.path'} = $self->{api_client}->to_query_value($args{'sling/jcrinstall/new/config/path'});
    }

    # query params
    if ( exists $args{'sling/jcrinstall/signal/path'}) {
        $query_params->{'sling.jcrinstall.signal.path'} = $self->{api_client}->to_query_value($args{'sling/jcrinstall/signal/path'});
    }

    # query params
    if ( exists $args{'sling/jcrinstall/enable/writeback'}) {
        $query_params->{'sling.jcrinstall.enable.writeback'} = $self->{api_client}->to_query_value($args{'sling/jcrinstall/enable/writeback'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_jcr_base_internal_login_admin_whitelist
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $whitelist/bypass  (optional)
# @param string $whitelist/bundles/regexp  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'whitelist/bypass' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'whitelist/bundles/regexp' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_jcr_base_internal_login_admin_whitelist' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo',
        };
}
# @return OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo
#
sub org_apache_sling_jcr_base_internal_login_admin_whitelist {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'whitelist/bypass'}) {
        $query_params->{'whitelist.bypass'} = $self->{api_client}->to_query_value($args{'whitelist/bypass'});
    }

    # query params
    if ( exists $args{'whitelist/bundles/regexp'}) {
        $query_params->{'whitelist.bundles.regexp'} = $self->{api_client}->to_query_value($args{'whitelist/bundles/regexp'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $whitelist/name  (optional)
# @param ARRAY[string] $whitelist/bundles  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'whitelist/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'whitelist/bundles' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo',
        };
}
# @return OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo
#
sub org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'whitelist/name'}) {
        $query_params->{'whitelist.name'} = $self->{api_client}->to_query_value($args{'whitelist/name'});
    }

    # query params
    if ( exists $args{'whitelist/bundles'}) {
        $query_params->{'whitelist.bundles'} = $self->{api_client}->to_query_value($args{'whitelist/bundles'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $alias  (optional)
# @param boolean $dav/create_absolute_uri  (optional)
# @param string $dav/protectedhandlers  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'alias' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'dav/create_absolute_uri' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'dav/protectedhandlers' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo',
        };
}
# @return OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo
#
sub org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'alias'}) {
        $query_params->{'alias'} = $self->{api_client}->to_query_value($args{'alias'});
    }

    # query params
    if ( exists $args{'dav/create_absolute_uri'}) {
        $query_params->{'dav.create-absolute-uri'} = $self->{api_client}->to_query_value($args{'dav/create_absolute_uri'});
    }

    # query params
    if ( exists $args{'dav/protectedhandlers'}) {
        $query_params->{'dav.protectedhandlers'} = $self->{api_client}->to_query_value($args{'dav/protectedhandlers'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_jcr_jackrabbit_server_jndi_registration_support
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $java/naming/factory/initial  (optional)
# @param string $java/naming/provider/url  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'java/naming/factory/initial' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'java/naming/provider/url' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_jcr_jackrabbit_server_jndi_registration_support' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo',
        };
}
# @return OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo
#
sub org_apache_sling_jcr_jackrabbit_server_jndi_registration_support {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'java/naming/factory/initial'}) {
        $query_params->{'java.naming.factory.initial'} = $self->{api_client}->to_query_value($args{'java/naming/factory/initial'});
    }

    # query params
    if ( exists $args{'java/naming/provider/url'}) {
        $query_params->{'java.naming.provider.url'} = $self->{api_client}->to_query_value($args{'java/naming/provider/url'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_jcr_jackrabbit_server_rmi_registration_support
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $port  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'port' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_jcr_jackrabbit_server_rmi_registration_support' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo',
        };
}
# @return OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo
#
sub org_apache_sling_jcr_jackrabbit_server_rmi_registration_support {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'port'}) {
        $query_params->{'port'} = $self->{api_client}->to_query_value($args{'port'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_jcr_repoinit_impl_repository_initializer
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $references  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'references' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_jcr_repoinit_impl_repository_initializer' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo',
        };
}
# @return OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo
#
sub org_apache_sling_jcr_repoinit_impl_repository_initializer {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'references'}) {
        $query_params->{'references'} = $self->{api_client}->to_query_value($args{'references'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_jcr_repoinit_repository_initializer
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $references  (optional)
# @param ARRAY[string] $scripts  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'references' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scripts' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_jcr_repoinit_repository_initializer' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingJcrRepoinitRepositoryInitializerInfo',
        };
}
# @return OrgApacheSlingJcrRepoinitRepositoryInitializerInfo
#
sub org_apache_sling_jcr_repoinit_repository_initializer {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'references'}) {
        $query_params->{'references'} = $self->{api_client}->to_query_value($args{'references'});
    }

    # query params
    if ( exists $args{'scripts'}) {
        $query_params->{'scripts'} = $self->{api_client}->to_query_value($args{'scripts'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingJcrRepoinitRepositoryInitializerInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $resource/resolver/searchpath  (optional)
# @param boolean $resource/resolver/manglenamespaces  (optional)
# @param boolean $resource/resolver/allow_direct  (optional)
# @param ARRAY[string] $resource/resolver/required/providers  (optional)
# @param ARRAY[string] $resource/resolver/required/providernames  (optional)
# @param ARRAY[string] $resource/resolver/virtual  (optional)
# @param ARRAY[string] $resource/resolver/mapping  (optional)
# @param string $resource/resolver/map/location  (optional)
# @param ARRAY[string] $resource/resolver/map/observation  (optional)
# @param int $resource/resolver/default/vanity/redirect/status  (optional)
# @param boolean $resource/resolver/enable/vanitypath  (optional)
# @param int $resource/resolver/vanitypath/max_entries  (optional)
# @param boolean $resource/resolver/vanitypath/max_entries/startup  (optional)
# @param int $resource/resolver/vanitypath/bloomfilter/max_bytes  (optional)
# @param boolean $resource/resolver/optimize/alias/resolution  (optional)
# @param ARRAY[string] $resource/resolver/vanitypath/whitelist  (optional)
# @param ARRAY[string] $resource/resolver/vanitypath/blacklist  (optional)
# @param boolean $resource/resolver/vanity/precedence  (optional)
# @param boolean $resource/resolver/providerhandling/paranoid  (optional)
# @param boolean $resource/resolver/log/closing  (optional)
# @param boolean $resource/resolver/log/unclosed  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'resource/resolver/searchpath' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'resource/resolver/manglenamespaces' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'resource/resolver/allow_direct' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'resource/resolver/required/providers' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'resource/resolver/required/providernames' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'resource/resolver/virtual' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'resource/resolver/mapping' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'resource/resolver/map/location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'resource/resolver/map/observation' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'resource/resolver/default/vanity/redirect/status' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'resource/resolver/enable/vanitypath' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'resource/resolver/vanitypath/max_entries' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'resource/resolver/vanitypath/max_entries/startup' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'resource/resolver/vanitypath/bloomfilter/max_bytes' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'resource/resolver/optimize/alias/resolution' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'resource/resolver/vanitypath/whitelist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'resource/resolver/vanitypath/blacklist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'resource/resolver/vanity/precedence' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'resource/resolver/providerhandling/paranoid' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'resource/resolver/log/closing' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'resource/resolver/log/unclosed' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo',
        };
}
# @return OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo
#
sub org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'resource/resolver/searchpath'}) {
        $query_params->{'resource.resolver.searchpath'} = $self->{api_client}->to_query_value($args{'resource/resolver/searchpath'});
    }

    # query params
    if ( exists $args{'resource/resolver/manglenamespaces'}) {
        $query_params->{'resource.resolver.manglenamespaces'} = $self->{api_client}->to_query_value($args{'resource/resolver/manglenamespaces'});
    }

    # query params
    if ( exists $args{'resource/resolver/allow_direct'}) {
        $query_params->{'resource.resolver.allowDirect'} = $self->{api_client}->to_query_value($args{'resource/resolver/allow_direct'});
    }

    # query params
    if ( exists $args{'resource/resolver/required/providers'}) {
        $query_params->{'resource.resolver.required.providers'} = $self->{api_client}->to_query_value($args{'resource/resolver/required/providers'});
    }

    # query params
    if ( exists $args{'resource/resolver/required/providernames'}) {
        $query_params->{'resource.resolver.required.providernames'} = $self->{api_client}->to_query_value($args{'resource/resolver/required/providernames'});
    }

    # query params
    if ( exists $args{'resource/resolver/virtual'}) {
        $query_params->{'resource.resolver.virtual'} = $self->{api_client}->to_query_value($args{'resource/resolver/virtual'});
    }

    # query params
    if ( exists $args{'resource/resolver/mapping'}) {
        $query_params->{'resource.resolver.mapping'} = $self->{api_client}->to_query_value($args{'resource/resolver/mapping'});
    }

    # query params
    if ( exists $args{'resource/resolver/map/location'}) {
        $query_params->{'resource.resolver.map.location'} = $self->{api_client}->to_query_value($args{'resource/resolver/map/location'});
    }

    # query params
    if ( exists $args{'resource/resolver/map/observation'}) {
        $query_params->{'resource.resolver.map.observation'} = $self->{api_client}->to_query_value($args{'resource/resolver/map/observation'});
    }

    # query params
    if ( exists $args{'resource/resolver/default/vanity/redirect/status'}) {
        $query_params->{'resource.resolver.default.vanity.redirect.status'} = $self->{api_client}->to_query_value($args{'resource/resolver/default/vanity/redirect/status'});
    }

    # query params
    if ( exists $args{'resource/resolver/enable/vanitypath'}) {
        $query_params->{'resource.resolver.enable.vanitypath'} = $self->{api_client}->to_query_value($args{'resource/resolver/enable/vanitypath'});
    }

    # query params
    if ( exists $args{'resource/resolver/vanitypath/max_entries'}) {
        $query_params->{'resource.resolver.vanitypath.maxEntries'} = $self->{api_client}->to_query_value($args{'resource/resolver/vanitypath/max_entries'});
    }

    # query params
    if ( exists $args{'resource/resolver/vanitypath/max_entries/startup'}) {
        $query_params->{'resource.resolver.vanitypath.maxEntries.startup'} = $self->{api_client}->to_query_value($args{'resource/resolver/vanitypath/max_entries/startup'});
    }

    # query params
    if ( exists $args{'resource/resolver/vanitypath/bloomfilter/max_bytes'}) {
        $query_params->{'resource.resolver.vanitypath.bloomfilter.maxBytes'} = $self->{api_client}->to_query_value($args{'resource/resolver/vanitypath/bloomfilter/max_bytes'});
    }

    # query params
    if ( exists $args{'resource/resolver/optimize/alias/resolution'}) {
        $query_params->{'resource.resolver.optimize.alias.resolution'} = $self->{api_client}->to_query_value($args{'resource/resolver/optimize/alias/resolution'});
    }

    # query params
    if ( exists $args{'resource/resolver/vanitypath/whitelist'}) {
        $query_params->{'resource.resolver.vanitypath.whitelist'} = $self->{api_client}->to_query_value($args{'resource/resolver/vanitypath/whitelist'});
    }

    # query params
    if ( exists $args{'resource/resolver/vanitypath/blacklist'}) {
        $query_params->{'resource.resolver.vanitypath.blacklist'} = $self->{api_client}->to_query_value($args{'resource/resolver/vanitypath/blacklist'});
    }

    # query params
    if ( exists $args{'resource/resolver/vanity/precedence'}) {
        $query_params->{'resource.resolver.vanity.precedence'} = $self->{api_client}->to_query_value($args{'resource/resolver/vanity/precedence'});
    }

    # query params
    if ( exists $args{'resource/resolver/providerhandling/paranoid'}) {
        $query_params->{'resource.resolver.providerhandling.paranoid'} = $self->{api_client}->to_query_value($args{'resource/resolver/providerhandling/paranoid'});
    }

    # query params
    if ( exists $args{'resource/resolver/log/closing'}) {
        $query_params->{'resource.resolver.log.closing'} = $self->{api_client}->to_query_value($args{'resource/resolver/log/closing'});
    }

    # query params
    if ( exists $args{'resource/resolver/log/unclosed'}) {
        $query_params->{'resource.resolver.log.unclosed'} = $self->{api_client}->to_query_value($args{'resource/resolver/log/unclosed'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_jcr_resource_internal_jcr_system_user_validator
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $allow/only/system/user  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'allow/only/system/user' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_jcr_resource_internal_jcr_system_user_validator' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo',
        };
}
# @return OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo
#
sub org_apache_sling_jcr_resource_internal_jcr_system_user_validator {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'allow/only/system/user'}) {
        $query_params->{'allow.only.system.user'} = $self->{api_client}->to_query_value($args{'allow/only/system/user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $path  (optional)
# @param string $checkpath/prefix  (optional)
# @param string $jcr_path  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'checkpath/prefix' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jcr_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo',
        };
}
# @return OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo
#
sub org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'checkpath/prefix'}) {
        $query_params->{'checkpath.prefix'} = $self->{api_client}->to_query_value($args{'checkpath/prefix'});
    }

    # query params
    if ( exists $args{'jcr_path'}) {
        $query_params->{'jcrPath'} = $self->{api_client}->to_query_value($args{'jcr_path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_jcr_webdav_impl_handler_default_handler_service
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param string $type/collections  (optional)
# @param string $type/noncollections  (optional)
# @param string $type/content  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'type/collections' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'type/noncollections' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'type/content' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_jcr_webdav_impl_handler_default_handler_service' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo',
        };
}
# @return OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo
#
sub org_apache_sling_jcr_webdav_impl_handler_default_handler_service {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'type/collections'}) {
        $query_params->{'type.collections'} = $self->{api_client}->to_query_value($args{'type/collections'});
    }

    # query params
    if ( exists $args{'type/noncollections'}) {
        $query_params->{'type.noncollections'} = $self->{api_client}->to_query_value($args{'type/noncollections'});
    }

    # query params
    if ( exists $args{'type/content'}) {
        $query_params->{'type.content'} = $self->{api_client}->to_query_value($args{'type/content'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo',
        };
}
# @return OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo
#
sub org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $dav/root  (optional)
# @param boolean $dav/create_absolute_uri  (optional)
# @param string $dav/realm  (optional)
# @param ARRAY[string] $collection/types  (optional)
# @param ARRAY[string] $filter/prefixes  (optional)
# @param string $filter/types  (optional)
# @param string $filter/uris  (optional)
# @param string $type/collections  (optional)
# @param string $type/noncollections  (optional)
# @param string $type/content  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'dav/root' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'dav/create_absolute_uri' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'dav/realm' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'collection/types' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'filter/prefixes' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'filter/types' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'filter/uris' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'type/collections' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'type/noncollections' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'type/content' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo',
        };
}
# @return OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo
#
sub org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'dav/root'}) {
        $query_params->{'dav.root'} = $self->{api_client}->to_query_value($args{'dav/root'});
    }

    # query params
    if ( exists $args{'dav/create_absolute_uri'}) {
        $query_params->{'dav.create-absolute-uri'} = $self->{api_client}->to_query_value($args{'dav/create_absolute_uri'});
    }

    # query params
    if ( exists $args{'dav/realm'}) {
        $query_params->{'dav.realm'} = $self->{api_client}->to_query_value($args{'dav/realm'});
    }

    # query params
    if ( exists $args{'collection/types'}) {
        $query_params->{'collection.types'} = $self->{api_client}->to_query_value($args{'collection/types'});
    }

    # query params
    if ( exists $args{'filter/prefixes'}) {
        $query_params->{'filter.prefixes'} = $self->{api_client}->to_query_value($args{'filter/prefixes'});
    }

    # query params
    if ( exists $args{'filter/types'}) {
        $query_params->{'filter.types'} = $self->{api_client}->to_query_value($args{'filter/types'});
    }

    # query params
    if ( exists $args{'filter/uris'}) {
        $query_params->{'filter.uris'} = $self->{api_client}->to_query_value($args{'filter/uris'});
    }

    # query params
    if ( exists $args{'type/collections'}) {
        $query_params->{'type.collections'} = $self->{api_client}->to_query_value($args{'type/collections'});
    }

    # query params
    if ( exists $args{'type/noncollections'}) {
        $query_params->{'type.noncollections'} = $self->{api_client}->to_query_value($args{'type/noncollections'});
    }

    # query params
    if ( exists $args{'type/content'}) {
        $query_params->{'type.content'} = $self->{api_client}->to_query_value($args{'type/content'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_jmx_provider_impl_jmx_resource_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $provider/roots  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'provider/roots' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_jmx_provider_impl_jmx_resource_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingJmxProviderImplJMXResourceProviderInfo',
        };
}
# @return OrgApacheSlingJmxProviderImplJMXResourceProviderInfo
#
sub org_apache_sling_jmx_provider_impl_jmx_resource_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'provider/roots'}) {
        $query_params->{'provider.roots'} = $self->{api_client}->to_query_value($args{'provider/roots'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingJmxProviderImplJMXResourceProviderInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_models_impl_model_adapter_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $osgi/http/whiteboard/listener  (optional)
# @param string $osgi/http/whiteboard/context/select  (optional)
# @param int $max/recursion/depth  (optional)
# @param int $cleanup/job/period  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'osgi/http/whiteboard/listener' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'osgi/http/whiteboard/context/select' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'max/recursion/depth' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'cleanup/job/period' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_models_impl_model_adapter_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingModelsImplModelAdapterFactoryInfo',
        };
}
# @return OrgApacheSlingModelsImplModelAdapterFactoryInfo
#
sub org_apache_sling_models_impl_model_adapter_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'osgi/http/whiteboard/listener'}) {
        $query_params->{'osgi.http.whiteboard.listener'} = $self->{api_client}->to_query_value($args{'osgi/http/whiteboard/listener'});
    }

    # query params
    if ( exists $args{'osgi/http/whiteboard/context/select'}) {
        $query_params->{'osgi.http.whiteboard.context.select'} = $self->{api_client}->to_query_value($args{'osgi/http/whiteboard/context/select'});
    }

    # query params
    if ( exists $args{'max/recursion/depth'}) {
        $query_params->{'max.recursion.depth'} = $self->{api_client}->to_query_value($args{'max/recursion/depth'});
    }

    # query params
    if ( exists $args{'cleanup/job/period'}) {
        $query_params->{'cleanup.job.period'} = $self->{api_client}->to_query_value($args{'cleanup/job/period'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingModelsImplModelAdapterFactoryInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_models_jacksonexporter_impl_resource_module_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $max/recursion/levels  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'max/recursion/levels' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_models_jacksonexporter_impl_resource_module_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo',
        };
}
# @return OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo
#
sub org_apache_sling_models_jacksonexporter_impl_resource_module_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'max/recursion/levels'}) {
        $query_params->{'max.recursion.levels'} = $self->{api_client}->to_query_value($args{'max/recursion/levels'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $felix/inventory/printer/name  (optional)
# @param string $felix/inventory/printer/title  (optional)
# @param string $path  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'felix/inventory/printer/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'felix/inventory/printer/title' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo',
        };
}
# @return OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo
#
sub org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'felix/inventory/printer/name'}) {
        $query_params->{'felix.inventory.printer.name'} = $self->{api_client}->to_query_value($args{'felix/inventory/printer/name'});
    }

    # query params
    if ( exists $args{'felix/inventory/printer/title'}) {
        $query_params->{'felix.inventory.printer.title'} = $self->{api_client}->to_query_value($args{'felix/inventory/printer/title'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_resourcemerger_impl_merged_resource_provider_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $merge/root  (optional)
# @param boolean $merge/read_only  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'merge/root' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'merge/read_only' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_resourcemerger_impl_merged_resource_provider_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo',
        };
}
# @return OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo
#
sub org_apache_sling_resourcemerger_impl_merged_resource_provider_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'merge/root'}) {
        $query_params->{'merge.root'} = $self->{api_client}->to_query_value($args{'merge/root'});
    }

    # query params
    if ( exists $args{'merge/read_only'}) {
        $query_params->{'merge.readOnly'} = $self->{api_client}->to_query_value($args{'merge/read_only'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_resourcemerger_picker_overriding
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $merge/root  (optional)
# @param boolean $merge/read_only  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'merge/root' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'merge/read_only' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_resourcemerger_picker_overriding' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingResourcemergerPickerOverridingInfo',
        };
}
# @return OrgApacheSlingResourcemergerPickerOverridingInfo
#
sub org_apache_sling_resourcemerger_picker_overriding {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'merge/root'}) {
        $query_params->{'merge.root'} = $self->{api_client}->to_query_value($args{'merge/root'});
    }

    # query params
    if ( exists $args{'merge/read_only'}) {
        $query_params->{'merge.readOnly'} = $self->{api_client}->to_query_value($args{'merge/read_only'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingResourcemergerPickerOverridingInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_scripting_core_impl_script_cache_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $org/apache/sling/scripting/cache/size  (optional)
# @param ARRAY[string] $org/apache/sling/scripting/cache/additional_extensions  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/sling/scripting/cache/size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'org/apache/sling/scripting/cache/additional_extensions' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_scripting_core_impl_script_cache_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingScriptingCoreImplScriptCacheImplInfo',
        };
}
# @return OrgApacheSlingScriptingCoreImplScriptCacheImplInfo
#
sub org_apache_sling_scripting_core_impl_script_cache_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'org/apache/sling/scripting/cache/size'}) {
        $query_params->{'org.apache.sling.scripting.cache.size'} = $self->{api_client}->to_query_value($args{'org/apache/sling/scripting/cache/size'});
    }

    # query params
    if ( exists $args{'org/apache/sling/scripting/cache/additional_extensions'}) {
        $query_params->{'org.apache.sling.scripting.cache.additional_extensions'} = $self->{api_client}->to_query_value($args{'org/apache/sling/scripting/cache/additional_extensions'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingScriptingCoreImplScriptCacheImplInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $log/stacktrace/onclose  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'log/stacktrace/onclose' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo',
        };
}
# @return OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo
#
sub org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'log/stacktrace/onclose'}) {
        $query_params->{'log.stacktrace.onclose'} = $self->{api_client}->to_query_value($args{'log/stacktrace/onclose'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_scripting_java_impl_java_script_engine_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $java/classdebuginfo  (optional)
# @param string $java/java_encoding  (optional)
# @param string $java/compiler_source_vm  (optional)
# @param string $java/compiler_target_vm  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'java/classdebuginfo' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'java/java_encoding' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'java/compiler_source_vm' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'java/compiler_target_vm' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_scripting_java_impl_java_script_engine_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo',
        };
}
# @return OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo
#
sub org_apache_sling_scripting_java_impl_java_script_engine_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'java/classdebuginfo'}) {
        $query_params->{'java.classdebuginfo'} = $self->{api_client}->to_query_value($args{'java/classdebuginfo'});
    }

    # query params
    if ( exists $args{'java/java_encoding'}) {
        $query_params->{'java.javaEncoding'} = $self->{api_client}->to_query_value($args{'java/java_encoding'});
    }

    # query params
    if ( exists $args{'java/compiler_source_vm'}) {
        $query_params->{'java.compilerSourceVM'} = $self->{api_client}->to_query_value($args{'java/compiler_source_vm'});
    }

    # query params
    if ( exists $args{'java/compiler_target_vm'}) {
        $query_params->{'java.compilerTargetVM'} = $self->{api_client}->to_query_value($args{'java/compiler_target_vm'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $org/apache/sling/scripting/javascript/rhino/opt_level  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/sling/scripting/javascript/rhino/opt_level' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo',
        };
}
# @return OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo
#
sub org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'org/apache/sling/scripting/javascript/rhino/opt_level'}) {
        $query_params->{'org.apache.sling.scripting.javascript.rhino.optLevel'} = $self->{api_client}->to_query_value($args{'org/apache/sling/scripting/javascript/rhino/opt_level'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_scripting_jsp_jsp_script_engine_factory
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $jasper/compiler_target_vm  (optional)
# @param string $jasper/compiler_source_vm  (optional)
# @param boolean $jasper/classdebuginfo  (optional)
# @param boolean $jasper/enable_pooling  (optional)
# @param string $jasper/ie_class_id  (optional)
# @param boolean $jasper/gen_string_as_char_array  (optional)
# @param boolean $jasper/keepgenerated  (optional)
# @param boolean $jasper/mappedfile  (optional)
# @param boolean $jasper/trim_spaces  (optional)
# @param boolean $jasper/display_source_fragments  (optional)
# @param boolean $default/is/session  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'jasper/compiler_target_vm' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jasper/compiler_source_vm' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jasper/classdebuginfo' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'jasper/enable_pooling' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'jasper/ie_class_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jasper/gen_string_as_char_array' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'jasper/keepgenerated' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'jasper/mappedfile' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'jasper/trim_spaces' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'jasper/display_source_fragments' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'default/is/session' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_scripting_jsp_jsp_script_engine_factory' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo',
        };
}
# @return OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo
#
sub org_apache_sling_scripting_jsp_jsp_script_engine_factory {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'jasper/compiler_target_vm'}) {
        $query_params->{'jasper.compilerTargetVM'} = $self->{api_client}->to_query_value($args{'jasper/compiler_target_vm'});
    }

    # query params
    if ( exists $args{'jasper/compiler_source_vm'}) {
        $query_params->{'jasper.compilerSourceVM'} = $self->{api_client}->to_query_value($args{'jasper/compiler_source_vm'});
    }

    # query params
    if ( exists $args{'jasper/classdebuginfo'}) {
        $query_params->{'jasper.classdebuginfo'} = $self->{api_client}->to_query_value($args{'jasper/classdebuginfo'});
    }

    # query params
    if ( exists $args{'jasper/enable_pooling'}) {
        $query_params->{'jasper.enablePooling'} = $self->{api_client}->to_query_value($args{'jasper/enable_pooling'});
    }

    # query params
    if ( exists $args{'jasper/ie_class_id'}) {
        $query_params->{'jasper.ieClassId'} = $self->{api_client}->to_query_value($args{'jasper/ie_class_id'});
    }

    # query params
    if ( exists $args{'jasper/gen_string_as_char_array'}) {
        $query_params->{'jasper.genStringAsCharArray'} = $self->{api_client}->to_query_value($args{'jasper/gen_string_as_char_array'});
    }

    # query params
    if ( exists $args{'jasper/keepgenerated'}) {
        $query_params->{'jasper.keepgenerated'} = $self->{api_client}->to_query_value($args{'jasper/keepgenerated'});
    }

    # query params
    if ( exists $args{'jasper/mappedfile'}) {
        $query_params->{'jasper.mappedfile'} = $self->{api_client}->to_query_value($args{'jasper/mappedfile'});
    }

    # query params
    if ( exists $args{'jasper/trim_spaces'}) {
        $query_params->{'jasper.trimSpaces'} = $self->{api_client}->to_query_value($args{'jasper/trim_spaces'});
    }

    # query params
    if ( exists $args{'jasper/display_source_fragments'}) {
        $query_params->{'jasper.displaySourceFragments'} = $self->{api_client}->to_query_value($args{'jasper/display_source_fragments'});
    }

    # query params
    if ( exists $args{'default/is/session'}) {
        $query_params->{'default.is.session'} = $self->{api_client}->to_query_value($args{'default/is/session'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $org/apache/sling/scripting/sightly/js/bindings  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'org/apache/sling/scripting/sightly/js/bindings' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo',
        };
}
# @return OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo
#
sub org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'org/apache/sling/scripting/sightly/js/bindings'}) {
        $query_params->{'org.apache.sling.scripting.sightly.js.bindings'} = $self->{api_client}->to_query_value($args{'org/apache/sling/scripting/sightly/js/bindings'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_security_impl_content_disposition_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $sling/content/disposition/paths  (optional)
# @param ARRAY[string] $sling/content/disposition/excluded/paths  (optional)
# @param boolean $sling/content/disposition/all/paths  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/content/disposition/paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/content/disposition/excluded/paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/content/disposition/all/paths' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_security_impl_content_disposition_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingSecurityImplContentDispositionFilterInfo',
        };
}
# @return OrgApacheSlingSecurityImplContentDispositionFilterInfo
#
sub org_apache_sling_security_impl_content_disposition_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/content/disposition/paths'}) {
        $query_params->{'sling.content.disposition.paths'} = $self->{api_client}->to_query_value($args{'sling/content/disposition/paths'});
    }

    # query params
    if ( exists $args{'sling/content/disposition/excluded/paths'}) {
        $query_params->{'sling.content.disposition.excluded.paths'} = $self->{api_client}->to_query_value($args{'sling/content/disposition/excluded/paths'});
    }

    # query params
    if ( exists $args{'sling/content/disposition/all/paths'}) {
        $query_params->{'sling.content.disposition.all.paths'} = $self->{api_client}->to_query_value($args{'sling/content/disposition/all/paths'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingSecurityImplContentDispositionFilterInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_security_impl_referrer_filter
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $allow/empty  (optional)
# @param ARRAY[string] $allow/hosts  (optional)
# @param ARRAY[string] $allow/hosts/regexp  (optional)
# @param ARRAY[string] $filter/methods  (optional)
# @param ARRAY[string] $exclude/agents/regexp  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'allow/empty' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'allow/hosts' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'allow/hosts/regexp' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'filter/methods' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'exclude/agents/regexp' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_security_impl_referrer_filter' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingSecurityImplReferrerFilterInfo',
        };
}
# @return OrgApacheSlingSecurityImplReferrerFilterInfo
#
sub org_apache_sling_security_impl_referrer_filter {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'allow/empty'}) {
        $query_params->{'allow.empty'} = $self->{api_client}->to_query_value($args{'allow/empty'});
    }

    # query params
    if ( exists $args{'allow/hosts'}) {
        $query_params->{'allow.hosts'} = $self->{api_client}->to_query_value($args{'allow/hosts'});
    }

    # query params
    if ( exists $args{'allow/hosts/regexp'}) {
        $query_params->{'allow.hosts.regexp'} = $self->{api_client}->to_query_value($args{'allow/hosts/regexp'});
    }

    # query params
    if ( exists $args{'filter/methods'}) {
        $query_params->{'filter.methods'} = $self->{api_client}->to_query_value($args{'filter/methods'});
    }

    # query params
    if ( exists $args{'exclude/agents/regexp'}) {
        $query_params->{'exclude.agents.regexp'} = $self->{api_client}->to_query_value($args{'exclude/agents/regexp'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingSecurityImplReferrerFilterInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_serviceusermapping_impl_service_user_mapper_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $user/mapping  (optional)
# @param string $user/default  (optional)
# @param boolean $user/enable/default/mapping  (optional)
# @param boolean $require/validation  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'user/mapping' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'user/default' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'user/enable/default/mapping' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'require/validation' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_serviceusermapping_impl_service_user_mapper_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo',
        };
}
# @return OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo
#
sub org_apache_sling_serviceusermapping_impl_service_user_mapper_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'user/mapping'}) {
        $query_params->{'user.mapping'} = $self->{api_client}->to_query_value($args{'user/mapping'});
    }

    # query params
    if ( exists $args{'user/default'}) {
        $query_params->{'user.default'} = $self->{api_client}->to_query_value($args{'user/default'});
    }

    # query params
    if ( exists $args{'user/enable/default/mapping'}) {
        $query_params->{'user.enable.default.mapping'} = $self->{api_client}->to_query_value($args{'user/enable/default/mapping'});
    }

    # query params
    if ( exists $args{'require/validation'}) {
        $query_params->{'require.validation'} = $self->{api_client}->to_query_value($args{'require/validation'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param int $service/ranking  (optional)
# @param ARRAY[string] $user/mapping  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'service/ranking' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'user/mapping' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo',
        };
}
# @return OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo
#
sub org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'service/ranking'}) {
        $query_params->{'service.ranking'} = $self->{api_client}->to_query_value($args{'service/ranking'});
    }

    # query params
    if ( exists $args{'user/mapping'}) {
        $query_params->{'user.mapping'} = $self->{api_client}->to_query_value($args{'user/mapping'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_servlets_get_default_get_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $aliases  (optional)
# @param boolean $index  (optional)
# @param ARRAY[string] $index/files  (optional)
# @param boolean $enable/html  (optional)
# @param boolean $enable/json  (optional)
# @param boolean $enable/txt  (optional)
# @param boolean $enable/xml  (optional)
# @param int $json/maximumresults  (optional)
# @param boolean $ecma_suport  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'aliases' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'index' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'index/files' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enable/html' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'enable/json' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'enable/txt' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'enable/xml' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'json/maximumresults' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'ecma_suport' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_servlets_get_default_get_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingServletsGetDefaultGetServletInfo',
        };
}
# @return OrgApacheSlingServletsGetDefaultGetServletInfo
#
sub org_apache_sling_servlets_get_default_get_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'aliases'}) {
        $query_params->{'aliases'} = $self->{api_client}->to_query_value($args{'aliases'});
    }

    # query params
    if ( exists $args{'index'}) {
        $query_params->{'index'} = $self->{api_client}->to_query_value($args{'index'});
    }

    # query params
    if ( exists $args{'index/files'}) {
        $query_params->{'index.files'} = $self->{api_client}->to_query_value($args{'index/files'});
    }

    # query params
    if ( exists $args{'enable/html'}) {
        $query_params->{'enable.html'} = $self->{api_client}->to_query_value($args{'enable/html'});
    }

    # query params
    if ( exists $args{'enable/json'}) {
        $query_params->{'enable.json'} = $self->{api_client}->to_query_value($args{'enable/json'});
    }

    # query params
    if ( exists $args{'enable/txt'}) {
        $query_params->{'enable.txt'} = $self->{api_client}->to_query_value($args{'enable/txt'});
    }

    # query params
    if ( exists $args{'enable/xml'}) {
        $query_params->{'enable.xml'} = $self->{api_client}->to_query_value($args{'enable/xml'});
    }

    # query params
    if ( exists $args{'json/maximumresults'}) {
        $query_params->{'json.maximumresults'} = $self->{api_client}->to_query_value($args{'json/maximumresults'});
    }

    # query params
    if ( exists $args{'ecma_suport'}) {
        $query_params->{'ecmaSuport'} = $self->{api_client}->to_query_value($args{'ecma_suport'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingServletsGetDefaultGetServletInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_servlets_get_impl_version_version_info_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $sling/servlet/selectors  (optional)
# @param boolean $ecma_suport  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/servlet/selectors' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'ecma_suport' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_servlets_get_impl_version_version_info_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo',
        };
}
# @return OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo
#
sub org_apache_sling_servlets_get_impl_version_version_info_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/servlet/selectors'}) {
        $query_params->{'sling.servlet.selectors'} = $self->{api_client}->to_query_value($args{'sling/servlet/selectors'});
    }

    # query params
    if ( exists $args{'ecma_suport'}) {
        $query_params->{'ecmaSuport'} = $self->{api_client}->to_query_value($args{'ecma_suport'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $scheduler/expression  (optional)
# @param boolean $scheduler/concurrent  (optional)
# @param int $chunk/cleanup/age  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'scheduler/expression' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'scheduler/concurrent' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'chunk/cleanup/age' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo',
        };
}
# @return OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo
#
sub org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'scheduler/expression'}) {
        $query_params->{'scheduler.expression'} = $self->{api_client}->to_query_value($args{'scheduler/expression'});
    }

    # query params
    if ( exists $args{'scheduler/concurrent'}) {
        $query_params->{'scheduler.concurrent'} = $self->{api_client}->to_query_value($args{'scheduler/concurrent'});
    }

    # query params
    if ( exists $args{'chunk/cleanup/age'}) {
        $query_params->{'chunk.cleanup.age'} = $self->{api_client}->to_query_value($args{'chunk/cleanup/age'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_servlets_post_impl_sling_post_servlet
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $servlet/post/date_formats  (optional)
# @param ARRAY[string] $servlet/post/node_name_hints  (optional)
# @param int $servlet/post/node_name_max_length  (optional)
# @param boolean $servlet/post/checkin_new_versionable_nodes  (optional)
# @param boolean $servlet/post/auto_checkout  (optional)
# @param boolean $servlet/post/auto_checkin  (optional)
# @param string $servlet/post/ignore_pattern  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'servlet/post/date_formats' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'servlet/post/node_name_hints' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'servlet/post/node_name_max_length' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'servlet/post/checkin_new_versionable_nodes' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'servlet/post/auto_checkout' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'servlet/post/auto_checkin' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'servlet/post/ignore_pattern' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_servlets_post_impl_sling_post_servlet' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingServletsPostImplSlingPostServletInfo',
        };
}
# @return OrgApacheSlingServletsPostImplSlingPostServletInfo
#
sub org_apache_sling_servlets_post_impl_sling_post_servlet {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'servlet/post/date_formats'}) {
        $query_params->{'servlet.post.dateFormats'} = $self->{api_client}->to_query_value($args{'servlet/post/date_formats'});
    }

    # query params
    if ( exists $args{'servlet/post/node_name_hints'}) {
        $query_params->{'servlet.post.nodeNameHints'} = $self->{api_client}->to_query_value($args{'servlet/post/node_name_hints'});
    }

    # query params
    if ( exists $args{'servlet/post/node_name_max_length'}) {
        $query_params->{'servlet.post.nodeNameMaxLength'} = $self->{api_client}->to_query_value($args{'servlet/post/node_name_max_length'});
    }

    # query params
    if ( exists $args{'servlet/post/checkin_new_versionable_nodes'}) {
        $query_params->{'servlet.post.checkinNewVersionableNodes'} = $self->{api_client}->to_query_value($args{'servlet/post/checkin_new_versionable_nodes'});
    }

    # query params
    if ( exists $args{'servlet/post/auto_checkout'}) {
        $query_params->{'servlet.post.autoCheckout'} = $self->{api_client}->to_query_value($args{'servlet/post/auto_checkout'});
    }

    # query params
    if ( exists $args{'servlet/post/auto_checkin'}) {
        $query_params->{'servlet.post.autoCheckin'} = $self->{api_client}->to_query_value($args{'servlet/post/auto_checkin'});
    }

    # query params
    if ( exists $args{'servlet/post/ignore_pattern'}) {
        $query_params->{'servlet.post.ignorePattern'} = $self->{api_client}->to_query_value($args{'servlet/post/ignore_pattern'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingServletsPostImplSlingPostServletInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_servlets_resolver_sling_servlet_resolver
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $servletresolver/servlet_root  (optional)
# @param int $servletresolver/cache_size  (optional)
# @param ARRAY[string] $servletresolver/paths  (optional)
# @param ARRAY[string] $servletresolver/default_extensions  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'servletresolver/servlet_root' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'servletresolver/cache_size' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'servletresolver/paths' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'servletresolver/default_extensions' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_servlets_resolver_sling_servlet_resolver' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingServletsResolverSlingServletResolverInfo',
        };
}
# @return OrgApacheSlingServletsResolverSlingServletResolverInfo
#
sub org_apache_sling_servlets_resolver_sling_servlet_resolver {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'servletresolver/servlet_root'}) {
        $query_params->{'servletresolver.servletRoot'} = $self->{api_client}->to_query_value($args{'servletresolver/servlet_root'});
    }

    # query params
    if ( exists $args{'servletresolver/cache_size'}) {
        $query_params->{'servletresolver.cacheSize'} = $self->{api_client}->to_query_value($args{'servletresolver/cache_size'});
    }

    # query params
    if ( exists $args{'servletresolver/paths'}) {
        $query_params->{'servletresolver.paths'} = $self->{api_client}->to_query_value($args{'servletresolver/paths'});
    }

    # query params
    if ( exists $args{'servletresolver/default_extensions'}) {
        $query_params->{'servletresolver.defaultExtensions'} = $self->{api_client}->to_query_value($args{'servletresolver/default_extensions'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingServletsResolverSlingServletResolverInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_settings_impl_sling_settings_service_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $sling/name  (optional)
# @param string $sling/description  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'sling/name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sling/description' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_settings_impl_sling_settings_service_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo',
        };
}
# @return OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo
#
sub org_apache_sling_settings_impl_sling_settings_service_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'sling/name'}) {
        $query_params->{'sling.name'} = $self->{api_client}->to_query_value($args{'sling/name'});
    }

    # query params
    if ( exists $args{'sling/description'}) {
        $query_params->{'sling.description'} = $self->{api_client}->to_query_value($args{'sling/description'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_startupfilter_impl_startup_filter_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param boolean $active/by/default  (optional)
# @param string $default/message  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'active/by/default' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'default/message' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_startupfilter_impl_startup_filter_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingStartupfilterImplStartupFilterImplInfo',
        };
}
# @return OrgApacheSlingStartupfilterImplStartupFilterImplInfo
#
sub org_apache_sling_startupfilter_impl_startup_filter_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'active/by/default'}) {
        $query_params->{'active.by.default'} = $self->{api_client}->to_query_value($args{'active/by/default'});
    }

    # query params
    if ( exists $args{'default/message'}) {
        $query_params->{'default.message'} = $self->{api_client}->to_query_value($args{'default/message'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingStartupfilterImplStartupFilterImplInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_tenant_internal_tenant_provider_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $tenant/root  (optional)
# @param ARRAY[string] $tenant/path/matcher  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'tenant/root' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'tenant/path/matcher' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_tenant_internal_tenant_provider_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingTenantInternalTenantProviderImplInfo',
        };
}
# @return OrgApacheSlingTenantInternalTenantProviderImplInfo
#
sub org_apache_sling_tenant_internal_tenant_provider_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'tenant/root'}) {
        $query_params->{'tenant.root'} = $self->{api_client}->to_query_value($args{'tenant/root'});
    }

    # query params
    if ( exists $args{'tenant/path/matcher'}) {
        $query_params->{'tenant.path.matcher'} = $self->{api_client}->to_query_value($args{'tenant/path/matcher'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingTenantInternalTenantProviderImplInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_tracer_internal_log_tracer
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param ARRAY[string] $tracer_sets  (optional)
# @param boolean $enabled  (optional)
# @param boolean $servlet_enabled  (optional)
# @param int $recording_cache_size_in_mb  (optional)
# @param int $recording_cache_duration_in_secs  (optional)
# @param boolean $recording_compression_enabled  (optional)
# @param boolean $gzip_response  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'tracer_sets' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'servlet_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'recording_cache_size_in_mb' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'recording_cache_duration_in_secs' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'recording_compression_enabled' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'gzip_response' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_tracer_internal_log_tracer' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingTracerInternalLogTracerInfo',
        };
}
# @return OrgApacheSlingTracerInternalLogTracerInfo
#
sub org_apache_sling_tracer_internal_log_tracer {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'tracer_sets'}) {
        $query_params->{'tracerSets'} = $self->{api_client}->to_query_value($args{'tracer_sets'});
    }

    # query params
    if ( exists $args{'enabled'}) {
        $query_params->{'enabled'} = $self->{api_client}->to_query_value($args{'enabled'});
    }

    # query params
    if ( exists $args{'servlet_enabled'}) {
        $query_params->{'servletEnabled'} = $self->{api_client}->to_query_value($args{'servlet_enabled'});
    }

    # query params
    if ( exists $args{'recording_cache_size_in_mb'}) {
        $query_params->{'recordingCacheSizeInMB'} = $self->{api_client}->to_query_value($args{'recording_cache_size_in_mb'});
    }

    # query params
    if ( exists $args{'recording_cache_duration_in_secs'}) {
        $query_params->{'recordingCacheDurationInSecs'} = $self->{api_client}->to_query_value($args{'recording_cache_duration_in_secs'});
    }

    # query params
    if ( exists $args{'recording_compression_enabled'}) {
        $query_params->{'recordingCompressionEnabled'} = $self->{api_client}->to_query_value($args{'recording_compression_enabled'});
    }

    # query params
    if ( exists $args{'gzip_response'}) {
        $query_params->{'gzipResponse'} = $self->{api_client}->to_query_value($args{'gzip_response'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingTracerInternalLogTracerInfo', $response);
    return $_response_object;
}

#
# org_apache_sling_xss_impl_xss_filter_impl
#
# 
# 
# @param boolean $post  (optional)
# @param boolean $apply  (optional)
# @param boolean $delete  (optional)
# @param string $action  (optional)
# @param string $__location  (optional)
# @param ARRAY[string] $propertylist  (optional)
# @param string $policy_path  (optional)
{
    my $params = {
    'post' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'apply' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'delete' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    '__location' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'propertylist' => {
        data_type => 'ARRAY[string]',
        description => '',
        required => '0',
    },
    'policy_path' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'org_apache_sling_xss_impl_xss_filter_impl' } = { 
    	summary => '',
        params => $params,
        returns => 'OrgApacheSlingXssImplXSSFilterImplInfo',
        };
}
# @return OrgApacheSlingXssImplXSSFilterImplInfo
#
sub org_apache_sling_xss_impl_xss_filter_impl {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'post'}) {
        $query_params->{'post'} = $self->{api_client}->to_query_value($args{'post'});
    }

    # query params
    if ( exists $args{'apply'}) {
        $query_params->{'apply'} = $self->{api_client}->to_query_value($args{'apply'});
    }

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'__location'}) {
        $query_params->{'$location'} = $self->{api_client}->to_query_value($args{'__location'});
    }

    # query params
    if ( exists $args{'propertylist'}) {
        $query_params->{'propertylist'} = $self->{api_client}->to_query_value($args{'propertylist'});
    }

    # query params
    if ( exists $args{'policy_path'}) {
        $query_params->{'policyPath'} = $self->{api_client}->to_query_value($args{'policy_path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(aemAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrgApacheSlingXssImplXSSFilterImplInfo', $response);
    return $_response_object;
}

1;
