/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties :  IEquatable<ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties" /> class.
        /// </summary>
        /// <param name="translationFactory">translationFactory.</param>
        /// <param name="defaultConnectorLabel">defaultConnectorLabel.</param>
        /// <param name="defaultConnectorAttribution">defaultConnectorAttribution.</param>
        /// <param name="defaultConnectorWorkspaceId">defaultConnectorWorkspaceId.</param>
        /// <param name="defaultConnectorSubscriptionKey">defaultConnectorSubscriptionKey.</param>
        /// <param name="languageMapLocation">languageMapLocation.</param>
        /// <param name="categoryMapLocation">categoryMapLocation.</param>
        /// <param name="retryAttempts">retryAttempts.</param>
        /// <param name="timeoutCount">timeoutCount.</param>
        public ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties(ConfigNodePropertyString translationFactory = default(ConfigNodePropertyString), ConfigNodePropertyString defaultConnectorLabel = default(ConfigNodePropertyString), ConfigNodePropertyString defaultConnectorAttribution = default(ConfigNodePropertyString), ConfigNodePropertyString defaultConnectorWorkspaceId = default(ConfigNodePropertyString), ConfigNodePropertyString defaultConnectorSubscriptionKey = default(ConfigNodePropertyString), ConfigNodePropertyString languageMapLocation = default(ConfigNodePropertyString), ConfigNodePropertyString categoryMapLocation = default(ConfigNodePropertyString), ConfigNodePropertyInteger retryAttempts = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger timeoutCount = default(ConfigNodePropertyInteger))
        {
            this.TranslationFactory = translationFactory;
            this.DefaultConnectorLabel = defaultConnectorLabel;
            this.DefaultConnectorAttribution = defaultConnectorAttribution;
            this.DefaultConnectorWorkspaceId = defaultConnectorWorkspaceId;
            this.DefaultConnectorSubscriptionKey = defaultConnectorSubscriptionKey;
            this.LanguageMapLocation = languageMapLocation;
            this.CategoryMapLocation = categoryMapLocation;
            this.RetryAttempts = retryAttempts;
            this.TimeoutCount = timeoutCount;
        }
        
        /// <summary>
        /// Gets or Sets TranslationFactory
        /// </summary>
        [DataMember(Name="translationFactory", EmitDefaultValue=false)]
        public ConfigNodePropertyString TranslationFactory { get; set; }

        /// <summary>
        /// Gets or Sets DefaultConnectorLabel
        /// </summary>
        [DataMember(Name="defaultConnectorLabel", EmitDefaultValue=false)]
        public ConfigNodePropertyString DefaultConnectorLabel { get; set; }

        /// <summary>
        /// Gets or Sets DefaultConnectorAttribution
        /// </summary>
        [DataMember(Name="defaultConnectorAttribution", EmitDefaultValue=false)]
        public ConfigNodePropertyString DefaultConnectorAttribution { get; set; }

        /// <summary>
        /// Gets or Sets DefaultConnectorWorkspaceId
        /// </summary>
        [DataMember(Name="defaultConnectorWorkspaceId", EmitDefaultValue=false)]
        public ConfigNodePropertyString DefaultConnectorWorkspaceId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultConnectorSubscriptionKey
        /// </summary>
        [DataMember(Name="defaultConnectorSubscriptionKey", EmitDefaultValue=false)]
        public ConfigNodePropertyString DefaultConnectorSubscriptionKey { get; set; }

        /// <summary>
        /// Gets or Sets LanguageMapLocation
        /// </summary>
        [DataMember(Name="languageMapLocation", EmitDefaultValue=false)]
        public ConfigNodePropertyString LanguageMapLocation { get; set; }

        /// <summary>
        /// Gets or Sets CategoryMapLocation
        /// </summary>
        [DataMember(Name="categoryMapLocation", EmitDefaultValue=false)]
        public ConfigNodePropertyString CategoryMapLocation { get; set; }

        /// <summary>
        /// Gets or Sets RetryAttempts
        /// </summary>
        [DataMember(Name="retryAttempts", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger RetryAttempts { get; set; }

        /// <summary>
        /// Gets or Sets TimeoutCount
        /// </summary>
        [DataMember(Name="timeoutCount", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger TimeoutCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties {\n");
            sb.Append("  TranslationFactory: ").Append(TranslationFactory).Append("\n");
            sb.Append("  DefaultConnectorLabel: ").Append(DefaultConnectorLabel).Append("\n");
            sb.Append("  DefaultConnectorAttribution: ").Append(DefaultConnectorAttribution).Append("\n");
            sb.Append("  DefaultConnectorWorkspaceId: ").Append(DefaultConnectorWorkspaceId).Append("\n");
            sb.Append("  DefaultConnectorSubscriptionKey: ").Append(DefaultConnectorSubscriptionKey).Append("\n");
            sb.Append("  LanguageMapLocation: ").Append(LanguageMapLocation).Append("\n");
            sb.Append("  CategoryMapLocation: ").Append(CategoryMapLocation).Append("\n");
            sb.Append("  RetryAttempts: ").Append(RetryAttempts).Append("\n");
            sb.Append("  TimeoutCount: ").Append(TimeoutCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TranslationFactory == input.TranslationFactory ||
                    (this.TranslationFactory != null &&
                    this.TranslationFactory.Equals(input.TranslationFactory))
                ) && 
                (
                    this.DefaultConnectorLabel == input.DefaultConnectorLabel ||
                    (this.DefaultConnectorLabel != null &&
                    this.DefaultConnectorLabel.Equals(input.DefaultConnectorLabel))
                ) && 
                (
                    this.DefaultConnectorAttribution == input.DefaultConnectorAttribution ||
                    (this.DefaultConnectorAttribution != null &&
                    this.DefaultConnectorAttribution.Equals(input.DefaultConnectorAttribution))
                ) && 
                (
                    this.DefaultConnectorWorkspaceId == input.DefaultConnectorWorkspaceId ||
                    (this.DefaultConnectorWorkspaceId != null &&
                    this.DefaultConnectorWorkspaceId.Equals(input.DefaultConnectorWorkspaceId))
                ) && 
                (
                    this.DefaultConnectorSubscriptionKey == input.DefaultConnectorSubscriptionKey ||
                    (this.DefaultConnectorSubscriptionKey != null &&
                    this.DefaultConnectorSubscriptionKey.Equals(input.DefaultConnectorSubscriptionKey))
                ) && 
                (
                    this.LanguageMapLocation == input.LanguageMapLocation ||
                    (this.LanguageMapLocation != null &&
                    this.LanguageMapLocation.Equals(input.LanguageMapLocation))
                ) && 
                (
                    this.CategoryMapLocation == input.CategoryMapLocation ||
                    (this.CategoryMapLocation != null &&
                    this.CategoryMapLocation.Equals(input.CategoryMapLocation))
                ) && 
                (
                    this.RetryAttempts == input.RetryAttempts ||
                    (this.RetryAttempts != null &&
                    this.RetryAttempts.Equals(input.RetryAttempts))
                ) && 
                (
                    this.TimeoutCount == input.TimeoutCount ||
                    (this.TimeoutCount != null &&
                    this.TimeoutCount.Equals(input.TimeoutCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TranslationFactory != null)
                    hashCode = hashCode * 59 + this.TranslationFactory.GetHashCode();
                if (this.DefaultConnectorLabel != null)
                    hashCode = hashCode * 59 + this.DefaultConnectorLabel.GetHashCode();
                if (this.DefaultConnectorAttribution != null)
                    hashCode = hashCode * 59 + this.DefaultConnectorAttribution.GetHashCode();
                if (this.DefaultConnectorWorkspaceId != null)
                    hashCode = hashCode * 59 + this.DefaultConnectorWorkspaceId.GetHashCode();
                if (this.DefaultConnectorSubscriptionKey != null)
                    hashCode = hashCode * 59 + this.DefaultConnectorSubscriptionKey.GetHashCode();
                if (this.LanguageMapLocation != null)
                    hashCode = hashCode * 59 + this.LanguageMapLocation.GetHashCode();
                if (this.CategoryMapLocation != null)
                    hashCode = hashCode * 59 + this.CategoryMapLocation.GetHashCode();
                if (this.RetryAttempts != null)
                    hashCode = hashCode * 59 + this.RetryAttempts.GetHashCode();
                if (this.TimeoutCount != null)
                    hashCode = hashCode * 59 + this.TimeoutCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
