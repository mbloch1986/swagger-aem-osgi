/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties() {
    init();
}

OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::~OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::init() {
    path = new OAIConfigNodePropertyString();
    m_path_isSet = false;
    oauth_client_ids_allowed = new OAIConfigNodePropertyArray();
    m_oauth_client_ids_allowed_isSet = false;
    auth_bearer_sync_ims = new OAIConfigNodePropertyBoolean();
    m_auth_bearer_sync_ims_isSet = false;
    auth_token_request_parameter = new OAIConfigNodePropertyString();
    m_auth_token_request_parameter_isSet = false;
    oauth_bearer_configid = new OAIConfigNodePropertyString();
    m_oauth_bearer_configid_isSet = false;
    oauth_jwt_support = new OAIConfigNodePropertyBoolean();
    m_oauth_jwt_support_isSet = false;
}

void
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::cleanup() {
    if(path != nullptr) { 
        delete path;
    }
    if(oauth_client_ids_allowed != nullptr) { 
        delete oauth_client_ids_allowed;
    }
    if(auth_bearer_sync_ims != nullptr) { 
        delete auth_bearer_sync_ims;
    }
    if(auth_token_request_parameter != nullptr) { 
        delete auth_token_request_parameter;
    }
    if(oauth_bearer_configid != nullptr) { 
        delete oauth_bearer_configid;
    }
    if(oauth_jwt_support != nullptr) { 
        delete oauth_jwt_support;
    }
}

OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties*
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&path, pJson["path"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&oauth_client_ids_allowed, pJson["oauth.clientIds.allowed"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&auth_bearer_sync_ims, pJson["auth.bearer.sync.ims"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&auth_token_request_parameter, pJson["auth.tokenRequestParameter"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&oauth_bearer_configid, pJson["oauth.bearer.configid"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&oauth_jwt_support, pJson["oauth.jwt.support"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::asJsonObject() {
    QJsonObject obj;
    if((path != nullptr) && (path->isSet())){
        toJsonValue(QString("path"), path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((oauth_client_ids_allowed != nullptr) && (oauth_client_ids_allowed->isSet())){
        toJsonValue(QString("oauth.clientIds.allowed"), oauth_client_ids_allowed, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((auth_bearer_sync_ims != nullptr) && (auth_bearer_sync_ims->isSet())){
        toJsonValue(QString("auth.bearer.sync.ims"), auth_bearer_sync_ims, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((auth_token_request_parameter != nullptr) && (auth_token_request_parameter->isSet())){
        toJsonValue(QString("auth.tokenRequestParameter"), auth_token_request_parameter, obj, QString("OAIConfigNodePropertyString"));
    }
    if((oauth_bearer_configid != nullptr) && (oauth_bearer_configid->isSet())){
        toJsonValue(QString("oauth.bearer.configid"), oauth_bearer_configid, obj, QString("OAIConfigNodePropertyString"));
    }
    if((oauth_jwt_support != nullptr) && (oauth_jwt_support->isSet())){
        toJsonValue(QString("oauth.jwt.support"), oauth_jwt_support, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::getPath() {
    return path;
}
void
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::setPath(OAIConfigNodePropertyString* path) {
    this->path = path;
    this->m_path_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::getOauthClientIdsAllowed() {
    return oauth_client_ids_allowed;
}
void
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::setOauthClientIdsAllowed(OAIConfigNodePropertyArray* oauth_client_ids_allowed) {
    this->oauth_client_ids_allowed = oauth_client_ids_allowed;
    this->m_oauth_client_ids_allowed_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::getAuthBearerSyncIms() {
    return auth_bearer_sync_ims;
}
void
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::setAuthBearerSyncIms(OAIConfigNodePropertyBoolean* auth_bearer_sync_ims) {
    this->auth_bearer_sync_ims = auth_bearer_sync_ims;
    this->m_auth_bearer_sync_ims_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::getAuthTokenRequestParameter() {
    return auth_token_request_parameter;
}
void
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::setAuthTokenRequestParameter(OAIConfigNodePropertyString* auth_token_request_parameter) {
    this->auth_token_request_parameter = auth_token_request_parameter;
    this->m_auth_token_request_parameter_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::getOauthBearerConfigid() {
    return oauth_bearer_configid;
}
void
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::setOauthBearerConfigid(OAIConfigNodePropertyString* oauth_bearer_configid) {
    this->oauth_bearer_configid = oauth_bearer_configid;
    this->m_oauth_bearer_configid_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::getOauthJwtSupport() {
    return oauth_jwt_support;
}
void
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::setOauthJwtSupport(OAIConfigNodePropertyBoolean* oauth_jwt_support) {
    this->oauth_jwt_support = oauth_jwt_support;
    this->m_oauth_jwt_support_isSet = true;
}


bool
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(path != nullptr && path->isSet()){ isObjectUpdated = true; break;}
        if(oauth_client_ids_allowed != nullptr && oauth_client_ids_allowed->isSet()){ isObjectUpdated = true; break;}
        if(auth_bearer_sync_ims != nullptr && auth_bearer_sync_ims->isSet()){ isObjectUpdated = true; break;}
        if(auth_token_request_parameter != nullptr && auth_token_request_parameter->isSet()){ isObjectUpdated = true; break;}
        if(oauth_bearer_configid != nullptr && oauth_bearer_configid->isSet()){ isObjectUpdated = true; break;}
        if(oauth_jwt_support != nullptr && oauth_jwt_support->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

