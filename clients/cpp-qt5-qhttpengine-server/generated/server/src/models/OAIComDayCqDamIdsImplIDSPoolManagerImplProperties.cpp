/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamIdsImplIDSPoolManagerImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::OAIComDayCqDamIdsImplIDSPoolManagerImplProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::OAIComDayCqDamIdsImplIDSPoolManagerImplProperties() {
    this->init();
}

OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::~OAIComDayCqDamIdsImplIDSPoolManagerImplProperties() {
    
}

void
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::init() {
    m_max_errors_to_blacklist_isSet = false;
    m_retry_interval_to_whitelist_isSet = false;
    m_connect_timeout_isSet = false;
    m_socket_timeout_isSet = false;
    m_process_label_isSet = false;
    m_connection_use_max_isSet = false;
}

void
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(max_errors_to_blacklist, json[QString("max.errors.to.blacklist")]);
    
    ::OpenAPI::fromJsonValue(retry_interval_to_whitelist, json[QString("retry.interval.to.whitelist")]);
    
    ::OpenAPI::fromJsonValue(connect_timeout, json[QString("connect.timeout")]);
    
    ::OpenAPI::fromJsonValue(socket_timeout, json[QString("socket.timeout")]);
    
    ::OpenAPI::fromJsonValue(process_label, json[QString("process.label")]);
    
    ::OpenAPI::fromJsonValue(connection_use_max, json[QString("connection.use.max")]);
    
}

QString
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(max_errors_to_blacklist.isSet()){
        obj.insert(QString("max.errors.to.blacklist"), ::OpenAPI::toJsonValue(max_errors_to_blacklist));
    }
	if(retry_interval_to_whitelist.isSet()){
        obj.insert(QString("retry.interval.to.whitelist"), ::OpenAPI::toJsonValue(retry_interval_to_whitelist));
    }
	if(connect_timeout.isSet()){
        obj.insert(QString("connect.timeout"), ::OpenAPI::toJsonValue(connect_timeout));
    }
	if(socket_timeout.isSet()){
        obj.insert(QString("socket.timeout"), ::OpenAPI::toJsonValue(socket_timeout));
    }
	if(process_label.isSet()){
        obj.insert(QString("process.label"), ::OpenAPI::toJsonValue(process_label));
    }
	if(connection_use_max.isSet()){
        obj.insert(QString("connection.use.max"), ::OpenAPI::toJsonValue(connection_use_max));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::getMaxErrorsToBlacklist() const {
    return max_errors_to_blacklist;
}
void
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::setMaxErrorsToBlacklist(const OAIConfigNodePropertyInteger &max_errors_to_blacklist) {
    this->max_errors_to_blacklist = max_errors_to_blacklist;
    this->m_max_errors_to_blacklist_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::getRetryIntervalToWhitelist() const {
    return retry_interval_to_whitelist;
}
void
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::setRetryIntervalToWhitelist(const OAIConfigNodePropertyInteger &retry_interval_to_whitelist) {
    this->retry_interval_to_whitelist = retry_interval_to_whitelist;
    this->m_retry_interval_to_whitelist_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::getConnectTimeout() const {
    return connect_timeout;
}
void
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::setConnectTimeout(const OAIConfigNodePropertyInteger &connect_timeout) {
    this->connect_timeout = connect_timeout;
    this->m_connect_timeout_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::getSocketTimeout() const {
    return socket_timeout;
}
void
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::setSocketTimeout(const OAIConfigNodePropertyInteger &socket_timeout) {
    this->socket_timeout = socket_timeout;
    this->m_socket_timeout_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::getProcessLabel() const {
    return process_label;
}
void
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::setProcessLabel(const OAIConfigNodePropertyString &process_label) {
    this->process_label = process_label;
    this->m_process_label_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::getConnectionUseMax() const {
    return connection_use_max;
}
void
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::setConnectionUseMax(const OAIConfigNodePropertyInteger &connection_use_max) {
    this->connection_use_max = connection_use_max;
    this->m_connection_use_max_isSet = true;
}


bool
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(max_errors_to_blacklist.isSet()){ isObjectUpdated = true; break;}
    
        if(retry_interval_to_whitelist.isSet()){ isObjectUpdated = true; break;}
    
        if(connect_timeout.isSet()){ isObjectUpdated = true; break;}
    
        if(socket_timeout.isSet()){ isObjectUpdated = true; break;}
    
        if(process_label.isSet()){ isObjectUpdated = true; break;}
    
        if(connection_use_max.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

