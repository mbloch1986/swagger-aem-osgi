/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties() {
    this->init();
}

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::~OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties() {
    
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::init() {
    m_path_desc_field_isSet = false;
    m_path_child_field_isSet = false;
    m_path_parent_field_isSet = false;
    m_path_exact_field_isSet = false;
    m_catch_all_field_isSet = false;
    m_collapsed_path_field_isSet = false;
    m_path_depth_field_isSet = false;
    m_commit_policy_isSet = false;
    m_rows_isSet = false;
    m_path_restrictions_isSet = false;
    m_property_restrictions_isSet = false;
    m_primarytypes_restrictions_isSet = false;
    m_ignored_properties_isSet = false;
    m_used_properties_isSet = false;
    m_type_mappings_isSet = false;
    m_property_mappings_isSet = false;
    m_collapse_jcrcontent_nodes_isSet = false;
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(path_desc_field, json[QString("path.desc.field")]);
    
    ::OpenAPI::fromJsonValue(path_child_field, json[QString("path.child.field")]);
    
    ::OpenAPI::fromJsonValue(path_parent_field, json[QString("path.parent.field")]);
    
    ::OpenAPI::fromJsonValue(path_exact_field, json[QString("path.exact.field")]);
    
    ::OpenAPI::fromJsonValue(catch_all_field, json[QString("catch.all.field")]);
    
    ::OpenAPI::fromJsonValue(collapsed_path_field, json[QString("collapsed.path.field")]);
    
    ::OpenAPI::fromJsonValue(path_depth_field, json[QString("path.depth.field")]);
    
    ::OpenAPI::fromJsonValue(commit_policy, json[QString("commit.policy")]);
    
    ::OpenAPI::fromJsonValue(rows, json[QString("rows")]);
    
    ::OpenAPI::fromJsonValue(path_restrictions, json[QString("path.restrictions")]);
    
    ::OpenAPI::fromJsonValue(property_restrictions, json[QString("property.restrictions")]);
    
    ::OpenAPI::fromJsonValue(primarytypes_restrictions, json[QString("primarytypes.restrictions")]);
    
    ::OpenAPI::fromJsonValue(ignored_properties, json[QString("ignored.properties")]);
    
    ::OpenAPI::fromJsonValue(used_properties, json[QString("used.properties")]);
    
    ::OpenAPI::fromJsonValue(type_mappings, json[QString("type.mappings")]);
    
    ::OpenAPI::fromJsonValue(property_mappings, json[QString("property.mappings")]);
    
    ::OpenAPI::fromJsonValue(collapse_jcrcontent_nodes, json[QString("collapse.jcrcontent.nodes")]);
    
}

QString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::asJsonObject() const {
    QJsonObject obj;
	if(path_desc_field.isSet()){
        obj.insert(QString("path.desc.field"), ::OpenAPI::toJsonValue(path_desc_field));
    }
	if(path_child_field.isSet()){
        obj.insert(QString("path.child.field"), ::OpenAPI::toJsonValue(path_child_field));
    }
	if(path_parent_field.isSet()){
        obj.insert(QString("path.parent.field"), ::OpenAPI::toJsonValue(path_parent_field));
    }
	if(path_exact_field.isSet()){
        obj.insert(QString("path.exact.field"), ::OpenAPI::toJsonValue(path_exact_field));
    }
	if(catch_all_field.isSet()){
        obj.insert(QString("catch.all.field"), ::OpenAPI::toJsonValue(catch_all_field));
    }
	if(collapsed_path_field.isSet()){
        obj.insert(QString("collapsed.path.field"), ::OpenAPI::toJsonValue(collapsed_path_field));
    }
	if(path_depth_field.isSet()){
        obj.insert(QString("path.depth.field"), ::OpenAPI::toJsonValue(path_depth_field));
    }
	if(commit_policy.isSet()){
        obj.insert(QString("commit.policy"), ::OpenAPI::toJsonValue(commit_policy));
    }
	if(rows.isSet()){
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(rows));
    }
	if(path_restrictions.isSet()){
        obj.insert(QString("path.restrictions"), ::OpenAPI::toJsonValue(path_restrictions));
    }
	if(property_restrictions.isSet()){
        obj.insert(QString("property.restrictions"), ::OpenAPI::toJsonValue(property_restrictions));
    }
	if(primarytypes_restrictions.isSet()){
        obj.insert(QString("primarytypes.restrictions"), ::OpenAPI::toJsonValue(primarytypes_restrictions));
    }
	if(ignored_properties.isSet()){
        obj.insert(QString("ignored.properties"), ::OpenAPI::toJsonValue(ignored_properties));
    }
	if(used_properties.isSet()){
        obj.insert(QString("used.properties"), ::OpenAPI::toJsonValue(used_properties));
    }
	if(type_mappings.isSet()){
        obj.insert(QString("type.mappings"), ::OpenAPI::toJsonValue(type_mappings));
    }
	if(property_mappings.isSet()){
        obj.insert(QString("property.mappings"), ::OpenAPI::toJsonValue(property_mappings));
    }
	if(collapse_jcrcontent_nodes.isSet()){
        obj.insert(QString("collapse.jcrcontent.nodes"), ::OpenAPI::toJsonValue(collapse_jcrcontent_nodes));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathDescField() const {
    return path_desc_field;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathDescField(const OAIConfigNodePropertyString &path_desc_field) {
    this->path_desc_field = path_desc_field;
    this->m_path_desc_field_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathChildField() const {
    return path_child_field;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathChildField(const OAIConfigNodePropertyString &path_child_field) {
    this->path_child_field = path_child_field;
    this->m_path_child_field_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathParentField() const {
    return path_parent_field;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathParentField(const OAIConfigNodePropertyString &path_parent_field) {
    this->path_parent_field = path_parent_field;
    this->m_path_parent_field_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathExactField() const {
    return path_exact_field;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathExactField(const OAIConfigNodePropertyString &path_exact_field) {
    this->path_exact_field = path_exact_field;
    this->m_path_exact_field_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getCatchAllField() const {
    return catch_all_field;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setCatchAllField(const OAIConfigNodePropertyString &catch_all_field) {
    this->catch_all_field = catch_all_field;
    this->m_catch_all_field_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getCollapsedPathField() const {
    return collapsed_path_field;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setCollapsedPathField(const OAIConfigNodePropertyString &collapsed_path_field) {
    this->collapsed_path_field = collapsed_path_field;
    this->m_collapsed_path_field_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathDepthField() const {
    return path_depth_field;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathDepthField(const OAIConfigNodePropertyString &path_depth_field) {
    this->path_depth_field = path_depth_field;
    this->m_path_depth_field_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getCommitPolicy() const {
    return commit_policy;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setCommitPolicy(const OAIConfigNodePropertyDropDown &commit_policy) {
    this->commit_policy = commit_policy;
    this->m_commit_policy_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getRows() const {
    return rows;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setRows(const OAIConfigNodePropertyInteger &rows) {
    this->rows = rows;
    this->m_rows_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPathRestrictions() const {
    return path_restrictions;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPathRestrictions(const OAIConfigNodePropertyBoolean &path_restrictions) {
    this->path_restrictions = path_restrictions;
    this->m_path_restrictions_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPropertyRestrictions() const {
    return property_restrictions;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPropertyRestrictions(const OAIConfigNodePropertyBoolean &property_restrictions) {
    this->property_restrictions = property_restrictions;
    this->m_property_restrictions_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPrimarytypesRestrictions() const {
    return primarytypes_restrictions;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPrimarytypesRestrictions(const OAIConfigNodePropertyBoolean &primarytypes_restrictions) {
    this->primarytypes_restrictions = primarytypes_restrictions;
    this->m_primarytypes_restrictions_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getIgnoredProperties() const {
    return ignored_properties;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setIgnoredProperties(const OAIConfigNodePropertyArray &ignored_properties) {
    this->ignored_properties = ignored_properties;
    this->m_ignored_properties_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getUsedProperties() const {
    return used_properties;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setUsedProperties(const OAIConfigNodePropertyArray &used_properties) {
    this->used_properties = used_properties;
    this->m_used_properties_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getTypeMappings() const {
    return type_mappings;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setTypeMappings(const OAIConfigNodePropertyArray &type_mappings) {
    this->type_mappings = type_mappings;
    this->m_type_mappings_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getPropertyMappings() const {
    return property_mappings;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setPropertyMappings(const OAIConfigNodePropertyArray &property_mappings) {
    this->property_mappings = property_mappings;
    this->m_property_mappings_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::getCollapseJcrcontentNodes() const {
    return collapse_jcrcontent_nodes;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::setCollapseJcrcontentNodes(const OAIConfigNodePropertyBoolean &collapse_jcrcontent_nodes) {
    this->collapse_jcrcontent_nodes = collapse_jcrcontent_nodes;
    this->m_collapse_jcrcontent_nodes_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(path_desc_field.isSet()){ isObjectUpdated = true; break;}
    
        if(path_child_field.isSet()){ isObjectUpdated = true; break;}
    
        if(path_parent_field.isSet()){ isObjectUpdated = true; break;}
    
        if(path_exact_field.isSet()){ isObjectUpdated = true; break;}
    
        if(catch_all_field.isSet()){ isObjectUpdated = true; break;}
    
        if(collapsed_path_field.isSet()){ isObjectUpdated = true; break;}
    
        if(path_depth_field.isSet()){ isObjectUpdated = true; break;}
    
        if(commit_policy.isSet()){ isObjectUpdated = true; break;}
    
        if(rows.isSet()){ isObjectUpdated = true; break;}
    
        if(path_restrictions.isSet()){ isObjectUpdated = true; break;}
    
        if(property_restrictions.isSet()){ isObjectUpdated = true; break;}
    
        if(primarytypes_restrictions.isSet()){ isObjectUpdated = true; break;}
    
        if(ignored_properties.isSet()){ isObjectUpdated = true; break;}
    
        if(used_properties.isSet()){ isObjectUpdated = true; break;}
    
        if(type_mappings.isSet()){ isObjectUpdated = true; break;}
    
        if(property_mappings.isSet()){ isObjectUpdated = true; break;}
    
        if(collapse_jcrcontent_nodes.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

