/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties() {
    this->init();
}

OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::~OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties() {
    
}

void
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::init() {
    m_osgi_http_whiteboard_context_select_isSet = false;
    m_osgi_http_whiteboard_listener_isSet = false;
    m_auth_sudo_cookie_isSet = false;
    m_auth_sudo_parameter_isSet = false;
    m_auth_annonymous_isSet = false;
    m_sling_auth_requirements_isSet = false;
    m_sling_auth_anonymous_user_isSet = false;
    m_sling_auth_anonymous_password_isSet = false;
    m_auth_http_isSet = false;
    m_auth_http_realm_isSet = false;
    m_auth_uri_suffix_isSet = false;
}

void
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(osgi_http_whiteboard_context_select, json[QString("osgi.http.whiteboard.context.select")]);
    
    ::OpenAPI::fromJsonValue(osgi_http_whiteboard_listener, json[QString("osgi.http.whiteboard.listener")]);
    
    ::OpenAPI::fromJsonValue(auth_sudo_cookie, json[QString("auth.sudo.cookie")]);
    
    ::OpenAPI::fromJsonValue(auth_sudo_parameter, json[QString("auth.sudo.parameter")]);
    
    ::OpenAPI::fromJsonValue(auth_annonymous, json[QString("auth.annonymous")]);
    
    ::OpenAPI::fromJsonValue(sling_auth_requirements, json[QString("sling.auth.requirements")]);
    
    ::OpenAPI::fromJsonValue(sling_auth_anonymous_user, json[QString("sling.auth.anonymous.user")]);
    
    ::OpenAPI::fromJsonValue(sling_auth_anonymous_password, json[QString("sling.auth.anonymous.password")]);
    
    ::OpenAPI::fromJsonValue(auth_http, json[QString("auth.http")]);
    
    ::OpenAPI::fromJsonValue(auth_http_realm, json[QString("auth.http.realm")]);
    
    ::OpenAPI::fromJsonValue(auth_uri_suffix, json[QString("auth.uri.suffix")]);
    
}

QString
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::asJsonObject() const {
    QJsonObject obj;
	if(osgi_http_whiteboard_context_select.isSet()){
        obj.insert(QString("osgi.http.whiteboard.context.select"), ::OpenAPI::toJsonValue(osgi_http_whiteboard_context_select));
    }
	if(osgi_http_whiteboard_listener.isSet()){
        obj.insert(QString("osgi.http.whiteboard.listener"), ::OpenAPI::toJsonValue(osgi_http_whiteboard_listener));
    }
	if(auth_sudo_cookie.isSet()){
        obj.insert(QString("auth.sudo.cookie"), ::OpenAPI::toJsonValue(auth_sudo_cookie));
    }
	if(auth_sudo_parameter.isSet()){
        obj.insert(QString("auth.sudo.parameter"), ::OpenAPI::toJsonValue(auth_sudo_parameter));
    }
	if(auth_annonymous.isSet()){
        obj.insert(QString("auth.annonymous"), ::OpenAPI::toJsonValue(auth_annonymous));
    }
	if(sling_auth_requirements.isSet()){
        obj.insert(QString("sling.auth.requirements"), ::OpenAPI::toJsonValue(sling_auth_requirements));
    }
	if(sling_auth_anonymous_user.isSet()){
        obj.insert(QString("sling.auth.anonymous.user"), ::OpenAPI::toJsonValue(sling_auth_anonymous_user));
    }
	if(sling_auth_anonymous_password.isSet()){
        obj.insert(QString("sling.auth.anonymous.password"), ::OpenAPI::toJsonValue(sling_auth_anonymous_password));
    }
	if(auth_http.isSet()){
        obj.insert(QString("auth.http"), ::OpenAPI::toJsonValue(auth_http));
    }
	if(auth_http_realm.isSet()){
        obj.insert(QString("auth.http.realm"), ::OpenAPI::toJsonValue(auth_http_realm));
    }
	if(auth_uri_suffix.isSet()){
        obj.insert(QString("auth.uri.suffix"), ::OpenAPI::toJsonValue(auth_uri_suffix));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getOsgiHttpWhiteboardContextSelect() const {
    return osgi_http_whiteboard_context_select;
}
void
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setOsgiHttpWhiteboardContextSelect(const OAIConfigNodePropertyString &osgi_http_whiteboard_context_select) {
    this->osgi_http_whiteboard_context_select = osgi_http_whiteboard_context_select;
    this->m_osgi_http_whiteboard_context_select_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getOsgiHttpWhiteboardListener() const {
    return osgi_http_whiteboard_listener;
}
void
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setOsgiHttpWhiteboardListener(const OAIConfigNodePropertyString &osgi_http_whiteboard_listener) {
    this->osgi_http_whiteboard_listener = osgi_http_whiteboard_listener;
    this->m_osgi_http_whiteboard_listener_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getAuthSudoCookie() const {
    return auth_sudo_cookie;
}
void
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setAuthSudoCookie(const OAIConfigNodePropertyString &auth_sudo_cookie) {
    this->auth_sudo_cookie = auth_sudo_cookie;
    this->m_auth_sudo_cookie_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getAuthSudoParameter() const {
    return auth_sudo_parameter;
}
void
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setAuthSudoParameter(const OAIConfigNodePropertyString &auth_sudo_parameter) {
    this->auth_sudo_parameter = auth_sudo_parameter;
    this->m_auth_sudo_parameter_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getAuthAnnonymous() const {
    return auth_annonymous;
}
void
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setAuthAnnonymous(const OAIConfigNodePropertyBoolean &auth_annonymous) {
    this->auth_annonymous = auth_annonymous;
    this->m_auth_annonymous_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getSlingAuthRequirements() const {
    return sling_auth_requirements;
}
void
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setSlingAuthRequirements(const OAIConfigNodePropertyArray &sling_auth_requirements) {
    this->sling_auth_requirements = sling_auth_requirements;
    this->m_sling_auth_requirements_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getSlingAuthAnonymousUser() const {
    return sling_auth_anonymous_user;
}
void
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setSlingAuthAnonymousUser(const OAIConfigNodePropertyString &sling_auth_anonymous_user) {
    this->sling_auth_anonymous_user = sling_auth_anonymous_user;
    this->m_sling_auth_anonymous_user_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getSlingAuthAnonymousPassword() const {
    return sling_auth_anonymous_password;
}
void
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setSlingAuthAnonymousPassword(const OAIConfigNodePropertyString &sling_auth_anonymous_password) {
    this->sling_auth_anonymous_password = sling_auth_anonymous_password;
    this->m_sling_auth_anonymous_password_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getAuthHttp() const {
    return auth_http;
}
void
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setAuthHttp(const OAIConfigNodePropertyDropDown &auth_http) {
    this->auth_http = auth_http;
    this->m_auth_http_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getAuthHttpRealm() const {
    return auth_http_realm;
}
void
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setAuthHttpRealm(const OAIConfigNodePropertyString &auth_http_realm) {
    this->auth_http_realm = auth_http_realm;
    this->m_auth_http_realm_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::getAuthUriSuffix() const {
    return auth_uri_suffix;
}
void
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::setAuthUriSuffix(const OAIConfigNodePropertyArray &auth_uri_suffix) {
    this->auth_uri_suffix = auth_uri_suffix;
    this->m_auth_uri_suffix_isSet = true;
}


bool
OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(osgi_http_whiteboard_context_select.isSet()){ isObjectUpdated = true; break;}
    
        if(osgi_http_whiteboard_listener.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_sudo_cookie.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_sudo_parameter.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_annonymous.isSet()){ isObjectUpdated = true; break;}
    
        if(sling_auth_requirements.isSet()){ isObjectUpdated = true; break;}
    
        if(sling_auth_anonymous_user.isSet()){ isObjectUpdated = true; break;}
    
        if(sling_auth_anonymous_password.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_http.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_http_realm.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_uri_suffix.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

