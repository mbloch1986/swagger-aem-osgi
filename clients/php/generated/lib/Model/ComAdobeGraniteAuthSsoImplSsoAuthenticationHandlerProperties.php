<?php
/**
 * ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'path' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'service_ranking' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'jaas_control_flag' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'jaas_realm_name' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'jaas_ranking' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'headers' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'cookies' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'parameters' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'usermap' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'format' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'trusted_credentials_attribute' => '\OpenAPI\Client\Model\ConfigNodePropertyString'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'path' => null,
        'service_ranking' => null,
        'jaas_control_flag' => null,
        'jaas_realm_name' => null,
        'jaas_ranking' => null,
        'headers' => null,
        'cookies' => null,
        'parameters' => null,
        'usermap' => null,
        'format' => null,
        'trusted_credentials_attribute' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'path' => 'path',
        'service_ranking' => 'service.ranking',
        'jaas_control_flag' => 'jaas.controlFlag',
        'jaas_realm_name' => 'jaas.realmName',
        'jaas_ranking' => 'jaas.ranking',
        'headers' => 'headers',
        'cookies' => 'cookies',
        'parameters' => 'parameters',
        'usermap' => 'usermap',
        'format' => 'format',
        'trusted_credentials_attribute' => 'trustedCredentialsAttribute'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'path' => 'setPath',
        'service_ranking' => 'setServiceRanking',
        'jaas_control_flag' => 'setJaasControlFlag',
        'jaas_realm_name' => 'setJaasRealmName',
        'jaas_ranking' => 'setJaasRanking',
        'headers' => 'setHeaders',
        'cookies' => 'setCookies',
        'parameters' => 'setParameters',
        'usermap' => 'setUsermap',
        'format' => 'setFormat',
        'trusted_credentials_attribute' => 'setTrustedCredentialsAttribute'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'path' => 'getPath',
        'service_ranking' => 'getServiceRanking',
        'jaas_control_flag' => 'getJaasControlFlag',
        'jaas_realm_name' => 'getJaasRealmName',
        'jaas_ranking' => 'getJaasRanking',
        'headers' => 'getHeaders',
        'cookies' => 'getCookies',
        'parameters' => 'getParameters',
        'usermap' => 'getUsermap',
        'format' => 'getFormat',
        'trusted_credentials_attribute' => 'getTrustedCredentialsAttribute'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['service_ranking'] = isset($data['service_ranking']) ? $data['service_ranking'] : null;
        $this->container['jaas_control_flag'] = isset($data['jaas_control_flag']) ? $data['jaas_control_flag'] : null;
        $this->container['jaas_realm_name'] = isset($data['jaas_realm_name']) ? $data['jaas_realm_name'] : null;
        $this->container['jaas_ranking'] = isset($data['jaas_ranking']) ? $data['jaas_ranking'] : null;
        $this->container['headers'] = isset($data['headers']) ? $data['headers'] : null;
        $this->container['cookies'] = isset($data['cookies']) ? $data['cookies'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['usermap'] = isset($data['usermap']) ? $data['usermap'] : null;
        $this->container['format'] = isset($data['format']) ? $data['format'] : null;
        $this->container['trusted_credentials_attribute'] = isset($data['trusted_credentials_attribute']) ? $data['trusted_credentials_attribute'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets path
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $path path
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets service_ranking
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getServiceRanking()
    {
        return $this->container['service_ranking'];
    }

    /**
     * Sets service_ranking
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $service_ranking service_ranking
     *
     * @return $this
     */
    public function setServiceRanking($service_ranking)
    {
        $this->container['service_ranking'] = $service_ranking;

        return $this;
    }

    /**
     * Gets jaas_control_flag
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getJaasControlFlag()
    {
        return $this->container['jaas_control_flag'];
    }

    /**
     * Sets jaas_control_flag
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $jaas_control_flag jaas_control_flag
     *
     * @return $this
     */
    public function setJaasControlFlag($jaas_control_flag)
    {
        $this->container['jaas_control_flag'] = $jaas_control_flag;

        return $this;
    }

    /**
     * Gets jaas_realm_name
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getJaasRealmName()
    {
        return $this->container['jaas_realm_name'];
    }

    /**
     * Sets jaas_realm_name
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $jaas_realm_name jaas_realm_name
     *
     * @return $this
     */
    public function setJaasRealmName($jaas_realm_name)
    {
        $this->container['jaas_realm_name'] = $jaas_realm_name;

        return $this;
    }

    /**
     * Gets jaas_ranking
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getJaasRanking()
    {
        return $this->container['jaas_ranking'];
    }

    /**
     * Sets jaas_ranking
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $jaas_ranking jaas_ranking
     *
     * @return $this
     */
    public function setJaasRanking($jaas_ranking)
    {
        $this->container['jaas_ranking'] = $jaas_ranking;

        return $this;
    }

    /**
     * Gets headers
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getHeaders()
    {
        return $this->container['headers'];
    }

    /**
     * Sets headers
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $headers headers
     *
     * @return $this
     */
    public function setHeaders($headers)
    {
        $this->container['headers'] = $headers;

        return $this;
    }

    /**
     * Gets cookies
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getCookies()
    {
        return $this->container['cookies'];
    }

    /**
     * Sets cookies
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $cookies cookies
     *
     * @return $this
     */
    public function setCookies($cookies)
    {
        $this->container['cookies'] = $cookies;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $parameters parameters
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets usermap
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getUsermap()
    {
        return $this->container['usermap'];
    }

    /**
     * Sets usermap
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $usermap usermap
     *
     * @return $this
     */
    public function setUsermap($usermap)
    {
        $this->container['usermap'] = $usermap;

        return $this;
    }

    /**
     * Gets format
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $format format
     *
     * @return $this
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets trusted_credentials_attribute
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getTrustedCredentialsAttribute()
    {
        return $this->container['trusted_credentials_attribute'];
    }

    /**
     * Sets trusted_credentials_attribute
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $trusted_credentials_attribute trusted_credentials_attribute
     *
     * @return $this
     */
    public function setTrustedCredentialsAttribute($trusted_credentials_attribute)
    {
        $this->container['trusted_credentials_attribute'] = $trusted_credentials_attribute;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


