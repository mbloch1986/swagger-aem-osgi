/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteAuthOauthImplGraniteProviderProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteAuthOauthImplGraniteProviderProperties :  IEquatable<ComAdobeGraniteAuthOauthImplGraniteProviderProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteAuthOauthImplGraniteProviderProperties" /> class.
        /// </summary>
        /// <param name="oauthProviderId">oauthProviderId.</param>
        /// <param name="oauthProviderGraniteAuthorizationUrl">oauthProviderGraniteAuthorizationUrl.</param>
        /// <param name="oauthProviderGraniteTokenUrl">oauthProviderGraniteTokenUrl.</param>
        /// <param name="oauthProviderGraniteProfileUrl">oauthProviderGraniteProfileUrl.</param>
        /// <param name="oauthProviderGraniteExtendedDetailsUrls">oauthProviderGraniteExtendedDetailsUrls.</param>
        public ComAdobeGraniteAuthOauthImplGraniteProviderProperties(ConfigNodePropertyString oauthProviderId = default(ConfigNodePropertyString), ConfigNodePropertyString oauthProviderGraniteAuthorizationUrl = default(ConfigNodePropertyString), ConfigNodePropertyString oauthProviderGraniteTokenUrl = default(ConfigNodePropertyString), ConfigNodePropertyString oauthProviderGraniteProfileUrl = default(ConfigNodePropertyString), ConfigNodePropertyString oauthProviderGraniteExtendedDetailsUrls = default(ConfigNodePropertyString))
        {
            this.OauthProviderId = oauthProviderId;
            this.OauthProviderGraniteAuthorizationUrl = oauthProviderGraniteAuthorizationUrl;
            this.OauthProviderGraniteTokenUrl = oauthProviderGraniteTokenUrl;
            this.OauthProviderGraniteProfileUrl = oauthProviderGraniteProfileUrl;
            this.OauthProviderGraniteExtendedDetailsUrls = oauthProviderGraniteExtendedDetailsUrls;
        }
        
        /// <summary>
        /// Gets or Sets OauthProviderId
        /// </summary>
        [DataMember(Name="oauth.provider.id", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthProviderId { get; set; }

        /// <summary>
        /// Gets or Sets OauthProviderGraniteAuthorizationUrl
        /// </summary>
        [DataMember(Name="oauth.provider.granite.authorization.url", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthProviderGraniteAuthorizationUrl { get; set; }

        /// <summary>
        /// Gets or Sets OauthProviderGraniteTokenUrl
        /// </summary>
        [DataMember(Name="oauth.provider.granite.token.url", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthProviderGraniteTokenUrl { get; set; }

        /// <summary>
        /// Gets or Sets OauthProviderGraniteProfileUrl
        /// </summary>
        [DataMember(Name="oauth.provider.granite.profile.url", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthProviderGraniteProfileUrl { get; set; }

        /// <summary>
        /// Gets or Sets OauthProviderGraniteExtendedDetailsUrls
        /// </summary>
        [DataMember(Name="oauth.provider.granite.extended.details.urls", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthProviderGraniteExtendedDetailsUrls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteAuthOauthImplGraniteProviderProperties {\n");
            sb.Append("  OauthProviderId: ").Append(OauthProviderId).Append("\n");
            sb.Append("  OauthProviderGraniteAuthorizationUrl: ").Append(OauthProviderGraniteAuthorizationUrl).Append("\n");
            sb.Append("  OauthProviderGraniteTokenUrl: ").Append(OauthProviderGraniteTokenUrl).Append("\n");
            sb.Append("  OauthProviderGraniteProfileUrl: ").Append(OauthProviderGraniteProfileUrl).Append("\n");
            sb.Append("  OauthProviderGraniteExtendedDetailsUrls: ").Append(OauthProviderGraniteExtendedDetailsUrls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteAuthOauthImplGraniteProviderProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteAuthOauthImplGraniteProviderProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteAuthOauthImplGraniteProviderProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteAuthOauthImplGraniteProviderProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OauthProviderId == input.OauthProviderId ||
                    (this.OauthProviderId != null &&
                    this.OauthProviderId.Equals(input.OauthProviderId))
                ) && 
                (
                    this.OauthProviderGraniteAuthorizationUrl == input.OauthProviderGraniteAuthorizationUrl ||
                    (this.OauthProviderGraniteAuthorizationUrl != null &&
                    this.OauthProviderGraniteAuthorizationUrl.Equals(input.OauthProviderGraniteAuthorizationUrl))
                ) && 
                (
                    this.OauthProviderGraniteTokenUrl == input.OauthProviderGraniteTokenUrl ||
                    (this.OauthProviderGraniteTokenUrl != null &&
                    this.OauthProviderGraniteTokenUrl.Equals(input.OauthProviderGraniteTokenUrl))
                ) && 
                (
                    this.OauthProviderGraniteProfileUrl == input.OauthProviderGraniteProfileUrl ||
                    (this.OauthProviderGraniteProfileUrl != null &&
                    this.OauthProviderGraniteProfileUrl.Equals(input.OauthProviderGraniteProfileUrl))
                ) && 
                (
                    this.OauthProviderGraniteExtendedDetailsUrls == input.OauthProviderGraniteExtendedDetailsUrls ||
                    (this.OauthProviderGraniteExtendedDetailsUrls != null &&
                    this.OauthProviderGraniteExtendedDetailsUrls.Equals(input.OauthProviderGraniteExtendedDetailsUrls))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OauthProviderId != null)
                    hashCode = hashCode * 59 + this.OauthProviderId.GetHashCode();
                if (this.OauthProviderGraniteAuthorizationUrl != null)
                    hashCode = hashCode * 59 + this.OauthProviderGraniteAuthorizationUrl.GetHashCode();
                if (this.OauthProviderGraniteTokenUrl != null)
                    hashCode = hashCode * 59 + this.OauthProviderGraniteTokenUrl.GetHashCode();
                if (this.OauthProviderGraniteProfileUrl != null)
                    hashCode = hashCode * 59 + this.OauthProviderGraniteProfileUrl.GetHashCode();
                if (this.OauthProviderGraniteExtendedDetailsUrls != null)
                    hashCode = hashCode * 59 + this.OauthProviderGraniteExtendedDetailsUrls.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
