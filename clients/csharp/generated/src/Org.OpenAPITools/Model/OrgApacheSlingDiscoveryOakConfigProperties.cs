/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingDiscoveryOakConfigProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingDiscoveryOakConfigProperties :  IEquatable<OrgApacheSlingDiscoveryOakConfigProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingDiscoveryOakConfigProperties" /> class.
        /// </summary>
        /// <param name="connectorPingTimeout">connectorPingTimeout.</param>
        /// <param name="connectorPingInterval">connectorPingInterval.</param>
        /// <param name="discoveryLiteCheckInterval">discoveryLiteCheckInterval.</param>
        /// <param name="clusterSyncServiceTimeout">clusterSyncServiceTimeout.</param>
        /// <param name="clusterSyncServiceInterval">clusterSyncServiceInterval.</param>
        /// <param name="enableSyncToken">enableSyncToken.</param>
        /// <param name="minEventDelay">minEventDelay.</param>
        /// <param name="socketConnectTimeout">socketConnectTimeout.</param>
        /// <param name="soTimeout">soTimeout.</param>
        /// <param name="topologyConnectorUrls">topologyConnectorUrls.</param>
        /// <param name="topologyConnectorWhitelist">topologyConnectorWhitelist.</param>
        /// <param name="autoStopLocalLoopEnabled">autoStopLocalLoopEnabled.</param>
        /// <param name="gzipConnectorRequestsEnabled">gzipConnectorRequestsEnabled.</param>
        /// <param name="hmacEnabled">hmacEnabled.</param>
        /// <param name="enableEncryption">enableEncryption.</param>
        /// <param name="sharedKey">sharedKey.</param>
        /// <param name="hmacSharedKeyTTL">hmacSharedKeyTTL.</param>
        /// <param name="backoffStandbyFactor">backoffStandbyFactor.</param>
        /// <param name="backoffStableFactor">backoffStableFactor.</param>
        public OrgApacheSlingDiscoveryOakConfigProperties(ConfigNodePropertyInteger connectorPingTimeout = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger connectorPingInterval = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger discoveryLiteCheckInterval = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger clusterSyncServiceTimeout = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger clusterSyncServiceInterval = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean enableSyncToken = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger minEventDelay = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger socketConnectTimeout = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger soTimeout = default(ConfigNodePropertyInteger), ConfigNodePropertyArray topologyConnectorUrls = default(ConfigNodePropertyArray), ConfigNodePropertyArray topologyConnectorWhitelist = default(ConfigNodePropertyArray), ConfigNodePropertyBoolean autoStopLocalLoopEnabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean gzipConnectorRequestsEnabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean hmacEnabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean enableEncryption = default(ConfigNodePropertyBoolean), ConfigNodePropertyString sharedKey = default(ConfigNodePropertyString), ConfigNodePropertyInteger hmacSharedKeyTTL = default(ConfigNodePropertyInteger), ConfigNodePropertyString backoffStandbyFactor = default(ConfigNodePropertyString), ConfigNodePropertyString backoffStableFactor = default(ConfigNodePropertyString))
        {
            this.ConnectorPingTimeout = connectorPingTimeout;
            this.ConnectorPingInterval = connectorPingInterval;
            this.DiscoveryLiteCheckInterval = discoveryLiteCheckInterval;
            this.ClusterSyncServiceTimeout = clusterSyncServiceTimeout;
            this.ClusterSyncServiceInterval = clusterSyncServiceInterval;
            this.EnableSyncToken = enableSyncToken;
            this.MinEventDelay = minEventDelay;
            this.SocketConnectTimeout = socketConnectTimeout;
            this.SoTimeout = soTimeout;
            this.TopologyConnectorUrls = topologyConnectorUrls;
            this.TopologyConnectorWhitelist = topologyConnectorWhitelist;
            this.AutoStopLocalLoopEnabled = autoStopLocalLoopEnabled;
            this.GzipConnectorRequestsEnabled = gzipConnectorRequestsEnabled;
            this.HmacEnabled = hmacEnabled;
            this.EnableEncryption = enableEncryption;
            this.SharedKey = sharedKey;
            this.HmacSharedKeyTTL = hmacSharedKeyTTL;
            this.BackoffStandbyFactor = backoffStandbyFactor;
            this.BackoffStableFactor = backoffStableFactor;
        }
        
        /// <summary>
        /// Gets or Sets ConnectorPingTimeout
        /// </summary>
        [DataMember(Name="connectorPingTimeout", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ConnectorPingTimeout { get; set; }

        /// <summary>
        /// Gets or Sets ConnectorPingInterval
        /// </summary>
        [DataMember(Name="connectorPingInterval", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ConnectorPingInterval { get; set; }

        /// <summary>
        /// Gets or Sets DiscoveryLiteCheckInterval
        /// </summary>
        [DataMember(Name="discoveryLiteCheckInterval", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger DiscoveryLiteCheckInterval { get; set; }

        /// <summary>
        /// Gets or Sets ClusterSyncServiceTimeout
        /// </summary>
        [DataMember(Name="clusterSyncServiceTimeout", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ClusterSyncServiceTimeout { get; set; }

        /// <summary>
        /// Gets or Sets ClusterSyncServiceInterval
        /// </summary>
        [DataMember(Name="clusterSyncServiceInterval", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ClusterSyncServiceInterval { get; set; }

        /// <summary>
        /// Gets or Sets EnableSyncToken
        /// </summary>
        [DataMember(Name="enableSyncToken", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean EnableSyncToken { get; set; }

        /// <summary>
        /// Gets or Sets MinEventDelay
        /// </summary>
        [DataMember(Name="minEventDelay", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MinEventDelay { get; set; }

        /// <summary>
        /// Gets or Sets SocketConnectTimeout
        /// </summary>
        [DataMember(Name="socketConnectTimeout", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger SocketConnectTimeout { get; set; }

        /// <summary>
        /// Gets or Sets SoTimeout
        /// </summary>
        [DataMember(Name="soTimeout", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger SoTimeout { get; set; }

        /// <summary>
        /// Gets or Sets TopologyConnectorUrls
        /// </summary>
        [DataMember(Name="topologyConnectorUrls", EmitDefaultValue=false)]
        public ConfigNodePropertyArray TopologyConnectorUrls { get; set; }

        /// <summary>
        /// Gets or Sets TopologyConnectorWhitelist
        /// </summary>
        [DataMember(Name="topologyConnectorWhitelist", EmitDefaultValue=false)]
        public ConfigNodePropertyArray TopologyConnectorWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets AutoStopLocalLoopEnabled
        /// </summary>
        [DataMember(Name="autoStopLocalLoopEnabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean AutoStopLocalLoopEnabled { get; set; }

        /// <summary>
        /// Gets or Sets GzipConnectorRequestsEnabled
        /// </summary>
        [DataMember(Name="gzipConnectorRequestsEnabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean GzipConnectorRequestsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets HmacEnabled
        /// </summary>
        [DataMember(Name="hmacEnabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean HmacEnabled { get; set; }

        /// <summary>
        /// Gets or Sets EnableEncryption
        /// </summary>
        [DataMember(Name="enableEncryption", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean EnableEncryption { get; set; }

        /// <summary>
        /// Gets or Sets SharedKey
        /// </summary>
        [DataMember(Name="sharedKey", EmitDefaultValue=false)]
        public ConfigNodePropertyString SharedKey { get; set; }

        /// <summary>
        /// Gets or Sets HmacSharedKeyTTL
        /// </summary>
        [DataMember(Name="hmacSharedKeyTTL", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger HmacSharedKeyTTL { get; set; }

        /// <summary>
        /// Gets or Sets BackoffStandbyFactor
        /// </summary>
        [DataMember(Name="backoffStandbyFactor", EmitDefaultValue=false)]
        public ConfigNodePropertyString BackoffStandbyFactor { get; set; }

        /// <summary>
        /// Gets or Sets BackoffStableFactor
        /// </summary>
        [DataMember(Name="backoffStableFactor", EmitDefaultValue=false)]
        public ConfigNodePropertyString BackoffStableFactor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingDiscoveryOakConfigProperties {\n");
            sb.Append("  ConnectorPingTimeout: ").Append(ConnectorPingTimeout).Append("\n");
            sb.Append("  ConnectorPingInterval: ").Append(ConnectorPingInterval).Append("\n");
            sb.Append("  DiscoveryLiteCheckInterval: ").Append(DiscoveryLiteCheckInterval).Append("\n");
            sb.Append("  ClusterSyncServiceTimeout: ").Append(ClusterSyncServiceTimeout).Append("\n");
            sb.Append("  ClusterSyncServiceInterval: ").Append(ClusterSyncServiceInterval).Append("\n");
            sb.Append("  EnableSyncToken: ").Append(EnableSyncToken).Append("\n");
            sb.Append("  MinEventDelay: ").Append(MinEventDelay).Append("\n");
            sb.Append("  SocketConnectTimeout: ").Append(SocketConnectTimeout).Append("\n");
            sb.Append("  SoTimeout: ").Append(SoTimeout).Append("\n");
            sb.Append("  TopologyConnectorUrls: ").Append(TopologyConnectorUrls).Append("\n");
            sb.Append("  TopologyConnectorWhitelist: ").Append(TopologyConnectorWhitelist).Append("\n");
            sb.Append("  AutoStopLocalLoopEnabled: ").Append(AutoStopLocalLoopEnabled).Append("\n");
            sb.Append("  GzipConnectorRequestsEnabled: ").Append(GzipConnectorRequestsEnabled).Append("\n");
            sb.Append("  HmacEnabled: ").Append(HmacEnabled).Append("\n");
            sb.Append("  EnableEncryption: ").Append(EnableEncryption).Append("\n");
            sb.Append("  SharedKey: ").Append(SharedKey).Append("\n");
            sb.Append("  HmacSharedKeyTTL: ").Append(HmacSharedKeyTTL).Append("\n");
            sb.Append("  BackoffStandbyFactor: ").Append(BackoffStandbyFactor).Append("\n");
            sb.Append("  BackoffStableFactor: ").Append(BackoffStableFactor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingDiscoveryOakConfigProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingDiscoveryOakConfigProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingDiscoveryOakConfigProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingDiscoveryOakConfigProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConnectorPingTimeout == input.ConnectorPingTimeout ||
                    (this.ConnectorPingTimeout != null &&
                    this.ConnectorPingTimeout.Equals(input.ConnectorPingTimeout))
                ) && 
                (
                    this.ConnectorPingInterval == input.ConnectorPingInterval ||
                    (this.ConnectorPingInterval != null &&
                    this.ConnectorPingInterval.Equals(input.ConnectorPingInterval))
                ) && 
                (
                    this.DiscoveryLiteCheckInterval == input.DiscoveryLiteCheckInterval ||
                    (this.DiscoveryLiteCheckInterval != null &&
                    this.DiscoveryLiteCheckInterval.Equals(input.DiscoveryLiteCheckInterval))
                ) && 
                (
                    this.ClusterSyncServiceTimeout == input.ClusterSyncServiceTimeout ||
                    (this.ClusterSyncServiceTimeout != null &&
                    this.ClusterSyncServiceTimeout.Equals(input.ClusterSyncServiceTimeout))
                ) && 
                (
                    this.ClusterSyncServiceInterval == input.ClusterSyncServiceInterval ||
                    (this.ClusterSyncServiceInterval != null &&
                    this.ClusterSyncServiceInterval.Equals(input.ClusterSyncServiceInterval))
                ) && 
                (
                    this.EnableSyncToken == input.EnableSyncToken ||
                    (this.EnableSyncToken != null &&
                    this.EnableSyncToken.Equals(input.EnableSyncToken))
                ) && 
                (
                    this.MinEventDelay == input.MinEventDelay ||
                    (this.MinEventDelay != null &&
                    this.MinEventDelay.Equals(input.MinEventDelay))
                ) && 
                (
                    this.SocketConnectTimeout == input.SocketConnectTimeout ||
                    (this.SocketConnectTimeout != null &&
                    this.SocketConnectTimeout.Equals(input.SocketConnectTimeout))
                ) && 
                (
                    this.SoTimeout == input.SoTimeout ||
                    (this.SoTimeout != null &&
                    this.SoTimeout.Equals(input.SoTimeout))
                ) && 
                (
                    this.TopologyConnectorUrls == input.TopologyConnectorUrls ||
                    (this.TopologyConnectorUrls != null &&
                    this.TopologyConnectorUrls.Equals(input.TopologyConnectorUrls))
                ) && 
                (
                    this.TopologyConnectorWhitelist == input.TopologyConnectorWhitelist ||
                    (this.TopologyConnectorWhitelist != null &&
                    this.TopologyConnectorWhitelist.Equals(input.TopologyConnectorWhitelist))
                ) && 
                (
                    this.AutoStopLocalLoopEnabled == input.AutoStopLocalLoopEnabled ||
                    (this.AutoStopLocalLoopEnabled != null &&
                    this.AutoStopLocalLoopEnabled.Equals(input.AutoStopLocalLoopEnabled))
                ) && 
                (
                    this.GzipConnectorRequestsEnabled == input.GzipConnectorRequestsEnabled ||
                    (this.GzipConnectorRequestsEnabled != null &&
                    this.GzipConnectorRequestsEnabled.Equals(input.GzipConnectorRequestsEnabled))
                ) && 
                (
                    this.HmacEnabled == input.HmacEnabled ||
                    (this.HmacEnabled != null &&
                    this.HmacEnabled.Equals(input.HmacEnabled))
                ) && 
                (
                    this.EnableEncryption == input.EnableEncryption ||
                    (this.EnableEncryption != null &&
                    this.EnableEncryption.Equals(input.EnableEncryption))
                ) && 
                (
                    this.SharedKey == input.SharedKey ||
                    (this.SharedKey != null &&
                    this.SharedKey.Equals(input.SharedKey))
                ) && 
                (
                    this.HmacSharedKeyTTL == input.HmacSharedKeyTTL ||
                    (this.HmacSharedKeyTTL != null &&
                    this.HmacSharedKeyTTL.Equals(input.HmacSharedKeyTTL))
                ) && 
                (
                    this.BackoffStandbyFactor == input.BackoffStandbyFactor ||
                    (this.BackoffStandbyFactor != null &&
                    this.BackoffStandbyFactor.Equals(input.BackoffStandbyFactor))
                ) && 
                (
                    this.BackoffStableFactor == input.BackoffStableFactor ||
                    (this.BackoffStableFactor != null &&
                    this.BackoffStableFactor.Equals(input.BackoffStableFactor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConnectorPingTimeout != null)
                    hashCode = hashCode * 59 + this.ConnectorPingTimeout.GetHashCode();
                if (this.ConnectorPingInterval != null)
                    hashCode = hashCode * 59 + this.ConnectorPingInterval.GetHashCode();
                if (this.DiscoveryLiteCheckInterval != null)
                    hashCode = hashCode * 59 + this.DiscoveryLiteCheckInterval.GetHashCode();
                if (this.ClusterSyncServiceTimeout != null)
                    hashCode = hashCode * 59 + this.ClusterSyncServiceTimeout.GetHashCode();
                if (this.ClusterSyncServiceInterval != null)
                    hashCode = hashCode * 59 + this.ClusterSyncServiceInterval.GetHashCode();
                if (this.EnableSyncToken != null)
                    hashCode = hashCode * 59 + this.EnableSyncToken.GetHashCode();
                if (this.MinEventDelay != null)
                    hashCode = hashCode * 59 + this.MinEventDelay.GetHashCode();
                if (this.SocketConnectTimeout != null)
                    hashCode = hashCode * 59 + this.SocketConnectTimeout.GetHashCode();
                if (this.SoTimeout != null)
                    hashCode = hashCode * 59 + this.SoTimeout.GetHashCode();
                if (this.TopologyConnectorUrls != null)
                    hashCode = hashCode * 59 + this.TopologyConnectorUrls.GetHashCode();
                if (this.TopologyConnectorWhitelist != null)
                    hashCode = hashCode * 59 + this.TopologyConnectorWhitelist.GetHashCode();
                if (this.AutoStopLocalLoopEnabled != null)
                    hashCode = hashCode * 59 + this.AutoStopLocalLoopEnabled.GetHashCode();
                if (this.GzipConnectorRequestsEnabled != null)
                    hashCode = hashCode * 59 + this.GzipConnectorRequestsEnabled.GetHashCode();
                if (this.HmacEnabled != null)
                    hashCode = hashCode * 59 + this.HmacEnabled.GetHashCode();
                if (this.EnableEncryption != null)
                    hashCode = hashCode * 59 + this.EnableEncryption.GetHashCode();
                if (this.SharedKey != null)
                    hashCode = hashCode * 59 + this.SharedKey.GetHashCode();
                if (this.HmacSharedKeyTTL != null)
                    hashCode = hashCode * 59 + this.HmacSharedKeyTTL.GetHashCode();
                if (this.BackoffStandbyFactor != null)
                    hashCode = hashCode * 59 + this.BackoffStandbyFactor.GetHashCode();
                if (this.BackoffStableFactor != null)
                    hashCode = hashCode * 59 + this.BackoffStableFactor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
