/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties : IEquatable<OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties>
    { 
        /// <summary>
        /// Gets or Sets HandlerSchemes
        /// </summary>
        [DataMember(Name="handler.schemes")]
        public ConfigNodePropertyArray HandlerSchemes { get; set; }

        /// <summary>
        /// Gets or Sets SlingJcrinstallFolderNameRegexp
        /// </summary>
        [DataMember(Name="sling.jcrinstall.folder.name.regexp")]
        public ConfigNodePropertyString SlingJcrinstallFolderNameRegexp { get; set; }

        /// <summary>
        /// Gets or Sets SlingJcrinstallFolderMaxDepth
        /// </summary>
        [DataMember(Name="sling.jcrinstall.folder.max.depth")]
        public ConfigNodePropertyInteger SlingJcrinstallFolderMaxDepth { get; set; }

        /// <summary>
        /// Gets or Sets SlingJcrinstallSearchPath
        /// </summary>
        [DataMember(Name="sling.jcrinstall.search.path")]
        public ConfigNodePropertyArray SlingJcrinstallSearchPath { get; set; }

        /// <summary>
        /// Gets or Sets SlingJcrinstallNewConfigPath
        /// </summary>
        [DataMember(Name="sling.jcrinstall.new.config.path")]
        public ConfigNodePropertyString SlingJcrinstallNewConfigPath { get; set; }

        /// <summary>
        /// Gets or Sets SlingJcrinstallSignalPath
        /// </summary>
        [DataMember(Name="sling.jcrinstall.signal.path")]
        public ConfigNodePropertyString SlingJcrinstallSignalPath { get; set; }

        /// <summary>
        /// Gets or Sets SlingJcrinstallEnableWriteback
        /// </summary>
        [DataMember(Name="sling.jcrinstall.enable.writeback")]
        public ConfigNodePropertyBoolean SlingJcrinstallEnableWriteback { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties {\n");
            sb.Append("  HandlerSchemes: ").Append(HandlerSchemes).Append("\n");
            sb.Append("  SlingJcrinstallFolderNameRegexp: ").Append(SlingJcrinstallFolderNameRegexp).Append("\n");
            sb.Append("  SlingJcrinstallFolderMaxDepth: ").Append(SlingJcrinstallFolderMaxDepth).Append("\n");
            sb.Append("  SlingJcrinstallSearchPath: ").Append(SlingJcrinstallSearchPath).Append("\n");
            sb.Append("  SlingJcrinstallNewConfigPath: ").Append(SlingJcrinstallNewConfigPath).Append("\n");
            sb.Append("  SlingJcrinstallSignalPath: ").Append(SlingJcrinstallSignalPath).Append("\n");
            sb.Append("  SlingJcrinstallEnableWriteback: ").Append(SlingJcrinstallEnableWriteback).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    HandlerSchemes == other.HandlerSchemes ||
                    HandlerSchemes != null &&
                    HandlerSchemes.Equals(other.HandlerSchemes)
                ) && 
                (
                    SlingJcrinstallFolderNameRegexp == other.SlingJcrinstallFolderNameRegexp ||
                    SlingJcrinstallFolderNameRegexp != null &&
                    SlingJcrinstallFolderNameRegexp.Equals(other.SlingJcrinstallFolderNameRegexp)
                ) && 
                (
                    SlingJcrinstallFolderMaxDepth == other.SlingJcrinstallFolderMaxDepth ||
                    SlingJcrinstallFolderMaxDepth != null &&
                    SlingJcrinstallFolderMaxDepth.Equals(other.SlingJcrinstallFolderMaxDepth)
                ) && 
                (
                    SlingJcrinstallSearchPath == other.SlingJcrinstallSearchPath ||
                    SlingJcrinstallSearchPath != null &&
                    SlingJcrinstallSearchPath.Equals(other.SlingJcrinstallSearchPath)
                ) && 
                (
                    SlingJcrinstallNewConfigPath == other.SlingJcrinstallNewConfigPath ||
                    SlingJcrinstallNewConfigPath != null &&
                    SlingJcrinstallNewConfigPath.Equals(other.SlingJcrinstallNewConfigPath)
                ) && 
                (
                    SlingJcrinstallSignalPath == other.SlingJcrinstallSignalPath ||
                    SlingJcrinstallSignalPath != null &&
                    SlingJcrinstallSignalPath.Equals(other.SlingJcrinstallSignalPath)
                ) && 
                (
                    SlingJcrinstallEnableWriteback == other.SlingJcrinstallEnableWriteback ||
                    SlingJcrinstallEnableWriteback != null &&
                    SlingJcrinstallEnableWriteback.Equals(other.SlingJcrinstallEnableWriteback)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (HandlerSchemes != null)
                    hashCode = hashCode * 59 + HandlerSchemes.GetHashCode();
                    if (SlingJcrinstallFolderNameRegexp != null)
                    hashCode = hashCode * 59 + SlingJcrinstallFolderNameRegexp.GetHashCode();
                    if (SlingJcrinstallFolderMaxDepth != null)
                    hashCode = hashCode * 59 + SlingJcrinstallFolderMaxDepth.GetHashCode();
                    if (SlingJcrinstallSearchPath != null)
                    hashCode = hashCode * 59 + SlingJcrinstallSearchPath.GetHashCode();
                    if (SlingJcrinstallNewConfigPath != null)
                    hashCode = hashCode * 59 + SlingJcrinstallNewConfigPath.GetHashCode();
                    if (SlingJcrinstallSignalPath != null)
                    hashCode = hashCode * 59 + SlingJcrinstallSignalPath.GetHashCode();
                    if (SlingJcrinstallEnableWriteback != null)
                    hashCode = hashCode * 59 + SlingJcrinstallEnableWriteback.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties left, OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties left, OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
