/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqAuditPurgeDamProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqAuditPurgeDamProperties::ComAdobeCqAuditPurgeDamProperties()
{
    m_Auditlog_rule_nameIsSet = false;
    m_Auditlog_rule_contentpathIsSet = false;
    m_Auditlog_rule_minimumageIsSet = false;
    m_Auditlog_rule_typesIsSet = false;
    
}

ComAdobeCqAuditPurgeDamProperties::~ComAdobeCqAuditPurgeDamProperties()
{
}

void ComAdobeCqAuditPurgeDamProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqAuditPurgeDamProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Auditlog_rule_nameIsSet)
    {
        val["auditlog.rule.name"] = ModelBase::toJson(m_Auditlog_rule_name);
    }
    if(m_Auditlog_rule_contentpathIsSet)
    {
        val["auditlog.rule.contentpath"] = ModelBase::toJson(m_Auditlog_rule_contentpath);
    }
    if(m_Auditlog_rule_minimumageIsSet)
    {
        val["auditlog.rule.minimumage"] = ModelBase::toJson(m_Auditlog_rule_minimumage);
    }
    if(m_Auditlog_rule_typesIsSet)
    {
        val["auditlog.rule.types"] = ModelBase::toJson(m_Auditlog_rule_types);
    }
    

    return val;
}

void ComAdobeCqAuditPurgeDamProperties::fromJson(nlohmann::json& val)
{
    if(val.find("auditlog.rule.name") != val.end())
    {
        if(!val["auditlog.rule.name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["auditlog.rule.name"]);
            setAuditlogRuleName( newItem );
        }
        
    }
    if(val.find("auditlog.rule.contentpath") != val.end())
    {
        if(!val["auditlog.rule.contentpath"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["auditlog.rule.contentpath"]);
            setAuditlogRuleContentpath( newItem );
        }
        
    }
    if(val.find("auditlog.rule.minimumage") != val.end())
    {
        if(!val["auditlog.rule.minimumage"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["auditlog.rule.minimumage"]);
            setAuditlogRuleMinimumage( newItem );
        }
        
    }
    if(val.find("auditlog.rule.types") != val.end())
    {
        if(!val["auditlog.rule.types"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["auditlog.rule.types"]);
            setAuditlogRuleTypes( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeCqAuditPurgeDamProperties::getAuditlogRuleName() const
{
    return m_Auditlog_rule_name;
}
void ComAdobeCqAuditPurgeDamProperties::setAuditlogRuleName(ConfigNodePropertyString const& value)
{
    m_Auditlog_rule_name = value;
    m_Auditlog_rule_nameIsSet = true;
}
bool ComAdobeCqAuditPurgeDamProperties::auditlogRuleNameIsSet() const
{
    return m_Auditlog_rule_nameIsSet;
}
void ComAdobeCqAuditPurgeDamProperties::unsetAuditlog_rule_name()
{
    m_Auditlog_rule_nameIsSet = false;
}
ConfigNodePropertyString ComAdobeCqAuditPurgeDamProperties::getAuditlogRuleContentpath() const
{
    return m_Auditlog_rule_contentpath;
}
void ComAdobeCqAuditPurgeDamProperties::setAuditlogRuleContentpath(ConfigNodePropertyString const& value)
{
    m_Auditlog_rule_contentpath = value;
    m_Auditlog_rule_contentpathIsSet = true;
}
bool ComAdobeCqAuditPurgeDamProperties::auditlogRuleContentpathIsSet() const
{
    return m_Auditlog_rule_contentpathIsSet;
}
void ComAdobeCqAuditPurgeDamProperties::unsetAuditlog_rule_contentpath()
{
    m_Auditlog_rule_contentpathIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqAuditPurgeDamProperties::getAuditlogRuleMinimumage() const
{
    return m_Auditlog_rule_minimumage;
}
void ComAdobeCqAuditPurgeDamProperties::setAuditlogRuleMinimumage(ConfigNodePropertyInteger const& value)
{
    m_Auditlog_rule_minimumage = value;
    m_Auditlog_rule_minimumageIsSet = true;
}
bool ComAdobeCqAuditPurgeDamProperties::auditlogRuleMinimumageIsSet() const
{
    return m_Auditlog_rule_minimumageIsSet;
}
void ComAdobeCqAuditPurgeDamProperties::unsetAuditlog_rule_minimumage()
{
    m_Auditlog_rule_minimumageIsSet = false;
}
ConfigNodePropertyDropDown ComAdobeCqAuditPurgeDamProperties::getAuditlogRuleTypes() const
{
    return m_Auditlog_rule_types;
}
void ComAdobeCqAuditPurgeDamProperties::setAuditlogRuleTypes(ConfigNodePropertyDropDown const& value)
{
    m_Auditlog_rule_types = value;
    m_Auditlog_rule_typesIsSet = true;
}
bool ComAdobeCqAuditPurgeDamProperties::auditlogRuleTypesIsSet() const
{
    return m_Auditlog_rule_typesIsSet;
}
void ComAdobeCqAuditPurgeDamProperties::unsetAuditlog_rule_types()
{
    m_Auditlog_rule_typesIsSet = false;
}

}
}
}
}

