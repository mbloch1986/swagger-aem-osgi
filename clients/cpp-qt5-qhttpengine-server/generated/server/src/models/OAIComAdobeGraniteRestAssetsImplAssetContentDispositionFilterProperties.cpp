/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties() {
    this->init();
}

OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::~OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties() {
    
}

void
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::init() {
    m_mime_allow_empty_isSet = false;
    m_mime_allowed_isSet = false;
}

void
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(mime_allow_empty, json[QString("mime.allowEmpty")]);
    
    ::OpenAPI::fromJsonValue(mime_allowed, json[QString("mime.allowed")]);
    
}

QString
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::asJsonObject() const {
    QJsonObject obj;
	if(mime_allow_empty.isSet()){
        obj.insert(QString("mime.allowEmpty"), ::OpenAPI::toJsonValue(mime_allow_empty));
    }
	if(mime_allowed.isSet()){
        obj.insert(QString("mime.allowed"), ::OpenAPI::toJsonValue(mime_allowed));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::getMimeAllowEmpty() const {
    return mime_allow_empty;
}
void
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::setMimeAllowEmpty(const OAIConfigNodePropertyBoolean &mime_allow_empty) {
    this->mime_allow_empty = mime_allow_empty;
    this->m_mime_allow_empty_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::getMimeAllowed() const {
    return mime_allowed;
}
void
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::setMimeAllowed(const OAIConfigNodePropertyArray &mime_allowed) {
    this->mime_allowed = mime_allowed;
    this->m_mime_allowed_isSet = true;
}


bool
OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(mime_allow_empty.isSet()){ isObjectUpdated = true; break;}
    
        if(mime_allowed.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

