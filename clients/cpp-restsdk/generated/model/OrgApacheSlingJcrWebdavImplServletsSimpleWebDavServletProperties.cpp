/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties()
{
    m_Dav_rootIsSet = false;
    m_Dav_create_absolute_uriIsSet = false;
    m_Dav_realmIsSet = false;
    m_Collection_typesIsSet = false;
    m_Filter_prefixesIsSet = false;
    m_Filter_typesIsSet = false;
    m_Filter_urisIsSet = false;
    m_Type_collectionsIsSet = false;
    m_Type_noncollectionsIsSet = false;
    m_Type_contentIsSet = false;
}

OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::~OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties()
{
}

void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Dav_rootIsSet)
    {
        val[utility::conversions::to_string_t("dav.root")] = ModelBase::toJson(m_Dav_root);
    }
    if(m_Dav_create_absolute_uriIsSet)
    {
        val[utility::conversions::to_string_t("dav.create-absolute-uri")] = ModelBase::toJson(m_Dav_create_absolute_uri);
    }
    if(m_Dav_realmIsSet)
    {
        val[utility::conversions::to_string_t("dav.realm")] = ModelBase::toJson(m_Dav_realm);
    }
    if(m_Collection_typesIsSet)
    {
        val[utility::conversions::to_string_t("collection.types")] = ModelBase::toJson(m_Collection_types);
    }
    if(m_Filter_prefixesIsSet)
    {
        val[utility::conversions::to_string_t("filter.prefixes")] = ModelBase::toJson(m_Filter_prefixes);
    }
    if(m_Filter_typesIsSet)
    {
        val[utility::conversions::to_string_t("filter.types")] = ModelBase::toJson(m_Filter_types);
    }
    if(m_Filter_urisIsSet)
    {
        val[utility::conversions::to_string_t("filter.uris")] = ModelBase::toJson(m_Filter_uris);
    }
    if(m_Type_collectionsIsSet)
    {
        val[utility::conversions::to_string_t("type.collections")] = ModelBase::toJson(m_Type_collections);
    }
    if(m_Type_noncollectionsIsSet)
    {
        val[utility::conversions::to_string_t("type.noncollections")] = ModelBase::toJson(m_Type_noncollections);
    }
    if(m_Type_contentIsSet)
    {
        val[utility::conversions::to_string_t("type.content")] = ModelBase::toJson(m_Type_content);
    }

    return val;
}

void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("dav.root")))
    {
        if(!val[utility::conversions::to_string_t("dav.root")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("dav.root")]);
            setDavRoot( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dav.create-absolute-uri")))
    {
        if(!val[utility::conversions::to_string_t("dav.create-absolute-uri")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("dav.create-absolute-uri")]);
            setDavCreateAbsoluteUri( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dav.realm")))
    {
        if(!val[utility::conversions::to_string_t("dav.realm")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("dav.realm")]);
            setDavRealm( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("collection.types")))
    {
        if(!val[utility::conversions::to_string_t("collection.types")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("collection.types")]);
            setCollectionTypes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("filter.prefixes")))
    {
        if(!val[utility::conversions::to_string_t("filter.prefixes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("filter.prefixes")]);
            setFilterPrefixes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("filter.types")))
    {
        if(!val[utility::conversions::to_string_t("filter.types")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("filter.types")]);
            setFilterTypes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("filter.uris")))
    {
        if(!val[utility::conversions::to_string_t("filter.uris")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("filter.uris")]);
            setFilterUris( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type.collections")))
    {
        if(!val[utility::conversions::to_string_t("type.collections")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("type.collections")]);
            setTypeCollections( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type.noncollections")))
    {
        if(!val[utility::conversions::to_string_t("type.noncollections")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("type.noncollections")]);
            setTypeNoncollections( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type.content")))
    {
        if(!val[utility::conversions::to_string_t("type.content")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("type.content")]);
            setTypeContent( newItem );
        }
    }
}

void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Dav_rootIsSet)
    {
        if (m_Dav_root.get())
        {
            m_Dav_root->toMultipart(multipart, utility::conversions::to_string_t("dav.root."));
        }
    }
    if(m_Dav_create_absolute_uriIsSet)
    {
        if (m_Dav_create_absolute_uri.get())
        {
            m_Dav_create_absolute_uri->toMultipart(multipart, utility::conversions::to_string_t("dav.create-absolute-uri."));
        }
    }
    if(m_Dav_realmIsSet)
    {
        if (m_Dav_realm.get())
        {
            m_Dav_realm->toMultipart(multipart, utility::conversions::to_string_t("dav.realm."));
        }
    }
    if(m_Collection_typesIsSet)
    {
        if (m_Collection_types.get())
        {
            m_Collection_types->toMultipart(multipart, utility::conversions::to_string_t("collection.types."));
        }
    }
    if(m_Filter_prefixesIsSet)
    {
        if (m_Filter_prefixes.get())
        {
            m_Filter_prefixes->toMultipart(multipart, utility::conversions::to_string_t("filter.prefixes."));
        }
    }
    if(m_Filter_typesIsSet)
    {
        if (m_Filter_types.get())
        {
            m_Filter_types->toMultipart(multipart, utility::conversions::to_string_t("filter.types."));
        }
    }
    if(m_Filter_urisIsSet)
    {
        if (m_Filter_uris.get())
        {
            m_Filter_uris->toMultipart(multipart, utility::conversions::to_string_t("filter.uris."));
        }
    }
    if(m_Type_collectionsIsSet)
    {
        if (m_Type_collections.get())
        {
            m_Type_collections->toMultipart(multipart, utility::conversions::to_string_t("type.collections."));
        }
    }
    if(m_Type_noncollectionsIsSet)
    {
        if (m_Type_noncollections.get())
        {
            m_Type_noncollections->toMultipart(multipart, utility::conversions::to_string_t("type.noncollections."));
        }
    }
    if(m_Type_contentIsSet)
    {
        if (m_Type_content.get())
        {
            m_Type_content->toMultipart(multipart, utility::conversions::to_string_t("type.content."));
        }
    }
}

void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("dav.root")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dav.root")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dav.root."));
            setDavRoot( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dav.create-absolute-uri")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dav.create-absolute-uri")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dav.create-absolute-uri."));
            setDavCreateAbsoluteUri( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dav.realm")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dav.realm")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dav.realm."));
            setDavRealm( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("collection.types")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("collection.types")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("collection.types."));
            setCollectionTypes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("filter.prefixes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("filter.prefixes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("filter.prefixes."));
            setFilterPrefixes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("filter.types")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("filter.types")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("filter.types."));
            setFilterTypes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("filter.uris")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("filter.uris")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("filter.uris."));
            setFilterUris( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type.collections")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("type.collections")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("type.collections."));
            setTypeCollections( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type.noncollections")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("type.noncollections")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("type.noncollections."));
            setTypeNoncollections( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type.content")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("type.content")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("type.content."));
            setTypeContent( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getDavRoot() const
{
    return m_Dav_root;
}


void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setDavRoot(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Dav_root = value;
    m_Dav_rootIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::davRootIsSet() const
{
    return m_Dav_rootIsSet;
}

void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetDav_root()
{
    m_Dav_rootIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getDavCreateAbsoluteUri() const
{
    return m_Dav_create_absolute_uri;
}


void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setDavCreateAbsoluteUri(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Dav_create_absolute_uri = value;
    m_Dav_create_absolute_uriIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::davCreateAbsoluteUriIsSet() const
{
    return m_Dav_create_absolute_uriIsSet;
}

void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetDav_create_absolute_uri()
{
    m_Dav_create_absolute_uriIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getDavRealm() const
{
    return m_Dav_realm;
}


void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setDavRealm(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Dav_realm = value;
    m_Dav_realmIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::davRealmIsSet() const
{
    return m_Dav_realmIsSet;
}

void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetDav_realm()
{
    m_Dav_realmIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getCollectionTypes() const
{
    return m_Collection_types;
}


void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setCollectionTypes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Collection_types = value;
    m_Collection_typesIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::collectionTypesIsSet() const
{
    return m_Collection_typesIsSet;
}

void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetCollection_types()
{
    m_Collection_typesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getFilterPrefixes() const
{
    return m_Filter_prefixes;
}


void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setFilterPrefixes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Filter_prefixes = value;
    m_Filter_prefixesIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::filterPrefixesIsSet() const
{
    return m_Filter_prefixesIsSet;
}

void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetFilter_prefixes()
{
    m_Filter_prefixesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getFilterTypes() const
{
    return m_Filter_types;
}


void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setFilterTypes(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Filter_types = value;
    m_Filter_typesIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::filterTypesIsSet() const
{
    return m_Filter_typesIsSet;
}

void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetFilter_types()
{
    m_Filter_typesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getFilterUris() const
{
    return m_Filter_uris;
}


void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setFilterUris(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Filter_uris = value;
    m_Filter_urisIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::filterUrisIsSet() const
{
    return m_Filter_urisIsSet;
}

void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetFilter_uris()
{
    m_Filter_urisIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getTypeCollections() const
{
    return m_Type_collections;
}


void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setTypeCollections(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Type_collections = value;
    m_Type_collectionsIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::typeCollectionsIsSet() const
{
    return m_Type_collectionsIsSet;
}

void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetType_collections()
{
    m_Type_collectionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getTypeNoncollections() const
{
    return m_Type_noncollections;
}


void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setTypeNoncollections(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Type_noncollections = value;
    m_Type_noncollectionsIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::typeNoncollectionsIsSet() const
{
    return m_Type_noncollectionsIsSet;
}

void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetType_noncollections()
{
    m_Type_noncollectionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getTypeContent() const
{
    return m_Type_content;
}


void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setTypeContent(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Type_content = value;
    m_Type_contentIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::typeContentIsSet() const
{
    return m_Type_contentIsSet;
}

void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetType_content()
{
    m_Type_contentIsSet = false;
}

}
}
}
}

