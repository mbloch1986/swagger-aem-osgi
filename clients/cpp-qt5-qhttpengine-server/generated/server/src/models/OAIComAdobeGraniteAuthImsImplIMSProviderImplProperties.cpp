/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties() {
    this->init();
}

OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::~OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties() {
    
}

void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::init() {
    m_oauth_provider_id_isSet = false;
    m_oauth_provider_ims_authorization_url_isSet = false;
    m_oauth_provider_ims_token_url_isSet = false;
    m_oauth_provider_ims_profile_url_isSet = false;
    m_oauth_provider_ims_extended_details_urls_isSet = false;
    m_oauth_provider_ims_validate_token_url_isSet = false;
    m_oauth_provider_ims_session_property_isSet = false;
    m_oauth_provider_ims_service_token_client_id_isSet = false;
    m_oauth_provider_ims_service_token_client_secret_isSet = false;
    m_oauth_provider_ims_service_token_isSet = false;
    m_ims_org_ref_isSet = false;
    m_ims_group_mapping_isSet = false;
    m_oauth_provider_ims_only_license_group_isSet = false;
}

void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(oauth_provider_id, json[QString("oauth.provider.id")]);
    
    ::OpenAPI::fromJsonValue(oauth_provider_ims_authorization_url, json[QString("oauth.provider.ims.authorization.url")]);
    
    ::OpenAPI::fromJsonValue(oauth_provider_ims_token_url, json[QString("oauth.provider.ims.token.url")]);
    
    ::OpenAPI::fromJsonValue(oauth_provider_ims_profile_url, json[QString("oauth.provider.ims.profile.url")]);
    
    ::OpenAPI::fromJsonValue(oauth_provider_ims_extended_details_urls, json[QString("oauth.provider.ims.extended.details.urls")]);
    
    ::OpenAPI::fromJsonValue(oauth_provider_ims_validate_token_url, json[QString("oauth.provider.ims.validate.token.url")]);
    
    ::OpenAPI::fromJsonValue(oauth_provider_ims_session_property, json[QString("oauth.provider.ims.session.property")]);
    
    ::OpenAPI::fromJsonValue(oauth_provider_ims_service_token_client_id, json[QString("oauth.provider.ims.service.token.client.id")]);
    
    ::OpenAPI::fromJsonValue(oauth_provider_ims_service_token_client_secret, json[QString("oauth.provider.ims.service.token.client.secret")]);
    
    ::OpenAPI::fromJsonValue(oauth_provider_ims_service_token, json[QString("oauth.provider.ims.service.token")]);
    
    ::OpenAPI::fromJsonValue(ims_org_ref, json[QString("ims.org.ref")]);
    
    ::OpenAPI::fromJsonValue(ims_group_mapping, json[QString("ims.group.mapping")]);
    
    ::OpenAPI::fromJsonValue(oauth_provider_ims_only_license_group, json[QString("oauth.provider.ims.only.license.group")]);
    
}

QString
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(oauth_provider_id.isSet()){
        obj.insert(QString("oauth.provider.id"), ::OpenAPI::toJsonValue(oauth_provider_id));
    }
	if(oauth_provider_ims_authorization_url.isSet()){
        obj.insert(QString("oauth.provider.ims.authorization.url"), ::OpenAPI::toJsonValue(oauth_provider_ims_authorization_url));
    }
	if(oauth_provider_ims_token_url.isSet()){
        obj.insert(QString("oauth.provider.ims.token.url"), ::OpenAPI::toJsonValue(oauth_provider_ims_token_url));
    }
	if(oauth_provider_ims_profile_url.isSet()){
        obj.insert(QString("oauth.provider.ims.profile.url"), ::OpenAPI::toJsonValue(oauth_provider_ims_profile_url));
    }
	if(oauth_provider_ims_extended_details_urls.isSet()){
        obj.insert(QString("oauth.provider.ims.extended.details.urls"), ::OpenAPI::toJsonValue(oauth_provider_ims_extended_details_urls));
    }
	if(oauth_provider_ims_validate_token_url.isSet()){
        obj.insert(QString("oauth.provider.ims.validate.token.url"), ::OpenAPI::toJsonValue(oauth_provider_ims_validate_token_url));
    }
	if(oauth_provider_ims_session_property.isSet()){
        obj.insert(QString("oauth.provider.ims.session.property"), ::OpenAPI::toJsonValue(oauth_provider_ims_session_property));
    }
	if(oauth_provider_ims_service_token_client_id.isSet()){
        obj.insert(QString("oauth.provider.ims.service.token.client.id"), ::OpenAPI::toJsonValue(oauth_provider_ims_service_token_client_id));
    }
	if(oauth_provider_ims_service_token_client_secret.isSet()){
        obj.insert(QString("oauth.provider.ims.service.token.client.secret"), ::OpenAPI::toJsonValue(oauth_provider_ims_service_token_client_secret));
    }
	if(oauth_provider_ims_service_token.isSet()){
        obj.insert(QString("oauth.provider.ims.service.token"), ::OpenAPI::toJsonValue(oauth_provider_ims_service_token));
    }
	if(ims_org_ref.isSet()){
        obj.insert(QString("ims.org.ref"), ::OpenAPI::toJsonValue(ims_org_ref));
    }
	if(ims_group_mapping.isSet()){
        obj.insert(QString("ims.group.mapping"), ::OpenAPI::toJsonValue(ims_group_mapping));
    }
	if(oauth_provider_ims_only_license_group.isSet()){
        obj.insert(QString("oauth.provider.ims.only.license.group"), ::OpenAPI::toJsonValue(oauth_provider_ims_only_license_group));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderId() const {
    return oauth_provider_id;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderId(const OAIConfigNodePropertyString &oauth_provider_id) {
    this->oauth_provider_id = oauth_provider_id;
    this->m_oauth_provider_id_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsAuthorizationUrl() const {
    return oauth_provider_ims_authorization_url;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsAuthorizationUrl(const OAIConfigNodePropertyString &oauth_provider_ims_authorization_url) {
    this->oauth_provider_ims_authorization_url = oauth_provider_ims_authorization_url;
    this->m_oauth_provider_ims_authorization_url_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsTokenUrl() const {
    return oauth_provider_ims_token_url;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsTokenUrl(const OAIConfigNodePropertyString &oauth_provider_ims_token_url) {
    this->oauth_provider_ims_token_url = oauth_provider_ims_token_url;
    this->m_oauth_provider_ims_token_url_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsProfileUrl() const {
    return oauth_provider_ims_profile_url;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsProfileUrl(const OAIConfigNodePropertyString &oauth_provider_ims_profile_url) {
    this->oauth_provider_ims_profile_url = oauth_provider_ims_profile_url;
    this->m_oauth_provider_ims_profile_url_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsExtendedDetailsUrls() const {
    return oauth_provider_ims_extended_details_urls;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsExtendedDetailsUrls(const OAIConfigNodePropertyArray &oauth_provider_ims_extended_details_urls) {
    this->oauth_provider_ims_extended_details_urls = oauth_provider_ims_extended_details_urls;
    this->m_oauth_provider_ims_extended_details_urls_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsValidateTokenUrl() const {
    return oauth_provider_ims_validate_token_url;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsValidateTokenUrl(const OAIConfigNodePropertyString &oauth_provider_ims_validate_token_url) {
    this->oauth_provider_ims_validate_token_url = oauth_provider_ims_validate_token_url;
    this->m_oauth_provider_ims_validate_token_url_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsSessionProperty() const {
    return oauth_provider_ims_session_property;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsSessionProperty(const OAIConfigNodePropertyString &oauth_provider_ims_session_property) {
    this->oauth_provider_ims_session_property = oauth_provider_ims_session_property;
    this->m_oauth_provider_ims_session_property_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsServiceTokenClientId() const {
    return oauth_provider_ims_service_token_client_id;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsServiceTokenClientId(const OAIConfigNodePropertyString &oauth_provider_ims_service_token_client_id) {
    this->oauth_provider_ims_service_token_client_id = oauth_provider_ims_service_token_client_id;
    this->m_oauth_provider_ims_service_token_client_id_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsServiceTokenClientSecret() const {
    return oauth_provider_ims_service_token_client_secret;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsServiceTokenClientSecret(const OAIConfigNodePropertyString &oauth_provider_ims_service_token_client_secret) {
    this->oauth_provider_ims_service_token_client_secret = oauth_provider_ims_service_token_client_secret;
    this->m_oauth_provider_ims_service_token_client_secret_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsServiceToken() const {
    return oauth_provider_ims_service_token;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsServiceToken(const OAIConfigNodePropertyString &oauth_provider_ims_service_token) {
    this->oauth_provider_ims_service_token = oauth_provider_ims_service_token;
    this->m_oauth_provider_ims_service_token_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getImsOrgRef() const {
    return ims_org_ref;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setImsOrgRef(const OAIConfigNodePropertyString &ims_org_ref) {
    this->ims_org_ref = ims_org_ref;
    this->m_ims_org_ref_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getImsGroupMapping() const {
    return ims_group_mapping;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setImsGroupMapping(const OAIConfigNodePropertyArray &ims_group_mapping) {
    this->ims_group_mapping = ims_group_mapping;
    this->m_ims_group_mapping_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsOnlyLicenseGroup() const {
    return oauth_provider_ims_only_license_group;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsOnlyLicenseGroup(const OAIConfigNodePropertyBoolean &oauth_provider_ims_only_license_group) {
    this->oauth_provider_ims_only_license_group = oauth_provider_ims_only_license_group;
    this->m_oauth_provider_ims_only_license_group_isSet = true;
}


bool
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(oauth_provider_id.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_provider_ims_authorization_url.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_provider_ims_token_url.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_provider_ims_profile_url.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_provider_ims_extended_details_urls.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_provider_ims_validate_token_url.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_provider_ims_session_property.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_provider_ims_service_token_client_id.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_provider_ims_service_token_client_secret.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_provider_ims_service_token.isSet()){ isObjectUpdated = true; break;}
    
        if(ims_org_ref.isSet()){ isObjectUpdated = true; break;}
    
        if(ims_group_mapping.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_provider_ims_only_license_group.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

