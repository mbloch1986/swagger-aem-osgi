/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties {
  #[serde(rename = "sling.servlet.paths")]
  sling_servlet_paths: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "oauth.revocation.active")]
  oauth_revocation_active: Option<::models::ConfigNodePropertyBoolean>
}

impl ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties {
  pub fn new() -> ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties {
    ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties {
      sling_servlet_paths: None,
      oauth_revocation_active: None
    }
  }

  pub fn set_sling_servlet_paths(&mut self, sling_servlet_paths: ::models::ConfigNodePropertyString) {
    self.sling_servlet_paths = Some(sling_servlet_paths);
  }

  pub fn with_sling_servlet_paths(mut self, sling_servlet_paths: ::models::ConfigNodePropertyString) -> ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties {
    self.sling_servlet_paths = Some(sling_servlet_paths);
    self
  }

  pub fn sling_servlet_paths(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sling_servlet_paths.as_ref()
  }

  pub fn reset_sling_servlet_paths(&mut self) {
    self.sling_servlet_paths = None;
  }

  pub fn set_oauth_revocation_active(&mut self, oauth_revocation_active: ::models::ConfigNodePropertyBoolean) {
    self.oauth_revocation_active = Some(oauth_revocation_active);
  }

  pub fn with_oauth_revocation_active(mut self, oauth_revocation_active: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties {
    self.oauth_revocation_active = Some(oauth_revocation_active);
    self
  }

  pub fn oauth_revocation_active(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.oauth_revocation_active.as_ref()
  }

  pub fn reset_oauth_revocation_active(&mut self) {
    self.oauth_revocation_active = None;
  }

}



