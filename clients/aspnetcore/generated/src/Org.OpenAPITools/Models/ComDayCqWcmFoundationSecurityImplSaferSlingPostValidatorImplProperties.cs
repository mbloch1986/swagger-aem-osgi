/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties : IEquatable<ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties>
    { 
        /// <summary>
        /// Gets or Sets ParameterWhitelist
        /// </summary>
        [DataMember(Name="parameter.whitelist")]
        public ConfigNodePropertyArray ParameterWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets ParameterWhitelistPrefixes
        /// </summary>
        [DataMember(Name="parameter.whitelist.prefixes")]
        public ConfigNodePropertyArray ParameterWhitelistPrefixes { get; set; }

        /// <summary>
        /// Gets or Sets BinaryParameterWhitelist
        /// </summary>
        [DataMember(Name="binary.parameter.whitelist")]
        public ConfigNodePropertyArray BinaryParameterWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets ModifierWhitelist
        /// </summary>
        [DataMember(Name="modifier.whitelist")]
        public ConfigNodePropertyArray ModifierWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets OperationWhitelist
        /// </summary>
        [DataMember(Name="operation.whitelist")]
        public ConfigNodePropertyArray OperationWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets OperationWhitelistPrefixes
        /// </summary>
        [DataMember(Name="operation.whitelist.prefixes")]
        public ConfigNodePropertyArray OperationWhitelistPrefixes { get; set; }

        /// <summary>
        /// Gets or Sets TypehintWhitelist
        /// </summary>
        [DataMember(Name="typehint.whitelist")]
        public ConfigNodePropertyArray TypehintWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets ResourcetypeWhitelist
        /// </summary>
        [DataMember(Name="resourcetype.whitelist")]
        public ConfigNodePropertyArray ResourcetypeWhitelist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties {\n");
            sb.Append("  ParameterWhitelist: ").Append(ParameterWhitelist).Append("\n");
            sb.Append("  ParameterWhitelistPrefixes: ").Append(ParameterWhitelistPrefixes).Append("\n");
            sb.Append("  BinaryParameterWhitelist: ").Append(BinaryParameterWhitelist).Append("\n");
            sb.Append("  ModifierWhitelist: ").Append(ModifierWhitelist).Append("\n");
            sb.Append("  OperationWhitelist: ").Append(OperationWhitelist).Append("\n");
            sb.Append("  OperationWhitelistPrefixes: ").Append(OperationWhitelistPrefixes).Append("\n");
            sb.Append("  TypehintWhitelist: ").Append(TypehintWhitelist).Append("\n");
            sb.Append("  ResourcetypeWhitelist: ").Append(ResourcetypeWhitelist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ParameterWhitelist == other.ParameterWhitelist ||
                    ParameterWhitelist != null &&
                    ParameterWhitelist.Equals(other.ParameterWhitelist)
                ) && 
                (
                    ParameterWhitelistPrefixes == other.ParameterWhitelistPrefixes ||
                    ParameterWhitelistPrefixes != null &&
                    ParameterWhitelistPrefixes.Equals(other.ParameterWhitelistPrefixes)
                ) && 
                (
                    BinaryParameterWhitelist == other.BinaryParameterWhitelist ||
                    BinaryParameterWhitelist != null &&
                    BinaryParameterWhitelist.Equals(other.BinaryParameterWhitelist)
                ) && 
                (
                    ModifierWhitelist == other.ModifierWhitelist ||
                    ModifierWhitelist != null &&
                    ModifierWhitelist.Equals(other.ModifierWhitelist)
                ) && 
                (
                    OperationWhitelist == other.OperationWhitelist ||
                    OperationWhitelist != null &&
                    OperationWhitelist.Equals(other.OperationWhitelist)
                ) && 
                (
                    OperationWhitelistPrefixes == other.OperationWhitelistPrefixes ||
                    OperationWhitelistPrefixes != null &&
                    OperationWhitelistPrefixes.Equals(other.OperationWhitelistPrefixes)
                ) && 
                (
                    TypehintWhitelist == other.TypehintWhitelist ||
                    TypehintWhitelist != null &&
                    TypehintWhitelist.Equals(other.TypehintWhitelist)
                ) && 
                (
                    ResourcetypeWhitelist == other.ResourcetypeWhitelist ||
                    ResourcetypeWhitelist != null &&
                    ResourcetypeWhitelist.Equals(other.ResourcetypeWhitelist)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ParameterWhitelist != null)
                    hashCode = hashCode * 59 + ParameterWhitelist.GetHashCode();
                    if (ParameterWhitelistPrefixes != null)
                    hashCode = hashCode * 59 + ParameterWhitelistPrefixes.GetHashCode();
                    if (BinaryParameterWhitelist != null)
                    hashCode = hashCode * 59 + BinaryParameterWhitelist.GetHashCode();
                    if (ModifierWhitelist != null)
                    hashCode = hashCode * 59 + ModifierWhitelist.GetHashCode();
                    if (OperationWhitelist != null)
                    hashCode = hashCode * 59 + OperationWhitelist.GetHashCode();
                    if (OperationWhitelistPrefixes != null)
                    hashCode = hashCode * 59 + OperationWhitelistPrefixes.GetHashCode();
                    if (TypehintWhitelist != null)
                    hashCode = hashCode * 59 + TypehintWhitelist.GetHashCode();
                    if (ResourcetypeWhitelist != null)
                    hashCode = hashCode * 59 + ResourcetypeWhitelist.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties left, ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties left, ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
