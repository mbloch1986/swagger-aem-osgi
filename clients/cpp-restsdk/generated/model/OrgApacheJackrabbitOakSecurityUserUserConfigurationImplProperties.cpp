/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties()
{
    m_UsersPathIsSet = false;
    m_GroupsPathIsSet = false;
    m_SystemRelativePathIsSet = false;
    m_DefaultDepthIsSet = false;
    m_ImportBehaviorIsSet = false;
    m_PasswordHashAlgorithmIsSet = false;
    m_PasswordHashIterationsIsSet = false;
    m_PasswordSaltSizeIsSet = false;
    m_OmitAdminPwIsSet = false;
    m_SupportAutoSaveIsSet = false;
    m_PasswordMaxAgeIsSet = false;
    m_InitialPasswordChangeIsSet = false;
    m_PasswordHistorySizeIsSet = false;
    m_PasswordExpiryForAdminIsSet = false;
    m_CacheExpirationIsSet = false;
    m_EnableRFC7613UsercaseMappedProfileIsSet = false;
}

OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::~OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties()
{
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_UsersPathIsSet)
    {
        val[utility::conversions::to_string_t("usersPath")] = ModelBase::toJson(m_UsersPath);
    }
    if(m_GroupsPathIsSet)
    {
        val[utility::conversions::to_string_t("groupsPath")] = ModelBase::toJson(m_GroupsPath);
    }
    if(m_SystemRelativePathIsSet)
    {
        val[utility::conversions::to_string_t("systemRelativePath")] = ModelBase::toJson(m_SystemRelativePath);
    }
    if(m_DefaultDepthIsSet)
    {
        val[utility::conversions::to_string_t("defaultDepth")] = ModelBase::toJson(m_DefaultDepth);
    }
    if(m_ImportBehaviorIsSet)
    {
        val[utility::conversions::to_string_t("importBehavior")] = ModelBase::toJson(m_ImportBehavior);
    }
    if(m_PasswordHashAlgorithmIsSet)
    {
        val[utility::conversions::to_string_t("passwordHashAlgorithm")] = ModelBase::toJson(m_PasswordHashAlgorithm);
    }
    if(m_PasswordHashIterationsIsSet)
    {
        val[utility::conversions::to_string_t("passwordHashIterations")] = ModelBase::toJson(m_PasswordHashIterations);
    }
    if(m_PasswordSaltSizeIsSet)
    {
        val[utility::conversions::to_string_t("passwordSaltSize")] = ModelBase::toJson(m_PasswordSaltSize);
    }
    if(m_OmitAdminPwIsSet)
    {
        val[utility::conversions::to_string_t("omitAdminPw")] = ModelBase::toJson(m_OmitAdminPw);
    }
    if(m_SupportAutoSaveIsSet)
    {
        val[utility::conversions::to_string_t("supportAutoSave")] = ModelBase::toJson(m_SupportAutoSave);
    }
    if(m_PasswordMaxAgeIsSet)
    {
        val[utility::conversions::to_string_t("passwordMaxAge")] = ModelBase::toJson(m_PasswordMaxAge);
    }
    if(m_InitialPasswordChangeIsSet)
    {
        val[utility::conversions::to_string_t("initialPasswordChange")] = ModelBase::toJson(m_InitialPasswordChange);
    }
    if(m_PasswordHistorySizeIsSet)
    {
        val[utility::conversions::to_string_t("passwordHistorySize")] = ModelBase::toJson(m_PasswordHistorySize);
    }
    if(m_PasswordExpiryForAdminIsSet)
    {
        val[utility::conversions::to_string_t("passwordExpiryForAdmin")] = ModelBase::toJson(m_PasswordExpiryForAdmin);
    }
    if(m_CacheExpirationIsSet)
    {
        val[utility::conversions::to_string_t("cacheExpiration")] = ModelBase::toJson(m_CacheExpiration);
    }
    if(m_EnableRFC7613UsercaseMappedProfileIsSet)
    {
        val[utility::conversions::to_string_t("enableRFC7613UsercaseMappedProfile")] = ModelBase::toJson(m_EnableRFC7613UsercaseMappedProfile);
    }

    return val;
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("usersPath")))
    {
        if(!val[utility::conversions::to_string_t("usersPath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("usersPath")]);
            setUsersPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("groupsPath")))
    {
        if(!val[utility::conversions::to_string_t("groupsPath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("groupsPath")]);
            setGroupsPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("systemRelativePath")))
    {
        if(!val[utility::conversions::to_string_t("systemRelativePath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("systemRelativePath")]);
            setSystemRelativePath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultDepth")))
    {
        if(!val[utility::conversions::to_string_t("defaultDepth")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("defaultDepth")]);
            setDefaultDepth( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importBehavior")))
    {
        if(!val[utility::conversions::to_string_t("importBehavior")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("importBehavior")]);
            setImportBehavior( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("passwordHashAlgorithm")))
    {
        if(!val[utility::conversions::to_string_t("passwordHashAlgorithm")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("passwordHashAlgorithm")]);
            setPasswordHashAlgorithm( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("passwordHashIterations")))
    {
        if(!val[utility::conversions::to_string_t("passwordHashIterations")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("passwordHashIterations")]);
            setPasswordHashIterations( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("passwordSaltSize")))
    {
        if(!val[utility::conversions::to_string_t("passwordSaltSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("passwordSaltSize")]);
            setPasswordSaltSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("omitAdminPw")))
    {
        if(!val[utility::conversions::to_string_t("omitAdminPw")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("omitAdminPw")]);
            setOmitAdminPw( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("supportAutoSave")))
    {
        if(!val[utility::conversions::to_string_t("supportAutoSave")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("supportAutoSave")]);
            setSupportAutoSave( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("passwordMaxAge")))
    {
        if(!val[utility::conversions::to_string_t("passwordMaxAge")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("passwordMaxAge")]);
            setPasswordMaxAge( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("initialPasswordChange")))
    {
        if(!val[utility::conversions::to_string_t("initialPasswordChange")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("initialPasswordChange")]);
            setInitialPasswordChange( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("passwordHistorySize")))
    {
        if(!val[utility::conversions::to_string_t("passwordHistorySize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("passwordHistorySize")]);
            setPasswordHistorySize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("passwordExpiryForAdmin")))
    {
        if(!val[utility::conversions::to_string_t("passwordExpiryForAdmin")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("passwordExpiryForAdmin")]);
            setPasswordExpiryForAdmin( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cacheExpiration")))
    {
        if(!val[utility::conversions::to_string_t("cacheExpiration")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cacheExpiration")]);
            setCacheExpiration( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enableRFC7613UsercaseMappedProfile")))
    {
        if(!val[utility::conversions::to_string_t("enableRFC7613UsercaseMappedProfile")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enableRFC7613UsercaseMappedProfile")]);
            setEnableRFC7613UsercaseMappedProfile( newItem );
        }
    }
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_UsersPathIsSet)
    {
        if (m_UsersPath.get())
        {
            m_UsersPath->toMultipart(multipart, utility::conversions::to_string_t("usersPath."));
        }
    }
    if(m_GroupsPathIsSet)
    {
        if (m_GroupsPath.get())
        {
            m_GroupsPath->toMultipart(multipart, utility::conversions::to_string_t("groupsPath."));
        }
    }
    if(m_SystemRelativePathIsSet)
    {
        if (m_SystemRelativePath.get())
        {
            m_SystemRelativePath->toMultipart(multipart, utility::conversions::to_string_t("systemRelativePath."));
        }
    }
    if(m_DefaultDepthIsSet)
    {
        if (m_DefaultDepth.get())
        {
            m_DefaultDepth->toMultipart(multipart, utility::conversions::to_string_t("defaultDepth."));
        }
    }
    if(m_ImportBehaviorIsSet)
    {
        if (m_ImportBehavior.get())
        {
            m_ImportBehavior->toMultipart(multipart, utility::conversions::to_string_t("importBehavior."));
        }
    }
    if(m_PasswordHashAlgorithmIsSet)
    {
        if (m_PasswordHashAlgorithm.get())
        {
            m_PasswordHashAlgorithm->toMultipart(multipart, utility::conversions::to_string_t("passwordHashAlgorithm."));
        }
    }
    if(m_PasswordHashIterationsIsSet)
    {
        if (m_PasswordHashIterations.get())
        {
            m_PasswordHashIterations->toMultipart(multipart, utility::conversions::to_string_t("passwordHashIterations."));
        }
    }
    if(m_PasswordSaltSizeIsSet)
    {
        if (m_PasswordSaltSize.get())
        {
            m_PasswordSaltSize->toMultipart(multipart, utility::conversions::to_string_t("passwordSaltSize."));
        }
    }
    if(m_OmitAdminPwIsSet)
    {
        if (m_OmitAdminPw.get())
        {
            m_OmitAdminPw->toMultipart(multipart, utility::conversions::to_string_t("omitAdminPw."));
        }
    }
    if(m_SupportAutoSaveIsSet)
    {
        if (m_SupportAutoSave.get())
        {
            m_SupportAutoSave->toMultipart(multipart, utility::conversions::to_string_t("supportAutoSave."));
        }
    }
    if(m_PasswordMaxAgeIsSet)
    {
        if (m_PasswordMaxAge.get())
        {
            m_PasswordMaxAge->toMultipart(multipart, utility::conversions::to_string_t("passwordMaxAge."));
        }
    }
    if(m_InitialPasswordChangeIsSet)
    {
        if (m_InitialPasswordChange.get())
        {
            m_InitialPasswordChange->toMultipart(multipart, utility::conversions::to_string_t("initialPasswordChange."));
        }
    }
    if(m_PasswordHistorySizeIsSet)
    {
        if (m_PasswordHistorySize.get())
        {
            m_PasswordHistorySize->toMultipart(multipart, utility::conversions::to_string_t("passwordHistorySize."));
        }
    }
    if(m_PasswordExpiryForAdminIsSet)
    {
        if (m_PasswordExpiryForAdmin.get())
        {
            m_PasswordExpiryForAdmin->toMultipart(multipart, utility::conversions::to_string_t("passwordExpiryForAdmin."));
        }
    }
    if(m_CacheExpirationIsSet)
    {
        if (m_CacheExpiration.get())
        {
            m_CacheExpiration->toMultipart(multipart, utility::conversions::to_string_t("cacheExpiration."));
        }
    }
    if(m_EnableRFC7613UsercaseMappedProfileIsSet)
    {
        if (m_EnableRFC7613UsercaseMappedProfile.get())
        {
            m_EnableRFC7613UsercaseMappedProfile->toMultipart(multipart, utility::conversions::to_string_t("enableRFC7613UsercaseMappedProfile."));
        }
    }
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("usersPath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("usersPath")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("usersPath."));
            setUsersPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("groupsPath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("groupsPath")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("groupsPath."));
            setGroupsPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("systemRelativePath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("systemRelativePath")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("systemRelativePath."));
            setSystemRelativePath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultDepth")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("defaultDepth")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("defaultDepth."));
            setDefaultDepth( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importBehavior")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("importBehavior")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("importBehavior."));
            setImportBehavior( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("passwordHashAlgorithm")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("passwordHashAlgorithm")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("passwordHashAlgorithm."));
            setPasswordHashAlgorithm( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("passwordHashIterations")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("passwordHashIterations")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("passwordHashIterations."));
            setPasswordHashIterations( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("passwordSaltSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("passwordSaltSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("passwordSaltSize."));
            setPasswordSaltSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("omitAdminPw")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("omitAdminPw")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("omitAdminPw."));
            setOmitAdminPw( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("supportAutoSave")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("supportAutoSave")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("supportAutoSave."));
            setSupportAutoSave( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("passwordMaxAge")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("passwordMaxAge")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("passwordMaxAge."));
            setPasswordMaxAge( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("initialPasswordChange")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("initialPasswordChange")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("initialPasswordChange."));
            setInitialPasswordChange( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("passwordHistorySize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("passwordHistorySize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("passwordHistorySize."));
            setPasswordHistorySize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("passwordExpiryForAdmin")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("passwordExpiryForAdmin")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("passwordExpiryForAdmin."));
            setPasswordExpiryForAdmin( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cacheExpiration")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cacheExpiration")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cacheExpiration."));
            setCacheExpiration( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enableRFC7613UsercaseMappedProfile")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enableRFC7613UsercaseMappedProfile")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enableRFC7613UsercaseMappedProfile."));
            setEnableRFC7613UsercaseMappedProfile( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getUsersPath() const
{
    return m_UsersPath;
}


void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setUsersPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_UsersPath = value;
    m_UsersPathIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::usersPathIsSet() const
{
    return m_UsersPathIsSet;
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetUsersPath()
{
    m_UsersPathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getGroupsPath() const
{
    return m_GroupsPath;
}


void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setGroupsPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_GroupsPath = value;
    m_GroupsPathIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::groupsPathIsSet() const
{
    return m_GroupsPathIsSet;
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetGroupsPath()
{
    m_GroupsPathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getSystemRelativePath() const
{
    return m_SystemRelativePath;
}


void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setSystemRelativePath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_SystemRelativePath = value;
    m_SystemRelativePathIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::systemRelativePathIsSet() const
{
    return m_SystemRelativePathIsSet;
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetSystemRelativePath()
{
    m_SystemRelativePathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getDefaultDepth() const
{
    return m_DefaultDepth;
}


void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setDefaultDepth(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_DefaultDepth = value;
    m_DefaultDepthIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::defaultDepthIsSet() const
{
    return m_DefaultDepthIsSet;
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetDefaultDepth()
{
    m_DefaultDepthIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getImportBehavior() const
{
    return m_ImportBehavior;
}


void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setImportBehavior(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_ImportBehavior = value;
    m_ImportBehaviorIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::importBehaviorIsSet() const
{
    return m_ImportBehaviorIsSet;
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetImportBehavior()
{
    m_ImportBehaviorIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordHashAlgorithm() const
{
    return m_PasswordHashAlgorithm;
}


void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordHashAlgorithm(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_PasswordHashAlgorithm = value;
    m_PasswordHashAlgorithmIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::passwordHashAlgorithmIsSet() const
{
    return m_PasswordHashAlgorithmIsSet;
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetPasswordHashAlgorithm()
{
    m_PasswordHashAlgorithmIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordHashIterations() const
{
    return m_PasswordHashIterations;
}


void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordHashIterations(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_PasswordHashIterations = value;
    m_PasswordHashIterationsIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::passwordHashIterationsIsSet() const
{
    return m_PasswordHashIterationsIsSet;
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetPasswordHashIterations()
{
    m_PasswordHashIterationsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordSaltSize() const
{
    return m_PasswordSaltSize;
}


void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordSaltSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_PasswordSaltSize = value;
    m_PasswordSaltSizeIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::passwordSaltSizeIsSet() const
{
    return m_PasswordSaltSizeIsSet;
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetPasswordSaltSize()
{
    m_PasswordSaltSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getOmitAdminPw() const
{
    return m_OmitAdminPw;
}


void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setOmitAdminPw(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_OmitAdminPw = value;
    m_OmitAdminPwIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::omitAdminPwIsSet() const
{
    return m_OmitAdminPwIsSet;
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetOmitAdminPw()
{
    m_OmitAdminPwIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getSupportAutoSave() const
{
    return m_SupportAutoSave;
}


void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setSupportAutoSave(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_SupportAutoSave = value;
    m_SupportAutoSaveIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::supportAutoSaveIsSet() const
{
    return m_SupportAutoSaveIsSet;
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetSupportAutoSave()
{
    m_SupportAutoSaveIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordMaxAge() const
{
    return m_PasswordMaxAge;
}


void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordMaxAge(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_PasswordMaxAge = value;
    m_PasswordMaxAgeIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::passwordMaxAgeIsSet() const
{
    return m_PasswordMaxAgeIsSet;
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetPasswordMaxAge()
{
    m_PasswordMaxAgeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getInitialPasswordChange() const
{
    return m_InitialPasswordChange;
}


void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setInitialPasswordChange(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_InitialPasswordChange = value;
    m_InitialPasswordChangeIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::initialPasswordChangeIsSet() const
{
    return m_InitialPasswordChangeIsSet;
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetInitialPasswordChange()
{
    m_InitialPasswordChangeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordHistorySize() const
{
    return m_PasswordHistorySize;
}


void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordHistorySize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_PasswordHistorySize = value;
    m_PasswordHistorySizeIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::passwordHistorySizeIsSet() const
{
    return m_PasswordHistorySizeIsSet;
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetPasswordHistorySize()
{
    m_PasswordHistorySizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordExpiryForAdmin() const
{
    return m_PasswordExpiryForAdmin;
}


void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordExpiryForAdmin(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_PasswordExpiryForAdmin = value;
    m_PasswordExpiryForAdminIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::passwordExpiryForAdminIsSet() const
{
    return m_PasswordExpiryForAdminIsSet;
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetPasswordExpiryForAdmin()
{
    m_PasswordExpiryForAdminIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getCacheExpiration() const
{
    return m_CacheExpiration;
}


void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setCacheExpiration(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_CacheExpiration = value;
    m_CacheExpirationIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::cacheExpirationIsSet() const
{
    return m_CacheExpirationIsSet;
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetCacheExpiration()
{
    m_CacheExpirationIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getEnableRFC7613UsercaseMappedProfile() const
{
    return m_EnableRFC7613UsercaseMappedProfile;
}


void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setEnableRFC7613UsercaseMappedProfile(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EnableRFC7613UsercaseMappedProfile = value;
    m_EnableRFC7613UsercaseMappedProfileIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::enableRFC7613UsercaseMappedProfileIsSet() const
{
    return m_EnableRFC7613UsercaseMappedProfileIsSet;
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::unsetEnableRFC7613UsercaseMappedProfile()
{
    m_EnableRFC7613UsercaseMappedProfileIsSet = false;
}

}
}
}
}

