/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteAuthOauthProviderProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteAuthOauthProviderProperties::ComAdobeGraniteAuthOauthProviderProperties()
{
    m_Oauth_config_idIsSet = false;
    m_Oauth_client_idIsSet = false;
    m_Oauth_client_secretIsSet = false;
    m_Oauth_scopeIsSet = false;
    m_Oauth_config_provider_idIsSet = false;
    m_Oauth_create_usersIsSet = false;
    m_Oauth_userid_propertyIsSet = false;
    m_Force_strict_username_matchingIsSet = false;
    m_Oauth_encode_useridsIsSet = false;
    m_Oauth_hash_useridsIsSet = false;
    m_Oauth_callBackUrlIsSet = false;
    m_Oauth_access_token_persistIsSet = false;
    m_Oauth_access_token_persist_cookieIsSet = false;
    m_Oauth_csrf_state_protectionIsSet = false;
    m_Oauth_redirect_request_paramsIsSet = false;
    m_Oauth_config_siblings_allowIsSet = false;
    
}

ComAdobeGraniteAuthOauthProviderProperties::~ComAdobeGraniteAuthOauthProviderProperties()
{
}

void ComAdobeGraniteAuthOauthProviderProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteAuthOauthProviderProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Oauth_config_idIsSet)
    {
        val["oauth.config.id"] = ModelBase::toJson(m_Oauth_config_id);
    }
    if(m_Oauth_client_idIsSet)
    {
        val["oauth.client.id"] = ModelBase::toJson(m_Oauth_client_id);
    }
    if(m_Oauth_client_secretIsSet)
    {
        val["oauth.client.secret"] = ModelBase::toJson(m_Oauth_client_secret);
    }
    if(m_Oauth_scopeIsSet)
    {
        val["oauth.scope"] = ModelBase::toJson(m_Oauth_scope);
    }
    if(m_Oauth_config_provider_idIsSet)
    {
        val["oauth.config.provider.id"] = ModelBase::toJson(m_Oauth_config_provider_id);
    }
    if(m_Oauth_create_usersIsSet)
    {
        val["oauth.create.users"] = ModelBase::toJson(m_Oauth_create_users);
    }
    if(m_Oauth_userid_propertyIsSet)
    {
        val["oauth.userid.property"] = ModelBase::toJson(m_Oauth_userid_property);
    }
    if(m_Force_strict_username_matchingIsSet)
    {
        val["force.strict.username.matching"] = ModelBase::toJson(m_Force_strict_username_matching);
    }
    if(m_Oauth_encode_useridsIsSet)
    {
        val["oauth.encode.userids"] = ModelBase::toJson(m_Oauth_encode_userids);
    }
    if(m_Oauth_hash_useridsIsSet)
    {
        val["oauth.hash.userids"] = ModelBase::toJson(m_Oauth_hash_userids);
    }
    if(m_Oauth_callBackUrlIsSet)
    {
        val["oauth.callBackUrl"] = ModelBase::toJson(m_Oauth_callBackUrl);
    }
    if(m_Oauth_access_token_persistIsSet)
    {
        val["oauth.access.token.persist"] = ModelBase::toJson(m_Oauth_access_token_persist);
    }
    if(m_Oauth_access_token_persist_cookieIsSet)
    {
        val["oauth.access.token.persist.cookie"] = ModelBase::toJson(m_Oauth_access_token_persist_cookie);
    }
    if(m_Oauth_csrf_state_protectionIsSet)
    {
        val["oauth.csrf.state.protection"] = ModelBase::toJson(m_Oauth_csrf_state_protection);
    }
    if(m_Oauth_redirect_request_paramsIsSet)
    {
        val["oauth.redirect.request.params"] = ModelBase::toJson(m_Oauth_redirect_request_params);
    }
    if(m_Oauth_config_siblings_allowIsSet)
    {
        val["oauth.config.siblings.allow"] = ModelBase::toJson(m_Oauth_config_siblings_allow);
    }
    

    return val;
}

void ComAdobeGraniteAuthOauthProviderProperties::fromJson(nlohmann::json& val)
{
    if(val.find("oauth.config.id") != val.end())
    {
        if(!val["oauth.config.id"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.config.id"]);
            setOauthConfigId( newItem );
        }
        
    }
    if(val.find("oauth.client.id") != val.end())
    {
        if(!val["oauth.client.id"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.client.id"]);
            setOauthClientId( newItem );
        }
        
    }
    if(val.find("oauth.client.secret") != val.end())
    {
        if(!val["oauth.client.secret"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.client.secret"]);
            setOauthClientSecret( newItem );
        }
        
    }
    if(val.find("oauth.scope") != val.end())
    {
        if(!val["oauth.scope"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["oauth.scope"]);
            setOauthScope( newItem );
        }
        
    }
    if(val.find("oauth.config.provider.id") != val.end())
    {
        if(!val["oauth.config.provider.id"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.config.provider.id"]);
            setOauthConfigProviderId( newItem );
        }
        
    }
    if(val.find("oauth.create.users") != val.end())
    {
        if(!val["oauth.create.users"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["oauth.create.users"]);
            setOauthCreateUsers( newItem );
        }
        
    }
    if(val.find("oauth.userid.property") != val.end())
    {
        if(!val["oauth.userid.property"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.userid.property"]);
            setOauthUseridProperty( newItem );
        }
        
    }
    if(val.find("force.strict.username.matching") != val.end())
    {
        if(!val["force.strict.username.matching"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["force.strict.username.matching"]);
            setForceStrictUsernameMatching( newItem );
        }
        
    }
    if(val.find("oauth.encode.userids") != val.end())
    {
        if(!val["oauth.encode.userids"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["oauth.encode.userids"]);
            setOauthEncodeUserids( newItem );
        }
        
    }
    if(val.find("oauth.hash.userids") != val.end())
    {
        if(!val["oauth.hash.userids"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["oauth.hash.userids"]);
            setOauthHashUserids( newItem );
        }
        
    }
    if(val.find("oauth.callBackUrl") != val.end())
    {
        if(!val["oauth.callBackUrl"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.callBackUrl"]);
            setOauthCallBackUrl( newItem );
        }
        
    }
    if(val.find("oauth.access.token.persist") != val.end())
    {
        if(!val["oauth.access.token.persist"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["oauth.access.token.persist"]);
            setOauthAccessTokenPersist( newItem );
        }
        
    }
    if(val.find("oauth.access.token.persist.cookie") != val.end())
    {
        if(!val["oauth.access.token.persist.cookie"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["oauth.access.token.persist.cookie"]);
            setOauthAccessTokenPersistCookie( newItem );
        }
        
    }
    if(val.find("oauth.csrf.state.protection") != val.end())
    {
        if(!val["oauth.csrf.state.protection"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["oauth.csrf.state.protection"]);
            setOauthCsrfStateProtection( newItem );
        }
        
    }
    if(val.find("oauth.redirect.request.params") != val.end())
    {
        if(!val["oauth.redirect.request.params"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["oauth.redirect.request.params"]);
            setOauthRedirectRequestParams( newItem );
        }
        
    }
    if(val.find("oauth.config.siblings.allow") != val.end())
    {
        if(!val["oauth.config.siblings.allow"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["oauth.config.siblings.allow"]);
            setOauthConfigSiblingsAllow( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeGraniteAuthOauthProviderProperties::getOauthConfigId() const
{
    return m_Oauth_config_id;
}
void ComAdobeGraniteAuthOauthProviderProperties::setOauthConfigId(ConfigNodePropertyString const& value)
{
    m_Oauth_config_id = value;
    m_Oauth_config_idIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthConfigIdIsSet() const
{
    return m_Oauth_config_idIsSet;
}
void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_config_id()
{
    m_Oauth_config_idIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthProviderProperties::getOauthClientId() const
{
    return m_Oauth_client_id;
}
void ComAdobeGraniteAuthOauthProviderProperties::setOauthClientId(ConfigNodePropertyString const& value)
{
    m_Oauth_client_id = value;
    m_Oauth_client_idIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthClientIdIsSet() const
{
    return m_Oauth_client_idIsSet;
}
void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_client_id()
{
    m_Oauth_client_idIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthProviderProperties::getOauthClientSecret() const
{
    return m_Oauth_client_secret;
}
void ComAdobeGraniteAuthOauthProviderProperties::setOauthClientSecret(ConfigNodePropertyString const& value)
{
    m_Oauth_client_secret = value;
    m_Oauth_client_secretIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthClientSecretIsSet() const
{
    return m_Oauth_client_secretIsSet;
}
void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_client_secret()
{
    m_Oauth_client_secretIsSet = false;
}
ConfigNodePropertyArray ComAdobeGraniteAuthOauthProviderProperties::getOauthScope() const
{
    return m_Oauth_scope;
}
void ComAdobeGraniteAuthOauthProviderProperties::setOauthScope(ConfigNodePropertyArray const& value)
{
    m_Oauth_scope = value;
    m_Oauth_scopeIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthScopeIsSet() const
{
    return m_Oauth_scopeIsSet;
}
void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_scope()
{
    m_Oauth_scopeIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthProviderProperties::getOauthConfigProviderId() const
{
    return m_Oauth_config_provider_id;
}
void ComAdobeGraniteAuthOauthProviderProperties::setOauthConfigProviderId(ConfigNodePropertyString const& value)
{
    m_Oauth_config_provider_id = value;
    m_Oauth_config_provider_idIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthConfigProviderIdIsSet() const
{
    return m_Oauth_config_provider_idIsSet;
}
void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_config_provider_id()
{
    m_Oauth_config_provider_idIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteAuthOauthProviderProperties::getOauthCreateUsers() const
{
    return m_Oauth_create_users;
}
void ComAdobeGraniteAuthOauthProviderProperties::setOauthCreateUsers(ConfigNodePropertyBoolean const& value)
{
    m_Oauth_create_users = value;
    m_Oauth_create_usersIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthCreateUsersIsSet() const
{
    return m_Oauth_create_usersIsSet;
}
void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_create_users()
{
    m_Oauth_create_usersIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthProviderProperties::getOauthUseridProperty() const
{
    return m_Oauth_userid_property;
}
void ComAdobeGraniteAuthOauthProviderProperties::setOauthUseridProperty(ConfigNodePropertyString const& value)
{
    m_Oauth_userid_property = value;
    m_Oauth_userid_propertyIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthUseridPropertyIsSet() const
{
    return m_Oauth_userid_propertyIsSet;
}
void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_userid_property()
{
    m_Oauth_userid_propertyIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteAuthOauthProviderProperties::getForceStrictUsernameMatching() const
{
    return m_Force_strict_username_matching;
}
void ComAdobeGraniteAuthOauthProviderProperties::setForceStrictUsernameMatching(ConfigNodePropertyBoolean const& value)
{
    m_Force_strict_username_matching = value;
    m_Force_strict_username_matchingIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::forceStrictUsernameMatchingIsSet() const
{
    return m_Force_strict_username_matchingIsSet;
}
void ComAdobeGraniteAuthOauthProviderProperties::unsetForce_strict_username_matching()
{
    m_Force_strict_username_matchingIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteAuthOauthProviderProperties::getOauthEncodeUserids() const
{
    return m_Oauth_encode_userids;
}
void ComAdobeGraniteAuthOauthProviderProperties::setOauthEncodeUserids(ConfigNodePropertyBoolean const& value)
{
    m_Oauth_encode_userids = value;
    m_Oauth_encode_useridsIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthEncodeUseridsIsSet() const
{
    return m_Oauth_encode_useridsIsSet;
}
void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_encode_userids()
{
    m_Oauth_encode_useridsIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteAuthOauthProviderProperties::getOauthHashUserids() const
{
    return m_Oauth_hash_userids;
}
void ComAdobeGraniteAuthOauthProviderProperties::setOauthHashUserids(ConfigNodePropertyBoolean const& value)
{
    m_Oauth_hash_userids = value;
    m_Oauth_hash_useridsIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthHashUseridsIsSet() const
{
    return m_Oauth_hash_useridsIsSet;
}
void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_hash_userids()
{
    m_Oauth_hash_useridsIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthProviderProperties::getOauthCallBackUrl() const
{
    return m_Oauth_callBackUrl;
}
void ComAdobeGraniteAuthOauthProviderProperties::setOauthCallBackUrl(ConfigNodePropertyString const& value)
{
    m_Oauth_callBackUrl = value;
    m_Oauth_callBackUrlIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthCallBackUrlIsSet() const
{
    return m_Oauth_callBackUrlIsSet;
}
void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_callBackUrl()
{
    m_Oauth_callBackUrlIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteAuthOauthProviderProperties::getOauthAccessTokenPersist() const
{
    return m_Oauth_access_token_persist;
}
void ComAdobeGraniteAuthOauthProviderProperties::setOauthAccessTokenPersist(ConfigNodePropertyBoolean const& value)
{
    m_Oauth_access_token_persist = value;
    m_Oauth_access_token_persistIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthAccessTokenPersistIsSet() const
{
    return m_Oauth_access_token_persistIsSet;
}
void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_access_token_persist()
{
    m_Oauth_access_token_persistIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteAuthOauthProviderProperties::getOauthAccessTokenPersistCookie() const
{
    return m_Oauth_access_token_persist_cookie;
}
void ComAdobeGraniteAuthOauthProviderProperties::setOauthAccessTokenPersistCookie(ConfigNodePropertyBoolean const& value)
{
    m_Oauth_access_token_persist_cookie = value;
    m_Oauth_access_token_persist_cookieIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthAccessTokenPersistCookieIsSet() const
{
    return m_Oauth_access_token_persist_cookieIsSet;
}
void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_access_token_persist_cookie()
{
    m_Oauth_access_token_persist_cookieIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteAuthOauthProviderProperties::getOauthCsrfStateProtection() const
{
    return m_Oauth_csrf_state_protection;
}
void ComAdobeGraniteAuthOauthProviderProperties::setOauthCsrfStateProtection(ConfigNodePropertyBoolean const& value)
{
    m_Oauth_csrf_state_protection = value;
    m_Oauth_csrf_state_protectionIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthCsrfStateProtectionIsSet() const
{
    return m_Oauth_csrf_state_protectionIsSet;
}
void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_csrf_state_protection()
{
    m_Oauth_csrf_state_protectionIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteAuthOauthProviderProperties::getOauthRedirectRequestParams() const
{
    return m_Oauth_redirect_request_params;
}
void ComAdobeGraniteAuthOauthProviderProperties::setOauthRedirectRequestParams(ConfigNodePropertyBoolean const& value)
{
    m_Oauth_redirect_request_params = value;
    m_Oauth_redirect_request_paramsIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthRedirectRequestParamsIsSet() const
{
    return m_Oauth_redirect_request_paramsIsSet;
}
void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_redirect_request_params()
{
    m_Oauth_redirect_request_paramsIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteAuthOauthProviderProperties::getOauthConfigSiblingsAllow() const
{
    return m_Oauth_config_siblings_allow;
}
void ComAdobeGraniteAuthOauthProviderProperties::setOauthConfigSiblingsAllow(ConfigNodePropertyBoolean const& value)
{
    m_Oauth_config_siblings_allow = value;
    m_Oauth_config_siblings_allowIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthConfigSiblingsAllowIsSet() const
{
    return m_Oauth_config_siblings_allowIsSet;
}
void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_config_siblings_allow()
{
    m_Oauth_config_siblings_allowIsSet = false;
}

}
}
}
}

