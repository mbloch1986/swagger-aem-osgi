/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties() {
    init();
}

OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::~OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::init() {
    dav_root = new OAIConfigNodePropertyString();
    m_dav_root_isSet = false;
    dav_create_absolute_uri = new OAIConfigNodePropertyBoolean();
    m_dav_create_absolute_uri_isSet = false;
    dav_realm = new OAIConfigNodePropertyString();
    m_dav_realm_isSet = false;
    collection_types = new OAIConfigNodePropertyArray();
    m_collection_types_isSet = false;
    filter_prefixes = new OAIConfigNodePropertyArray();
    m_filter_prefixes_isSet = false;
    filter_types = new OAIConfigNodePropertyString();
    m_filter_types_isSet = false;
    filter_uris = new OAIConfigNodePropertyString();
    m_filter_uris_isSet = false;
    type_collections = new OAIConfigNodePropertyString();
    m_type_collections_isSet = false;
    type_noncollections = new OAIConfigNodePropertyString();
    m_type_noncollections_isSet = false;
    type_content = new OAIConfigNodePropertyString();
    m_type_content_isSet = false;
}

void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::cleanup() {
    if(dav_root != nullptr) { 
        delete dav_root;
    }
    if(dav_create_absolute_uri != nullptr) { 
        delete dav_create_absolute_uri;
    }
    if(dav_realm != nullptr) { 
        delete dav_realm;
    }
    if(collection_types != nullptr) { 
        delete collection_types;
    }
    if(filter_prefixes != nullptr) { 
        delete filter_prefixes;
    }
    if(filter_types != nullptr) { 
        delete filter_types;
    }
    if(filter_uris != nullptr) { 
        delete filter_uris;
    }
    if(type_collections != nullptr) { 
        delete type_collections;
    }
    if(type_noncollections != nullptr) { 
        delete type_noncollections;
    }
    if(type_content != nullptr) { 
        delete type_content;
    }
}

OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties*
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&dav_root, pJson["dav.root"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&dav_create_absolute_uri, pJson["dav.create-absolute-uri"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&dav_realm, pJson["dav.realm"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&collection_types, pJson["collection.types"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&filter_prefixes, pJson["filter.prefixes"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&filter_types, pJson["filter.types"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&filter_uris, pJson["filter.uris"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&type_collections, pJson["type.collections"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&type_noncollections, pJson["type.noncollections"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&type_content, pJson["type.content"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::asJsonObject() {
    QJsonObject obj;
    if((dav_root != nullptr) && (dav_root->isSet())){
        toJsonValue(QString("dav.root"), dav_root, obj, QString("OAIConfigNodePropertyString"));
    }
    if((dav_create_absolute_uri != nullptr) && (dav_create_absolute_uri->isSet())){
        toJsonValue(QString("dav.create-absolute-uri"), dav_create_absolute_uri, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((dav_realm != nullptr) && (dav_realm->isSet())){
        toJsonValue(QString("dav.realm"), dav_realm, obj, QString("OAIConfigNodePropertyString"));
    }
    if((collection_types != nullptr) && (collection_types->isSet())){
        toJsonValue(QString("collection.types"), collection_types, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((filter_prefixes != nullptr) && (filter_prefixes->isSet())){
        toJsonValue(QString("filter.prefixes"), filter_prefixes, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((filter_types != nullptr) && (filter_types->isSet())){
        toJsonValue(QString("filter.types"), filter_types, obj, QString("OAIConfigNodePropertyString"));
    }
    if((filter_uris != nullptr) && (filter_uris->isSet())){
        toJsonValue(QString("filter.uris"), filter_uris, obj, QString("OAIConfigNodePropertyString"));
    }
    if((type_collections != nullptr) && (type_collections->isSet())){
        toJsonValue(QString("type.collections"), type_collections, obj, QString("OAIConfigNodePropertyString"));
    }
    if((type_noncollections != nullptr) && (type_noncollections->isSet())){
        toJsonValue(QString("type.noncollections"), type_noncollections, obj, QString("OAIConfigNodePropertyString"));
    }
    if((type_content != nullptr) && (type_content->isSet())){
        toJsonValue(QString("type.content"), type_content, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getDavRoot() {
    return dav_root;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setDavRoot(OAIConfigNodePropertyString* dav_root) {
    this->dav_root = dav_root;
    this->m_dav_root_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getDavCreateAbsoluteUri() {
    return dav_create_absolute_uri;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setDavCreateAbsoluteUri(OAIConfigNodePropertyBoolean* dav_create_absolute_uri) {
    this->dav_create_absolute_uri = dav_create_absolute_uri;
    this->m_dav_create_absolute_uri_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getDavRealm() {
    return dav_realm;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setDavRealm(OAIConfigNodePropertyString* dav_realm) {
    this->dav_realm = dav_realm;
    this->m_dav_realm_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getCollectionTypes() {
    return collection_types;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setCollectionTypes(OAIConfigNodePropertyArray* collection_types) {
    this->collection_types = collection_types;
    this->m_collection_types_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getFilterPrefixes() {
    return filter_prefixes;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setFilterPrefixes(OAIConfigNodePropertyArray* filter_prefixes) {
    this->filter_prefixes = filter_prefixes;
    this->m_filter_prefixes_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getFilterTypes() {
    return filter_types;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setFilterTypes(OAIConfigNodePropertyString* filter_types) {
    this->filter_types = filter_types;
    this->m_filter_types_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getFilterUris() {
    return filter_uris;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setFilterUris(OAIConfigNodePropertyString* filter_uris) {
    this->filter_uris = filter_uris;
    this->m_filter_uris_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getTypeCollections() {
    return type_collections;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setTypeCollections(OAIConfigNodePropertyString* type_collections) {
    this->type_collections = type_collections;
    this->m_type_collections_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getTypeNoncollections() {
    return type_noncollections;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setTypeNoncollections(OAIConfigNodePropertyString* type_noncollections) {
    this->type_noncollections = type_noncollections;
    this->m_type_noncollections_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getTypeContent() {
    return type_content;
}
void
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setTypeContent(OAIConfigNodePropertyString* type_content) {
    this->type_content = type_content;
    this->m_type_content_isSet = true;
}


bool
OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(dav_root != nullptr && dav_root->isSet()){ isObjectUpdated = true; break;}
        if(dav_create_absolute_uri != nullptr && dav_create_absolute_uri->isSet()){ isObjectUpdated = true; break;}
        if(dav_realm != nullptr && dav_realm->isSet()){ isObjectUpdated = true; break;}
        if(collection_types != nullptr && collection_types->isSet()){ isObjectUpdated = true; break;}
        if(filter_prefixes != nullptr && filter_prefixes->isSet()){ isObjectUpdated = true; break;}
        if(filter_types != nullptr && filter_types->isSet()){ isObjectUpdated = true; break;}
        if(filter_uris != nullptr && filter_uris->isSet()){ isObjectUpdated = true; break;}
        if(type_collections != nullptr && type_collections->isSet()){ isObjectUpdated = true; break;}
        if(type_noncollections != nullptr && type_noncollections->isSet()){ isObjectUpdated = true; break;}
        if(type_content != nullptr && type_content->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

