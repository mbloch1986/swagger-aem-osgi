/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialTranslationImplUgcLanguageDetectorProperties {
  #[serde(rename = "event.topics")]
  event_topics: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "event.filter")]
  event_filter: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "translate.listener.type")]
  translate_listener_type: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "translate.property.list")]
  translate_property_list: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "poolSize")]
  pool_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "maxPoolSize")]
  max_pool_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "queueSize")]
  queue_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "keepAliveTime")]
  keep_alive_time: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeCqSocialTranslationImplUgcLanguageDetectorProperties {
  pub fn new() -> ComAdobeCqSocialTranslationImplUgcLanguageDetectorProperties {
    ComAdobeCqSocialTranslationImplUgcLanguageDetectorProperties {
      event_topics: None,
      event_filter: None,
      translate_listener_type: None,
      translate_property_list: None,
      pool_size: None,
      max_pool_size: None,
      queue_size: None,
      keep_alive_time: None
    }
  }

  pub fn set_event_topics(&mut self, event_topics: ::models::ConfigNodePropertyString) {
    self.event_topics = Some(event_topics);
  }

  pub fn with_event_topics(mut self, event_topics: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialTranslationImplUgcLanguageDetectorProperties {
    self.event_topics = Some(event_topics);
    self
  }

  pub fn event_topics(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.event_topics.as_ref()
  }

  pub fn reset_event_topics(&mut self) {
    self.event_topics = None;
  }

  pub fn set_event_filter(&mut self, event_filter: ::models::ConfigNodePropertyString) {
    self.event_filter = Some(event_filter);
  }

  pub fn with_event_filter(mut self, event_filter: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialTranslationImplUgcLanguageDetectorProperties {
    self.event_filter = Some(event_filter);
    self
  }

  pub fn event_filter(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.event_filter.as_ref()
  }

  pub fn reset_event_filter(&mut self) {
    self.event_filter = None;
  }

  pub fn set_translate_listener_type(&mut self, translate_listener_type: ::models::ConfigNodePropertyArray) {
    self.translate_listener_type = Some(translate_listener_type);
  }

  pub fn with_translate_listener_type(mut self, translate_listener_type: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialTranslationImplUgcLanguageDetectorProperties {
    self.translate_listener_type = Some(translate_listener_type);
    self
  }

  pub fn translate_listener_type(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.translate_listener_type.as_ref()
  }

  pub fn reset_translate_listener_type(&mut self) {
    self.translate_listener_type = None;
  }

  pub fn set_translate_property_list(&mut self, translate_property_list: ::models::ConfigNodePropertyArray) {
    self.translate_property_list = Some(translate_property_list);
  }

  pub fn with_translate_property_list(mut self, translate_property_list: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialTranslationImplUgcLanguageDetectorProperties {
    self.translate_property_list = Some(translate_property_list);
    self
  }

  pub fn translate_property_list(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.translate_property_list.as_ref()
  }

  pub fn reset_translate_property_list(&mut self) {
    self.translate_property_list = None;
  }

  pub fn set_pool_size(&mut self, pool_size: ::models::ConfigNodePropertyInteger) {
    self.pool_size = Some(pool_size);
  }

  pub fn with_pool_size(mut self, pool_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialTranslationImplUgcLanguageDetectorProperties {
    self.pool_size = Some(pool_size);
    self
  }

  pub fn pool_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.pool_size.as_ref()
  }

  pub fn reset_pool_size(&mut self) {
    self.pool_size = None;
  }

  pub fn set_max_pool_size(&mut self, max_pool_size: ::models::ConfigNodePropertyInteger) {
    self.max_pool_size = Some(max_pool_size);
  }

  pub fn with_max_pool_size(mut self, max_pool_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialTranslationImplUgcLanguageDetectorProperties {
    self.max_pool_size = Some(max_pool_size);
    self
  }

  pub fn max_pool_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.max_pool_size.as_ref()
  }

  pub fn reset_max_pool_size(&mut self) {
    self.max_pool_size = None;
  }

  pub fn set_queue_size(&mut self, queue_size: ::models::ConfigNodePropertyInteger) {
    self.queue_size = Some(queue_size);
  }

  pub fn with_queue_size(mut self, queue_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialTranslationImplUgcLanguageDetectorProperties {
    self.queue_size = Some(queue_size);
    self
  }

  pub fn queue_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.queue_size.as_ref()
  }

  pub fn reset_queue_size(&mut self) {
    self.queue_size = None;
  }

  pub fn set_keep_alive_time(&mut self, keep_alive_time: ::models::ConfigNodePropertyInteger) {
    self.keep_alive_time = Some(keep_alive_time);
  }

  pub fn with_keep_alive_time(mut self, keep_alive_time: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialTranslationImplUgcLanguageDetectorProperties {
    self.keep_alive_time = Some(keep_alive_time);
    self
  }

  pub fn keep_alive_time(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.keep_alive_time.as_ref()
  }

  pub fn reset_keep_alive_time(&mut self) {
    self.keep_alive_time = None;
  }

}



