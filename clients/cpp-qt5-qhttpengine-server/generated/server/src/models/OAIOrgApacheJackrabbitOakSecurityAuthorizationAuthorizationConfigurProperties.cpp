/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties() {
    this->init();
}

OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::~OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties() {
    
}

void
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::init() {
    m_permissions_jr2_isSet = false;
    m_import_behavior_isSet = false;
    m_read_paths_isSet = false;
    m_administrative_principals_isSet = false;
    m_configuration_ranking_isSet = false;
}

void
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(permissions_jr2, json[QString("permissionsJr2")]);
    
    ::OpenAPI::fromJsonValue(import_behavior, json[QString("importBehavior")]);
    
    ::OpenAPI::fromJsonValue(read_paths, json[QString("readPaths")]);
    
    ::OpenAPI::fromJsonValue(administrative_principals, json[QString("administrativePrincipals")]);
    
    ::OpenAPI::fromJsonValue(configuration_ranking, json[QString("configurationRanking")]);
    
}

QString
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::asJsonObject() const {
    QJsonObject obj;
	if(permissions_jr2.isSet()){
        obj.insert(QString("permissionsJr2"), ::OpenAPI::toJsonValue(permissions_jr2));
    }
	if(import_behavior.isSet()){
        obj.insert(QString("importBehavior"), ::OpenAPI::toJsonValue(import_behavior));
    }
	if(read_paths.isSet()){
        obj.insert(QString("readPaths"), ::OpenAPI::toJsonValue(read_paths));
    }
	if(administrative_principals.isSet()){
        obj.insert(QString("administrativePrincipals"), ::OpenAPI::toJsonValue(administrative_principals));
    }
	if(configuration_ranking.isSet()){
        obj.insert(QString("configurationRanking"), ::OpenAPI::toJsonValue(configuration_ranking));
    }
    return obj;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getPermissionsJr2() const {
    return permissions_jr2;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setPermissionsJr2(const OAIConfigNodePropertyDropDown &permissions_jr2) {
    this->permissions_jr2 = permissions_jr2;
    this->m_permissions_jr2_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getImportBehavior() const {
    return import_behavior;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setImportBehavior(const OAIConfigNodePropertyDropDown &import_behavior) {
    this->import_behavior = import_behavior;
    this->m_import_behavior_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getReadPaths() const {
    return read_paths;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setReadPaths(const OAIConfigNodePropertyArray &read_paths) {
    this->read_paths = read_paths;
    this->m_read_paths_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getAdministrativePrincipals() const {
    return administrative_principals;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setAdministrativePrincipals(const OAIConfigNodePropertyArray &administrative_principals) {
    this->administrative_principals = administrative_principals;
    this->m_administrative_principals_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getConfigurationRanking() const {
    return configuration_ranking;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setConfigurationRanking(const OAIConfigNodePropertyInteger &configuration_ranking) {
    this->configuration_ranking = configuration_ranking;
    this->m_configuration_ranking_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(permissions_jr2.isSet()){ isObjectUpdated = true; break;}
    
        if(import_behavior.isSet()){ isObjectUpdated = true; break;}
    
        if(read_paths.isSet()){ isObjectUpdated = true; break;}
    
        if(administrative_principals.isSet()){ isObjectUpdated = true; break;}
    
        if(configuration_ranking.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

