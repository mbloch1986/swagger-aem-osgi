/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqWcmFoundationImplHTTPAuthHandlerProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqWcmFoundationImplHTTPAuthHandlerProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqWcmFoundationImplHTTPAuthHandlerProperties
    : public ModelBase
{
public:
    ComDayCqWcmFoundationImplHTTPAuthHandlerProperties();
    virtual ~ComDayCqWcmFoundationImplHTTPAuthHandlerProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComDayCqWcmFoundationImplHTTPAuthHandlerProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPath() const;
    bool pathIsSet() const;
    void unsetPath();
    void setPath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getAuthHttpNologin() const;
    bool authHttpNologinIsSet() const;
    void unsetAuth_http_nologin();
    void setAuthHttpNologin(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAuthHttpRealm() const;
    bool authHttpRealmIsSet() const;
    void unsetAuth_http_realm();
    void setAuthHttpRealm(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAuthDefaultLoginpage() const;
    bool authDefaultLoginpageIsSet() const;
    void unsetAuth_default_loginpage();
    void setAuthDefaultLoginpage(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getAuthCredForm() const;
    bool authCredFormIsSet() const;
    void unsetAuth_cred_form();
    void setAuthCredForm(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getAuthCredUtf8() const;
    bool authCredUtf8IsSet() const;
    void unsetAuth_cred_utf8();
    void setAuthCredUtf8(std::shared_ptr<ConfigNodePropertyArray> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Path;
    bool m_PathIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Auth_http_nologin;
    bool m_Auth_http_nologinIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Auth_http_realm;
    bool m_Auth_http_realmIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Auth_default_loginpage;
    bool m_Auth_default_loginpageIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Auth_cred_form;
    bool m_Auth_cred_formIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Auth_cred_utf8;
    bool m_Auth_cred_utf8IsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqWcmFoundationImplHTTPAuthHandlerProperties_H_ */
