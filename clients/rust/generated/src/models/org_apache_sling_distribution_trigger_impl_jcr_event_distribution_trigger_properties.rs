/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties {
  #[serde(rename = "name")]
  name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "path")]
  path: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "ignoredPathsPatterns")]
  ignored_paths_patterns: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "serviceName")]
  service_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "deep")]
  deep: Option<::models::ConfigNodePropertyBoolean>
}

impl OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties {
  pub fn new() -> OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties {
    OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties {
      name: None,
      path: None,
      ignored_paths_patterns: None,
      service_name: None,
      deep: None
    }
  }

  pub fn set_name(&mut self, name: ::models::ConfigNodePropertyString) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_path(&mut self, path: ::models::ConfigNodePropertyString) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_ignored_paths_patterns(&mut self, ignored_paths_patterns: ::models::ConfigNodePropertyArray) {
    self.ignored_paths_patterns = Some(ignored_paths_patterns);
  }

  pub fn with_ignored_paths_patterns(mut self, ignored_paths_patterns: ::models::ConfigNodePropertyArray) -> OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties {
    self.ignored_paths_patterns = Some(ignored_paths_patterns);
    self
  }

  pub fn ignored_paths_patterns(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.ignored_paths_patterns.as_ref()
  }

  pub fn reset_ignored_paths_patterns(&mut self) {
    self.ignored_paths_patterns = None;
  }

  pub fn set_service_name(&mut self, service_name: ::models::ConfigNodePropertyString) {
    self.service_name = Some(service_name);
  }

  pub fn with_service_name(mut self, service_name: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties {
    self.service_name = Some(service_name);
    self
  }

  pub fn service_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.service_name.as_ref()
  }

  pub fn reset_service_name(&mut self) {
    self.service_name = None;
  }

  pub fn set_deep(&mut self, deep: ::models::ConfigNodePropertyBoolean) {
    self.deep = Some(deep);
  }

  pub fn with_deep(mut self, deep: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties {
    self.deep = Some(deep);
    self
  }

  pub fn deep(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.deep.as_ref()
  }

  pub fn reset_deep(&mut self) {
    self.deep = None;
  }

}



