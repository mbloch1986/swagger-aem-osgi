/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties()
{
    m_NameIsSet = false;
    m_PackageBuilder_targetIsSet = false;
}

OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::~OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties()
{
}

void OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_PackageBuilder_targetIsSet)
    {
        val[utility::conversions::to_string_t("packageBuilder.target")] = ModelBase::toJson(m_PackageBuilder_target);
    }

    return val;
}

void OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        if(!val[utility::conversions::to_string_t("name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("name")]);
            setName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("packageBuilder.target")))
    {
        if(!val[utility::conversions::to_string_t("packageBuilder.target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("packageBuilder.target")]);
            setPackageBuilderTarget( newItem );
        }
    }
}

void OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        if (m_Name.get())
        {
            m_Name->toMultipart(multipart, utility::conversions::to_string_t("name."));
        }
    }
    if(m_PackageBuilder_targetIsSet)
    {
        if (m_PackageBuilder_target.get())
        {
            m_PackageBuilder_target->toMultipart(multipart, utility::conversions::to_string_t("packageBuilder.target."));
        }
    }
}

void OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("name."));
            setName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("packageBuilder.target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("packageBuilder.target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("packageBuilder.target."));
            setPackageBuilderTarget( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::getName() const
{
    return m_Name;
}


void OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::setName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::nameIsSet() const
{
    return m_NameIsSet;
}

void OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::unsetName()
{
    m_NameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::getPackageBuilderTarget() const
{
    return m_PackageBuilder_target;
}


void OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::setPackageBuilderTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_PackageBuilder_target = value;
    m_PackageBuilder_targetIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::packageBuilderTargetIsSet() const
{
    return m_PackageBuilder_targetIsSet;
}

void OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties::unsetPackageBuilder_target()
{
    m_PackageBuilder_targetIsSet = false;
}

}
}
}
}

