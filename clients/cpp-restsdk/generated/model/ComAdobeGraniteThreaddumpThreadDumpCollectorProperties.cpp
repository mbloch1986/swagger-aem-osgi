/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteThreaddumpThreadDumpCollectorProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::ComAdobeGraniteThreaddumpThreadDumpCollectorProperties()
{
    m_Scheduler_periodIsSet = false;
    m_Scheduler_runOnIsSet = false;
    m_Granite_threaddump_enabledIsSet = false;
    m_Granite_threaddump_dumpsPerFileIsSet = false;
    m_Granite_threaddump_enableGzipCompressionIsSet = false;
    m_Granite_threaddump_enableDirectoriesCompressionIsSet = false;
    m_Granite_threaddump_enableJStackIsSet = false;
    m_Granite_threaddump_maxBackupDaysIsSet = false;
    m_Granite_threaddump_backupCleanTriggerIsSet = false;
}

ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::~ComAdobeGraniteThreaddumpThreadDumpCollectorProperties()
{
}

void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Scheduler_periodIsSet)
    {
        val[utility::conversions::to_string_t("scheduler.period")] = ModelBase::toJson(m_Scheduler_period);
    }
    if(m_Scheduler_runOnIsSet)
    {
        val[utility::conversions::to_string_t("scheduler.runOn")] = ModelBase::toJson(m_Scheduler_runOn);
    }
    if(m_Granite_threaddump_enabledIsSet)
    {
        val[utility::conversions::to_string_t("granite.threaddump.enabled")] = ModelBase::toJson(m_Granite_threaddump_enabled);
    }
    if(m_Granite_threaddump_dumpsPerFileIsSet)
    {
        val[utility::conversions::to_string_t("granite.threaddump.dumpsPerFile")] = ModelBase::toJson(m_Granite_threaddump_dumpsPerFile);
    }
    if(m_Granite_threaddump_enableGzipCompressionIsSet)
    {
        val[utility::conversions::to_string_t("granite.threaddump.enableGzipCompression")] = ModelBase::toJson(m_Granite_threaddump_enableGzipCompression);
    }
    if(m_Granite_threaddump_enableDirectoriesCompressionIsSet)
    {
        val[utility::conversions::to_string_t("granite.threaddump.enableDirectoriesCompression")] = ModelBase::toJson(m_Granite_threaddump_enableDirectoriesCompression);
    }
    if(m_Granite_threaddump_enableJStackIsSet)
    {
        val[utility::conversions::to_string_t("granite.threaddump.enableJStack")] = ModelBase::toJson(m_Granite_threaddump_enableJStack);
    }
    if(m_Granite_threaddump_maxBackupDaysIsSet)
    {
        val[utility::conversions::to_string_t("granite.threaddump.maxBackupDays")] = ModelBase::toJson(m_Granite_threaddump_maxBackupDays);
    }
    if(m_Granite_threaddump_backupCleanTriggerIsSet)
    {
        val[utility::conversions::to_string_t("granite.threaddump.backupCleanTrigger")] = ModelBase::toJson(m_Granite_threaddump_backupCleanTrigger);
    }

    return val;
}

void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("scheduler.period")))
    {
        if(!val[utility::conversions::to_string_t("scheduler.period")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduler.period")]);
            setSchedulerPeriod( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scheduler.runOn")))
    {
        if(!val[utility::conversions::to_string_t("scheduler.runOn")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduler.runOn")]);
            setSchedulerRunOn( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("granite.threaddump.enabled")))
    {
        if(!val[utility::conversions::to_string_t("granite.threaddump.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("granite.threaddump.enabled")]);
            setGraniteThreaddumpEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("granite.threaddump.dumpsPerFile")))
    {
        if(!val[utility::conversions::to_string_t("granite.threaddump.dumpsPerFile")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("granite.threaddump.dumpsPerFile")]);
            setGraniteThreaddumpDumpsPerFile( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("granite.threaddump.enableGzipCompression")))
    {
        if(!val[utility::conversions::to_string_t("granite.threaddump.enableGzipCompression")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("granite.threaddump.enableGzipCompression")]);
            setGraniteThreaddumpEnableGzipCompression( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("granite.threaddump.enableDirectoriesCompression")))
    {
        if(!val[utility::conversions::to_string_t("granite.threaddump.enableDirectoriesCompression")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("granite.threaddump.enableDirectoriesCompression")]);
            setGraniteThreaddumpEnableDirectoriesCompression( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("granite.threaddump.enableJStack")))
    {
        if(!val[utility::conversions::to_string_t("granite.threaddump.enableJStack")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("granite.threaddump.enableJStack")]);
            setGraniteThreaddumpEnableJStack( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("granite.threaddump.maxBackupDays")))
    {
        if(!val[utility::conversions::to_string_t("granite.threaddump.maxBackupDays")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("granite.threaddump.maxBackupDays")]);
            setGraniteThreaddumpMaxBackupDays( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("granite.threaddump.backupCleanTrigger")))
    {
        if(!val[utility::conversions::to_string_t("granite.threaddump.backupCleanTrigger")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("granite.threaddump.backupCleanTrigger")]);
            setGraniteThreaddumpBackupCleanTrigger( newItem );
        }
    }
}

void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Scheduler_periodIsSet)
    {
        if (m_Scheduler_period.get())
        {
            m_Scheduler_period->toMultipart(multipart, utility::conversions::to_string_t("scheduler.period."));
        }
    }
    if(m_Scheduler_runOnIsSet)
    {
        if (m_Scheduler_runOn.get())
        {
            m_Scheduler_runOn->toMultipart(multipart, utility::conversions::to_string_t("scheduler.runOn."));
        }
    }
    if(m_Granite_threaddump_enabledIsSet)
    {
        if (m_Granite_threaddump_enabled.get())
        {
            m_Granite_threaddump_enabled->toMultipart(multipart, utility::conversions::to_string_t("granite.threaddump.enabled."));
        }
    }
    if(m_Granite_threaddump_dumpsPerFileIsSet)
    {
        if (m_Granite_threaddump_dumpsPerFile.get())
        {
            m_Granite_threaddump_dumpsPerFile->toMultipart(multipart, utility::conversions::to_string_t("granite.threaddump.dumpsPerFile."));
        }
    }
    if(m_Granite_threaddump_enableGzipCompressionIsSet)
    {
        if (m_Granite_threaddump_enableGzipCompression.get())
        {
            m_Granite_threaddump_enableGzipCompression->toMultipart(multipart, utility::conversions::to_string_t("granite.threaddump.enableGzipCompression."));
        }
    }
    if(m_Granite_threaddump_enableDirectoriesCompressionIsSet)
    {
        if (m_Granite_threaddump_enableDirectoriesCompression.get())
        {
            m_Granite_threaddump_enableDirectoriesCompression->toMultipart(multipart, utility::conversions::to_string_t("granite.threaddump.enableDirectoriesCompression."));
        }
    }
    if(m_Granite_threaddump_enableJStackIsSet)
    {
        if (m_Granite_threaddump_enableJStack.get())
        {
            m_Granite_threaddump_enableJStack->toMultipart(multipart, utility::conversions::to_string_t("granite.threaddump.enableJStack."));
        }
    }
    if(m_Granite_threaddump_maxBackupDaysIsSet)
    {
        if (m_Granite_threaddump_maxBackupDays.get())
        {
            m_Granite_threaddump_maxBackupDays->toMultipart(multipart, utility::conversions::to_string_t("granite.threaddump.maxBackupDays."));
        }
    }
    if(m_Granite_threaddump_backupCleanTriggerIsSet)
    {
        if (m_Granite_threaddump_backupCleanTrigger.get())
        {
            m_Granite_threaddump_backupCleanTrigger->toMultipart(multipart, utility::conversions::to_string_t("granite.threaddump.backupCleanTrigger."));
        }
    }
}

void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("scheduler.period")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduler.period")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduler.period."));
            setSchedulerPeriod( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scheduler.runOn")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduler.runOn")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduler.runOn."));
            setSchedulerRunOn( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("granite.threaddump.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("granite.threaddump.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("granite.threaddump.enabled."));
            setGraniteThreaddumpEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("granite.threaddump.dumpsPerFile")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("granite.threaddump.dumpsPerFile")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("granite.threaddump.dumpsPerFile."));
            setGraniteThreaddumpDumpsPerFile( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("granite.threaddump.enableGzipCompression")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("granite.threaddump.enableGzipCompression")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("granite.threaddump.enableGzipCompression."));
            setGraniteThreaddumpEnableGzipCompression( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("granite.threaddump.enableDirectoriesCompression")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("granite.threaddump.enableDirectoriesCompression")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("granite.threaddump.enableDirectoriesCompression."));
            setGraniteThreaddumpEnableDirectoriesCompression( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("granite.threaddump.enableJStack")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("granite.threaddump.enableJStack")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("granite.threaddump.enableJStack."));
            setGraniteThreaddumpEnableJStack( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("granite.threaddump.maxBackupDays")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("granite.threaddump.maxBackupDays")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("granite.threaddump.maxBackupDays."));
            setGraniteThreaddumpMaxBackupDays( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("granite.threaddump.backupCleanTrigger")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("granite.threaddump.backupCleanTrigger")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("granite.threaddump.backupCleanTrigger."));
            setGraniteThreaddumpBackupCleanTrigger( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getSchedulerPeriod() const
{
    return m_Scheduler_period;
}


void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setSchedulerPeriod(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Scheduler_period = value;
    m_Scheduler_periodIsSet = true;
}
bool ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::schedulerPeriodIsSet() const
{
    return m_Scheduler_periodIsSet;
}

void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::unsetScheduler_period()
{
    m_Scheduler_periodIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getSchedulerRunOn() const
{
    return m_Scheduler_runOn;
}


void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setSchedulerRunOn(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Scheduler_runOn = value;
    m_Scheduler_runOnIsSet = true;
}
bool ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::schedulerRunOnIsSet() const
{
    return m_Scheduler_runOnIsSet;
}

void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::unsetScheduler_runOn()
{
    m_Scheduler_runOnIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpEnabled() const
{
    return m_Granite_threaddump_enabled;
}


void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Granite_threaddump_enabled = value;
    m_Granite_threaddump_enabledIsSet = true;
}
bool ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::graniteThreaddumpEnabledIsSet() const
{
    return m_Granite_threaddump_enabledIsSet;
}

void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::unsetGranite_threaddump_enabled()
{
    m_Granite_threaddump_enabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpDumpsPerFile() const
{
    return m_Granite_threaddump_dumpsPerFile;
}


void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpDumpsPerFile(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Granite_threaddump_dumpsPerFile = value;
    m_Granite_threaddump_dumpsPerFileIsSet = true;
}
bool ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::graniteThreaddumpDumpsPerFileIsSet() const
{
    return m_Granite_threaddump_dumpsPerFileIsSet;
}

void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::unsetGranite_threaddump_dumpsPerFile()
{
    m_Granite_threaddump_dumpsPerFileIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpEnableGzipCompression() const
{
    return m_Granite_threaddump_enableGzipCompression;
}


void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpEnableGzipCompression(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Granite_threaddump_enableGzipCompression = value;
    m_Granite_threaddump_enableGzipCompressionIsSet = true;
}
bool ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::graniteThreaddumpEnableGzipCompressionIsSet() const
{
    return m_Granite_threaddump_enableGzipCompressionIsSet;
}

void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::unsetGranite_threaddump_enableGzipCompression()
{
    m_Granite_threaddump_enableGzipCompressionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpEnableDirectoriesCompression() const
{
    return m_Granite_threaddump_enableDirectoriesCompression;
}


void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpEnableDirectoriesCompression(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Granite_threaddump_enableDirectoriesCompression = value;
    m_Granite_threaddump_enableDirectoriesCompressionIsSet = true;
}
bool ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::graniteThreaddumpEnableDirectoriesCompressionIsSet() const
{
    return m_Granite_threaddump_enableDirectoriesCompressionIsSet;
}

void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::unsetGranite_threaddump_enableDirectoriesCompression()
{
    m_Granite_threaddump_enableDirectoriesCompressionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpEnableJStack() const
{
    return m_Granite_threaddump_enableJStack;
}


void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpEnableJStack(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Granite_threaddump_enableJStack = value;
    m_Granite_threaddump_enableJStackIsSet = true;
}
bool ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::graniteThreaddumpEnableJStackIsSet() const
{
    return m_Granite_threaddump_enableJStackIsSet;
}

void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::unsetGranite_threaddump_enableJStack()
{
    m_Granite_threaddump_enableJStackIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpMaxBackupDays() const
{
    return m_Granite_threaddump_maxBackupDays;
}


void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpMaxBackupDays(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Granite_threaddump_maxBackupDays = value;
    m_Granite_threaddump_maxBackupDaysIsSet = true;
}
bool ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::graniteThreaddumpMaxBackupDaysIsSet() const
{
    return m_Granite_threaddump_maxBackupDaysIsSet;
}

void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::unsetGranite_threaddump_maxBackupDays()
{
    m_Granite_threaddump_maxBackupDaysIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpBackupCleanTrigger() const
{
    return m_Granite_threaddump_backupCleanTrigger;
}


void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpBackupCleanTrigger(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Granite_threaddump_backupCleanTrigger = value;
    m_Granite_threaddump_backupCleanTriggerIsSet = true;
}
bool ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::graniteThreaddumpBackupCleanTriggerIsSet() const
{
    return m_Granite_threaddump_backupCleanTriggerIsSet;
}

void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::unsetGranite_threaddump_backupCleanTrigger()
{
    m_Granite_threaddump_backupCleanTriggerIsSet = false;
}

}
}
}
}

