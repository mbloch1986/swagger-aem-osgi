/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties.h
 *
 * 
 */

#ifndef OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties_H_
#define OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyArray.h"
#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties: public OAIObject {
public:
    OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties();
    OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties(QString json);
    ~OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyString* getLinkExpiredPrefix();
    void setLinkExpiredPrefix(OAIConfigNodePropertyString* link_expired_prefix);

    OAIConfigNodePropertyBoolean* getLinkExpiredRemove();
    void setLinkExpiredRemove(OAIConfigNodePropertyBoolean* link_expired_remove);

    OAIConfigNodePropertyString* getLinkExpiredSuffix();
    void setLinkExpiredSuffix(OAIConfigNodePropertyString* link_expired_suffix);

    OAIConfigNodePropertyString* getLinkInvalidPrefix();
    void setLinkInvalidPrefix(OAIConfigNodePropertyString* link_invalid_prefix);

    OAIConfigNodePropertyBoolean* getLinkInvalidRemove();
    void setLinkInvalidRemove(OAIConfigNodePropertyBoolean* link_invalid_remove);

    OAIConfigNodePropertyString* getLinkInvalidSuffix();
    void setLinkInvalidSuffix(OAIConfigNodePropertyString* link_invalid_suffix);

    OAIConfigNodePropertyString* getLinkPredatedPrefix();
    void setLinkPredatedPrefix(OAIConfigNodePropertyString* link_predated_prefix);

    OAIConfigNodePropertyBoolean* getLinkPredatedRemove();
    void setLinkPredatedRemove(OAIConfigNodePropertyBoolean* link_predated_remove);

    OAIConfigNodePropertyString* getLinkPredatedSuffix();
    void setLinkPredatedSuffix(OAIConfigNodePropertyString* link_predated_suffix);

    OAIConfigNodePropertyArray* getLinkWcmmodes();
    void setLinkWcmmodes(OAIConfigNodePropertyArray* link_wcmmodes);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyString* link_expired_prefix;
    bool m_link_expired_prefix_isSet;

    OAIConfigNodePropertyBoolean* link_expired_remove;
    bool m_link_expired_remove_isSet;

    OAIConfigNodePropertyString* link_expired_suffix;
    bool m_link_expired_suffix_isSet;

    OAIConfigNodePropertyString* link_invalid_prefix;
    bool m_link_invalid_prefix_isSet;

    OAIConfigNodePropertyBoolean* link_invalid_remove;
    bool m_link_invalid_remove_isSet;

    OAIConfigNodePropertyString* link_invalid_suffix;
    bool m_link_invalid_suffix_isSet;

    OAIConfigNodePropertyString* link_predated_prefix;
    bool m_link_predated_prefix_isSet;

    OAIConfigNodePropertyBoolean* link_predated_remove;
    bool m_link_predated_remove_isSet;

    OAIConfigNodePropertyString* link_predated_suffix;
    bool m_link_predated_suffix_isSet;

    OAIConfigNodePropertyArray* link_wcmmodes;
    bool m_link_wcmmodes_isSet;

};

}

#endif /* OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties_H_ */
