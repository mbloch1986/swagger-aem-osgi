/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.h
 *
 * 
 */

#ifndef OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties_H_
#define OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties
{
public:
    OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties();
    virtual ~OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getName() const;
    void setName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTitle() const;
    void setTitle(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDetails() const;
    void setDetails(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnabled() const;
    void setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getServiceName() const;
    void setServiceName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getLogLevel() const;
    void setLogLevel(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getAllowedRoots() const;
    void setAllowedRoots(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getQueueProcessingEnabled() const;
    void setQueueProcessingEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPackageImporterEndpoints() const;
    void setPackageImporterEndpoints(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPassiveQueues() const;
    void setPassiveQueues(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPriorityQueues() const;
    void setPriorityQueues(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getRetryStrategy() const;
    void setRetryStrategy(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getRetryAttempts() const;
    void setRetryAttempts(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRequestAuthorizationStrategyTarget() const;
    void setRequestAuthorizationStrategyTarget(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTransportSecretProviderTarget() const;
    void setTransportSecretProviderTarget(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPackageBuilderTarget() const;
    void setPackageBuilderTarget(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTriggersTarget() const;
    void setTriggersTarget(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getQueueProvider() const;
    void setQueueProvider(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getAsyncDelivery() const;
    void setAsyncDelivery(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getHttpConnTimeout() const;
    void setHttpConnTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Name;
    std::shared_ptr<ConfigNodePropertyString> m_Title;
    std::shared_ptr<ConfigNodePropertyString> m_Details;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Enabled;
    std::shared_ptr<ConfigNodePropertyString> m_ServiceName;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Log_level;
    std::shared_ptr<ConfigNodePropertyArray> m_Allowed_roots;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Queue_processing_enabled;
    std::shared_ptr<ConfigNodePropertyArray> m_PackageImporter_endpoints;
    std::shared_ptr<ConfigNodePropertyArray> m_PassiveQueues;
    std::shared_ptr<ConfigNodePropertyArray> m_PriorityQueues;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Retry_strategy;
    std::shared_ptr<ConfigNodePropertyInteger> m_Retry_attempts;
    std::shared_ptr<ConfigNodePropertyString> m_RequestAuthorizationStrategy_target;
    std::shared_ptr<ConfigNodePropertyString> m_TransportSecretProvider_target;
    std::shared_ptr<ConfigNodePropertyString> m_PackageBuilder_target;
    std::shared_ptr<ConfigNodePropertyString> m_Triggers_target;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Queue_provider;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Async_delivery;
    std::shared_ptr<ConfigNodePropertyInteger> m_Http_conn_timeout;
};

}
}
}
}

#endif /* OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties_H_ */
