/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties : IEquatable<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties>
    { 
        /// <summary>
        /// Gets or Sets EmailName
        /// </summary>
        [DataMember(Name="email.name")]
        public ConfigNodePropertyString EmailName { get; set; }

        /// <summary>
        /// Gets or Sets EmailCreatePostFromReply
        /// </summary>
        [DataMember(Name="email.createPostFromReply")]
        public ConfigNodePropertyBoolean EmailCreatePostFromReply { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddCommentIdTo
        /// </summary>
        [DataMember(Name="email.addCommentIdTo")]
        public ConfigNodePropertyDropDown EmailAddCommentIdTo { get; set; }

        /// <summary>
        /// Gets or Sets EmailSubjectMaximumLength
        /// </summary>
        [DataMember(Name="email.subjectMaximumLength")]
        public ConfigNodePropertyInteger EmailSubjectMaximumLength { get; set; }

        /// <summary>
        /// Gets or Sets EmailReplyToAddress
        /// </summary>
        [DataMember(Name="email.replyToAddress")]
        public ConfigNodePropertyString EmailReplyToAddress { get; set; }

        /// <summary>
        /// Gets or Sets EmailReplyToDelimiter
        /// </summary>
        [DataMember(Name="email.replyToDelimiter")]
        public ConfigNodePropertyString EmailReplyToDelimiter { get; set; }

        /// <summary>
        /// Gets or Sets EmailTrackerIdPrefixInSubject
        /// </summary>
        [DataMember(Name="email.trackerIdPrefixInSubject")]
        public ConfigNodePropertyString EmailTrackerIdPrefixInSubject { get; set; }

        /// <summary>
        /// Gets or Sets EmailTrackerIdPrefixInBody
        /// </summary>
        [DataMember(Name="email.trackerIdPrefixInBody")]
        public ConfigNodePropertyString EmailTrackerIdPrefixInBody { get; set; }

        /// <summary>
        /// Gets or Sets EmailAsHTML
        /// </summary>
        [DataMember(Name="email.asHTML")]
        public ConfigNodePropertyBoolean EmailAsHTML { get; set; }

        /// <summary>
        /// Gets or Sets EmailDefaultUserName
        /// </summary>
        [DataMember(Name="email.defaultUserName")]
        public ConfigNodePropertyString EmailDefaultUserName { get; set; }

        /// <summary>
        /// Gets or Sets EmailTemplatesRootPath
        /// </summary>
        [DataMember(Name="email.templates.rootPath")]
        public ConfigNodePropertyString EmailTemplatesRootPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {\n");
            sb.Append("  EmailName: ").Append(EmailName).Append("\n");
            sb.Append("  EmailCreatePostFromReply: ").Append(EmailCreatePostFromReply).Append("\n");
            sb.Append("  EmailAddCommentIdTo: ").Append(EmailAddCommentIdTo).Append("\n");
            sb.Append("  EmailSubjectMaximumLength: ").Append(EmailSubjectMaximumLength).Append("\n");
            sb.Append("  EmailReplyToAddress: ").Append(EmailReplyToAddress).Append("\n");
            sb.Append("  EmailReplyToDelimiter: ").Append(EmailReplyToDelimiter).Append("\n");
            sb.Append("  EmailTrackerIdPrefixInSubject: ").Append(EmailTrackerIdPrefixInSubject).Append("\n");
            sb.Append("  EmailTrackerIdPrefixInBody: ").Append(EmailTrackerIdPrefixInBody).Append("\n");
            sb.Append("  EmailAsHTML: ").Append(EmailAsHTML).Append("\n");
            sb.Append("  EmailDefaultUserName: ").Append(EmailDefaultUserName).Append("\n");
            sb.Append("  EmailTemplatesRootPath: ").Append(EmailTemplatesRootPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EmailName == other.EmailName ||
                    EmailName != null &&
                    EmailName.Equals(other.EmailName)
                ) && 
                (
                    EmailCreatePostFromReply == other.EmailCreatePostFromReply ||
                    EmailCreatePostFromReply != null &&
                    EmailCreatePostFromReply.Equals(other.EmailCreatePostFromReply)
                ) && 
                (
                    EmailAddCommentIdTo == other.EmailAddCommentIdTo ||
                    EmailAddCommentIdTo != null &&
                    EmailAddCommentIdTo.Equals(other.EmailAddCommentIdTo)
                ) && 
                (
                    EmailSubjectMaximumLength == other.EmailSubjectMaximumLength ||
                    EmailSubjectMaximumLength != null &&
                    EmailSubjectMaximumLength.Equals(other.EmailSubjectMaximumLength)
                ) && 
                (
                    EmailReplyToAddress == other.EmailReplyToAddress ||
                    EmailReplyToAddress != null &&
                    EmailReplyToAddress.Equals(other.EmailReplyToAddress)
                ) && 
                (
                    EmailReplyToDelimiter == other.EmailReplyToDelimiter ||
                    EmailReplyToDelimiter != null &&
                    EmailReplyToDelimiter.Equals(other.EmailReplyToDelimiter)
                ) && 
                (
                    EmailTrackerIdPrefixInSubject == other.EmailTrackerIdPrefixInSubject ||
                    EmailTrackerIdPrefixInSubject != null &&
                    EmailTrackerIdPrefixInSubject.Equals(other.EmailTrackerIdPrefixInSubject)
                ) && 
                (
                    EmailTrackerIdPrefixInBody == other.EmailTrackerIdPrefixInBody ||
                    EmailTrackerIdPrefixInBody != null &&
                    EmailTrackerIdPrefixInBody.Equals(other.EmailTrackerIdPrefixInBody)
                ) && 
                (
                    EmailAsHTML == other.EmailAsHTML ||
                    EmailAsHTML != null &&
                    EmailAsHTML.Equals(other.EmailAsHTML)
                ) && 
                (
                    EmailDefaultUserName == other.EmailDefaultUserName ||
                    EmailDefaultUserName != null &&
                    EmailDefaultUserName.Equals(other.EmailDefaultUserName)
                ) && 
                (
                    EmailTemplatesRootPath == other.EmailTemplatesRootPath ||
                    EmailTemplatesRootPath != null &&
                    EmailTemplatesRootPath.Equals(other.EmailTemplatesRootPath)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EmailName != null)
                    hashCode = hashCode * 59 + EmailName.GetHashCode();
                    if (EmailCreatePostFromReply != null)
                    hashCode = hashCode * 59 + EmailCreatePostFromReply.GetHashCode();
                    if (EmailAddCommentIdTo != null)
                    hashCode = hashCode * 59 + EmailAddCommentIdTo.GetHashCode();
                    if (EmailSubjectMaximumLength != null)
                    hashCode = hashCode * 59 + EmailSubjectMaximumLength.GetHashCode();
                    if (EmailReplyToAddress != null)
                    hashCode = hashCode * 59 + EmailReplyToAddress.GetHashCode();
                    if (EmailReplyToDelimiter != null)
                    hashCode = hashCode * 59 + EmailReplyToDelimiter.GetHashCode();
                    if (EmailTrackerIdPrefixInSubject != null)
                    hashCode = hashCode * 59 + EmailTrackerIdPrefixInSubject.GetHashCode();
                    if (EmailTrackerIdPrefixInBody != null)
                    hashCode = hashCode * 59 + EmailTrackerIdPrefixInBody.GetHashCode();
                    if (EmailAsHTML != null)
                    hashCode = hashCode * 59 + EmailAsHTML.GetHashCode();
                    if (EmailDefaultUserName != null)
                    hashCode = hashCode * 59 + EmailDefaultUserName.GetHashCode();
                    if (EmailTemplatesRootPath != null)
                    hashCode = hashCode * 59 + EmailTemplatesRootPath.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties left, ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties left, ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
