# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.config_node_property_boolean import ConfigNodePropertyBoolean  # noqa: F401,E501
from openapi_server import util


class ComAdobeAemTransactionCoreImplTransactionRecorderProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_transaction_recording_enabled: ConfigNodePropertyBoolean=None):  # noqa: E501
        """ComAdobeAemTransactionCoreImplTransactionRecorderProperties - a model defined in OpenAPI

        :param is_transaction_recording_enabled: The is_transaction_recording_enabled of this ComAdobeAemTransactionCoreImplTransactionRecorderProperties.  # noqa: E501
        :type is_transaction_recording_enabled: ConfigNodePropertyBoolean
        """
        self.openapi_types = {
            'is_transaction_recording_enabled': ConfigNodePropertyBoolean
        }

        self.attribute_map = {
            'is_transaction_recording_enabled': 'isTransactionRecordingEnabled'
        }

        self._is_transaction_recording_enabled = is_transaction_recording_enabled

    @classmethod
    def from_dict(cls, dikt) -> 'ComAdobeAemTransactionCoreImplTransactionRecorderProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The comAdobeAemTransactionCoreImplTransactionRecorderProperties of this ComAdobeAemTransactionCoreImplTransactionRecorderProperties.  # noqa: E501
        :rtype: ComAdobeAemTransactionCoreImplTransactionRecorderProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_transaction_recording_enabled(self) -> ConfigNodePropertyBoolean:
        """Gets the is_transaction_recording_enabled of this ComAdobeAemTransactionCoreImplTransactionRecorderProperties.


        :return: The is_transaction_recording_enabled of this ComAdobeAemTransactionCoreImplTransactionRecorderProperties.
        :rtype: ConfigNodePropertyBoolean
        """
        return self._is_transaction_recording_enabled

    @is_transaction_recording_enabled.setter
    def is_transaction_recording_enabled(self, is_transaction_recording_enabled: ConfigNodePropertyBoolean):
        """Sets the is_transaction_recording_enabled of this ComAdobeAemTransactionCoreImplTransactionRecorderProperties.


        :param is_transaction_recording_enabled: The is_transaction_recording_enabled of this ComAdobeAemTransactionCoreImplTransactionRecorderProperties.
        :type is_transaction_recording_enabled: ConfigNodePropertyBoolean
        """

        self._is_transaction_recording_enabled = is_transaction_recording_enabled
