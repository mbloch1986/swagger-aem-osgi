/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties::OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties::OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties() {
    this->init();
}

OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties::~OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties() {
    
}

void
OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties::init() {
    m_get_cache_expiration_unit_isSet = false;
    m_get_cache_expiration_value_isSet = false;
}

void
OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(get_cache_expiration_unit, json[QString("getCacheExpirationUnit")]);
    
    ::OpenAPI::fromJsonValue(get_cache_expiration_value, json[QString("getCacheExpirationValue")]);
    
}

QString
OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties::asJsonObject() const {
    QJsonObject obj;
	if(get_cache_expiration_unit.isSet()){
        obj.insert(QString("getCacheExpirationUnit"), ::OpenAPI::toJsonValue(get_cache_expiration_unit));
    }
	if(get_cache_expiration_value.isSet()){
        obj.insert(QString("getCacheExpirationValue"), ::OpenAPI::toJsonValue(get_cache_expiration_value));
    }
    return obj;
}

OAIConfigNodePropertyDropDown
OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties::getGetCacheExpirationUnit() const {
    return get_cache_expiration_unit;
}
void
OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties::setGetCacheExpirationUnit(const OAIConfigNodePropertyDropDown &get_cache_expiration_unit) {
    this->get_cache_expiration_unit = get_cache_expiration_unit;
    this->m_get_cache_expiration_unit_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties::getGetCacheExpirationValue() const {
    return get_cache_expiration_value;
}
void
OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties::setGetCacheExpirationValue(const OAIConfigNodePropertyInteger &get_cache_expiration_value) {
    this->get_cache_expiration_value = get_cache_expiration_value;
    this->m_get_cache_expiration_value_isSet = true;
}


bool
OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(get_cache_expiration_unit.isSet()){ isObjectUpdated = true; break;}
    
        if(get_cache_expiration_value.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

