<?php
/**
 * OrgApacheSlingEngineParametersProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrgApacheSlingEngineParametersProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrgApacheSlingEngineParametersProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orgApacheSlingEngineParametersProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sling_default_parameter_encoding' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'sling_default_max_parameters' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'file_location' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'file_threshold' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'file_max' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'request_max' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'sling_default_parameter_check_for_additional_container_parameters' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'sling_default_parameter_encoding' => null,
        'sling_default_max_parameters' => null,
        'file_location' => null,
        'file_threshold' => null,
        'file_max' => null,
        'request_max' => null,
        'sling_default_parameter_check_for_additional_container_parameters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sling_default_parameter_encoding' => 'sling.default.parameter.encoding',
        'sling_default_max_parameters' => 'sling.default.max.parameters',
        'file_location' => 'file.location',
        'file_threshold' => 'file.threshold',
        'file_max' => 'file.max',
        'request_max' => 'request.max',
        'sling_default_parameter_check_for_additional_container_parameters' => 'sling.default.parameter.checkForAdditionalContainerParameters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sling_default_parameter_encoding' => 'setSlingDefaultParameterEncoding',
        'sling_default_max_parameters' => 'setSlingDefaultMaxParameters',
        'file_location' => 'setFileLocation',
        'file_threshold' => 'setFileThreshold',
        'file_max' => 'setFileMax',
        'request_max' => 'setRequestMax',
        'sling_default_parameter_check_for_additional_container_parameters' => 'setSlingDefaultParameterCheckForAdditionalContainerParameters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sling_default_parameter_encoding' => 'getSlingDefaultParameterEncoding',
        'sling_default_max_parameters' => 'getSlingDefaultMaxParameters',
        'file_location' => 'getFileLocation',
        'file_threshold' => 'getFileThreshold',
        'file_max' => 'getFileMax',
        'request_max' => 'getRequestMax',
        'sling_default_parameter_check_for_additional_container_parameters' => 'getSlingDefaultParameterCheckForAdditionalContainerParameters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sling_default_parameter_encoding'] = isset($data['sling_default_parameter_encoding']) ? $data['sling_default_parameter_encoding'] : null;
        $this->container['sling_default_max_parameters'] = isset($data['sling_default_max_parameters']) ? $data['sling_default_max_parameters'] : null;
        $this->container['file_location'] = isset($data['file_location']) ? $data['file_location'] : null;
        $this->container['file_threshold'] = isset($data['file_threshold']) ? $data['file_threshold'] : null;
        $this->container['file_max'] = isset($data['file_max']) ? $data['file_max'] : null;
        $this->container['request_max'] = isset($data['request_max']) ? $data['request_max'] : null;
        $this->container['sling_default_parameter_check_for_additional_container_parameters'] = isset($data['sling_default_parameter_check_for_additional_container_parameters']) ? $data['sling_default_parameter_check_for_additional_container_parameters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sling_default_parameter_encoding
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getSlingDefaultParameterEncoding()
    {
        return $this->container['sling_default_parameter_encoding'];
    }

    /**
     * Sets sling_default_parameter_encoding
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $sling_default_parameter_encoding sling_default_parameter_encoding
     *
     * @return $this
     */
    public function setSlingDefaultParameterEncoding($sling_default_parameter_encoding)
    {
        $this->container['sling_default_parameter_encoding'] = $sling_default_parameter_encoding;

        return $this;
    }

    /**
     * Gets sling_default_max_parameters
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getSlingDefaultMaxParameters()
    {
        return $this->container['sling_default_max_parameters'];
    }

    /**
     * Sets sling_default_max_parameters
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $sling_default_max_parameters sling_default_max_parameters
     *
     * @return $this
     */
    public function setSlingDefaultMaxParameters($sling_default_max_parameters)
    {
        $this->container['sling_default_max_parameters'] = $sling_default_max_parameters;

        return $this;
    }

    /**
     * Gets file_location
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getFileLocation()
    {
        return $this->container['file_location'];
    }

    /**
     * Sets file_location
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $file_location file_location
     *
     * @return $this
     */
    public function setFileLocation($file_location)
    {
        $this->container['file_location'] = $file_location;

        return $this;
    }

    /**
     * Gets file_threshold
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getFileThreshold()
    {
        return $this->container['file_threshold'];
    }

    /**
     * Sets file_threshold
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $file_threshold file_threshold
     *
     * @return $this
     */
    public function setFileThreshold($file_threshold)
    {
        $this->container['file_threshold'] = $file_threshold;

        return $this;
    }

    /**
     * Gets file_max
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getFileMax()
    {
        return $this->container['file_max'];
    }

    /**
     * Sets file_max
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $file_max file_max
     *
     * @return $this
     */
    public function setFileMax($file_max)
    {
        $this->container['file_max'] = $file_max;

        return $this;
    }

    /**
     * Gets request_max
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getRequestMax()
    {
        return $this->container['request_max'];
    }

    /**
     * Sets request_max
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $request_max request_max
     *
     * @return $this
     */
    public function setRequestMax($request_max)
    {
        $this->container['request_max'] = $request_max;

        return $this;
    }

    /**
     * Gets sling_default_parameter_check_for_additional_container_parameters
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getSlingDefaultParameterCheckForAdditionalContainerParameters()
    {
        return $this->container['sling_default_parameter_check_for_additional_container_parameters'];
    }

    /**
     * Sets sling_default_parameter_check_for_additional_container_parameters
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $sling_default_parameter_check_for_additional_container_parameters sling_default_parameter_check_for_additional_container_parameters
     *
     * @return $this
     */
    public function setSlingDefaultParameterCheckForAdditionalContainerParameters($sling_default_parameter_check_for_additional_container_parameters)
    {
        $this->container['sling_default_parameter_check_for_additional_container_parameters'] = $sling_default_parameter_check_for_additional_container_parameters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


