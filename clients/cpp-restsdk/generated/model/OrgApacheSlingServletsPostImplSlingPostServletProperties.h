/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingServletsPostImplSlingPostServletProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingServletsPostImplSlingPostServletProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingServletsPostImplSlingPostServletProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingServletsPostImplSlingPostServletProperties
    : public ModelBase
{
public:
    OrgApacheSlingServletsPostImplSlingPostServletProperties();
    virtual ~OrgApacheSlingServletsPostImplSlingPostServletProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingServletsPostImplSlingPostServletProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getServletPostDateFormats() const;
    bool servletPostDateFormatsIsSet() const;
    void unsetServlet_post_dateFormats();
    void setServletPostDateFormats(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getServletPostNodeNameHints() const;
    bool servletPostNodeNameHintsIsSet() const;
    void unsetServlet_post_nodeNameHints();
    void setServletPostNodeNameHints(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getServletPostNodeNameMaxLength() const;
    bool servletPostNodeNameMaxLengthIsSet() const;
    void unsetServlet_post_nodeNameMaxLength();
    void setServletPostNodeNameMaxLength(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getServletPostCheckinNewVersionableNodes() const;
    bool servletPostCheckinNewVersionableNodesIsSet() const;
    void unsetServlet_post_checkinNewVersionableNodes();
    void setServletPostCheckinNewVersionableNodes(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getServletPostAutoCheckout() const;
    bool servletPostAutoCheckoutIsSet() const;
    void unsetServlet_post_autoCheckout();
    void setServletPostAutoCheckout(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getServletPostAutoCheckin() const;
    bool servletPostAutoCheckinIsSet() const;
    void unsetServlet_post_autoCheckin();
    void setServletPostAutoCheckin(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getServletPostIgnorePattern() const;
    bool servletPostIgnorePatternIsSet() const;
    void unsetServlet_post_ignorePattern();
    void setServletPostIgnorePattern(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyArray> m_Servlet_post_dateFormats;
    bool m_Servlet_post_dateFormatsIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Servlet_post_nodeNameHints;
    bool m_Servlet_post_nodeNameHintsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Servlet_post_nodeNameMaxLength;
    bool m_Servlet_post_nodeNameMaxLengthIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Servlet_post_checkinNewVersionableNodes;
    bool m_Servlet_post_checkinNewVersionableNodesIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Servlet_post_autoCheckout;
    bool m_Servlet_post_autoCheckoutIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Servlet_post_autoCheckin;
    bool m_Servlet_post_autoCheckinIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Servlet_post_ignorePattern;
    bool m_Servlet_post_ignorePatternIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingServletsPostImplSlingPostServletProperties_H_ */
