/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqScreensDeviceImplDeviceServiceProperties {
  #[serde(rename = "com.adobe.aem.screens.player.pingfrequency")]
  com_adobe_aem_screens_player_pingfrequency: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "com.adobe.aem.screens.device.pasword.specialchars")]
  com_adobe_aem_screens_device_pasword_specialchars: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.aem.screens.device.pasword.minlowercasechars")]
  com_adobe_aem_screens_device_pasword_minlowercasechars: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "com.adobe.aem.screens.device.pasword.minuppercasechars")]
  com_adobe_aem_screens_device_pasword_minuppercasechars: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "com.adobe.aem.screens.device.pasword.minnumberchars")]
  com_adobe_aem_screens_device_pasword_minnumberchars: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "com.adobe.aem.screens.device.pasword.minspecialchars")]
  com_adobe_aem_screens_device_pasword_minspecialchars: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "com.adobe.aem.screens.device.pasword.minlength")]
  com_adobe_aem_screens_device_pasword_minlength: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeCqScreensDeviceImplDeviceServiceProperties {
  pub fn new() -> ComAdobeCqScreensDeviceImplDeviceServiceProperties {
    ComAdobeCqScreensDeviceImplDeviceServiceProperties {
      com_adobe_aem_screens_player_pingfrequency: None,
      com_adobe_aem_screens_device_pasword_specialchars: None,
      com_adobe_aem_screens_device_pasword_minlowercasechars: None,
      com_adobe_aem_screens_device_pasword_minuppercasechars: None,
      com_adobe_aem_screens_device_pasword_minnumberchars: None,
      com_adobe_aem_screens_device_pasword_minspecialchars: None,
      com_adobe_aem_screens_device_pasword_minlength: None
    }
  }

  pub fn set_com_adobe_aem_screens_player_pingfrequency(&mut self, com_adobe_aem_screens_player_pingfrequency: ::models::ConfigNodePropertyInteger) {
    self.com_adobe_aem_screens_player_pingfrequency = Some(com_adobe_aem_screens_player_pingfrequency);
  }

  pub fn with_com_adobe_aem_screens_player_pingfrequency(mut self, com_adobe_aem_screens_player_pingfrequency: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensDeviceImplDeviceServiceProperties {
    self.com_adobe_aem_screens_player_pingfrequency = Some(com_adobe_aem_screens_player_pingfrequency);
    self
  }

  pub fn com_adobe_aem_screens_player_pingfrequency(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.com_adobe_aem_screens_player_pingfrequency.as_ref()
  }

  pub fn reset_com_adobe_aem_screens_player_pingfrequency(&mut self) {
    self.com_adobe_aem_screens_player_pingfrequency = None;
  }

  pub fn set_com_adobe_aem_screens_device_pasword_specialchars(&mut self, com_adobe_aem_screens_device_pasword_specialchars: ::models::ConfigNodePropertyString) {
    self.com_adobe_aem_screens_device_pasword_specialchars = Some(com_adobe_aem_screens_device_pasword_specialchars);
  }

  pub fn with_com_adobe_aem_screens_device_pasword_specialchars(mut self, com_adobe_aem_screens_device_pasword_specialchars: ::models::ConfigNodePropertyString) -> ComAdobeCqScreensDeviceImplDeviceServiceProperties {
    self.com_adobe_aem_screens_device_pasword_specialchars = Some(com_adobe_aem_screens_device_pasword_specialchars);
    self
  }

  pub fn com_adobe_aem_screens_device_pasword_specialchars(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_aem_screens_device_pasword_specialchars.as_ref()
  }

  pub fn reset_com_adobe_aem_screens_device_pasword_specialchars(&mut self) {
    self.com_adobe_aem_screens_device_pasword_specialchars = None;
  }

  pub fn set_com_adobe_aem_screens_device_pasword_minlowercasechars(&mut self, com_adobe_aem_screens_device_pasword_minlowercasechars: ::models::ConfigNodePropertyInteger) {
    self.com_adobe_aem_screens_device_pasword_minlowercasechars = Some(com_adobe_aem_screens_device_pasword_minlowercasechars);
  }

  pub fn with_com_adobe_aem_screens_device_pasword_minlowercasechars(mut self, com_adobe_aem_screens_device_pasword_minlowercasechars: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensDeviceImplDeviceServiceProperties {
    self.com_adobe_aem_screens_device_pasword_minlowercasechars = Some(com_adobe_aem_screens_device_pasword_minlowercasechars);
    self
  }

  pub fn com_adobe_aem_screens_device_pasword_minlowercasechars(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.com_adobe_aem_screens_device_pasword_minlowercasechars.as_ref()
  }

  pub fn reset_com_adobe_aem_screens_device_pasword_minlowercasechars(&mut self) {
    self.com_adobe_aem_screens_device_pasword_minlowercasechars = None;
  }

  pub fn set_com_adobe_aem_screens_device_pasword_minuppercasechars(&mut self, com_adobe_aem_screens_device_pasword_minuppercasechars: ::models::ConfigNodePropertyInteger) {
    self.com_adobe_aem_screens_device_pasword_minuppercasechars = Some(com_adobe_aem_screens_device_pasword_minuppercasechars);
  }

  pub fn with_com_adobe_aem_screens_device_pasword_minuppercasechars(mut self, com_adobe_aem_screens_device_pasword_minuppercasechars: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensDeviceImplDeviceServiceProperties {
    self.com_adobe_aem_screens_device_pasword_minuppercasechars = Some(com_adobe_aem_screens_device_pasword_minuppercasechars);
    self
  }

  pub fn com_adobe_aem_screens_device_pasword_minuppercasechars(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.com_adobe_aem_screens_device_pasword_minuppercasechars.as_ref()
  }

  pub fn reset_com_adobe_aem_screens_device_pasword_minuppercasechars(&mut self) {
    self.com_adobe_aem_screens_device_pasword_minuppercasechars = None;
  }

  pub fn set_com_adobe_aem_screens_device_pasword_minnumberchars(&mut self, com_adobe_aem_screens_device_pasword_minnumberchars: ::models::ConfigNodePropertyInteger) {
    self.com_adobe_aem_screens_device_pasword_minnumberchars = Some(com_adobe_aem_screens_device_pasword_minnumberchars);
  }

  pub fn with_com_adobe_aem_screens_device_pasword_minnumberchars(mut self, com_adobe_aem_screens_device_pasword_minnumberchars: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensDeviceImplDeviceServiceProperties {
    self.com_adobe_aem_screens_device_pasword_minnumberchars = Some(com_adobe_aem_screens_device_pasword_minnumberchars);
    self
  }

  pub fn com_adobe_aem_screens_device_pasword_minnumberchars(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.com_adobe_aem_screens_device_pasword_minnumberchars.as_ref()
  }

  pub fn reset_com_adobe_aem_screens_device_pasword_minnumberchars(&mut self) {
    self.com_adobe_aem_screens_device_pasword_minnumberchars = None;
  }

  pub fn set_com_adobe_aem_screens_device_pasword_minspecialchars(&mut self, com_adobe_aem_screens_device_pasword_minspecialchars: ::models::ConfigNodePropertyInteger) {
    self.com_adobe_aem_screens_device_pasword_minspecialchars = Some(com_adobe_aem_screens_device_pasword_minspecialchars);
  }

  pub fn with_com_adobe_aem_screens_device_pasword_minspecialchars(mut self, com_adobe_aem_screens_device_pasword_minspecialchars: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensDeviceImplDeviceServiceProperties {
    self.com_adobe_aem_screens_device_pasword_minspecialchars = Some(com_adobe_aem_screens_device_pasword_minspecialchars);
    self
  }

  pub fn com_adobe_aem_screens_device_pasword_minspecialchars(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.com_adobe_aem_screens_device_pasword_minspecialchars.as_ref()
  }

  pub fn reset_com_adobe_aem_screens_device_pasword_minspecialchars(&mut self) {
    self.com_adobe_aem_screens_device_pasword_minspecialchars = None;
  }

  pub fn set_com_adobe_aem_screens_device_pasword_minlength(&mut self, com_adobe_aem_screens_device_pasword_minlength: ::models::ConfigNodePropertyInteger) {
    self.com_adobe_aem_screens_device_pasword_minlength = Some(com_adobe_aem_screens_device_pasword_minlength);
  }

  pub fn with_com_adobe_aem_screens_device_pasword_minlength(mut self, com_adobe_aem_screens_device_pasword_minlength: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensDeviceImplDeviceServiceProperties {
    self.com_adobe_aem_screens_device_pasword_minlength = Some(com_adobe_aem_screens_device_pasword_minlength);
    self
  }

  pub fn com_adobe_aem_screens_device_pasword_minlength(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.com_adobe_aem_screens_device_pasword_minlength.as_ref()
  }

  pub fn reset_com_adobe_aem_screens_device_pasword_minlength(&mut self) {
    self.com_adobe_aem_screens_device_pasword_minlength = None;
  }

}



