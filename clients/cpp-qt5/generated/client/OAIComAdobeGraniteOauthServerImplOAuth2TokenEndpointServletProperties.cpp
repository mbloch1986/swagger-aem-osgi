/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties::OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties::OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties() {
    init();
}

OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties::~OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties::init() {
    oauth_issuer = new OAIConfigNodePropertyString();
    m_oauth_issuer_isSet = false;
    oauth_access_token_expires_in = new OAIConfigNodePropertyString();
    m_oauth_access_token_expires_in_isSet = false;
    osgi_http_whiteboard_servlet_pattern = new OAIConfigNodePropertyString();
    m_osgi_http_whiteboard_servlet_pattern_isSet = false;
    osgi_http_whiteboard_context_select = new OAIConfigNodePropertyString();
    m_osgi_http_whiteboard_context_select_isSet = false;
}

void
OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties::cleanup() {
    if(oauth_issuer != nullptr) { 
        delete oauth_issuer;
    }
    if(oauth_access_token_expires_in != nullptr) { 
        delete oauth_access_token_expires_in;
    }
    if(osgi_http_whiteboard_servlet_pattern != nullptr) { 
        delete osgi_http_whiteboard_servlet_pattern;
    }
    if(osgi_http_whiteboard_context_select != nullptr) { 
        delete osgi_http_whiteboard_context_select;
    }
}

OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties*
OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&oauth_issuer, pJson["oauth.issuer"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&oauth_access_token_expires_in, pJson["oauth.access.token.expires.in"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&osgi_http_whiteboard_servlet_pattern, pJson["osgi.http.whiteboard.servlet.pattern"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&osgi_http_whiteboard_context_select, pJson["osgi.http.whiteboard.context.select"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties::asJsonObject() {
    QJsonObject obj;
    if((oauth_issuer != nullptr) && (oauth_issuer->isSet())){
        toJsonValue(QString("oauth.issuer"), oauth_issuer, obj, QString("OAIConfigNodePropertyString"));
    }
    if((oauth_access_token_expires_in != nullptr) && (oauth_access_token_expires_in->isSet())){
        toJsonValue(QString("oauth.access.token.expires.in"), oauth_access_token_expires_in, obj, QString("OAIConfigNodePropertyString"));
    }
    if((osgi_http_whiteboard_servlet_pattern != nullptr) && (osgi_http_whiteboard_servlet_pattern->isSet())){
        toJsonValue(QString("osgi.http.whiteboard.servlet.pattern"), osgi_http_whiteboard_servlet_pattern, obj, QString("OAIConfigNodePropertyString"));
    }
    if((osgi_http_whiteboard_context_select != nullptr) && (osgi_http_whiteboard_context_select->isSet())){
        toJsonValue(QString("osgi.http.whiteboard.context.select"), osgi_http_whiteboard_context_select, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties::getOauthIssuer() {
    return oauth_issuer;
}
void
OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties::setOauthIssuer(OAIConfigNodePropertyString* oauth_issuer) {
    this->oauth_issuer = oauth_issuer;
    this->m_oauth_issuer_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties::getOauthAccessTokenExpiresIn() {
    return oauth_access_token_expires_in;
}
void
OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties::setOauthAccessTokenExpiresIn(OAIConfigNodePropertyString* oauth_access_token_expires_in) {
    this->oauth_access_token_expires_in = oauth_access_token_expires_in;
    this->m_oauth_access_token_expires_in_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties::getOsgiHttpWhiteboardServletPattern() {
    return osgi_http_whiteboard_servlet_pattern;
}
void
OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties::setOsgiHttpWhiteboardServletPattern(OAIConfigNodePropertyString* osgi_http_whiteboard_servlet_pattern) {
    this->osgi_http_whiteboard_servlet_pattern = osgi_http_whiteboard_servlet_pattern;
    this->m_osgi_http_whiteboard_servlet_pattern_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties::getOsgiHttpWhiteboardContextSelect() {
    return osgi_http_whiteboard_context_select;
}
void
OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties::setOsgiHttpWhiteboardContextSelect(OAIConfigNodePropertyString* osgi_http_whiteboard_context_select) {
    this->osgi_http_whiteboard_context_select = osgi_http_whiteboard_context_select;
    this->m_osgi_http_whiteboard_context_select_isSet = true;
}


bool
OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(oauth_issuer != nullptr && oauth_issuer->isSet()){ isObjectUpdated = true; break;}
        if(oauth_access_token_expires_in != nullptr && oauth_access_token_expires_in->isSet()){ isObjectUpdated = true; break;}
        if(osgi_http_whiteboard_servlet_pattern != nullptr && osgi_http_whiteboard_servlet_pattern->isSet()){ isObjectUpdated = true; break;}
        if(osgi_http_whiteboard_context_select != nullptr && osgi_http_whiteboard_context_select->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

