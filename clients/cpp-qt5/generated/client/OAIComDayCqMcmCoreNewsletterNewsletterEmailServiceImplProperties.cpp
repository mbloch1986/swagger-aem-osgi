/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties() {
    init();
}

OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::~OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties() {
    this->cleanup();
}

void
OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::init() {
    from_address = new OAIConfigNodePropertyString();
    m_from_address_isSet = false;
    sender_host = new OAIConfigNodePropertyString();
    m_sender_host_isSet = false;
    max_bounce_count = new OAIConfigNodePropertyString();
    m_max_bounce_count_isSet = false;
}

void
OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::cleanup() {
    if(from_address != nullptr) { 
        delete from_address;
    }
    if(sender_host != nullptr) { 
        delete sender_host;
    }
    if(max_bounce_count != nullptr) { 
        delete max_bounce_count;
    }
}

OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties*
OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&from_address, pJson["from.address"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&sender_host, pJson["sender.host"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&max_bounce_count, pJson["max.bounce.count"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::asJsonObject() {
    QJsonObject obj;
    if((from_address != nullptr) && (from_address->isSet())){
        toJsonValue(QString("from.address"), from_address, obj, QString("OAIConfigNodePropertyString"));
    }
    if((sender_host != nullptr) && (sender_host->isSet())){
        toJsonValue(QString("sender.host"), sender_host, obj, QString("OAIConfigNodePropertyString"));
    }
    if((max_bounce_count != nullptr) && (max_bounce_count->isSet())){
        toJsonValue(QString("max.bounce.count"), max_bounce_count, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::getFromAddress() {
    return from_address;
}
void
OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::setFromAddress(OAIConfigNodePropertyString* from_address) {
    this->from_address = from_address;
    this->m_from_address_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::getSenderHost() {
    return sender_host;
}
void
OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::setSenderHost(OAIConfigNodePropertyString* sender_host) {
    this->sender_host = sender_host;
    this->m_sender_host_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::getMaxBounceCount() {
    return max_bounce_count;
}
void
OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::setMaxBounceCount(OAIConfigNodePropertyString* max_bounce_count) {
    this->max_bounce_count = max_bounce_count;
    this->m_max_bounce_count_isSet = true;
}


bool
OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(from_address != nullptr && from_address->isSet()){ isObjectUpdated = true; break;}
        if(sender_host != nullptr && sender_host->isSet()){ isObjectUpdated = true; break;}
        if(max_bounce_count != nullptr && max_bounce_count->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

