/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingServletsResolverSlingServletResolverProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::OAIOrgApacheSlingServletsResolverSlingServletResolverProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::OAIOrgApacheSlingServletsResolverSlingServletResolverProperties() {
    this->init();
}

OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::~OAIOrgApacheSlingServletsResolverSlingServletResolverProperties() {
    
}

void
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::init() {
    m_servletresolver_servlet_root_isSet = false;
    m_servletresolver_cache_size_isSet = false;
    m_servletresolver_paths_isSet = false;
    m_servletresolver_default_extensions_isSet = false;
}

void
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(servletresolver_servlet_root, json[QString("servletresolver.servletRoot")]);
    
    ::OpenAPI::fromJsonValue(servletresolver_cache_size, json[QString("servletresolver.cacheSize")]);
    
    ::OpenAPI::fromJsonValue(servletresolver_paths, json[QString("servletresolver.paths")]);
    
    ::OpenAPI::fromJsonValue(servletresolver_default_extensions, json[QString("servletresolver.defaultExtensions")]);
    
}

QString
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::asJsonObject() const {
    QJsonObject obj;
	if(servletresolver_servlet_root.isSet()){
        obj.insert(QString("servletresolver.servletRoot"), ::OpenAPI::toJsonValue(servletresolver_servlet_root));
    }
	if(servletresolver_cache_size.isSet()){
        obj.insert(QString("servletresolver.cacheSize"), ::OpenAPI::toJsonValue(servletresolver_cache_size));
    }
	if(servletresolver_paths.isSet()){
        obj.insert(QString("servletresolver.paths"), ::OpenAPI::toJsonValue(servletresolver_paths));
    }
	if(servletresolver_default_extensions.isSet()){
        obj.insert(QString("servletresolver.defaultExtensions"), ::OpenAPI::toJsonValue(servletresolver_default_extensions));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::getServletresolverServletRoot() const {
    return servletresolver_servlet_root;
}
void
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::setServletresolverServletRoot(const OAIConfigNodePropertyString &servletresolver_servlet_root) {
    this->servletresolver_servlet_root = servletresolver_servlet_root;
    this->m_servletresolver_servlet_root_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::getServletresolverCacheSize() const {
    return servletresolver_cache_size;
}
void
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::setServletresolverCacheSize(const OAIConfigNodePropertyInteger &servletresolver_cache_size) {
    this->servletresolver_cache_size = servletresolver_cache_size;
    this->m_servletresolver_cache_size_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::getServletresolverPaths() const {
    return servletresolver_paths;
}
void
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::setServletresolverPaths(const OAIConfigNodePropertyArray &servletresolver_paths) {
    this->servletresolver_paths = servletresolver_paths;
    this->m_servletresolver_paths_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::getServletresolverDefaultExtensions() const {
    return servletresolver_default_extensions;
}
void
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::setServletresolverDefaultExtensions(const OAIConfigNodePropertyArray &servletresolver_default_extensions) {
    this->servletresolver_default_extensions = servletresolver_default_extensions;
    this->m_servletresolver_default_extensions_isSet = true;
}


bool
OAIOrgApacheSlingServletsResolverSlingServletResolverProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(servletresolver_servlet_root.isSet()){ isObjectUpdated = true; break;}
    
        if(servletresolver_cache_size.isSet()){ isObjectUpdated = true; break;}
    
        if(servletresolver_paths.isSet()){ isObjectUpdated = true; break;}
    
        if(servletresolver_default_extensions.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

