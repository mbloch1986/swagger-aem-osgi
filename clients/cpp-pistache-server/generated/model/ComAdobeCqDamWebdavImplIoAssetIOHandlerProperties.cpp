/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties()
{
    m_Service_rankingIsSet = false;
    m_PathPrefixIsSet = false;
    m_CreateVersionIsSet = false;
    
}

ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::~ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties()
{
}

void ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Service_rankingIsSet)
    {
        val["service.ranking"] = ModelBase::toJson(m_Service_ranking);
    }
    if(m_PathPrefixIsSet)
    {
        val["pathPrefix"] = ModelBase::toJson(m_PathPrefix);
    }
    if(m_CreateVersionIsSet)
    {
        val["createVersion"] = ModelBase::toJson(m_CreateVersion);
    }
    

    return val;
}

void ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("service.ranking") != val.end())
    {
        if(!val["service.ranking"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["service.ranking"]);
            setServiceRanking( newItem );
        }
        
    }
    if(val.find("pathPrefix") != val.end())
    {
        if(!val["pathPrefix"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["pathPrefix"]);
            setPathPrefix( newItem );
        }
        
    }
    if(val.find("createVersion") != val.end())
    {
        if(!val["createVersion"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["createVersion"]);
            setCreateVersion( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::getServiceRanking() const
{
    return m_Service_ranking;
}
void ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::setServiceRanking(ConfigNodePropertyInteger const& value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}
bool ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}
void ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}
ConfigNodePropertyString ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::getPathPrefix() const
{
    return m_PathPrefix;
}
void ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::setPathPrefix(ConfigNodePropertyString const& value)
{
    m_PathPrefix = value;
    m_PathPrefixIsSet = true;
}
bool ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::pathPrefixIsSet() const
{
    return m_PathPrefixIsSet;
}
void ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::unsetPathPrefix()
{
    m_PathPrefixIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::getCreateVersion() const
{
    return m_CreateVersion;
}
void ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::setCreateVersion(ConfigNodePropertyBoolean const& value)
{
    m_CreateVersion = value;
    m_CreateVersionIsSet = true;
}
bool ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::createVersionIsSet() const
{
    return m_CreateVersionIsSet;
}
void ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::unsetCreateVersion()
{
    m_CreateVersionIsSet = false;
}

}
}
}
}

