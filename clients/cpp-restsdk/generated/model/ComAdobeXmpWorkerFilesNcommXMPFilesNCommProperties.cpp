/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties()
{
    m_MaxConnectionsIsSet = false;
    m_MaxRequestsIsSet = false;
    m_RequestTimeoutIsSet = false;
    m_LogDirIsSet = false;
}

ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::~ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties()
{
}

void ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_MaxConnectionsIsSet)
    {
        val[utility::conversions::to_string_t("maxConnections")] = ModelBase::toJson(m_MaxConnections);
    }
    if(m_MaxRequestsIsSet)
    {
        val[utility::conversions::to_string_t("maxRequests")] = ModelBase::toJson(m_MaxRequests);
    }
    if(m_RequestTimeoutIsSet)
    {
        val[utility::conversions::to_string_t("requestTimeout")] = ModelBase::toJson(m_RequestTimeout);
    }
    if(m_LogDirIsSet)
    {
        val[utility::conversions::to_string_t("logDir")] = ModelBase::toJson(m_LogDir);
    }

    return val;
}

void ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("maxConnections")))
    {
        if(!val[utility::conversions::to_string_t("maxConnections")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("maxConnections")]);
            setMaxConnections( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxRequests")))
    {
        if(!val[utility::conversions::to_string_t("maxRequests")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("maxRequests")]);
            setMaxRequests( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("requestTimeout")))
    {
        if(!val[utility::conversions::to_string_t("requestTimeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("requestTimeout")]);
            setRequestTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("logDir")))
    {
        if(!val[utility::conversions::to_string_t("logDir")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("logDir")]);
            setLogDir( newItem );
        }
    }
}

void ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_MaxConnectionsIsSet)
    {
        if (m_MaxConnections.get())
        {
            m_MaxConnections->toMultipart(multipart, utility::conversions::to_string_t("maxConnections."));
        }
    }
    if(m_MaxRequestsIsSet)
    {
        if (m_MaxRequests.get())
        {
            m_MaxRequests->toMultipart(multipart, utility::conversions::to_string_t("maxRequests."));
        }
    }
    if(m_RequestTimeoutIsSet)
    {
        if (m_RequestTimeout.get())
        {
            m_RequestTimeout->toMultipart(multipart, utility::conversions::to_string_t("requestTimeout."));
        }
    }
    if(m_LogDirIsSet)
    {
        if (m_LogDir.get())
        {
            m_LogDir->toMultipart(multipart, utility::conversions::to_string_t("logDir."));
        }
    }
}

void ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("maxConnections")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxConnections")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxConnections."));
            setMaxConnections( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxRequests")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxRequests")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxRequests."));
            setMaxRequests( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("requestTimeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("requestTimeout")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("requestTimeout."));
            setRequestTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("logDir")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("logDir")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("logDir."));
            setLogDir( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::getMaxConnections() const
{
    return m_MaxConnections;
}


void ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::setMaxConnections(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_MaxConnections = value;
    m_MaxConnectionsIsSet = true;
}
bool ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::maxConnectionsIsSet() const
{
    return m_MaxConnectionsIsSet;
}

void ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::unsetMaxConnections()
{
    m_MaxConnectionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::getMaxRequests() const
{
    return m_MaxRequests;
}


void ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::setMaxRequests(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_MaxRequests = value;
    m_MaxRequestsIsSet = true;
}
bool ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::maxRequestsIsSet() const
{
    return m_MaxRequestsIsSet;
}

void ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::unsetMaxRequests()
{
    m_MaxRequestsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::getRequestTimeout() const
{
    return m_RequestTimeout;
}


void ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::setRequestTimeout(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_RequestTimeout = value;
    m_RequestTimeoutIsSet = true;
}
bool ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::requestTimeoutIsSet() const
{
    return m_RequestTimeoutIsSet;
}

void ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::unsetRequestTimeout()
{
    m_RequestTimeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::getLogDir() const
{
    return m_LogDir;
}


void ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::setLogDir(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_LogDir = value;
    m_LogDirIsSet = true;
}
bool ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::logDirIsSet() const
{
    return m_LogDirIsSet;
}

void ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties::unsetLogDir()
{
    m_LogDirIsSet = false;
}

}
}
}
}

