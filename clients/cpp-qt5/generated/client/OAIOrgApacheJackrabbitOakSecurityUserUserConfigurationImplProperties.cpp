/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties() {
    init();
}

OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::~OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties() {
    this->cleanup();
}

void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::init() {
    users_path = new OAIConfigNodePropertyString();
    m_users_path_isSet = false;
    groups_path = new OAIConfigNodePropertyString();
    m_groups_path_isSet = false;
    system_relative_path = new OAIConfigNodePropertyString();
    m_system_relative_path_isSet = false;
    default_depth = new OAIConfigNodePropertyInteger();
    m_default_depth_isSet = false;
    import_behavior = new OAIConfigNodePropertyDropDown();
    m_import_behavior_isSet = false;
    password_hash_algorithm = new OAIConfigNodePropertyString();
    m_password_hash_algorithm_isSet = false;
    password_hash_iterations = new OAIConfigNodePropertyInteger();
    m_password_hash_iterations_isSet = false;
    password_salt_size = new OAIConfigNodePropertyInteger();
    m_password_salt_size_isSet = false;
    omit_admin_pw = new OAIConfigNodePropertyBoolean();
    m_omit_admin_pw_isSet = false;
    support_auto_save = new OAIConfigNodePropertyBoolean();
    m_support_auto_save_isSet = false;
    password_max_age = new OAIConfigNodePropertyInteger();
    m_password_max_age_isSet = false;
    initial_password_change = new OAIConfigNodePropertyBoolean();
    m_initial_password_change_isSet = false;
    password_history_size = new OAIConfigNodePropertyInteger();
    m_password_history_size_isSet = false;
    password_expiry_for_admin = new OAIConfigNodePropertyBoolean();
    m_password_expiry_for_admin_isSet = false;
    cache_expiration = new OAIConfigNodePropertyInteger();
    m_cache_expiration_isSet = false;
    enable_rfc7613_usercase_mapped_profile = new OAIConfigNodePropertyBoolean();
    m_enable_rfc7613_usercase_mapped_profile_isSet = false;
}

void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::cleanup() {
    if(users_path != nullptr) { 
        delete users_path;
    }
    if(groups_path != nullptr) { 
        delete groups_path;
    }
    if(system_relative_path != nullptr) { 
        delete system_relative_path;
    }
    if(default_depth != nullptr) { 
        delete default_depth;
    }
    if(import_behavior != nullptr) { 
        delete import_behavior;
    }
    if(password_hash_algorithm != nullptr) { 
        delete password_hash_algorithm;
    }
    if(password_hash_iterations != nullptr) { 
        delete password_hash_iterations;
    }
    if(password_salt_size != nullptr) { 
        delete password_salt_size;
    }
    if(omit_admin_pw != nullptr) { 
        delete omit_admin_pw;
    }
    if(support_auto_save != nullptr) { 
        delete support_auto_save;
    }
    if(password_max_age != nullptr) { 
        delete password_max_age;
    }
    if(initial_password_change != nullptr) { 
        delete initial_password_change;
    }
    if(password_history_size != nullptr) { 
        delete password_history_size;
    }
    if(password_expiry_for_admin != nullptr) { 
        delete password_expiry_for_admin;
    }
    if(cache_expiration != nullptr) { 
        delete cache_expiration;
    }
    if(enable_rfc7613_usercase_mapped_profile != nullptr) { 
        delete enable_rfc7613_usercase_mapped_profile;
    }
}

OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties*
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&users_path, pJson["usersPath"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&groups_path, pJson["groupsPath"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&system_relative_path, pJson["systemRelativePath"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&default_depth, pJson["defaultDepth"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&import_behavior, pJson["importBehavior"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&password_hash_algorithm, pJson["passwordHashAlgorithm"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&password_hash_iterations, pJson["passwordHashIterations"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&password_salt_size, pJson["passwordSaltSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&omit_admin_pw, pJson["omitAdminPw"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&support_auto_save, pJson["supportAutoSave"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&password_max_age, pJson["passwordMaxAge"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&initial_password_change, pJson["initialPasswordChange"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&password_history_size, pJson["passwordHistorySize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&password_expiry_for_admin, pJson["passwordExpiryForAdmin"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&cache_expiration, pJson["cacheExpiration"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&enable_rfc7613_usercase_mapped_profile, pJson["enableRFC7613UsercaseMappedProfile"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::asJsonObject() {
    QJsonObject obj;
    if((users_path != nullptr) && (users_path->isSet())){
        toJsonValue(QString("usersPath"), users_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((groups_path != nullptr) && (groups_path->isSet())){
        toJsonValue(QString("groupsPath"), groups_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((system_relative_path != nullptr) && (system_relative_path->isSet())){
        toJsonValue(QString("systemRelativePath"), system_relative_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((default_depth != nullptr) && (default_depth->isSet())){
        toJsonValue(QString("defaultDepth"), default_depth, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((import_behavior != nullptr) && (import_behavior->isSet())){
        toJsonValue(QString("importBehavior"), import_behavior, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((password_hash_algorithm != nullptr) && (password_hash_algorithm->isSet())){
        toJsonValue(QString("passwordHashAlgorithm"), password_hash_algorithm, obj, QString("OAIConfigNodePropertyString"));
    }
    if((password_hash_iterations != nullptr) && (password_hash_iterations->isSet())){
        toJsonValue(QString("passwordHashIterations"), password_hash_iterations, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((password_salt_size != nullptr) && (password_salt_size->isSet())){
        toJsonValue(QString("passwordSaltSize"), password_salt_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((omit_admin_pw != nullptr) && (omit_admin_pw->isSet())){
        toJsonValue(QString("omitAdminPw"), omit_admin_pw, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((support_auto_save != nullptr) && (support_auto_save->isSet())){
        toJsonValue(QString("supportAutoSave"), support_auto_save, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((password_max_age != nullptr) && (password_max_age->isSet())){
        toJsonValue(QString("passwordMaxAge"), password_max_age, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((initial_password_change != nullptr) && (initial_password_change->isSet())){
        toJsonValue(QString("initialPasswordChange"), initial_password_change, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((password_history_size != nullptr) && (password_history_size->isSet())){
        toJsonValue(QString("passwordHistorySize"), password_history_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((password_expiry_for_admin != nullptr) && (password_expiry_for_admin->isSet())){
        toJsonValue(QString("passwordExpiryForAdmin"), password_expiry_for_admin, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((cache_expiration != nullptr) && (cache_expiration->isSet())){
        toJsonValue(QString("cacheExpiration"), cache_expiration, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((enable_rfc7613_usercase_mapped_profile != nullptr) && (enable_rfc7613_usercase_mapped_profile->isSet())){
        toJsonValue(QString("enableRFC7613UsercaseMappedProfile"), enable_rfc7613_usercase_mapped_profile, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getUsersPath() {
    return users_path;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setUsersPath(OAIConfigNodePropertyString* users_path) {
    this->users_path = users_path;
    this->m_users_path_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getGroupsPath() {
    return groups_path;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setGroupsPath(OAIConfigNodePropertyString* groups_path) {
    this->groups_path = groups_path;
    this->m_groups_path_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getSystemRelativePath() {
    return system_relative_path;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setSystemRelativePath(OAIConfigNodePropertyString* system_relative_path) {
    this->system_relative_path = system_relative_path;
    this->m_system_relative_path_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getDefaultDepth() {
    return default_depth;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setDefaultDepth(OAIConfigNodePropertyInteger* default_depth) {
    this->default_depth = default_depth;
    this->m_default_depth_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getImportBehavior() {
    return import_behavior;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setImportBehavior(OAIConfigNodePropertyDropDown* import_behavior) {
    this->import_behavior = import_behavior;
    this->m_import_behavior_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordHashAlgorithm() {
    return password_hash_algorithm;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordHashAlgorithm(OAIConfigNodePropertyString* password_hash_algorithm) {
    this->password_hash_algorithm = password_hash_algorithm;
    this->m_password_hash_algorithm_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordHashIterations() {
    return password_hash_iterations;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordHashIterations(OAIConfigNodePropertyInteger* password_hash_iterations) {
    this->password_hash_iterations = password_hash_iterations;
    this->m_password_hash_iterations_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordSaltSize() {
    return password_salt_size;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordSaltSize(OAIConfigNodePropertyInteger* password_salt_size) {
    this->password_salt_size = password_salt_size;
    this->m_password_salt_size_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getOmitAdminPw() {
    return omit_admin_pw;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setOmitAdminPw(OAIConfigNodePropertyBoolean* omit_admin_pw) {
    this->omit_admin_pw = omit_admin_pw;
    this->m_omit_admin_pw_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getSupportAutoSave() {
    return support_auto_save;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setSupportAutoSave(OAIConfigNodePropertyBoolean* support_auto_save) {
    this->support_auto_save = support_auto_save;
    this->m_support_auto_save_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordMaxAge() {
    return password_max_age;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordMaxAge(OAIConfigNodePropertyInteger* password_max_age) {
    this->password_max_age = password_max_age;
    this->m_password_max_age_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getInitialPasswordChange() {
    return initial_password_change;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setInitialPasswordChange(OAIConfigNodePropertyBoolean* initial_password_change) {
    this->initial_password_change = initial_password_change;
    this->m_initial_password_change_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordHistorySize() {
    return password_history_size;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordHistorySize(OAIConfigNodePropertyInteger* password_history_size) {
    this->password_history_size = password_history_size;
    this->m_password_history_size_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordExpiryForAdmin() {
    return password_expiry_for_admin;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordExpiryForAdmin(OAIConfigNodePropertyBoolean* password_expiry_for_admin) {
    this->password_expiry_for_admin = password_expiry_for_admin;
    this->m_password_expiry_for_admin_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getCacheExpiration() {
    return cache_expiration;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setCacheExpiration(OAIConfigNodePropertyInteger* cache_expiration) {
    this->cache_expiration = cache_expiration;
    this->m_cache_expiration_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getEnableRfc7613UsercaseMappedProfile() {
    return enable_rfc7613_usercase_mapped_profile;
}
void
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setEnableRfc7613UsercaseMappedProfile(OAIConfigNodePropertyBoolean* enable_rfc7613_usercase_mapped_profile) {
    this->enable_rfc7613_usercase_mapped_profile = enable_rfc7613_usercase_mapped_profile;
    this->m_enable_rfc7613_usercase_mapped_profile_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(users_path != nullptr && users_path->isSet()){ isObjectUpdated = true; break;}
        if(groups_path != nullptr && groups_path->isSet()){ isObjectUpdated = true; break;}
        if(system_relative_path != nullptr && system_relative_path->isSet()){ isObjectUpdated = true; break;}
        if(default_depth != nullptr && default_depth->isSet()){ isObjectUpdated = true; break;}
        if(import_behavior != nullptr && import_behavior->isSet()){ isObjectUpdated = true; break;}
        if(password_hash_algorithm != nullptr && password_hash_algorithm->isSet()){ isObjectUpdated = true; break;}
        if(password_hash_iterations != nullptr && password_hash_iterations->isSet()){ isObjectUpdated = true; break;}
        if(password_salt_size != nullptr && password_salt_size->isSet()){ isObjectUpdated = true; break;}
        if(omit_admin_pw != nullptr && omit_admin_pw->isSet()){ isObjectUpdated = true; break;}
        if(support_auto_save != nullptr && support_auto_save->isSet()){ isObjectUpdated = true; break;}
        if(password_max_age != nullptr && password_max_age->isSet()){ isObjectUpdated = true; break;}
        if(initial_password_change != nullptr && initial_password_change->isSet()){ isObjectUpdated = true; break;}
        if(password_history_size != nullptr && password_history_size->isSet()){ isObjectUpdated = true; break;}
        if(password_expiry_for_admin != nullptr && password_expiry_for_admin->isSet()){ isObjectUpdated = true; break;}
        if(cache_expiration != nullptr && cache_expiration->isSet()){ isObjectUpdated = true; break;}
        if(enable_rfc7613_usercase_mapped_profile != nullptr && enable_rfc7613_usercase_mapped_profile->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

