//
// ComAdobeGraniteAuthImsImplIMSProviderImplProperties.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



public struct ComAdobeGraniteAuthImsImplIMSProviderImplProperties: Codable {

    public var oauthProviderId: ConfigNodePropertyString?
    public var oauthProviderImsAuthorizationUrl: ConfigNodePropertyString?
    public var oauthProviderImsTokenUrl: ConfigNodePropertyString?
    public var oauthProviderImsProfileUrl: ConfigNodePropertyString?
    public var oauthProviderImsExtendedDetailsUrls: ConfigNodePropertyArray?
    public var oauthProviderImsValidateTokenUrl: ConfigNodePropertyString?
    public var oauthProviderImsSessionProperty: ConfigNodePropertyString?
    public var oauthProviderImsServiceTokenClientId: ConfigNodePropertyString?
    public var oauthProviderImsServiceTokenClientSecret: ConfigNodePropertyString?
    public var oauthProviderImsServiceToken: ConfigNodePropertyString?
    public var imsOrgRef: ConfigNodePropertyString?
    public var imsGroupMapping: ConfigNodePropertyArray?
    public var oauthProviderImsOnlyLicenseGroup: ConfigNodePropertyBoolean?

    public init(oauthProviderId: ConfigNodePropertyString?, oauthProviderImsAuthorizationUrl: ConfigNodePropertyString?, oauthProviderImsTokenUrl: ConfigNodePropertyString?, oauthProviderImsProfileUrl: ConfigNodePropertyString?, oauthProviderImsExtendedDetailsUrls: ConfigNodePropertyArray?, oauthProviderImsValidateTokenUrl: ConfigNodePropertyString?, oauthProviderImsSessionProperty: ConfigNodePropertyString?, oauthProviderImsServiceTokenClientId: ConfigNodePropertyString?, oauthProviderImsServiceTokenClientSecret: ConfigNodePropertyString?, oauthProviderImsServiceToken: ConfigNodePropertyString?, imsOrgRef: ConfigNodePropertyString?, imsGroupMapping: ConfigNodePropertyArray?, oauthProviderImsOnlyLicenseGroup: ConfigNodePropertyBoolean?) {
        self.oauthProviderId = oauthProviderId
        self.oauthProviderImsAuthorizationUrl = oauthProviderImsAuthorizationUrl
        self.oauthProviderImsTokenUrl = oauthProviderImsTokenUrl
        self.oauthProviderImsProfileUrl = oauthProviderImsProfileUrl
        self.oauthProviderImsExtendedDetailsUrls = oauthProviderImsExtendedDetailsUrls
        self.oauthProviderImsValidateTokenUrl = oauthProviderImsValidateTokenUrl
        self.oauthProviderImsSessionProperty = oauthProviderImsSessionProperty
        self.oauthProviderImsServiceTokenClientId = oauthProviderImsServiceTokenClientId
        self.oauthProviderImsServiceTokenClientSecret = oauthProviderImsServiceTokenClientSecret
        self.oauthProviderImsServiceToken = oauthProviderImsServiceToken
        self.imsOrgRef = imsOrgRef
        self.imsGroupMapping = imsGroupMapping
        self.oauthProviderImsOnlyLicenseGroup = oauthProviderImsOnlyLicenseGroup
    }

    public enum CodingKeys: String, CodingKey { 
        case oauthProviderId = "oauth.provider.id"
        case oauthProviderImsAuthorizationUrl = "oauth.provider.ims.authorization.url"
        case oauthProviderImsTokenUrl = "oauth.provider.ims.token.url"
        case oauthProviderImsProfileUrl = "oauth.provider.ims.profile.url"
        case oauthProviderImsExtendedDetailsUrls = "oauth.provider.ims.extended.details.urls"
        case oauthProviderImsValidateTokenUrl = "oauth.provider.ims.validate.token.url"
        case oauthProviderImsSessionProperty = "oauth.provider.ims.session.property"
        case oauthProviderImsServiceTokenClientId = "oauth.provider.ims.service.token.client.id"
        case oauthProviderImsServiceTokenClientSecret = "oauth.provider.ims.service.token.client.secret"
        case oauthProviderImsServiceToken = "oauth.provider.ims.service.token"
        case imsOrgRef = "ims.org.ref"
        case imsGroupMapping = "ims.group.mapping"
        case oauthProviderImsOnlyLicenseGroup = "oauth.provider.ims.only.license.group"
    }


}

