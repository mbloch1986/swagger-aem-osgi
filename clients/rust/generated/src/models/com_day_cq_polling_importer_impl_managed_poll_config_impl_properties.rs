/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqPollingImporterImplManagedPollConfigImplProperties {
  #[serde(rename = "id")]
  id: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "enabled")]
  enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "reference")]
  reference: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "interval")]
  interval: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "expression")]
  expression: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "source")]
  source: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "target")]
  target: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "login")]
  login: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "password")]
  password: Option<::models::ConfigNodePropertyString>
}

impl ComDayCqPollingImporterImplManagedPollConfigImplProperties {
  pub fn new() -> ComDayCqPollingImporterImplManagedPollConfigImplProperties {
    ComDayCqPollingImporterImplManagedPollConfigImplProperties {
      id: None,
      enabled: None,
      reference: None,
      interval: None,
      expression: None,
      source: None,
      target: None,
      login: None,
      password: None
    }
  }

  pub fn set_id(&mut self, id: ::models::ConfigNodePropertyString) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: ::models::ConfigNodePropertyString) -> ComDayCqPollingImporterImplManagedPollConfigImplProperties {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_enabled(&mut self, enabled: ::models::ConfigNodePropertyBoolean) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: ::models::ConfigNodePropertyBoolean) -> ComDayCqPollingImporterImplManagedPollConfigImplProperties {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_reference(&mut self, reference: ::models::ConfigNodePropertyBoolean) {
    self.reference = Some(reference);
  }

  pub fn with_reference(mut self, reference: ::models::ConfigNodePropertyBoolean) -> ComDayCqPollingImporterImplManagedPollConfigImplProperties {
    self.reference = Some(reference);
    self
  }

  pub fn reference(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.reference.as_ref()
  }

  pub fn reset_reference(&mut self) {
    self.reference = None;
  }

  pub fn set_interval(&mut self, interval: ::models::ConfigNodePropertyInteger) {
    self.interval = Some(interval);
  }

  pub fn with_interval(mut self, interval: ::models::ConfigNodePropertyInteger) -> ComDayCqPollingImporterImplManagedPollConfigImplProperties {
    self.interval = Some(interval);
    self
  }

  pub fn interval(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.interval.as_ref()
  }

  pub fn reset_interval(&mut self) {
    self.interval = None;
  }

  pub fn set_expression(&mut self, expression: ::models::ConfigNodePropertyString) {
    self.expression = Some(expression);
  }

  pub fn with_expression(mut self, expression: ::models::ConfigNodePropertyString) -> ComDayCqPollingImporterImplManagedPollConfigImplProperties {
    self.expression = Some(expression);
    self
  }

  pub fn expression(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.expression.as_ref()
  }

  pub fn reset_expression(&mut self) {
    self.expression = None;
  }

  pub fn set_source(&mut self, source: ::models::ConfigNodePropertyString) {
    self.source = Some(source);
  }

  pub fn with_source(mut self, source: ::models::ConfigNodePropertyString) -> ComDayCqPollingImporterImplManagedPollConfigImplProperties {
    self.source = Some(source);
    self
  }

  pub fn source(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.source.as_ref()
  }

  pub fn reset_source(&mut self) {
    self.source = None;
  }

  pub fn set_target(&mut self, target: ::models::ConfigNodePropertyString) {
    self.target = Some(target);
  }

  pub fn with_target(mut self, target: ::models::ConfigNodePropertyString) -> ComDayCqPollingImporterImplManagedPollConfigImplProperties {
    self.target = Some(target);
    self
  }

  pub fn target(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.target.as_ref()
  }

  pub fn reset_target(&mut self) {
    self.target = None;
  }

  pub fn set_login(&mut self, login: ::models::ConfigNodePropertyString) {
    self.login = Some(login);
  }

  pub fn with_login(mut self, login: ::models::ConfigNodePropertyString) -> ComDayCqPollingImporterImplManagedPollConfigImplProperties {
    self.login = Some(login);
    self
  }

  pub fn login(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.login.as_ref()
  }

  pub fn reset_login(&mut self) {
    self.login = None;
  }

  pub fn set_password(&mut self, password: ::models::ConfigNodePropertyString) {
    self.password = Some(password);
  }

  pub fn with_password(mut self, password: ::models::ConfigNodePropertyString) -> ComDayCqPollingImporterImplManagedPollConfigImplProperties {
    self.password = Some(password);
    self
  }

  pub fn password(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.password.as_ref()
  }

  pub fn reset_password(&mut self) {
    self.password = None;
  }

}



