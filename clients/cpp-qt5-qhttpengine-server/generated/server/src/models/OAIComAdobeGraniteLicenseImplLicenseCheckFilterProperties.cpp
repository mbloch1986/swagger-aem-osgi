/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties() {
    this->init();
}

OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::~OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties() {
    
}

void
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::init() {
    m_check_internval_isSet = false;
    m_exclude_ids_isSet = false;
    m_encrypt_ping_isSet = false;
}

void
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(check_internval, json[QString("checkInternval")]);
    
    ::OpenAPI::fromJsonValue(exclude_ids, json[QString("excludeIds")]);
    
    ::OpenAPI::fromJsonValue(encrypt_ping, json[QString("encryptPing")]);
    
}

QString
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::asJsonObject() const {
    QJsonObject obj;
	if(check_internval.isSet()){
        obj.insert(QString("checkInternval"), ::OpenAPI::toJsonValue(check_internval));
    }
	if(exclude_ids.isSet()){
        obj.insert(QString("excludeIds"), ::OpenAPI::toJsonValue(exclude_ids));
    }
	if(encrypt_ping.isSet()){
        obj.insert(QString("encryptPing"), ::OpenAPI::toJsonValue(encrypt_ping));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::getCheckInternval() const {
    return check_internval;
}
void
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::setCheckInternval(const OAIConfigNodePropertyInteger &check_internval) {
    this->check_internval = check_internval;
    this->m_check_internval_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::getExcludeIds() const {
    return exclude_ids;
}
void
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::setExcludeIds(const OAIConfigNodePropertyArray &exclude_ids) {
    this->exclude_ids = exclude_ids;
    this->m_exclude_ids_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::getEncryptPing() const {
    return encrypt_ping;
}
void
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::setEncryptPing(const OAIConfigNodePropertyBoolean &encrypt_ping) {
    this->encrypt_ping = encrypt_ping;
    this->m_encrypt_ping_isSet = true;
}


bool
OAIComAdobeGraniteLicenseImplLicenseCheckFilterProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(check_internval.isSet()){ isObjectUpdated = true; break;}
    
        if(exclude_ids.isSet()){ isObjectUpdated = true; break;}
    
        if(encrypt_ping.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

